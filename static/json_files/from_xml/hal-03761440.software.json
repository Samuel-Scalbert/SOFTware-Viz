{"application": "software-mentions", "version": "0.8.0", "date": "2024-03-21T10:06+0000", "md5": "492290F15B11D75598F5DAA1EC9662B8", "mentions": [{"type": "software", "software-type": "software", "wikidataId": "Q21447895", "wikipediaExternalRef": 48508507, "lang": "en", "confidence": 0.9154, "software-name": {"rawForm": "TensorFlow", "normalizedForm": "TensorFlow", "wikidataId": "Q21447895", "wikipediaExternalRef": 48508507, "lang": "en", "confidence": 0.9154, "offsetStart": 0, "offsetEnd": 10}, "context": "TensorFlow, PyTorch) and provide more flexibilty when building custom architectures. ", "mentionContextAttributes": {"used": {"value": false, "score": 6.759166717529297e-05}, "created": {"value": false, "score": 0.001875460147857666}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.002306640148162842}, "created": {"value": false, "score": 0.00868004560470581}, "shared": {"value": false, "score": 2.1457672119140625e-06}}}, {"type": "software", "software-type": "software", "wikidataId": "Q21447895", "wikipediaExternalRef": 48508507, "lang": "en", "confidence": 0.9154, "software-name": {"rawForm": "TensorFlow", "normalizedForm": "TensorFlow", "wikidataId": "Q21447895", "wikipediaExternalRef": 48508507, "lang": "en", "confidence": 0.9154, "offsetStart": 0, "offsetEnd": 10}, "context": "TensorFlow or Scikit-Learn). ", "mentionContextAttributes": {"used": {"value": false, "score": 0.002306640148162842}, "created": {"value": false, "score": 1.6450881958007812e-05}, "shared": {"value": false, "score": 2.1457672119140625e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.002306640148162842}, "created": {"value": false, "score": 0.00868004560470581}, "shared": {"value": false, "score": 2.1457672119140625e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ReservoirPy", "normalizedForm": "ReservoirPy", "offsetStart": 0, "offsetEnd": 11}, "context": "ReservoirPy is a Python library for Reservoir Computing architectures, from ESNs to deep ESNs, providing users with online and offline learning rules, complete feedback loop support, and a powerful syntax to quickly develop any kind of model using reusable building blocks. ", "mentionContextAttributes": {"used": {"value": false, "score": 5.125999450683594e-05}, "created": {"value": false, "score": 0.04696840047836304}, "shared": {"value": false, "score": 4.3272972106933594e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9859639406204224}, "created": {"value": true, "score": 0.9998983144760132}, "shared": {"value": false, "score": 4.3272972106933594e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ReservoirPy", "normalizedForm": "ReservoirPy", "offsetStart": 0, "offsetEnd": 11}, "context": "ReservoirPy provides an implementation only relying on general scientific librairies like Numpy and Scipy, in order to be more versatile than specific frameworks (e.g.", "mentionContextAttributes": {"used": {"value": false, "score": 3.504753112792969e-05}, "created": {"value": false, "score": 0.0003675222396850586}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9859639406204224}, "created": {"value": true, "score": 0.9998983144760132}, "shared": {"value": false, "score": 4.3272972106933594e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ReservoirPy", "normalizedForm": "ReservoirPy", "offsetStart": 0, "offsetEnd": 11}, "context": "ReservoirPy contains 7 timeseries generators, and this number is steadily increased with each new release.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00029921531677246094}, "created": {"value": false, "score": 0.0002567172050476074}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9859639406204224}, "created": {"value": true, "score": 0.9998983144760132}, "shared": {"value": false, "score": 4.3272972106933594e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ReservoirPy", "normalizedForm": "ReservoirPy", "offsetStart": 0, "offsetEnd": 11}, "context": "ReservoirPy exposes some common metrics in the obersvables module to evaluate this kind of tasks, such as Root-Mean Square Error (RMSE).", "mentionContextAttributes": {"used": {"value": false, "score": 3.9577484130859375e-05}, "created": {"value": false, "score": 0.00032961368560791016}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9859639406204224}, "created": {"value": true, "score": 0.9998983144760132}, "shared": {"value": false, "score": 4.3272972106933594e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ReservoirPy", "normalizedForm": "ReservoirPy", "offsetStart": 0, "offsetEnd": 11}, "context": "ReservoirPy has been built without strongly enforcing design principles from other classical libraries (e.g.", "mentionContextAttributes": {"used": {"value": false, "score": 8.463859558105469e-05}, "created": {"value": false, "score": 0.2276577353477478}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9859639406204224}, "created": {"value": true, "score": 0.9998983144760132}, "shared": {"value": false, "score": 4.3272972106933594e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ReservoirPy", "normalizedForm": "ReservoirPy", "offsetStart": 0, "offsetEnd": 11}, "context": "ReservoirPy is a community oriented project: we provide tutorials and extensive documentation.", "mentionContextAttributes": {"used": {"value": false, "score": 8.571147918701172e-05}, "created": {"value": true, "score": 0.9237475395202637}, "shared": {"value": false, "score": 8.344650268554688e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9859639406204224}, "created": {"value": true, "score": 0.9998983144760132}, "shared": {"value": false, "score": 4.3272972106933594e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ReservoirPy", "normalizedForm": "ReservoirPy", "offsetStart": 6, "offsetEnd": 17}, "context": "While ReservoirPy project was not initially including Extreme Learning Machines (ELMs) [12], it appears that they can be designed using the tools described in this paper with a few tricks.", "mentionContextAttributes": {"used": {"value": false, "score": 6.473064422607422e-05}, "created": {"value": false, "score": 0.02489238977432251}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9859639406204224}, "created": {"value": true, "score": 0.9998983144760132}, "shared": {"value": false, "score": 4.3272972106933594e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "PyTorch", "normalizedForm": "PyTorch", "offsetStart": 12, "offsetEnd": 19}, "context": "TensorFlow, PyTorch) and provide more flexibilty when building custom architectures. ", "mentionContextAttributes": {"used": {"value": false, "score": 6.759166717529297e-05}, "created": {"value": false, "score": 0.001875460147857666}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 7.68899917602539e-05}, "created": {"value": false, "score": 0.00868004560470581}, "shared": {"value": false, "score": 4.76837158203125e-07}}}, {"type": "software", "software-type": "software", "wikidataId": "Q1026367", "wikipediaExternalRef": 33490859, "lang": "en", "confidence": 0.6142, "software-name": {"rawForm": "Scikit-Learn", "normalizedForm": "Scikit-Learn", "wikidataId": "Q1026367", "wikipediaExternalRef": 33490859, "lang": "en", "confidence": 0.6142, "offsetStart": 14, "offsetEnd": 26}, "context": "TensorFlow or Scikit-Learn). ", "mentionContextAttributes": {"used": {"value": false, "score": 0.002306640148162842}, "created": {"value": false, "score": 1.6450881958007812e-05}, "shared": {"value": false, "score": 2.1457672119140625e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.002306640148162842}, "created": {"value": false, "score": 3.647804260253906e-05}, "shared": {"value": false, "score": 2.1457672119140625e-06}}}, {"type": "software", "software-type": "software", "wikidataId": "Q21447895", "wikipediaExternalRef": 48508507, "lang": "en", "confidence": 0.9154, "software-name": {"rawForm": "TensorFlow", "normalizedForm": "TensorFlow", "wikidataId": "Q21447895", "wikipediaExternalRef": 48508507, "lang": "en", "confidence": 0.9154, "offsetStart": 17, "offsetEnd": 27}, "context": "On the one hand, TensorFlow and PyTorch were mostly developed for gradient descent based learning algorithms, and most of their features are useless, if not cumbersome, to develop RC techniques. ", "mentionContextAttributes": {"used": {"value": false, "score": 7.68899917602539e-05}, "created": {"value": false, "score": 0.00868004560470581}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.002306640148162842}, "created": {"value": false, "score": 0.00868004560470581}, "shared": {"value": false, "score": 2.1457672119140625e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ReservoirPy", "normalizedForm": "ReservoirPy", "offsetStart": 19, "offsetEnd": 30}, "context": "This allows to use ReservoirPy with handcrafted initialization rules.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00030362606048583984}, "created": {"value": false, "score": 8.189678192138672e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9859639406204224}, "created": {"value": true, "score": 0.9998983144760132}, "shared": {"value": false, "score": 4.3272972106933594e-05}}}, {"type": "software", "software-type": "implicit", "software-name": {"rawForm": "library", "normalizedForm": "library", "offsetStart": 24, "offsetEnd": 31}, "language": {"rawForm": "Python", "normalizedForm": "Python", "wikidataId": "Q28865", "offsetStart": 17, "offsetEnd": 23}, "context": "ReservoirPy is a Python library for Reservoir Computing architectures, from ESNs to deep ESNs, providing users with online and offline learning rules, complete feedback loop support, and a powerful syntax to quickly develop any kind of model using reusable building blocks. ", "mentionContextAttributes": {"used": {"value": false, "score": 5.125999450683594e-05}, "created": {"value": false, "score": 0.04696840047836304}, "shared": {"value": false, "score": 4.3272972106933594e-05}}, "documentContextAttributes": {"used": {"value": false, "score": 5.125999450683594e-05}, "created": {"value": false, "score": 0.04696840047836304}, "shared": {"value": false, "score": 4.3272972106933594e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "DeepESNs", "normalizedForm": "DeepESNs", "offsetStart": 26, "offsetEnd": 34}, "context": "Deep Echo State Networks (DeepESNs) have been first introduced by [6] in 2017 and have been since a quite trendy research topic in the RC community.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0002930760383605957}, "created": {"value": false, "score": 0.011084437370300293}, "shared": {"value": false, "score": 8.344650268554688e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0002930760383605957}, "created": {"value": false, "score": 0.046102285385131836}, "shared": {"value": false, "score": 8.344650268554688e-07}}, "references": [{"label": "[6]", "normalizedForm": "[6]", "refKey": 6}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ReservoirPy", "normalizedForm": "ReservoirPy", "offsetStart": 30, "offsetEnd": 41}, "context": "Most importantly, we designed ReservoirPy as a highly flexible tool offering the possibility to design several kinds of RC architectures while promoting reusable components.", "mentionContextAttributes": {"used": {"value": false, "score": 3.886222839355469e-05}, "created": {"value": true, "score": 0.9998983144760132}, "shared": {"value": false, "score": 1.9073486328125e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9859639406204224}, "created": {"value": true, "score": 0.9998983144760132}, "shared": {"value": false, "score": 4.3272972106933594e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "PyTorch", "normalizedForm": "PyTorch", "offsetStart": 32, "offsetEnd": 39}, "context": "On the one hand, TensorFlow and PyTorch were mostly developed for gradient descent based learning algorithms, and most of their features are useless, if not cumbersome, to develop RC techniques. ", "mentionContextAttributes": {"used": {"value": false, "score": 7.68899917602539e-05}, "created": {"value": false, "score": 0.00868004560470581}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 7.68899917602539e-05}, "created": {"value": false, "score": 0.00868004560470581}, "shared": {"value": false, "score": 4.76837158203125e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "DeepESNs", "normalizedForm": "DeepESNs", "offsetStart": 35, "offsetEnd": 43}, "context": "It enables to build models such as DeepESNs as well as other advanced architectures with complex connectivity between multiple reservoirs with feedback loops. ", "mentionContextAttributes": {"used": {"value": false, "score": 2.467632293701172e-05}, "created": {"value": false, "score": 0.046102285385131836}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0002930760383605957}, "created": {"value": false, "score": 0.046102285385131836}, "shared": {"value": false, "score": 8.344650268554688e-07}}, "references": [{"label": "[6]", "normalizedForm": "[6]", "refKey": 6}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ReservoirPy", "normalizedForm": "ReservoirPy", "offsetStart": 35, "offsetEnd": 46}, "context": "This section introduces how to use ReservoirPy to define, train and run Echo State Networks (ESN) for some classic literature benchmarks.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00013113021850585938}, "created": {"value": false, "score": 0.24631738662719727}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9859639406204224}, "created": {"value": true, "score": 0.9998983144760132}, "shared": {"value": false, "score": 4.3272972106933594e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "DeepESNs", "normalizedForm": "DeepESNs", "offsetStart": 36, "offsetEnd": 44}, "context": "In more complex architectures, like DeepESNs [6] or Hierarchical ESNs [18][26], reservoirs can be layered, and readouts inserted between them, with feedback connections possibly connecting all these blocks in different ways.", "mentionContextAttributes": {"used": {"value": false, "score": 8.52346420288086e-05}, "created": {"value": false, "score": 2.3126602172851562e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0002930760383605957}, "created": {"value": false, "score": 0.046102285385131836}, "shared": {"value": false, "score": 8.344650268554688e-07}}, "references": [{"label": "[6]", "normalizedForm": "[6]", "refKey": 6, "offsetStart": 6658, "offsetEnd": 6661}]}, {"type": "software", "software-type": "software", "wikidataId": "Q1026367", "wikipediaExternalRef": 33490859, "lang": "en", "confidence": 0.6142, "software-name": {"rawForm": "Scikit-Learn", "normalizedForm": "Scikit-Learn", "wikidataId": "Q1026367", "wikipediaExternalRef": 33490859, "lang": "en", "confidence": 0.6142, "offsetStart": 37, "offsetEnd": 54}, "context": "On the other hand, libraries such as Scikit-Learn [17] are geared towards static data processing and do not integrate much timeseries processing or online learning tools. ", "mentionContextAttributes": {"used": {"value": false, "score": 6.0439109802246094e-05}, "created": {"value": false, "score": 3.647804260253906e-05}, "shared": {"value": false, "score": 5.960464477539062e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.002306640148162842}, "created": {"value": false, "score": 3.647804260253906e-05}, "shared": {"value": false, "score": 2.1457672119140625e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ReservoirPy", "normalizedForm": "ReservoirPy", "offsetStart": 41, "offsetEnd": 52}, "context": "In this paper, we detail the backbone of ReservoirPy, its major components and how to combine them to design complex architectures, with different learning rules and feedback loops.", "mentionContextAttributes": {"used": {"value": false, "score": 4.506111145019531e-05}, "created": {"value": true, "score": 0.9998749494552612}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9859639406204224}, "created": {"value": true, "score": 0.9998983144760132}, "shared": {"value": false, "score": 4.3272972106933594e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "hyperopt", "normalizedForm": "hyperopt", "offsetStart": 43, "offsetEnd": 54}, "context": "Hyperparameter tuning utilities We rely on hyperopt [3], a general purpose optimization library, to perform efficient searches of optimal hyperparameters. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.002469480037689209}, "created": {"value": false, "score": 0.0020415782928466797}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.002469480037689209}, "created": {"value": false, "score": 0.0020415782928466797}, "shared": {"value": false, "score": 6.4373016357421875e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "hyperopt", "normalizedForm": "hyperopt", "offsetStart": 51, "offsetEnd": 59}, "context": "Reser-voirPy provides users with helpers to handle hyperopt machinery, and some visualization tools, along with tutorials and examples.", "mentionContextAttributes": {"used": {"value": false, "score": 2.3126602172851562e-05}, "created": {"value": false, "score": 0.0003745555877685547}, "shared": {"value": false, "score": 6.4373016357421875e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.002469480037689209}, "created": {"value": false, "score": 0.0020415782928466797}, "shared": {"value": false, "score": 6.4373016357421875e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ReservoirPy", "normalizedForm": "ReservoirPy", "offsetStart": 68, "offsetEnd": 79}, "context": "Since ESN is among the most used techniques of Reservoir Computing, ReservoirPy introduces special optimizations to increase their performances and leverage larger corpus of data.", "mentionContextAttributes": {"used": {"value": false, "score": 4.100799560546875e-05}, "created": {"value": false, "score": 0.007439315319061279}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9859639406204224}, "created": {"value": true, "score": 0.9998983144760132}, "shared": {"value": false, "score": 4.3272972106933594e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ReservoirPy", "normalizedForm": "ReservoirPy", "offsetStart": 72, "offsetEnd": 83}, "context": "Finally, we present future features and conclude about the potential of ReservoirPy on the RC community.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0003705024719238281}, "created": {"value": true, "score": 0.999896764755249}, "shared": {"value": false, "score": 5.960464477539062e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9859639406204224}, "created": {"value": true, "score": 0.9998983144760132}, "shared": {"value": false, "score": 4.3272972106933594e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ReservoirPy", "normalizedForm": "ReservoirPy", "offsetStart": 85, "offsetEnd": 96}, "context": "This section presents some examples of advanced model architectures implemented with ReservoirPy.", "mentionContextAttributes": {"used": {"value": false, "score": 4.279613494873047e-05}, "created": {"value": true, "score": 0.6671244502067566}, "shared": {"value": false, "score": 7.152557373046875e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9859639406204224}, "created": {"value": true, "score": 0.9998983144760132}, "shared": {"value": false, "score": 4.3272972106933594e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Numpy", "normalizedForm": "Numpy", "offsetStart": 90, "offsetEnd": 95}, "context": "ReservoirPy provides an implementation only relying on general scientific librairies like Numpy and Scipy, in order to be more versatile than specific frameworks (e.g. ", "mentionContextAttributes": {"used": {"value": false, "score": 3.504753112792969e-05}, "created": {"value": false, "score": 0.0003675222396850586}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 3.504753112792969e-05}, "created": {"value": false, "score": 0.0003675222396850586}, "shared": {"value": false, "score": 2.384185791015625e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ReservoirPy", "normalizedForm": "ReservoirPy", "offsetStart": 98, "offsetEnd": 109}, "context": "The hereafter selected models have been encountered in the RC literature, and come with a minimal ReservoirPy architecture.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0008887648582458496}, "created": {"value": false, "score": 0.03657400608062744}, "shared": {"value": false, "score": 5.960464477539062e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9859639406204224}, "created": {"value": true, "score": 0.9998983144760132}, "shared": {"value": false, "score": 4.3272972106933594e-05}}}, {"type": "software", "software-type": "software", "wikidataId": "Q197492", "wikipediaExternalRef": 263472, "lang": "en", "confidence": 0.4243, "software-name": {"rawForm": "Scipy", "normalizedForm": "Scipy", "wikidataId": "Q197492", "wikipediaExternalRef": 263472, "lang": "en", "confidence": 0.4243, "offsetStart": 100, "offsetEnd": 105}, "context": "ReservoirPy provides an implementation only relying on general scientific librairies like Numpy and Scipy, in order to be more versatile than specific frameworks (e.g. ", "mentionContextAttributes": {"used": {"value": false, "score": 3.504753112792969e-05}, "created": {"value": false, "score": 0.0003675222396850586}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.00023633241653442383}, "created": {"value": true, "score": 0.9999165534973145}, "shared": {"value": false, "score": 3.5762786865234375e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ReservoirPy", "normalizedForm": "ReservoirPy", "offsetStart": 109, "offsetEnd": 120}, "context": "Memory efficient linear regression Linear regression for offline learning or readout weights is performed in ReservoirPy using the following equation:", "mentionContextAttributes": {"used": {"value": true, "score": 0.9859639406204224}, "created": {"value": false, "score": 1.7881393432617188e-06}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9859639406204224}, "created": {"value": true, "score": 0.9998983144760132}, "shared": {"value": false, "score": 4.3272972106933594e-05}}}, {"type": "software", "software-type": "implicit", "wikidataId": "Q187432", "wikipediaExternalRef": 21490336, "lang": "en", "confidence": 0.5074, "software-name": {"rawForm": "scripts", "normalizedForm": "scripts", "wikidataId": "Q187432", "wikipediaExternalRef": 21490336, "lang": "en", "confidence": 0.5074, "offsetStart": 126, "offsetEnd": 133}, "context": "Several code implementations of RC, in particular for ESNs, can be found online, but these implementations are often isolated scripts written in Python or Matlab. ", "mentionContextAttributes": {"used": {"value": false, "score": 7.200241088867188e-05}, "created": {"value": false, "score": 0.004605531692504883}, "shared": {"value": false, "score": 8.153915405273438e-05}}, "documentContextAttributes": {"used": {"value": false, "score": 7.200241088867188e-05}, "created": {"value": false, "score": 0.004605531692504883}, "shared": {"value": false, "score": 8.153915405273438e-05}}}, {"type": "software", "software-type": "software", "wikidataId": "Q197492", "wikipediaExternalRef": 263472, "lang": "en", "confidence": 0.4243, "software-name": {"rawForm": "Scipy", "normalizedForm": "Scipy", "wikidataId": "Q197492", "wikipediaExternalRef": 263472, "lang": "en", "confidence": 0.4243, "offsetStart": 129, "offsetEnd": 139}, "context": "Timeseries generators These generators can solve on demand the set of differential equations describing chaotic attractors using Scipy [29] tools such as solve ivp, or yield values from a discrete timeseries defined by a recurrent relation. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.00023633241653442383}, "created": {"value": false, "score": 1.4424324035644531e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.00023633241653442383}, "created": {"value": true, "score": 0.9999165534973145}, "shared": {"value": false, "score": 3.5762786865234375e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ReservoirPy", "normalizedForm": "ReservoirPy", "offsetStart": 147, "offsetEnd": 158}, "context": "Assuming that we want to create a DeepESN with three reservoirs, and that all Nodes have been constructed with some relevant parameters, a minimal ReservoirPy infused script for a DeepESN Model would be:", "mentionContextAttributes": {"used": {"value": false, "score": 0.03410351276397705}, "created": {"value": true, "score": 0.5909485220909119}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9859639406204224}, "created": {"value": true, "score": 0.9998983144760132}, "shared": {"value": false, "score": 4.3272972106933594e-05}}}, {"type": "software", "software-type": "software", "wikidataId": "Q197520", "wikipediaExternalRef": 381782, "lang": "en", "confidence": 0.7796, "software-name": {"rawForm": "NumPy", "normalizedForm": "NumPy", "wikidataId": "Q197520", "wikipediaExternalRef": 381782, "lang": "en", "confidence": 0.7796, "offsetStart": 155, "offsetEnd": 160}, "context": "We present in this paper a library that facilitates the creation of RC architectures, from simplest to most complex, based on the Python scientific stack (NumPy, Scipy). ", "mentionContextAttributes": {"used": {"value": false, "score": 5.4955482482910156e-05}, "created": {"value": true, "score": 0.9999165534973145}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 5.4955482482910156e-05}, "created": {"value": true, "score": 0.9999165534973145}, "shared": {"value": false, "score": 3.5762786865234375e-07}}}, {"type": "software", "software-type": "environment", "wikidataId": "Q169478", "wikipediaExternalRef": 20412, "lang": "en", "confidence": 0.6937, "software-name": {"rawForm": "Matlab", "normalizedForm": "Matlab", "wikidataId": "Q169478", "wikipediaExternalRef": 20412, "lang": "en", "confidence": 0.6937, "offsetStart": 155, "offsetEnd": 161}, "context": "Several code implementations of RC, in particular for ESNs, can be found online, but these implementations are often isolated scripts written in Python or Matlab. ", "mentionContextAttributes": {"used": {"value": false, "score": 7.200241088867188e-05}, "created": {"value": false, "score": 0.004605531692504883}, "shared": {"value": false, "score": 8.153915405273438e-05}}, "documentContextAttributes": {"used": {"value": false, "score": 7.200241088867188e-05}, "created": {"value": false, "score": 0.004605531692504883}, "shared": {"value": false, "score": 8.153915405273438e-05}}}, {"type": "software", "software-type": "software", "wikidataId": "Q197492", "wikipediaExternalRef": 263472, "lang": "en", "confidence": 0.4243, "software-name": {"rawForm": "Scipy", "normalizedForm": "Scipy", "wikidataId": "Q197492", "wikipediaExternalRef": 263472, "lang": "en", "confidence": 0.4243, "offsetStart": 162, "offsetEnd": 167}, "context": "We present in this paper a library that facilitates the creation of RC architectures, from simplest to most complex, based on the Python scientific stack (NumPy, Scipy). ", "mentionContextAttributes": {"used": {"value": false, "score": 5.4955482482910156e-05}, "created": {"value": true, "score": 0.9999165534973145}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.00023633241653442383}, "created": {"value": true, "score": 0.9999165534973145}, "shared": {"value": false, "score": 3.5762786865234375e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ReservoirPy", "normalizedForm": "ReservoirPy", "offsetStart": 168, "offsetEnd": 179}, "context": "In addition to the interface described in sec:flexible-rc, that encompasses most of RC enthusiasts needs from \"classic\" RC techniques to \"deep\" architectures training, ReservoirPy offers some more advanced tools, listed in this section.", "mentionContextAttributes": {"used": {"value": false, "score": 3.1948089599609375e-05}, "created": {"value": false, "score": 0.0022368431091308594}, "shared": {"value": false, "score": 7.152557373046875e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9859639406204224}, "created": {"value": true, "score": 0.9998983144760132}, "shared": {"value": false, "score": 4.3272972106933594e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ReservoirPy", "normalizedForm": "ReservoirPy", "offsetStart": 209, "offsetEnd": 220}, "context": "Then, we give more details about more advanced features and minimal implementations of advanced or exotic RC architectures, such as Deep ESNs or Extreme Learning Machines (ELMs) [12], as a proof of concept of ReservoirPy capacities.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00010824203491210938}, "created": {"value": true, "score": 0.9158101677894592}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9859639406204224}, "created": {"value": true, "score": 0.9998983144760132}, "shared": {"value": false, "score": 4.3272972106933594e-05}}}], "references": [{"refKey": 6, "tei": "<biblStruct xml:id=\"b6\">\n\t<analytic>\n\t\t<title level=\"a\" type=\"main\">Deep reservoir computing: A critical experimental analysis</title>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Claudio</forename><surname>Gallicchio</surname></persName>\n\t\t\t<idno type=\"ORCID\">0000-0002-6692-2564</idno>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Alessio</forename><surname>Micheli</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Luca</forename><surname>Pedrelli</surname></persName>\n\t\t</author>\n\t\t<idno type=\"DOI\">10.1016/j.neucom.2016.12.089</idno>\n\t</analytic>\n\t<monogr>\n\t\t<title level=\"j\">Neurocomputing</title>\n\t\t<title level=\"j\" type=\"abbrev\">Neurocomputing</title>\n\t\t<idno type=\"ISSN\">0925-2312</idno>\n\t\t<imprint>\n\t\t\t<biblScope unit=\"volume\">268</biblScope>\n\t\t\t<biblScope unit=\"page\" from=\"87\" to=\"99\" />\n\t\t\t<date type=\"published\" when=\"2017-12\">2017</date>\n\t\t\t<publisher>Elsevier BV</publisher>\n\t\t</imprint>\n\t</monogr>\n</biblStruct>\n"}], "runtime": 38554, "id": "d43cfadff97ff9dfaff4ac5ae59e806fdd8c2070", "metadata": {"id": "d43cfadff97ff9dfaff4ac5ae59e806fdd8c2070"}, "original_file_path": "../../datalake/Samuel/SV22/SV22_xml/hal-03761440.grobid.tei.xml", "file_name": "hal-03761440.grobid.tei.xml"}