{"application": "software-mentions", "version": "0.8.0", "date": "2024-10-07T11:54+0000", "md5": "0E770BD5F2C5FEA4D13F1013D27182E0", "mentions": [{"type": "software", "software-type": "software", "software-name": {"rawForm": "Souffl\u00e9", "normalizedForm": "Souffl\u00e9", "offsetStart": 0, "offsetEnd": 7}, "context": "Souffl\u00e9 natively supports this optimization.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00027447938919067383}, "created": {"value": false, "score": 0.00041538476943969727}, "shared": {"value": false, "score": 8.344650268554688e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9839978218078613}, "created": {"value": true, "score": 0.9998592138290405}, "shared": {"value": false, "score": 8.344650268554688e-07}}, "references": [{"label": "[11]", "normalizedForm": "[11]", "refKey": 11}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Souffl\u00e9", "normalizedForm": "Souffl\u00e9", "offsetStart": 0, "offsetEnd": 7}, "context": "Souffl\u00e9 [11,20] has been introduced to provide efficient synthesis of Datalog specifications to executable C++ programs, competing with state-of-the-art handcrafted code for program analysis.", "mentionContextAttributes": {"used": {"value": false, "score": 6.306171417236328e-05}, "created": {"value": true, "score": 0.7851625680923462}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9839978218078613}, "created": {"value": true, "score": 0.9998592138290405}, "shared": {"value": false, "score": 8.344650268554688e-07}}, "references": [{"label": "20]", "normalizedForm": "20]", "refKey": 20, "offsetStart": 22899, "offsetEnd": 22902}, {"label": "[11,", "normalizedForm": "[11", "refKey": 11, "offsetStart": 22895, "offsetEnd": 22899}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Souffl\u00e9", "normalizedForm": "Souffl\u00e9", "offsetStart": 0, "offsetEnd": 7}, "context": "Souffl\u00e9-prov performs between 1 and 2 orders of magnitude faster than Mohri [17] -an algorithm designed for single-source provenance on \ud835\udc58closed semirings.", "mentionContextAttributes": {"used": {"value": false, "score": 4.875659942626953e-05}, "created": {"value": false, "score": 4.088878631591797e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9839978218078613}, "created": {"value": true, "score": 0.9998592138290405}, "shared": {"value": false, "score": 8.344650268554688e-07}}, "references": [{"label": "[11]", "normalizedForm": "[11]", "refKey": 11}]}, {"type": "software", "software-type": "implicit", "software-name": {"rawForm": "code", "normalizedForm": "code", "offsetStart": 4, "offsetEnd": 8}, "context": "Our code was inserted in two different stages of Souffl\u00e9: a new translation strategy from the parsed program to the RAM program, a priority queue, replacing the code in charge of adding at run-time the tuples to the relations. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.058886051177978516}, "created": {"value": false, "score": 0.04305267333984375}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.058886051177978516}, "created": {"value": false, "score": 0.04305267333984375}, "shared": {"value": false, "score": 2.384185791015625e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Souffl\u00e9", "normalizedForm": "Souffl\u00e9", "offsetStart": 17, "offsetEnd": 24}, "context": "The internals of Souffl\u00e9, targeting the inflationary computation of the fixed-point operator lack support for updating tuples.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0016512870788574219}, "created": {"value": false, "score": 4.57763671875e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9839978218078613}, "created": {"value": true, "score": 0.9998592138290405}, "shared": {"value": false, "score": 8.344650268554688e-07}}, "references": [{"label": "[11]", "normalizedForm": "[11]", "refKey": 11}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Souffl\u00e9", "normalizedForm": "Souffl\u00e9", "offsetStart": 22, "offsetEnd": 29}, "context": "The inner workings of Souffl\u00e9 were of interest to our work; the algorithm implementations are similar to the evaluation strategy followed by the Best-First method we introduced here. ", "mentionContextAttributes": {"used": {"value": true, "score": 0.7485825419425964}, "created": {"value": true, "score": 0.781985342502594}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9839978218078613}, "created": {"value": true, "score": 0.9998592138290405}, "shared": {"value": false, "score": 8.344650268554688e-07}}, "references": [{"label": "[11]", "normalizedForm": "[11]", "refKey": 11}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Souffl\u00e9", "normalizedForm": "Souffl\u00e9", "offsetStart": 34, "offsetEnd": 41}, "context": "After parsing, the first stage of Souffl\u00e9 specializes the semi-na\u00efve evaluation strategy applied to \ud835\udc5e, yielding a relational algebra machine program (RAM). ", "mentionContextAttributes": {"used": {"value": true, "score": 0.9797502756118774}, "created": {"value": false, "score": 0.028104126453399658}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9839978218078613}, "created": {"value": true, "score": 0.9998592138290405}, "shared": {"value": false, "score": 8.344650268554688e-07}}, "references": [{"label": "[11]", "normalizedForm": "[11]", "refKey": 11}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Souffl\u00e9", "normalizedForm": "Souffl\u00e9", "offsetStart": 39, "offsetEnd": 46}, "context": "We implement our strategy by extending Souffl\u00e9 [11], a state-ofthe-art Datalog interpreter.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00035774707794189453}, "created": {"value": true, "score": 0.9545344114303589}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9839978218078613}, "created": {"value": true, "score": 0.9998592138290405}, "shared": {"value": false, "score": 8.344650268554688e-07}}, "references": [{"label": "[11]", "normalizedForm": "[11]", "refKey": 11, "offsetStart": 4515, "offsetEnd": 4519}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Souffl\u00e9", "normalizedForm": "Souffl\u00e9", "offsetStart": 39, "offsetEnd": 46}, "context": "Algorithm 4 presents the corresponding Souffl\u00e9 RAM program resulting from applying the semi-na\u00efve evaluation strategy and Algorithm 5 our modification to the RAM program to provide provenance annotation via the Best-First strategy and use the priority queue pq for provenance computation.", "mentionContextAttributes": {"used": {"value": false, "score": 0.02047055959701538}, "created": {"value": false, "score": 0.00012576580047607422}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9839978218078613}, "created": {"value": true, "score": 0.9998592138290405}, "shared": {"value": false, "score": 8.344650268554688e-07}}, "references": [{"label": "[11]", "normalizedForm": "[11]", "refKey": 11}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Souffl\u00e9", "normalizedForm": "Souffl\u00e9", "offsetStart": 49, "offsetEnd": 56}, "context": "Our code was inserted in two different stages of Souffl\u00e9: a new translation strategy from the parsed program to the RAM program, a priority queue, replacing the code in charge of adding at run-time the tuples to the relations. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.058886051177978516}, "created": {"value": false, "score": 0.04305267333984375}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9839978218078613}, "created": {"value": true, "score": 0.9998592138290405}, "shared": {"value": false, "score": 8.344650268554688e-07}}, "references": [{"label": "[11]", "normalizedForm": "[11]", "refKey": 11}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Souffl\u00e9", "normalizedForm": "Souffl\u00e9", "offsetStart": 51, "offsetEnd": 58}, "context": "We present a brief overview of the architecture of Souffl\u00e9 and discuss how we extended it.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0038878321647644043}, "created": {"value": true, "score": 0.9998592138290405}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9839978218078613}, "created": {"value": true, "score": 0.9998592138290405}, "shared": {"value": false, "score": 8.344650268554688e-07}}, "references": [{"label": "[11]", "normalizedForm": "[11]", "refKey": 11}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Souffl\u00e9", "normalizedForm": "Souffl\u00e9", "offsetStart": 52, "offsetEnd": 59}, "context": "Importantly, modifying directly at the RAM level of Souffl\u00e9 allows us to benefit of all implemented optimizations. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.00027042627334594727}, "created": {"value": false, "score": 0.01948601007461548}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9839978218078613}, "created": {"value": true, "score": 0.9998592138290405}, "shared": {"value": false, "score": 8.344650268554688e-07}}, "references": [{"label": "[11]", "normalizedForm": "[11]", "refKey": 11}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Souffl\u00e9", "normalizedForm": "Souffl\u00e9", "offsetStart": 66, "offsetEnd": 73}, "context": "Unsurprisingly, BFS and Dijkstra perform respectively better than Souffl\u00e9 and Souffl\u00e9-prov in the single-source context.", "mentionContextAttributes": {"used": {"value": false, "score": 0.004108786582946777}, "created": {"value": false, "score": 5.602836608886719e-06}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9839978218078613}, "created": {"value": true, "score": 0.9998592138290405}, "shared": {"value": false, "score": 8.344650268554688e-07}}, "references": [{"label": "[11]", "normalizedForm": "[11]", "refKey": 11}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Souffl\u00e9", "normalizedForm": "Souffl\u00e9", "offsetStart": 67, "offsetEnd": 74}, "context": "We showed its feasibility by providing an implementation on top of Souffl\u00e9 and tested it on several graph databases and matching patterns.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9839978218078613}, "created": {"value": false, "score": 0.38799232244491577}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9839978218078613}, "created": {"value": true, "score": 0.9998592138290405}, "shared": {"value": false, "score": 8.344650268554688e-07}}, "references": [{"label": "[11]", "normalizedForm": "[11]", "refKey": 11}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Souffl\u00e9", "normalizedForm": "Souffl\u00e9", "offsetStart": 68, "offsetEnd": 75}, "context": "We then dive into the practical aspects of its implementation using Souffl\u00e9, and present in Section 5 experimental results witnessing the efficiency of our approach for practical scenarios.", "mentionContextAttributes": {"used": {"value": false, "score": 0.04897588491439819}, "created": {"value": true, "score": 0.9777804017066956}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9839978218078613}, "created": {"value": true, "score": 0.9998592138290405}, "shared": {"value": false, "score": 8.344650268554688e-07}}, "references": [{"label": "[11]", "normalizedForm": "[11]", "refKey": 11}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Souffl\u00e9", "normalizedForm": "Souffl\u00e9", "offsetStart": 73, "offsetEnd": 80}, "context": "For the all-pairs problem, depending on the dataset, (see, e.g., Yeast), Souffl\u00e9-Prov is significantly faster than the previous best known algorithm, NodeElimination.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00028699636459350586}, "created": {"value": false, "score": 0.00010955333709716797}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9839978218078613}, "created": {"value": true, "score": 0.9998592138290405}, "shared": {"value": false, "score": 8.344650268554688e-07}}, "references": [{"label": "[11]", "normalizedForm": "[11]", "refKey": 11}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Souffl\u00e9", "normalizedForm": "Souffl\u00e9", "offsetStart": 78, "offsetEnd": 85}, "context": "Unsurprisingly, BFS and Dijkstra perform respectively better than Souffl\u00e9 and Souffl\u00e9-prov in the single-source context.", "mentionContextAttributes": {"used": {"value": false, "score": 0.004108786582946777}, "created": {"value": false, "score": 5.602836608886719e-06}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9839978218078613}, "created": {"value": true, "score": 0.9998592138290405}, "shared": {"value": false, "score": 8.344650268554688e-07}}, "references": [{"label": "[11]", "normalizedForm": "[11]", "refKey": 11}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Souffl\u00e9", "normalizedForm": "Souffl\u00e9", "offsetStart": 83, "offsetEnd": 90}, "context": "We provide in Figure 2 a comparison between the Best-First method introduced here (Souffl\u00e9-prov), the plain Souffl\u00e9 without provenance computation, and a previous provenance computation algorithm from [19] computing all-pairs shortest-distances over graph databases (the NodeElimination algorithm, with a choice of node to eliminate based on its id or its degree), in the tropical semiring.", "mentionContextAttributes": {"used": {"value": true, "score": 0.6594565510749817}, "created": {"value": false, "score": 4.076957702636719e-05}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9839978218078613}, "created": {"value": true, "score": 0.9998592138290405}, "shared": {"value": false, "score": 8.344650268554688e-07}}, "references": [{"label": "[11]", "normalizedForm": "[11]", "refKey": 11}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Souffl\u00e9", "normalizedForm": "Souffl\u00e9", "offsetStart": 87, "offsetEnd": 94}, "context": "We conjecture we could mitigate the overhead induced by provenance computations within Souffl\u00e9-prov by adding primitives in their data structures.", "mentionContextAttributes": {"used": {"value": false, "score": 0.03078538179397583}, "created": {"value": true, "score": 0.8180556893348694}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9839978218078613}, "created": {"value": true, "score": 0.9998592138290405}, "shared": {"value": false, "score": 8.344650268554688e-07}}, "references": [{"label": "[11]", "normalizedForm": "[11]", "refKey": 11}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Souffl\u00e9", "normalizedForm": "Souffl\u00e9", "offsetStart": 90, "offsetEnd": 97}, "context": "Theoretical results and practical optimizations lead to an efficient implementation using Souffl\u00e9, a state-of-the-art Datalog interpreter. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0001016855239868164}, "created": {"value": false, "score": 0.005939304828643799}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9839978218078613}, "created": {"value": true, "score": 0.9998592138290405}, "shared": {"value": false, "score": 8.344650268554688e-07}}, "references": [{"label": "[11]", "normalizedForm": "[11]", "refKey": 11}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Souffl\u00e9prov", "normalizedForm": "Souffl\u00e9prov", "offsetStart": 90, "offsetEnd": 101}, "context": "For smaller output DB sizes, this measure is less relevant, as the fixed costs of running Souffl\u00e9prov dominate the overall running time. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.00023287534713745117}, "created": {"value": false, "score": 0.0001348257064819336}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.00023287534713745117}, "created": {"value": false, "score": 0.0001348257064819336}, "shared": {"value": false, "score": 2.384185791015625e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Souffl\u00e9", "normalizedForm": "Souffl\u00e9", "offsetStart": 108, "offsetEnd": 115}, "context": "We provide in Figure 2 a comparison between the Best-First method introduced here (Souffl\u00e9-prov), the plain Souffl\u00e9 without provenance computation, and a previous provenance computation algorithm from [19] computing all-pairs shortest-distances over graph databases (the NodeElimination algorithm, with a choice of node to eliminate based on its id or its degree), in the tropical semiring.", "mentionContextAttributes": {"used": {"value": true, "score": 0.6594565510749817}, "created": {"value": false, "score": 4.076957702636719e-05}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9839978218078613}, "created": {"value": true, "score": 0.9998592138290405}, "shared": {"value": false, "score": 8.344650268554688e-07}}, "references": [{"label": "[11]", "normalizedForm": "[11]", "refKey": 11}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Souffl\u00e9", "normalizedForm": "Souffl\u00e9", "offsetStart": 148, "offsetEnd": 155}, "context": "What remains to be established is to what extent these data structures [11] could be extended to handle updates, without reducing the efficiency of Souffl\u00e9's current set of operators.", "mentionContextAttributes": {"used": {"value": false, "score": 0.03174060583114624}, "created": {"value": false, "score": 0.0009629726409912109}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9839978218078613}, "created": {"value": true, "score": 0.9998592138290405}, "shared": {"value": false, "score": 8.344650268554688e-07}}, "references": [{"label": "[11]", "normalizedForm": "[11]", "refKey": 11}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Souffl\u00e9", "normalizedForm": "Souffl\u00e9", "offsetStart": 182, "offsetEnd": 189}, "context": "We showcase the result of our translation strategy in Algorithms 4 and 5 for a Datalog query computing the transitive closure of a graph; this program is given in Algorithm 3 in its Souffl\u00e9 syntax. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.004900515079498291}, "created": {"value": true, "score": 0.8810150623321533}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9839978218078613}, "created": {"value": true, "score": 0.9998592138290405}, "shared": {"value": false, "score": 8.344650268554688e-07}}, "references": [{"label": "[11]", "normalizedForm": "[11]", "refKey": 11}]}], "references": [{"refKey": 11, "tei": "<biblStruct xml:id=\"b11\">\n\t<analytic>\n\t\t<title level=\"a\" type=\"main\">Souffl\u00e9: On synthesis of program analyzers</title>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Herbert</forename><surname>Jordan</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Bernhard</forename><surname>Scholz</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Pavle</forename><surname>Suboti\u0107</surname></persName>\n\t\t</author>\n\t</analytic>\n\t<monogr>\n\t\t<title level=\"m\">CAV</title>\n\t\t<imprint>\n\t\t\t<date>2016</date>\n\t\t\t<biblScope unit=\"page\">430</biblScope>\n\t\t</imprint>\n\t</monogr>\n</biblStruct>\n"}, {"refKey": 20, "tei": "<biblStruct xml:id=\"b20\">\n\t<analytic>\n\t\t<title level=\"a\" type=\"main\">On fast large-scale program analysis in datalog</title>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Bernhard</forename><surname>Scholz</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Herbert</forename><surname>Jordan</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Pavle</forename><surname>Suboti\u0107</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Till</forename><surname>Westmann</surname></persName>\n\t\t</author>\n\t</analytic>\n\t<monogr>\n\t\t<title level=\"j\">CC</title>\n\t\t<imprint>\n\t\t\t<biblScope unit=\"page\">206</biblScope>\n\t\t\t<date>2016</date>\n\t\t</imprint>\n\t</monogr>\n</biblStruct>\n"}], "runtime": 24426, "id": "1d5c91cd0c45764bf8fa60603decda536363f2e0", "metadata": {"id": "1d5c91cd0c45764bf8fa60603decda536363f2e0"}, "original_file_path": "../../datalake/Samuel/SOFTware-Sync/downloads/xml/hal-03664928.grobid.tei.xml", "file_name": "hal-03664928.grobid.tei.xml"}