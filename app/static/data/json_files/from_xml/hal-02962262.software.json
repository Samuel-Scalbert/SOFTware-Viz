{"application": "software-mentions", "version": "0.8.0", "date": "2024-04-12T16:05+0000", "md5": "3AD88A01869FED0D9C53F677A408482A", "mentions": [{"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 0, "offsetEnd": 4}, "context": "CyML intends to lower the barrier of platform specificities. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0002410411834716797}, "created": {"value": false, "score": 0.002564728260040283}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 0, "offsetEnd": 4}, "context": "CyML does not cover some features such as class definition, nested functions, exceptions handling, anonymous function, reading and writing files.", "mentionContextAttributes": {"used": {"value": false, "score": 4.678964614868164e-05}, "created": {"value": false, "score": 3.737211227416992e-05}, "shared": {"value": false, "score": 6.556510925292969e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 0, "offsetEnd": 4}, "context": "CyML is designed as a subset of the Cython language based on a language specialization approach.", "mentionContextAttributes": {"used": {"value": false, "score": 6.61015510559082e-05}, "created": {"value": true, "score": 0.9925972819328308}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 0, "offsetEnd": 4}, "context": "CyML suppports commonly used binary (numerical and boolean), unary and comparison operators, as well as casting operators for basic types and sequence operators such as length or sum.", "mentionContextAttributes": {"used": {"value": false, "score": 0.042854249477386475}, "created": {"value": false, "score": 1.3053417205810547e-05}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 0, "offsetEnd": 4}, "context": "CyML supports structured control flow statements that can be nested.", "mentionContextAttributes": {"used": {"value": false, "score": 2.3663043975830078e-05}, "created": {"value": false, "score": 0.0004201531410217285}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 0, "offsetEnd": 4}, "context": "CyML arrays are modeled on a standard Python list.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0003997683525085449}, "created": {"value": false, "score": 0.001143813133239746}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 0, "offsetEnd": 4}, "context": "CyML arrays without a specified size in the function parameter are mapped to C++ arrays using templates (Listing 6, line 1).", "mentionContextAttributes": {"used": {"value": true, "score": 0.997963547706604}, "created": {"value": false, "score": 8.404254913330078e-06}, "shared": {"value": false, "score": 1.7881393432617188e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 0, "offsetEnd": 4}, "context": "CyML defines three standard libraries (i.e.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00016379356384277344}, "created": {"value": false, "score": 3.844499588012695e-05}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 0, "offsetEnd": 4}, "context": "CyML addresses several issues encountered in current PBM frameworks, namely:", "mentionContextAttributes": {"used": {"value": false, "score": 9.351968765258789e-05}, "created": {"value": false, "score": 0.00026166439056396484}, "shared": {"value": false, "score": 5.364418029785156e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 0, "offsetEnd": 4}, "context": "CyML supports not only the transformation of the algorithm of unit models, but it also provides the evaluation of composite models by calling in sequential order models that are encapsulated into it.", "mentionContextAttributes": {"used": {"value": false, "score": 3.4749507904052734e-05}, "created": {"value": false, "score": 0.0012845396995544434}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 0, "offsetEnd": 4}, "context": "CyML implements PBM components with a functional and procedural approach.", "mentionContextAttributes": {"used": {"value": false, "score": 3.355741500854492e-05}, "created": {"value": false, "score": 0.027290165424346924}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 0, "offsetEnd": 4}, "context": "CyML is designed to tackle the reproducibility of PBM components.", "mentionContextAttributes": {"used": {"value": false, "score": 5.704164505004883e-05}, "created": {"value": true, "score": 0.9996287226676941}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 0, "offsetEnd": 4}, "context": "CyML users can implement a model in CyML and transform the algorithms into various targets by using CyMLT.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00014519691467285156}, "created": {"value": false, "score": 0.006279706954956055}, "shared": {"value": false, "score": 4.172325134277344e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 0, "offsetEnd": 4}, "context": "CyML is a subset of the Cython language.", "mentionContextAttributes": {"used": {"value": false, "score": 0.002159297466278076}, "created": {"value": false, "score": 0.0006687045097351074}, "shared": {"value": false, "score": 5.364418029785156e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 0, "offsetEnd": 4}, "context": "CyML does not interact with the simulation paradigms of the platforms.", "mentionContextAttributes": {"used": {"value": false, "score": 7.253885269165039e-05}, "created": {"value": false, "score": 4.13060188293457e-05}, "shared": {"value": false, "score": 6.556510925292969e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyMLT", "normalizedForm": "CyMLT", "offsetStart": 0, "offsetEnd": 5}, "language": {"rawForm": "C++", "normalizedForm": "C++"}, "context": "CyMLT is also able to generate model components to target modeling platforms such as DSSAT, BioMA, Record, SIMPLACE and OpenAlea. ", "mentionContextAttributes": {"used": {"value": false, "score": 4.750490188598633e-05}, "created": {"value": false, "score": 0.0007250308990478516}, "shared": {"value": false, "score": 6.556510925292969e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9926429390907288}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.986687958240509}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyMLT", "normalizedForm": "CyMLT", "offsetStart": 0, "offsetEnd": 5}, "language": {"rawForm": "C++", "normalizedForm": "C++"}, "context": "CyMLT is also able to directly generate components to target modeling platforms such as DSSAT, BioMA, Record, SIMPLACE and OpenAlea. ", "mentionContextAttributes": {"used": {"value": false, "score": 6.967782974243164e-05}, "created": {"value": false, "score": 0.0007743239402770996}, "shared": {"value": false, "score": 1.6093254089355469e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9926429390907288}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.986687958240509}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyMLT", "normalizedForm": "CyMLT", "offsetStart": 0, "offsetEnd": 5}, "language": {"rawForm": "C++", "normalizedForm": "C++"}, "context": "CyMLT takes into account platform requirements to generate model components that are compliant with existing platforms. ", "mentionContextAttributes": {"used": {"value": false, "score": 7.098913192749023e-05}, "created": {"value": false, "score": 0.01603001356124878}, "shared": {"value": false, "score": 2.9742717742919922e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9926429390907288}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.986687958240509}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyMLT", "normalizedForm": "CyMLT", "offsetStart": 0, "offsetEnd": 5}, "language": {"rawForm": "C++", "normalizedForm": "C++"}, "context": "CyMLT proposes a unique approach to transform an ASG into many programming languages. ", "mentionContextAttributes": {"used": {"value": false, "score": 4.297494888305664e-05}, "created": {"value": true, "score": 0.9894490838050842}, "shared": {"value": false, "score": 4.172325134277344e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9926429390907288}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.986687958240509}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyMLT", "normalizedForm": "CyMLT", "offsetStart": 0, "offsetEnd": 5}, "language": {"rawForm": "C++", "normalizedForm": "C++"}, "context": "CyMLT implements the Visitor design pattern (Gamma et al. 1995) to avoid a procedural implementation approach. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0013478398323059082}, "created": {"value": false, "score": 0.0001628398895263672}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9926429390907288}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.986687958240509}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyMLT", "normalizedForm": "CyMLT", "offsetStart": 0, "offsetEnd": 5}, "language": {"rawForm": "C++", "normalizedForm": "C++"}, "context": "CyMLT uses procedural paradigm for Python and object-oriented for C++, as these are the most often used approaches in these languages. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.000240325927734375}, "created": {"value": false, "score": 7.575750350952148e-05}, "shared": {"value": false, "score": 4.172325134277344e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9926429390907288}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.986687958240509}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyMLT", "normalizedForm": "CyMLT", "offsetStart": 0, "offsetEnd": 5}, "language": {"rawForm": "C++", "normalizedForm": "C++"}, "context": "CyMLT's datatypes map appropriately to target languages by using their standard library (Supporting Information Table S1).", "mentionContextAttributes": {"used": {"value": false, "score": 0.0010404586791992188}, "created": {"value": false, "score": 9.357929229736328e-06}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9926429390907288}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.986687958240509}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyMLT", "normalizedForm": "CyMLT", "offsetStart": 0, "offsetEnd": 5}, "language": {"rawForm": "C++", "normalizedForm": "C++"}, "context": "CyMLT provides export capabilities in many languages For crop modelers, learning a new language with its own learning curve adds a level of complexity to an existing complex landscape of languages and tools. ", "mentionContextAttributes": {"used": {"value": false, "score": 3.8683414459228516e-05}, "created": {"value": false, "score": 0.0017856359481811523}, "shared": {"value": false, "score": 1.1324882507324219e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9926429390907288}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.986687958240509}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "DSSAT", "normalizedForm": "DSSAT", "offsetStart": 0, "offsetEnd": 5}, "context": "DSSAT, BioMA, OpenAlea) whereas others extend their language with a high-level specificity (Record, Simplace) that requires a complex transformation.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00013327598571777344}, "created": {"value": false, "score": 5.072355270385742e-05}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.012733817100524902}, "created": {"value": false, "score": 0.11902010440826416}, "shared": {"value": false, "score": 2.682209014892578e-06}}, "references": [{"label": "(Jones et al. 2003;", "normalizedForm": "(Jones et al. 2003", "refKey": 33}, {"label": "Hoogenboom et al. 2019)", "normalizedForm": "Hoogenboom et al. 2019)", "refKey": 31}, {"label": "(Jones et al. 2003;", "normalizedForm": "(Jones et al. 2003", "refKey": 33}, {"label": "Hoogenboom et al. 2019)", "normalizedForm": "Hoogenboom et al. 2019)", "refKey": 31}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyMLT", "normalizedForm": "CyMLT", "offsetStart": 0, "offsetEnd": 5}, "language": {"rawForm": "C++", "normalizedForm": "C++"}, "context": "CyMLT provides a reuse approach that is opposite to a black-box approach where the composition of model components is bound to the execution platform targeted by its modules (Van Evert et al. 2005). ", "mentionContextAttributes": {"used": {"value": false, "score": 3.5822391510009766e-05}, "created": {"value": false, "score": 0.00013017654418945312}, "shared": {"value": false, "score": 1.7881393432617188e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9926429390907288}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.986687958240509}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "DSSAT", "normalizedForm": "DSSAT", "offsetStart": 0, "offsetEnd": 5}, "context": "DSSAT (Jones et al. 2003;Hoogenboom et al. 2019) and STICS (Brisson et al. 1998) provide generic crop modules in Fortran with a procedural approach that can be specialized for different species.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0001690387725830078}, "created": {"value": false, "score": 0.00011974573135375977}, "shared": {"value": false, "score": 4.172325134277344e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.012733817100524902}, "created": {"value": false, "score": 0.11902010440826416}, "shared": {"value": false, "score": 2.682209014892578e-06}}, "references": [{"label": "(Jones et al. 2003;", "normalizedForm": "(Jones et al. 2003", "refKey": 33, "offsetStart": 4375, "offsetEnd": 4394}, {"label": "Hoogenboom et al. 2019)", "normalizedForm": "Hoogenboom et al. 2019)", "refKey": 31, "offsetStart": 4394, "offsetEnd": 4417}, {"label": "(Jones et al. 2003;", "normalizedForm": "(Jones et al. 2003", "refKey": 33, "offsetStart": 4375, "offsetEnd": 4394}, {"label": "Hoogenboom et al. 2019)", "normalizedForm": "Hoogenboom et al. 2019)", "refKey": 31, "offsetStart": 4394, "offsetEnd": 4417}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "APSIM", "normalizedForm": "APSIM", "offsetStart": 0, "offsetEnd": 5}, "context": "APSIM (Holzworth et al. 2014) is one of the most widely used PBM platforms for simulating the performance of a wide range of cropping systems.", "mentionContextAttributes": {"used": {"value": false, "score": 6.0617923736572266e-05}, "created": {"value": false, "score": 8.219480514526367e-05}, "shared": {"value": false, "score": 4.172325134277344e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.004515290260314941}, "created": {"value": true, "score": 0.986785352230072}, "shared": {"value": false, "score": 2.682209014892578e-06}}, "references": [{"label": "(Holzworth et al. 2014", "normalizedForm": "(Holzworth et al. 2014", "refKey": 0, "offsetStart": 39523, "offsetEnd": 39545}]}, {"type": "software", "software-type": "software", "wikidataId": "Q975594", "wikipediaExternalRef": 18384111, "lang": "en", "confidence": 0.7801, "software-name": {"rawForm": "Cython", "normalizedForm": "Cython", "wikidataId": "Q975594", "wikipediaExternalRef": 18384111, "lang": "en", "confidence": 0.7801, "offsetStart": 0, "offsetEnd": 6}, "context": "Cython is a high-level programming language that combines the power of Python and C function calling and types on variables and class attributes. ", "mentionContextAttributes": {"used": {"value": false, "score": 3.4749507904052734e-05}, "created": {"value": false, "score": 0.0173567533493042}, "shared": {"value": false, "score": 4.172325134277344e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9448903203010559}, "created": {"value": true, "score": 0.9999222159385681}, "shared": {"value": false, "score": 2.8014183044433594e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "OpenAlea", "normalizedForm": "OpenAlea", "offsetStart": 0, "offsetEnd": 8}, "context": "OpenAlea offers capabilities to benefit of oriented-object features of Python, OpenAlea components can be defined as pure Python functions, already generated by CyMLT. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.00028574466705322266}, "created": {"value": false, "score": 0.2043190598487854}, "shared": {"value": false, "score": 1.2576580047607422e-05}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0005155205726623535}, "created": {"value": false, "score": 0.2043190598487854}, "shared": {"value": false, "score": 1.2576580047607422e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "NodeVisitor", "normalizedForm": "NodeVisitor", "offsetStart": 0, "offsetEnd": 11}, "context": "NodeVisitor contains a dispatch method that enables recursive traversal through the nodes. ", "mentionContextAttributes": {"used": {"value": false, "score": 3.808736801147461e-05}, "created": {"value": false, "score": 0.00016927719116210938}, "shared": {"value": false, "score": 4.172325134277344e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.6896926760673523}, "created": {"value": false, "score": 0.21518927812576294}, "shared": {"value": false, "score": 4.172325134277344e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CodeGenerator", "normalizedForm": "CodeGenerator", "offsetStart": 0, "offsetEnd": 13}, "context": "CodeGenerator abstracts the common behavior of these languages by providing other properties and visit methods common to all the target languages. ", "mentionContextAttributes": {"used": {"value": false, "score": 4.357099533081055e-05}, "created": {"value": false, "score": 0.0005372762680053711}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.02700108289718628}, "created": {"value": false, "score": 0.00818932056427002}, "shared": {"value": false, "score": 9.059906005859375e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Simplace", "normalizedForm": "Simplace", "offsetStart": 0, "offsetEnd": 27}, "context": "Simplace (Enders et al. 2010) uses the Java language, while Record (Bergez et al. 2016) uses C++; both require that their components share a built-in interface. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.003706991672515869}, "created": {"value": false, "score": 0.00014138221740722656}, "shared": {"value": false, "score": 1.2516975402832031e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.003706991672515869}, "created": {"value": false, "score": 0.012453317642211914}, "shared": {"value": false, "score": 2.682209014892578e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "PlatformGenerator", "normalizedForm": "PlatformGenerator", "offsetStart": 2, "offsetEnd": 19}, "context": "A PlatformGenerator class inherits attributes and properties of the LanguageGenerator class related to the language used by the platform.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0021781325340270996}, "created": {"value": false, "score": 0.0004035830497741699}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.02056974172592163}, "created": {"value": false, "score": 0.03530383110046387}, "shared": {"value": false, "score": 7.748603820800781e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LanguageGenerator", "normalizedForm": "LanguageGenerator", "offsetStart": 2, "offsetEnd": 19}, "context": "A LanguageGenerator class also inherits two classes: CodeGenerator and LanguageRule.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0011946558952331543}, "created": {"value": false, "score": 0.000751495361328125}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.02700108289718628}, "created": {"value": false, "score": 0.06392449140548706}, "shared": {"value": false, "score": 7.748603820800781e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 3, "offsetEnd": 7}, "context": "In CyML, expression is distinguished from assignment by the fact that, in the case of assignment construct, the evaluation result of an expression is assigned to a variable. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.00048667192459106445}, "created": {"value": false, "score": 2.8431415557861328e-05}, "shared": {"value": false, "score": 4.172325134277344e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 3, "offsetEnd": 7}, "context": "In CyML, we introduce two variables that define the previous and current value of a state variable that avoids a misuse of the state variable.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0001004338264465332}, "created": {"value": true, "score": 0.9998807311058044}, "shared": {"value": false, "score": 5.364418029785156e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "DSSAT", "normalizedForm": "DSSAT", "offsetStart": 3, "offsetEnd": 8}, "context": "In DSSAT and OpenAlea, a model algorithm is implemented as a stateless functional component (declarative paradigm).", "mentionContextAttributes": {"used": {"value": false, "score": 2.8789043426513672e-05}, "created": {"value": false, "score": 0.11902010440826416}, "shared": {"value": false, "score": 4.172325134277344e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.012733817100524902}, "created": {"value": false, "score": 0.11902010440826416}, "shared": {"value": false, "score": 2.682209014892578e-06}}, "references": [{"label": "(Jones et al. 2003;", "normalizedForm": "(Jones et al. 2003", "refKey": 33}, {"label": "Hoogenboom et al. 2019)", "normalizedForm": "Hoogenboom et al. 2019)", "refKey": 31}, {"label": "(Jones et al. 2003;", "normalizedForm": "(Jones et al. 2003", "refKey": 33}, {"label": "Hoogenboom et al. 2019)", "normalizedForm": "Hoogenboom et al. 2019)", "refKey": 31}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 4, "offsetEnd": 8}, "context": "The CyML language provides a relatively simple structure with few specifications that can express the algorithm of a biophysical process involved in crop growth and development.", "mentionContextAttributes": {"used": {"value": false, "score": 2.4139881134033203e-05}, "created": {"value": false, "score": 0.04676598310470581}, "shared": {"value": false, "score": 4.172325134277344e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyMLT", "normalizedForm": "CyMLT", "offsetStart": 4, "offsetEnd": 9}, "language": {"rawForm": "C++", "normalizedForm": "C++"}, "context": "The CyMLT architecture is composed of two main parts: the front-end and the back-end (Figure 3). ", "mentionContextAttributes": {"used": {"value": false, "score": 0.004005551338195801}, "created": {"value": false, "score": 0.0008396506309509277}, "shared": {"value": false, "score": 4.172325134277344e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9926429390907288}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.986687958240509}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyMLT", "normalizedForm": "CyMLT", "offsetStart": 4, "offsetEnd": 9}, "language": {"rawForm": "C++", "normalizedForm": "C++"}, "context": "The CyMLT allows searching and extracting state variables from a model specification to perform code generation according to each platform.", "mentionContextAttributes": {"used": {"value": false, "score": 4.976987838745117e-05}, "created": {"value": false, "score": 0.03330099582672119}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9926429390907288}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.986687958240509}}}, {"type": "software", "software-type": "software", "wikidataId": "Q975594", "wikipediaExternalRef": 18384111, "lang": "en", "confidence": 0.7801, "software-name": {"rawForm": "Cython", "normalizedForm": "Cython", "wikidataId": "Q975594", "wikipediaExternalRef": 18384111, "lang": "en", "confidence": 0.7801, "offsetStart": 4, "offsetEnd": 10}, "context": "The Cython parser provides a lexical and syntactic analysis of the source code. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0002657175064086914}, "created": {"value": false, "score": 2.5928020477294922e-05}, "shared": {"value": false, "score": 2.086162567138672e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9448903203010559}, "created": {"value": true, "score": 0.9999222159385681}, "shared": {"value": false, "score": 2.8014183044433594e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "RGenerator", "normalizedForm": "RGenerator", "offsetStart": 4, "offsetEnd": 14}, "context": "The RGenerator class inherits the RRules class.", "mentionContextAttributes": {"used": {"value": false, "score": 0.009911775588989258}, "created": {"value": false, "score": 0.0001628398895263672}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.009911775588989258}, "created": {"value": false, "score": 0.00818932056427002}, "shared": {"value": false, "score": 9.059906005859375e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CodeGenerator", "normalizedForm": "CodeGenerator", "offsetStart": 4, "offsetEnd": 17}, "context": "The CodeGenerator class contains the factorized methods shared by all LanguageGenerator classes including the method used for code emitting and code formatting.", "mentionContextAttributes": {"used": {"value": false, "score": 0.02700108289718628}, "created": {"value": false, "score": 6.562471389770508e-05}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.02700108289718628}, "created": {"value": false, "score": 0.00818932056427002}, "shared": {"value": false, "score": 9.059906005859375e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 5, "offsetEnd": 9}, "context": "With CyML, different processes provided by different platforms can be represented and composed regardless of the platforms, which enables to define a new white-box component reusable by other platforms.", "mentionContextAttributes": {"used": {"value": false, "score": 6.765127182006836e-05}, "created": {"value": false, "score": 0.0006658434867858887}, "shared": {"value": false, "score": 4.112720489501953e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LanguageGenerator", "normalizedForm": "LanguageGenerator", "offsetStart": 5, "offsetEnd": 22}, "context": "Each LanguageGenerator sub-classes provide the same visitor method names given that the same ASG is used.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0019315481185913086}, "created": {"value": false, "score": 3.9637088775634766e-05}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.02700108289718628}, "created": {"value": false, "score": 0.06392449140548706}, "shared": {"value": false, "score": 7.748603820800781e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 6, "offsetEnd": 10}, "context": "Thus, CyML must enable an optimal model developer experience with a learning curve that does not intimidate new users.", "mentionContextAttributes": {"used": {"value": false, "score": 2.962350845336914e-05}, "created": {"value": false, "score": 0.00200730562210083}, "shared": {"value": false, "score": 4.172325134277344e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 7, "offsetEnd": 11}, "context": "Unlike CyML, Cython does not require explicit type declarations.", "mentionContextAttributes": {"used": {"value": false, "score": 7.396936416625977e-05}, "created": {"value": false, "score": 4.798173904418945e-05}, "shared": {"value": false, "score": 4.172325134277344e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 7, "offsetEnd": 11}, "context": "Third, CyML has some limitations with data type conversion.", "mentionContextAttributes": {"used": {"value": false, "score": 6.693601608276367e-05}, "created": {"value": false, "score": 5.9545040130615234e-05}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 7, "offsetEnd": 11}, "context": "Hence, CyML aims at promoting PBM re-usability and interoperability through a transformation system that parses model specifications and knowledge needed to transform algorithms.", "mentionContextAttributes": {"used": {"value": false, "score": 7.69495964050293e-05}, "created": {"value": true, "score": 0.963375985622406}, "shared": {"value": false, "score": 5.364418029785156e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "BioMA", "normalizedForm": "BioMA", "offsetStart": 7, "offsetEnd": 12}, "context": "DSSAT, BioMA, OpenAlea) whereas others extend their language with a high-level specificity (Record, Simplace) that requires a complex transformation.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00013327598571777344}, "created": {"value": false, "score": 5.072355270385742e-05}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.877527117729187}, "created": {"value": false, "score": 0.012453317642211914}, "shared": {"value": false, "score": 2.682209014892578e-06}}, "references": [{"label": "(Donatelli et al. 2010", "normalizedForm": "(Donatelli et al. 2010", "refKey": 19}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 8, "offsetEnd": 12}, "context": "Second, CyML provides primitive types whose equivalence in some platforms are objects with some properties.", "mentionContextAttributes": {"used": {"value": false, "score": 2.9981136322021484e-05}, "created": {"value": false, "score": 2.008676528930664e-05}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 9, "offsetEnd": 13}, "context": "Although CyML provides a procedural mechanism to implement model algorithm, the programming languages supported by CyMLT can be classified in procedural and object-oriented programming paradigms.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00010281801223754883}, "created": {"value": false, "score": 0.003949880599975586}, "shared": {"value": false, "score": 1.8477439880371094e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 9, "offsetEnd": 13}, "context": "Although CyML focuses on the implementation and reuse of biophysical models, it could be used in general purpose.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0007416009902954102}, "created": {"value": false, "score": 0.010638117790222168}, "shared": {"value": false, "score": 4.172325134277344e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyMLT", "normalizedForm": "CyMLT", "offsetStart": 9, "offsetEnd": 14}, "language": {"rawForm": "C++", "normalizedForm": "C++"}, "context": "However, CyMLT can also be extended to generate models in Python with an object-oriented approach and in C++ with a procedural approach. ", "mentionContextAttributes": {"used": {"value": false, "score": 2.5570392608642578e-05}, "created": {"value": false, "score": 0.0008240342140197754}, "shared": {"value": false, "score": 5.364418029785156e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9926429390907288}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.986687958240509}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyMLT", "normalizedForm": "CyMLT", "offsetStart": 9, "offsetEnd": 14}, "language": {"rawForm": "C++", "normalizedForm": "C++"}, "context": "Code The CyMLT source code are available publicly on Github at https://github.com/AgriculturalModelExchangeInitiative/PyCrop2ML.", "mentionContextAttributes": {"used": {"value": false, "score": 0.23469310998916626}, "created": {"value": false, "score": 7.69495964050293e-05}, "shared": {"value": true, "score": 0.986687958240509}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9926429390907288}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.986687958240509}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 10, "offsetEnd": 14}, "context": "We define CyML, a Cython-derived language with minimum specifications to implement model component algorithms.", "mentionContextAttributes": {"used": {"value": false, "score": 5.513429641723633e-05}, "created": {"value": true, "score": 0.9997485876083374}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 10, "offsetEnd": 14}, "context": "Moreover, CyML can be extended to support 64-bit C double type.", "mentionContextAttributes": {"used": {"value": false, "score": 3.510713577270508e-05}, "created": {"value": false, "score": 8.016824722290039e-05}, "shared": {"value": false, "score": 4.172325134277344e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 10, "offsetEnd": 14}, "context": "Moreover, CyML does not provide a formalism to link model components with data to build a modeling solution.", "mentionContextAttributes": {"used": {"value": false, "score": 3.11732292175293e-05}, "created": {"value": false, "score": 0.00025463104248046875}, "shared": {"value": false, "score": 4.172325134277344e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "wikidataId": "Q975594", "wikipediaExternalRef": 18384111, "lang": "en", "confidence": 0.7801, "software-name": {"rawForm": "Cython", "normalizedForm": "Cython", "wikidataId": "Q975594", "wikipediaExternalRef": 18384111, "lang": "en", "confidence": 0.7801, "offsetStart": 10, "offsetEnd": 16}, "context": "Likewise, Cython generates code into the C and C++ languages that have a high performance but the generated code has a low readability, therefore, making it difficult to understand and to maintain. ", "mentionContextAttributes": {"used": {"value": false, "score": 5.1081180572509766e-05}, "created": {"value": false, "score": 0.00024688243865966797}, "shared": {"value": false, "score": 2.8014183044433594e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9448903203010559}, "created": {"value": true, "score": 0.9999222159385681}, "shared": {"value": false, "score": 2.8014183044433594e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 11, "offsetEnd": 15}, "context": "Given that CyML is built to serve as an intermediate representation of a set of languages, its validity is practically proved if all unit tests written in CyML succeed in all languages after transformation.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00018477439880371094}, "created": {"value": false, "score": 0.002982020378112793}, "shared": {"value": false, "score": 1.7881393432617188e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 11, "offsetEnd": 15}, "context": "Listing 6. CyML code of a function that computes the sum of the elements of a list transformed using CyMLT in Python, C++, C#, Java, and Fortran.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00041872262954711914}, "created": {"value": false, "score": 3.260374069213867e-05}, "shared": {"value": false, "score": 8.940696716308594e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyMLT", "normalizedForm": "CyMLT", "offsetStart": 11, "offsetEnd": 16}, "language": {"rawForm": "C++", "normalizedForm": "C++"}, "context": "Currently, CyMLT supports Python, Java, C#, C++ and Fortran languages. ", "mentionContextAttributes": {"used": {"value": false, "score": 6.407499313354492e-05}, "created": {"value": false, "score": 0.0006327033042907715}, "shared": {"value": false, "score": 1.4901161193847656e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9926429390907288}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.986687958240509}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 12, "offsetEnd": 16}, "context": "We designed CyML to minimize this added complexity by choosing a language that is very close to existing languages.", "mentionContextAttributes": {"used": {"value": false, "score": 9.578466415405273e-05}, "created": {"value": true, "score": 0.9999307990074158}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyMLT", "normalizedForm": "CyMLT", "offsetStart": 12, "offsetEnd": 17}, "language": {"rawForm": "C++", "normalizedForm": "C++"}, "context": "In Fortran, CyMLT generates allocable arrays to map to CyML list data types and provides some functions to handle it. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.00013709068298339844}, "created": {"value": false, "score": 0.0006895661354064941}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9926429390907288}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.986687958240509}}}, {"type": "software", "software-type": "software", "wikidataId": "Q975594", "wikipediaExternalRef": 18384111, "lang": "en", "confidence": 0.7801, "software-name": {"rawForm": "Cython", "normalizedForm": "Cython", "wikidataId": "Q975594", "wikipediaExternalRef": 18384111, "lang": "en", "confidence": 0.7801, "offsetStart": 12, "offsetEnd": 18}, "context": "To restrict Cython grammar, the generated Cython AST is processed to ensure that it incorporates only syntactic components defined in CyML.", "mentionContextAttributes": {"used": {"value": false, "score": 0.09611278772354126}, "created": {"value": false, "score": 4.738569259643555e-05}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9448903203010559}, "created": {"value": true, "score": 0.9999222159385681}, "shared": {"value": false, "score": 2.8014183044433594e-06}}}, {"type": "software", "software-type": "software", "wikidataId": "Q975594", "wikipediaExternalRef": 18384111, "lang": "en", "confidence": 0.7801, "software-name": {"rawForm": "Cython", "normalizedForm": "Cython", "wikidataId": "Q975594", "wikipediaExternalRef": 18384111, "lang": "en", "confidence": 0.7801, "offsetStart": 13, "offsetEnd": 19}, "context": "Unlike CyML, Cython does not require explicit type declarations. ", "mentionContextAttributes": {"used": {"value": false, "score": 7.396936416625977e-05}, "created": {"value": false, "score": 4.798173904418945e-05}, "shared": {"value": false, "score": 4.172325134277344e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9448903203010559}, "created": {"value": true, "score": 0.9999222159385681}, "shared": {"value": false, "score": 2.8014183044433594e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "OpenAlea", "normalizedForm": "OpenAlea", "offsetStart": 13, "offsetEnd": 21}, "context": "In DSSAT and OpenAlea, a model algorithm is implemented as a stateless functional component (declarative paradigm). ", "mentionContextAttributes": {"used": {"value": false, "score": 2.8789043426513672e-05}, "created": {"value": false, "score": 0.11902010440826416}, "shared": {"value": false, "score": 4.172325134277344e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0005155205726623535}, "created": {"value": false, "score": 0.2043190598487854}, "shared": {"value": false, "score": 1.2576580047607422e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 14, "offsetEnd": 18}, "context": "In this case, CyML converts it into strings.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0003764033317565918}, "created": {"value": false, "score": 0.00037032365798950195}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "OpenAlea", "normalizedForm": "OpenAlea", "offsetStart": 14, "offsetEnd": 22}, "context": "DSSAT, BioMA, OpenAlea) whereas others extend their language with a high-level specificity (Record, Simplace) that requires a complex transformation.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00013327598571777344}, "created": {"value": false, "score": 5.072355270385742e-05}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0005155205726623535}, "created": {"value": false, "score": 0.2043190598487854}, "shared": {"value": false, "score": 1.2576580047607422e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 15, "offsetEnd": 19}, "context": "Given that the CyML language is similar to Python, it is straightforward to yield Python code through one ASG traversal.", "mentionContextAttributes": {"used": {"value": false, "score": 0.007881104946136475}, "created": {"value": false, "score": 0.00014138221740722656}, "shared": {"value": false, "score": 5.364418029785156e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 16, "offsetEnd": 20}, "context": "We designed the CyML language to meet the following requirements.", "mentionContextAttributes": {"used": {"value": false, "score": 7.778406143188477e-05}, "created": {"value": true, "score": 0.9998064041137695}, "shared": {"value": false, "score": 2.9206275939941406e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyMLT", "normalizedForm": "CyMLT", "offsetStart": 16, "offsetEnd": 21}, "language": {"rawForm": "C++", "normalizedForm": "C++"}, "context": "We also propose CyMLT, an extensible source-to-source transformation system that transforms CyML source code into different target languages such as Fortran, C#, C++, Java and Python, and into different programming paradigms.", "mentionContextAttributes": {"used": {"value": false, "score": 9.137392044067383e-05}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": false, "score": 3.0338764190673828e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9926429390907288}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.986687958240509}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "BioMA", "normalizedForm": "BioMA", "offsetStart": 16, "offsetEnd": 21}, "context": "For example, as BioMA uses the C# language, the BioMAGenerator class (i.e. the class that generates BioMA components) inherits the CsharpGenerator class that generates the source code in C#. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0064699649810791016}, "created": {"value": false, "score": 0.0001189112663269043}, "shared": {"value": false, "score": 2.682209014892578e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.877527117729187}, "created": {"value": false, "score": 0.012453317642211914}, "shared": {"value": false, "score": 2.682209014892578e-06}}, "references": [{"label": "(Donatelli et al. 2010", "normalizedForm": "(Donatelli et al. 2010", "refKey": 19}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyMLT", "normalizedForm": "CyMLT", "offsetStart": 16, "offsetEnd": 21}, "language": {"rawForm": "C++", "normalizedForm": "C++"}, "context": "We also propose CyMLT, a source-to-source transformation system.", "mentionContextAttributes": {"used": {"value": false, "score": 8.803606033325195e-05}, "created": {"value": true, "score": 0.9999353289604187}, "shared": {"value": false, "score": 1.4901161193847656e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9926429390907288}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.986687958240509}}}, {"type": "software", "software-type": "software", "wikidataId": "Q975594", "wikipediaExternalRef": 18384111, "lang": "en", "confidence": 0.7801, "software-name": {"rawForm": "Cython", "normalizedForm": "Cython", "wikidataId": "Q975594", "wikipediaExternalRef": 18384111, "lang": "en", "confidence": 0.7801, "offsetStart": 17, "offsetEnd": 23}, "context": "However, not all Cython syntax can be directly translated into all target languages. ", "mentionContextAttributes": {"used": {"value": false, "score": 8.088350296020508e-05}, "created": {"value": false, "score": 7.56382942199707e-05}, "shared": {"value": false, "score": 8.940696716308594e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9448903203010559}, "created": {"value": true, "score": 0.9999222159385681}, "shared": {"value": false, "score": 2.8014183044433594e-06}}}, {"type": "software", "software-type": "software", "wikidataId": "Q975594", "wikipediaExternalRef": 18384111, "lang": "en", "confidence": 0.7801, "software-name": {"rawForm": "Cython", "normalizedForm": "Cython", "wikidataId": "Q975594", "wikipediaExternalRef": 18384111, "lang": "en", "confidence": 0.7801, "offsetStart": 18, "offsetEnd": 24}, "context": "We define CyML, a Cython-derived language with minimum specifications to implement model component algorithms.", "mentionContextAttributes": {"used": {"value": false, "score": 5.513429641723633e-05}, "created": {"value": true, "score": 0.9997485876083374}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9448903203010559}, "created": {"value": true, "score": 0.9999222159385681}, "shared": {"value": false, "score": 2.8014183044433594e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 19, "offsetEnd": 23}, "context": "This means that in CyML, all variables have to be declared before they are used and the declared type is immutable.", "mentionContextAttributes": {"used": {"value": false, "score": 0.003428816795349121}, "created": {"value": false, "score": 9.006261825561523e-05}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 19, "offsetEnd": 23}, "context": "The development of CyML and its transformation system addresses the need of the plant and crop modeling community to enhance research collaboration by improving the capacity to exchange and reuse PBM components.", "mentionContextAttributes": {"used": {"value": false, "score": 8.863210678100586e-05}, "created": {"value": true, "score": 0.9970457553863525}, "shared": {"value": false, "score": 5.364418029785156e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyMLT", "normalizedForm": "CyMLT", "offsetStart": 20, "offsetEnd": 25}, "language": {"rawForm": "C++", "normalizedForm": "C++"}, "context": "The availability of CyMLT through AMEI will allow building a large community around this system and can make CyML a standard language providing a means to seamlessly compare independent biophysical processes or promote alternatives approaches.", "mentionContextAttributes": {"used": {"value": false, "score": 7.659196853637695e-05}, "created": {"value": false, "score": 0.0071520209312438965}, "shared": {"value": false, "score": 1.9848346710205078e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9926429390907288}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.986687958240509}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 21, "offsetEnd": 25}, "context": "The design choice of CyML relies on the legacy Cython parser.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0004120469093322754}, "created": {"value": false, "score": 0.00035369396209716797}, "shared": {"value": false, "score": 4.172325134277344e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "implicit", "software-name": {"rawForm": "code", "normalizedForm": "code", "offsetStart": 22, "offsetEnd": 26}, "language": {"rawForm": "R", "normalizedForm": "R", "wikidataId": "Q206904", "offsetStart": 20, "offsetEnd": 21}, "context": "Implementation of a R code generator. ", "mentionContextAttributes": {"used": {"value": false, "score": 6.598234176635742e-05}, "created": {"value": false, "score": 0.08500140905380249}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.6896926760673523}, "created": {"value": false, "score": 0.21518927812576294}, "shared": {"value": false, "score": 5.364418029785156e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 22, "offsetEnd": 26}, "context": "Therefore, we defined CyML as a sub-set of Cython to address the implementation of the model algorithm (Figure 1, right part).", "mentionContextAttributes": {"used": {"value": true, "score": 0.7959325313568115}, "created": {"value": true, "score": 0.8886702656745911}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "implicit", "software-name": {"rawForm": "code", "normalizedForm": "code", "offsetStart": 23, "offsetEnd": 27}, "language": {"rawForm": "R", "normalizedForm": "R"}, "context": "The developer of the R code generator implemented the different visit methods without bothering with the dispatching mechanism provided by the NodeVisitor class. ", "mentionContextAttributes": {"used": {"value": true, "score": 0.6896926760673523}, "created": {"value": false, "score": 0.21518927812576294}, "shared": {"value": false, "score": 1.7881393432617188e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.6896926760673523}, "created": {"value": false, "score": 0.21518927812576294}, "shared": {"value": false, "score": 5.364418029785156e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 23, "offsetEnd": 27}, "context": "Full documentation for CyML and CYMLT can be found at https://pycrop2ml.readthedocs.io.", "mentionContextAttributes": {"used": {"value": false, "score": 0.012029290199279785}, "created": {"value": false, "score": 2.568960189819336e-05}, "shared": {"value": true, "score": 0.9863056540489197}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 24, "offsetEnd": 28}, "context": "It should be noted that CyML adds unit test functionality to platforms that do not use test-driven development.", "mentionContextAttributes": {"used": {"value": false, "score": 3.260374069213867e-05}, "created": {"value": false, "score": 0.0024663209915161133}, "shared": {"value": false, "score": 1.1324882507324219e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "wikidataId": "Q975594", "wikipediaExternalRef": 18384111, "lang": "en", "confidence": 0.7801, "software-name": {"rawForm": "Cython", "normalizedForm": "Cython", "wikidataId": "Q975594", "wikipediaExternalRef": 18384111, "lang": "en", "confidence": 0.7801, "offsetStart": 24, "offsetEnd": 30}, "context": "CyML is a subset of the Cython language.", "mentionContextAttributes": {"used": {"value": false, "score": 0.002159297466278076}, "created": {"value": false, "score": 0.0006687045097351074}, "shared": {"value": false, "score": 5.364418029785156e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9448903203010559}, "created": {"value": true, "score": 0.9999222159385681}, "shared": {"value": false, "score": 2.8014183044433594e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Haxe", "normalizedForm": "Haxe", "offsetStart": 25, "offsetEnd": 29}, "context": "Their system is based on Haxe, a language that offers the capability to transform Haxe code into many programming languages. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.00018024444580078125}, "created": {"value": true, "score": 0.6758756637573242}, "shared": {"value": false, "score": 1.2516975402832031e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.00018024444580078125}, "created": {"value": true, "score": 0.6758756637573242}, "shared": {"value": false, "score": 1.2516975402832031e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 26, "offsetEnd": 30}, "context": "In this paper, we present CyML, a Cython-derived language (Behnel et al., 2011) with minimum meta-specifications to implement algorithms of Crop2ML models.", "mentionContextAttributes": {"used": {"value": false, "score": 6.455183029174805e-05}, "created": {"value": true, "score": 0.9999222159385681}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 29, "offsetEnd": 33}, "context": "Table 1 gives the meaning of CyML language built-in functions that are used to implement the shoot number model.", "mentionContextAttributes": {"used": {"value": true, "score": 0.947724461555481}, "created": {"value": false, "score": 0.0007064342498779297}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "PlatformGenerator", "normalizedForm": "PlatformGenerator", "offsetStart": 29, "offsetEnd": 46}, "context": "It means that a sub-class of PlatformGenerator and of LanguageGenerator class have been implemented for each supported platform and language.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0018559694290161133}, "created": {"value": false, "score": 0.03530383110046387}, "shared": {"value": false, "score": 7.748603820800781e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.02056974172592163}, "created": {"value": false, "score": 0.03530383110046387}, "shared": {"value": false, "score": 7.748603820800781e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 30, "offsetEnd": 34}, "context": "First, the current version of CyML does not handle the type overflow.", "mentionContextAttributes": {"used": {"value": false, "score": 5.882978439331055e-05}, "created": {"value": false, "score": 0.0005935430526733398}, "shared": {"value": false, "score": 5.364418029785156e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyMLT", "normalizedForm": "CyMLT", "offsetStart": 30, "offsetEnd": 35}, "language": {"rawForm": "C++", "normalizedForm": "C++"}, "context": "The Fortran code generated by CyMLT is compatible with DSSAT. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.012733817100524902}, "created": {"value": false, "score": 5.644559860229492e-05}, "shared": {"value": false, "score": 1.0132789611816406e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9926429390907288}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.986687958240509}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 31, "offsetEnd": 35}, "context": "Then we demonstrate the use of CyML and for a simple model component, which simulates wheat shoot number and the extensibility of CyMLT to new languages or simulation platforms.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9926429390907288}, "created": {"value": true, "score": 0.8420175313949585}, "shared": {"value": false, "score": 1.7881393432617188e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 31, "offsetEnd": 35}, "context": "The main concepts supported by CyML are represented in Figure 2. Declaration: Basic types and collection.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00021076202392578125}, "created": {"value": false, "score": 0.0021030306816101074}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CYMLT", "normalizedForm": "CYMLT", "offsetStart": 32, "offsetEnd": 37}, "publisher": {"rawForm": "R Core Team", "normalizedForm": "R Core Team"}, "context": "Full documentation for CyML and CYMLT can be found at https://pycrop2ml.readthedocs.io.", "mentionContextAttributes": {"used": {"value": false, "score": 0.012029290199279785}, "created": {"value": false, "score": 2.568960189819336e-05}, "shared": {"value": true, "score": 0.9863056540489197}}, "documentContextAttributes": {"used": {"value": false, "score": 0.012029290199279785}, "created": {"value": true, "score": 0.9994720816612244}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "wikidataId": "Q975594", "wikipediaExternalRef": 18384111, "lang": "en", "confidence": 0.7801, "software-name": {"rawForm": "Cython", "normalizedForm": "Cython", "wikidataId": "Q975594", "wikipediaExternalRef": 18384111, "lang": "en", "confidence": 0.7801, "offsetStart": 33, "offsetEnd": 39}, "context": "The conformance to the subset of Cython features is guaranteed through a semantic analysis.", "mentionContextAttributes": {"used": {"value": false, "score": 0.01710134744644165}, "created": {"value": false, "score": 0.00039714574813842773}, "shared": {"value": false, "score": 1.7881393432617188e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9448903203010559}, "created": {"value": true, "score": 0.9999222159385681}, "shared": {"value": false, "score": 2.8014183044433594e-06}}}, {"type": "software", "software-type": "software", "wikidataId": "Q975594", "wikipediaExternalRef": 18384111, "lang": "en", "confidence": 0.7801, "software-name": {"rawForm": "Cython", "normalizedForm": "Cython", "wikidataId": "Q975594", "wikipediaExternalRef": 18384111, "lang": "en", "confidence": 0.7801, "offsetStart": 34, "offsetEnd": 40}, "context": "In this paper, we present CyML, a Cython-derived language (Behnel et al., 2011) with minimum meta-specifications to implement algorithms of Crop2ML models.", "mentionContextAttributes": {"used": {"value": false, "score": 6.455183029174805e-05}, "created": {"value": true, "score": 0.9999222159385681}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9448903203010559}, "created": {"value": true, "score": 0.9999222159385681}, "shared": {"value": false, "score": 2.8014183044433594e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyMLT", "normalizedForm": "CyMLT", "offsetStart": 35, "offsetEnd": 40}, "language": {"rawForm": "C++", "normalizedForm": "C++"}, "context": "These functions are extracted from CyMLT library and integrated into the generated code to make it independent of the library of transformation. ", "mentionContextAttributes": {"used": {"value": true, "score": 0.9607514142990112}, "created": {"value": false, "score": 0.0005491971969604492}, "shared": {"value": false, "score": 3.635883331298828e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9926429390907288}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.986687958240509}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 36, "offsetEnd": 40}, "context": "CyML users can implement a model in CyML and transform the algorithms into various targets by using CyMLT.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00014519691467285156}, "created": {"value": false, "score": 0.006279706954956055}, "shared": {"value": false, "score": 4.172325134277344e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "wikidataId": "Q975594", "wikipediaExternalRef": 18384111, "lang": "en", "confidence": 0.7801, "software-name": {"rawForm": "Cython", "normalizedForm": "Cython", "wikidataId": "Q975594", "wikipediaExternalRef": 18384111, "lang": "en", "confidence": 0.7801, "offsetStart": 36, "offsetEnd": 42}, "context": "CyML is designed as a subset of the Cython language based on a language specialization approach.", "mentionContextAttributes": {"used": {"value": false, "score": 6.61015510559082e-05}, "created": {"value": true, "score": 0.9925972819328308}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9448903203010559}, "created": {"value": true, "score": 0.9999222159385681}, "shared": {"value": false, "score": 2.8014183044433594e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 37, "offsetEnd": 41}, "context": "Some functions are identical between CyML and R, like min or max.", "mentionContextAttributes": {"used": {"value": false, "score": 0.004696249961853027}, "created": {"value": false, "score": 9.47713851928711e-06}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 37, "offsetEnd": 41}, "context": "We designed a system that transforms CyML source code to many target languages and simulation platforms.", "mentionContextAttributes": {"used": {"value": false, "score": 2.580881118774414e-05}, "created": {"value": true, "score": 0.9998987317085266}, "shared": {"value": false, "score": 0.000156402587890625}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "APSIM", "normalizedForm": "APSIM", "offsetStart": 38, "offsetEnd": 43}, "context": "Supporting a new simulation platform: APSIM-PMF.", "mentionContextAttributes": {"used": {"value": false, "score": 9.816884994506836e-05}, "created": {"value": true, "score": 0.986785352230072}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.004515290260314941}, "created": {"value": true, "score": 0.986785352230072}, "shared": {"value": false, "score": 2.682209014892578e-06}}, "references": [{"label": "(Holzworth et al. 2014", "normalizedForm": "(Holzworth et al. 2014", "refKey": 0}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 39, "offsetEnd": 43}, "context": "This one-to-many transpiler transforms CyML source code into different target languages such as Fortran, C#, C++, Java and Python.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00010925531387329102}, "created": {"value": false, "score": 0.00012922286987304688}, "shared": {"value": false, "score": 1.2099742889404297e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "APSIM", "normalizedForm": "APSIM", "offsetStart": 39, "offsetEnd": 44}, "context": "For instance, model components in PMF (APSIM next generation) and BioMA are written in C# in both platforms but the reuse of PMF components in BioMA (and vice versa) can only be done at the level of binaries, and, therefore, as black boxes.", "mentionContextAttributes": {"used": {"value": false, "score": 0.004515290260314941}, "created": {"value": false, "score": 9.304285049438477e-05}, "shared": {"value": false, "score": 5.364418029785156e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.004515290260314941}, "created": {"value": true, "score": 0.986785352230072}, "shared": {"value": false, "score": 2.682209014892578e-06}}, "references": [{"label": "(Holzworth et al. 2014", "normalizedForm": "(Holzworth et al. 2014", "refKey": 0}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 40, "offsetEnd": 44}, "context": "The shootnumber model is implemented in CyML as a function that includes all the meta information provided by the model specifications (Supporting Information Listing S2).", "mentionContextAttributes": {"used": {"value": false, "score": 0.0012671351432800293}, "created": {"value": false, "score": 0.004149675369262695}, "shared": {"value": false, "score": 4.172325134277344e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 40, "offsetEnd": 44}, "context": "Consider the transformation of a simple CyML function that calculates the sum of elements of an array x with undefined size (Listing 6).", "mentionContextAttributes": {"used": {"value": false, "score": 0.00036913156509399414}, "created": {"value": false, "score": 0.0027895569801330566}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CYMLT", "normalizedForm": "CYMLT", "offsetStart": 42, "offsetEnd": 47}, "publisher": {"rawForm": "R Core Team", "normalizedForm": "R Core Team", "offsetStart": 65, "offsetEnd": 76}, "context": "We present the steps for the extension of CYMLT with R language (R Core Team 2017) and the Plant Modeling Framework (PMF). ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0014466643333435059}, "created": {"value": true, "score": 0.9994720816612244}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.012029290199279785}, "created": {"value": true, "score": 0.9994720816612244}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "APSIM", "normalizedForm": "APSIM", "offsetStart": 42, "offsetEnd": 47}, "context": "For example, the crop modeling frameworks APSIM Next Generation (Holzworth et al. 2018) and BioMA (Donatelli et al. 2010) are based on component-oriented techniques and require models to be developed in C#.", "mentionContextAttributes": {"used": {"value": false, "score": 9.626150131225586e-05}, "created": {"value": false, "score": 0.002009451389312744}, "shared": {"value": false, "score": 4.172325134277344e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.004515290260314941}, "created": {"value": true, "score": 0.986785352230072}, "shared": {"value": false, "score": 2.682209014892578e-06}}, "references": [{"label": "(Holzworth et al. 2014", "normalizedForm": "(Holzworth et al. 2014", "refKey": 0}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyMLT", "normalizedForm": "CyMLT", "offsetStart": 43, "offsetEnd": 48}, "language": {"rawForm": "C++", "normalizedForm": "C++"}, "context": "The number of languages and platforms that CyMLT supports can be extended due to its modular structure. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.000133514404296875}, "created": {"value": false, "score": 0.003762483596801758}, "shared": {"value": false, "score": 2.2113323211669922e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9926429390907288}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.986687958240509}}}, {"type": "software", "software-type": "software", "wikidataId": "Q975594", "wikipediaExternalRef": 18384111, "lang": "en", "confidence": 0.7801, "software-name": {"rawForm": "Cython", "normalizedForm": "Cython", "wikidataId": "Q975594", "wikipediaExternalRef": 18384111, "lang": "en", "confidence": 0.7801, "offsetStart": 43, "offsetEnd": 49}, "context": "Therefore, we defined CyML as a sub-set of Cython to address the implementation of the model algorithm (Figure 1, right part). ", "mentionContextAttributes": {"used": {"value": true, "score": 0.7959325313568115}, "created": {"value": true, "score": 0.8886702656745911}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9448903203010559}, "created": {"value": true, "score": 0.9999222159385681}, "shared": {"value": false, "score": 2.8014183044433594e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 44, "offsetEnd": 48}, "context": "Thus, a set of methods is provided for each CyML datatype.", "mentionContextAttributes": {"used": {"value": false, "score": 0.004202365875244141}, "created": {"value": false, "score": 0.00013327598571777344}, "shared": {"value": false, "score": 1.7881393432617188e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 44, "offsetEnd": 48}, "context": "Thus, any code that can be implemented with CyML features can be transformed into different languages without associating specifications files.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00012129545211791992}, "created": {"value": false, "score": 0.0059850215911865234}, "shared": {"value": false, "score": 2.4437904357910156e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "wikidataId": "Q975594", "wikipediaExternalRef": 18384111, "lang": "en", "confidence": 0.7801, "software-name": {"rawForm": "Cython", "normalizedForm": "Cython", "wikidataId": "Q975594", "wikipediaExternalRef": 18384111, "lang": "en", "confidence": 0.7801, "offsetStart": 47, "offsetEnd": 53}, "context": "The design choice of CyML relies on the legacy Cython parser. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0004120469093322754}, "created": {"value": false, "score": 0.00035369396209716797}, "shared": {"value": false, "score": 4.172325134277344e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9448903203010559}, "created": {"value": true, "score": 0.9999222159385681}, "shared": {"value": false, "score": 2.8014183044433594e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "BioMAGenerator", "normalizedForm": "BioMAGenerator", "offsetStart": 48, "offsetEnd": 62}, "context": "For example, as BioMA uses the C# language, the BioMAGenerator class (i.e. the class that generates BioMA components) inherits the CsharpGenerator class that generates the source code in C#. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0064699649810791016}, "created": {"value": false, "score": 0.0001189112663269043}, "shared": {"value": false, "score": 2.682209014892578e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0064699649810791016}, "created": {"value": false, "score": 0.0001189112663269043}, "shared": {"value": false, "score": 2.682209014892578e-06}}}, {"type": "software", "software-type": "software", "wikidataId": "Q975594", "wikipediaExternalRef": 18384111, "lang": "en", "confidence": 0.7801, "software-name": {"rawForm": "Cython", "normalizedForm": "Cython", "wikidataId": "Q975594", "wikipediaExternalRef": 18384111, "lang": "en", "confidence": 0.7801, "offsetStart": 49, "offsetEnd": 55}, "context": "This parser uses all the syntactic components of Cython instead of a restricted grammar. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.002447783946990967}, "created": {"value": false, "score": 2.5212764739990234e-05}, "shared": {"value": false, "score": 4.172325134277344e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9448903203010559}, "created": {"value": true, "score": 0.9999222159385681}, "shared": {"value": false, "score": 2.8014183044433594e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 51, "offsetEnd": 55}, "context": "First, we present the design and implementation of CyML language and the one-to-many transformation workflow.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0001380443572998047}, "created": {"value": true, "score": 0.999914824962616}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "PowNode\u2016", "normalizedForm": "PowNode\u2016", "offsetStart": 52, "offsetEnd": 60}, "context": "For example, in Figure 4b the binary operator node -PowNode\u2016 is transformed in Figure 4c  Platform Generation. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.01234591007232666}, "created": {"value": false, "score": 5.662441253662109e-06}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.01234591007232666}, "created": {"value": false, "score": 5.662441253662109e-06}, "shared": {"value": false, "score": 2.980232238769531e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CodeGenerator", "normalizedForm": "CodeGenerator", "offsetStart": 53, "offsetEnd": 66}, "context": "A LanguageGenerator class also inherits two classes: CodeGenerator and LanguageRule.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0011946558952331543}, "created": {"value": false, "score": 0.000751495361328125}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.02700108289718628}, "created": {"value": false, "score": 0.00818932056427002}, "shared": {"value": false, "score": 9.059906005859375e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "STICS", "normalizedForm": "STICS", "offsetStart": 53, "offsetEnd": 80}, "context": "DSSAT (Jones et al. 2003;Hoogenboom et al. 2019) and STICS (Brisson et al. 1998) provide generic crop modules in Fortran with a procedural approach that can be specialized for different species. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0001690387725830078}, "created": {"value": false, "score": 0.00011974573135375977}, "shared": {"value": false, "score": 4.172325134277344e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0005155205726623535}, "created": {"value": false, "score": 0.012453317642211914}, "shared": {"value": false, "score": 2.682209014892578e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 54, "offsetEnd": 58}, "context": "This means that coding an existing model algorithm in CyML could require an additional CyML external function to emulate the properties of these objects.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00256425142288208}, "created": {"value": false, "score": 0.0018059611320495605}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LanguageGenerator", "normalizedForm": "LanguageGenerator", "offsetStart": 54, "offsetEnd": 71}, "context": "It means that a sub-class of PlatformGenerator and of LanguageGenerator class have been implemented for each supported platform and language.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0018559694290161133}, "created": {"value": false, "score": 0.03530383110046387}, "shared": {"value": false, "score": 7.748603820800781e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.02700108289718628}, "created": {"value": false, "score": 0.06392449140548706}, "shared": {"value": false, "score": 7.748603820800781e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "OpenAlea", "normalizedForm": "OpenAlea", "offsetStart": 54, "offsetEnd": 106}, "context": "Multilanguage and integrated modeling frameworks like OpenAlea (Pradal et al. 2008(Pradal et al. , 2015) ) and yggdrasil (Lang 2019) offer a language binding approach to provide third-party developers with a choice of languages (Villa 2001;Lang 2019). ", "mentionContextAttributes": {"used": {"value": false, "score": 5.78761100769043e-05}, "created": {"value": false, "score": 0.001993417739868164}, "shared": {"value": false, "score": 1.1026859283447266e-05}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0005155205726623535}, "created": {"value": false, "score": 0.2043190598487854}, "shared": {"value": false, "score": 1.2576580047607422e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 55, "offsetEnd": 59}, "context": "In Fortran, CyMLT generates allocable arrays to map to CyML list data types and provides some functions to handle it.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00013709068298339844}, "created": {"value": false, "score": 0.0006895661354064941}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "DSSAT", "normalizedForm": "DSSAT", "offsetStart": 55, "offsetEnd": 60}, "context": "The Fortran code generated by CyMLT is compatible with DSSAT.", "mentionContextAttributes": {"used": {"value": false, "score": 0.012733817100524902}, "created": {"value": false, "score": 5.644559860229492e-05}, "shared": {"value": false, "score": 1.0132789611816406e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.012733817100524902}, "created": {"value": false, "score": 0.11902010440826416}, "shared": {"value": false, "score": 2.682209014892578e-06}}, "references": [{"label": "(Jones et al. 2003;", "normalizedForm": "(Jones et al. 2003", "refKey": 33}, {"label": "Hoogenboom et al. 2019)", "normalizedForm": "Hoogenboom et al. 2019)", "refKey": 31}, {"label": "(Jones et al. 2003;", "normalizedForm": "(Jones et al. 2003", "refKey": 33}, {"label": "Hoogenboom et al. 2019)", "normalizedForm": "Hoogenboom et al. 2019)", "refKey": 31}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyMLT", "normalizedForm": "CyMLT", "offsetStart": 57, "offsetEnd": 62}, "language": {"rawForm": "C++", "normalizedForm": "C++"}, "context": "We propose to use the Numpy array in the next version of CyMLT. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0010810494422912598}, "created": {"value": false, "score": 0.03530621528625488}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9926429390907288}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.986687958240509}}}, {"type": "software", "software-type": "software", "wikidataId": "Q975594", "wikipediaExternalRef": 18384111, "lang": "en", "confidence": 0.7801, "software-name": {"rawForm": "Cython", "normalizedForm": "Cython", "wikidataId": "Q975594", "wikipediaExternalRef": 18384111, "lang": "en", "confidence": 0.7801, "offsetStart": 58, "offsetEnd": 64}, "context": "In this study, we defined a minimal language based on the Cython language to implement biophysical processes involved in plant and crop growth and development.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0014033317565917969}, "created": {"value": true, "score": 0.999637246131897}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9448903203010559}, "created": {"value": true, "score": 0.9999222159385681}, "shared": {"value": false, "score": 2.8014183044433594e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 59, "offsetEnd": 63}, "context": "For example, the construct of a modulo binary operation in CyML is a standard_call node in the ASG whose namespace is system, the function is modulo and the arguments are the two operands.", "mentionContextAttributes": {"used": {"value": false, "score": 0.02980637550354004}, "created": {"value": false, "score": 0.00010663270950317383}, "shared": {"value": false, "score": 5.364418029785156e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "OpenAlea", "normalizedForm": "OpenAlea", "offsetStart": 61, "offsetEnd": 69}, "context": "However, model specifications need to be transformed into an OpenAlea component specification for unit and composite node (Pradal et al. 2008). ", "mentionContextAttributes": {"used": {"value": false, "score": 0.00027942657470703125}, "created": {"value": false, "score": 0.0013397932052612305}, "shared": {"value": false, "score": 1.2516975402832031e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0005155205726623535}, "created": {"value": false, "score": 0.2043190598487854}, "shared": {"value": false, "score": 1.2576580047607422e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WOFOST Control Centre (WCC)", "normalizedForm": "WOFOST Control Centre (WCC)", "offsetStart": 63, "offsetEnd": 90}, "language": {"rawForm": "Python", "normalizedForm": "Python", "wikidataId": "Q28865", "offsetStart": 213, "offsetEnd": 219}, "context": "For example, the WOFOST model is implemented in Fortran in the WOFOST Control Centre (WCC) package, in Python in the Python Crop Simulation Environment framework, in Java in the Wageningen Integrated Systems Simulator framework (WISS), in C# in the Biophysical Models Application (BioMA) framework, and in C++ in the Crop Growth Monitoring System (CGMS) (de Wit et al. 2019;van Kraalingen et al. 2020).", "mentionContextAttributes": {"used": {"value": true, "score": 0.8775269389152527}, "created": {"value": false, "score": 3.8683414459228516e-05}, "shared": {"value": false, "score": 2.3245811462402344e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.8775269389152527}, "created": {"value": false, "score": 3.8683414459228516e-05}, "shared": {"value": false, "score": 2.3245811462402344e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyMLT", "normalizedForm": "CyMLT", "offsetStart": 65, "offsetEnd": 70}, "language": {"rawForm": "C++", "normalizedForm": "C++"}, "context": "In addition to the programming paradigms, languages supported by CyMLT can be classified by their type system, in particular their type expression (explicit or implicit). ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0005644559860229492}, "created": {"value": false, "score": 0.00047343969345092773}, "shared": {"value": false, "score": 4.172325134277344e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9926429390907288}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.986687958240509}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "BioMA", "normalizedForm": "BioMA", "offsetStart": 66, "offsetEnd": 71}, "context": "For instance, model components in PMF (APSIM next generation) and BioMA are written in C# in both platforms but the reuse of PMF components in BioMA (and vice versa) can only be done at the level of binaries, and, therefore, as black boxes.", "mentionContextAttributes": {"used": {"value": false, "score": 0.004515290260314941}, "created": {"value": false, "score": 9.304285049438477e-05}, "shared": {"value": false, "score": 5.364418029785156e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.877527117729187}, "created": {"value": false, "score": 0.012453317642211914}, "shared": {"value": false, "score": 2.682209014892578e-06}}, "references": [{"label": "(Donatelli et al. 2010", "normalizedForm": "(Donatelli et al. 2010", "refKey": 19}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 68, "offsetEnd": 72}, "context": "Most of the target languages provide built-in methods matching with CyML built-in functions.", "mentionContextAttributes": {"used": {"value": false, "score": 5.728006362915039e-05}, "created": {"value": false, "score": 4.7266483306884766e-05}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 68, "offsetEnd": 72}, "context": "Standard methods are functions applied to a particular data type of CyML language (Listing 13).", "mentionContextAttributes": {"used": {"value": false, "score": 0.0013216733932495117}, "created": {"value": false, "score": 4.965066909790039e-05}, "shared": {"value": false, "score": 1.7881393432617188e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LanguageGenerator", "normalizedForm": "LanguageGenerator", "offsetStart": 68, "offsetEnd": 85}, "context": "Likewise, the Model object generated by the model parser is used in LanguageGenerator to generate the model interface with accessor and mutator methods for objectoriented languages, or to add additional semantics to variables based on platform conventions. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.004715442657470703}, "created": {"value": false, "score": 0.0001678466796875}, "shared": {"value": false, "score": 7.748603820800781e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.02700108289718628}, "created": {"value": false, "score": 0.06392449140548706}, "shared": {"value": false, "score": 7.748603820800781e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LanguageGenerator", "normalizedForm": "LanguageGenerator", "offsetStart": 68, "offsetEnd": 85}, "context": "A PlatformGenerator class inherits attributes and properties of the LanguageGenerator class related to the language used by the platform.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0021781325340270996}, "created": {"value": false, "score": 0.0004035830497741699}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.02700108289718628}, "created": {"value": false, "score": 0.06392449140548706}, "shared": {"value": false, "score": 7.748603820800781e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyMLT", "normalizedForm": "CyMLT", "offsetStart": 69, "offsetEnd": 74}, "language": {"rawForm": "C++", "normalizedForm": "C++"}, "context": "This separation of model specification from model algorithm enhances CyMLT to transform a model algorithm from a procedural approach to an object-oriented approach with different software designs. ", "mentionContextAttributes": {"used": {"value": false, "score": 4.5359134674072266e-05}, "created": {"value": false, "score": 0.0027042031288146973}, "shared": {"value": false, "score": 7.748603820800781e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9926429390907288}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.986687958240509}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 70, "offsetEnd": 74}, "context": "It means that errors related to overflow could not be detected at the CyML system level.", "mentionContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": false, "score": 3.129243850708008e-05}, "shared": {"value": false, "score": 1.7881393432617188e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LanguageGenerator", "normalizedForm": "LanguageGenerator", "offsetStart": 70, "offsetEnd": 87}, "context": "The CodeGenerator class contains the factorized methods shared by all LanguageGenerator classes including the method used for code emitting and code formatting.", "mentionContextAttributes": {"used": {"value": false, "score": 0.02700108289718628}, "created": {"value": false, "score": 6.562471389770508e-05}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.02700108289718628}, "created": {"value": false, "score": 0.06392449140548706}, "shared": {"value": false, "score": 7.748603820800781e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 71, "offsetEnd": 75}, "context": "It is useful for model developers to observe the generated ASG of each CyML construct in order to define the equivalent of the construct.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0018206238746643066}, "created": {"value": false, "score": 0.002391517162322998}, "shared": {"value": false, "score": 1.7881393432617188e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LanguageRule", "normalizedForm": "LanguageRule", "offsetStart": 71, "offsetEnd": 83}, "context": "A LanguageGenerator class also inherits two classes: CodeGenerator and LanguageRule.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0011946558952331543}, "created": {"value": false, "score": 0.000751495361328125}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.04992640018463135}, "created": {"value": false, "score": 0.000751495361328125}, "shared": {"value": false, "score": 2.980232238769531e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 73, "offsetEnd": 77}, "context": "Crop modelers should have some programming skill to implement a model in CyML but no other skills are needed to produce automatically a model component source code in various languages and platforms.", "mentionContextAttributes": {"used": {"value": false, "score": 9.042024612426758e-05}, "created": {"value": false, "score": 0.00016832351684570312}, "shared": {"value": false, "score": 5.066394805908203e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "wikidataId": "Q975594", "wikipediaExternalRef": 18384111, "lang": "en", "confidence": 0.7801, "software-name": {"rawForm": "Cython", "normalizedForm": "Cython", "wikidataId": "Q975594", "wikipediaExternalRef": 18384111, "lang": "en", "confidence": 0.7801, "offsetStart": 73, "offsetEnd": 79}, "context": "This involves removing undesirable syntactic or/and semantic features of Cython that may not be easily transformed into many different languages or are not required to implement PBM algorithms.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00015425682067871094}, "created": {"value": false, "score": 0.0010953545570373535}, "shared": {"value": false, "score": 5.364418029785156e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9448903203010559}, "created": {"value": true, "score": 0.9999222159385681}, "shared": {"value": false, "score": 2.8014183044433594e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "NodeVisitor", "normalizedForm": "NodeVisitor", "offsetStart": 73, "offsetEnd": 84}, "context": "This class inherits the super class of the transformation process called NodeVisitor.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00037425756454467773}, "created": {"value": false, "score": 0.03378403186798096}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.6896926760673523}, "created": {"value": false, "score": 0.21518927812576294}, "shared": {"value": false, "score": 4.172325134277344e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "OpenAlea", "normalizedForm": "OpenAlea", "offsetStart": 79, "offsetEnd": 87}, "context": "OpenAlea offers capabilities to benefit of oriented-object features of Python, OpenAlea components can be defined as pure Python functions, already generated by CyMLT. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.00028574466705322266}, "created": {"value": false, "score": 0.2043190598487854}, "shared": {"value": false, "score": 1.2576580047607422e-05}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0005155205726623535}, "created": {"value": false, "score": 0.2043190598487854}, "shared": {"value": false, "score": 1.2576580047607422e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LanguageRule", "normalizedForm": "LanguageRule", "offsetStart": 80, "offsetEnd": 92}, "context": "Before emitting the code fragment, some nodes undergo a transformation from the LanguageRule class. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.04992640018463135}, "created": {"value": false, "score": 6.03795051574707e-05}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.04992640018463135}, "created": {"value": false, "score": 0.000751495361328125}, "shared": {"value": false, "score": 2.980232238769531e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Haxe", "normalizedForm": "Haxe", "offsetStart": 82, "offsetEnd": 86}, "context": "Their system is based on Haxe, a language that offers the capability to transform Haxe code into many programming languages. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.00018024444580078125}, "created": {"value": true, "score": 0.6758756637573242}, "shared": {"value": false, "score": 1.2516975402832031e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.00018024444580078125}, "created": {"value": true, "score": 0.6758756637573242}, "shared": {"value": false, "score": 1.2516975402832031e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyMLT", "normalizedForm": "CyMLT", "offsetStart": 85, "offsetEnd": 90}, "language": {"rawForm": "C++", "normalizedForm": "C++"}, "context": "The knowledge of platform requirements offers the possibility to integrate them into CyMLT in order to make their components available to many modeling platforms. ", "mentionContextAttributes": {"used": {"value": false, "score": 8.660554885864258e-05}, "created": {"value": false, "score": 0.03180736303329468}, "shared": {"value": false, "score": 0.0013047456741333008}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9926429390907288}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.986687958240509}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "DSSAT", "normalizedForm": "DSSAT", "offsetStart": 85, "offsetEnd": 90}, "context": "CyMLT is also able to generate model components to target modeling platforms such as DSSAT, BioMA, Record, SIMPLACE and OpenAlea.", "mentionContextAttributes": {"used": {"value": false, "score": 4.750490188598633e-05}, "created": {"value": false, "score": 0.0007250308990478516}, "shared": {"value": false, "score": 6.556510925292969e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.012733817100524902}, "created": {"value": false, "score": 0.11902010440826416}, "shared": {"value": false, "score": 2.682209014892578e-06}}, "references": [{"label": "(Jones et al. 2003;", "normalizedForm": "(Jones et al. 2003", "refKey": 33}, {"label": "Hoogenboom et al. 2019)", "normalizedForm": "Hoogenboom et al. 2019)", "refKey": 31}, {"label": "(Jones et al. 2003;", "normalizedForm": "(Jones et al. 2003", "refKey": 33}, {"label": "Hoogenboom et al. 2019)", "normalizedForm": "Hoogenboom et al. 2019)", "refKey": 31}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyMLT", "normalizedForm": "CyMLT", "offsetStart": 86, "offsetEnd": 91}, "language": {"rawForm": "C++", "normalizedForm": "C++"}, "context": "We demonstrate our reuse approach with a simple unit model and the capacity to extend CyMLT with other languages and platforms. ", "mentionContextAttributes": {"used": {"value": true, "score": 0.7937672138214111}, "created": {"value": true, "score": 0.9997920989990234}, "shared": {"value": false, "score": 1.1324882507324219e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9926429390907288}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.986687958240509}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 87, "offsetEnd": 91}, "context": "This means that coding an existing model algorithm in CyML could require an additional CyML external function to emulate the properties of these objects.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00256425142288208}, "created": {"value": false, "score": 0.0018059611320495605}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "DSSAT", "normalizedForm": "DSSAT", "offsetStart": 88, "offsetEnd": 93}, "context": "CyMLT is also able to directly generate components to target modeling platforms such as DSSAT, BioMA, Record, SIMPLACE and OpenAlea.", "mentionContextAttributes": {"used": {"value": false, "score": 6.967782974243164e-05}, "created": {"value": false, "score": 0.0007743239402770996}, "shared": {"value": false, "score": 1.6093254089355469e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.012733817100524902}, "created": {"value": false, "score": 0.11902010440826416}, "shared": {"value": false, "score": 2.682209014892578e-06}}, "references": [{"label": "(Jones et al. 2003;", "normalizedForm": "(Jones et al. 2003", "refKey": 33}, {"label": "Hoogenboom et al. 2019)", "normalizedForm": "Hoogenboom et al. 2019)", "refKey": 31}, {"label": "(Jones et al. 2003;", "normalizedForm": "(Jones et al. 2003", "refKey": 33}, {"label": "Hoogenboom et al. 2019)", "normalizedForm": "Hoogenboom et al. 2019)", "refKey": 31}]}, {"type": "software", "software-type": "implicit", "software-name": {"rawForm": "code", "normalizedForm": "code", "offsetStart": 89, "offsetEnd": 93}, "language": {"rawForm": "R", "normalizedForm": "R"}, "context": "Given that the CyML language is similar to Python, it is straightforward to yield Python code through one ASG traversal. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.007881104946136475}, "created": {"value": false, "score": 0.00014138221740722656}, "shared": {"value": false, "score": 5.364418029785156e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.6896926760673523}, "created": {"value": false, "score": 0.21518927812576294}, "shared": {"value": false, "score": 5.364418029785156e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 89, "offsetEnd": 93}, "context": "Moreover, since time is an important variable in the defintion of discrete-time process, CyML provides datetime types in terms of year, month, day, hour, minute and second.", "mentionContextAttributes": {"used": {"value": false, "score": 3.11732292175293e-05}, "created": {"value": false, "score": 7.516145706176758e-05}, "shared": {"value": false, "score": 6.556510925292969e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 90, "offsetEnd": 94}, "context": "Explicit static typing is enforced by the semantic analysis step illustrated in Figure 2. CyML supports basic types (e.g.", "mentionContextAttributes": {"used": {"value": false, "score": 8.994340896606445e-05}, "created": {"value": false, "score": 1.0192394256591797e-05}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 92, "offsetEnd": 96}, "context": "We also propose CyMLT, an extensible source-to-source transformation system that transforms CyML source code into different target languages such as Fortran, C#, C++, Java and Python, and into different programming paradigms.", "mentionContextAttributes": {"used": {"value": false, "score": 9.137392044067383e-05}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": false, "score": 3.0338764190673828e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "BioMA", "normalizedForm": "BioMA", "offsetStart": 92, "offsetEnd": 97}, "context": "CyMLT is also able to generate model components to target modeling platforms such as DSSAT, BioMA, Record, SIMPLACE and OpenAlea.", "mentionContextAttributes": {"used": {"value": false, "score": 4.750490188598633e-05}, "created": {"value": false, "score": 0.0007250308990478516}, "shared": {"value": false, "score": 6.556510925292969e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.877527117729187}, "created": {"value": false, "score": 0.012453317642211914}, "shared": {"value": false, "score": 2.682209014892578e-06}}, "references": [{"label": "(Donatelli et al. 2010", "normalizedForm": "(Donatelli et al. 2010", "refKey": 19}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "BioMA", "normalizedForm": "BioMA", "offsetStart": 92, "offsetEnd": 97}, "context": "For example, the crop modeling frameworks APSIM Next Generation (Holzworth et al. 2018) and BioMA (Donatelli et al. 2010) are based on component-oriented techniques and require models to be developed in C#.", "mentionContextAttributes": {"used": {"value": false, "score": 9.626150131225586e-05}, "created": {"value": false, "score": 0.002009451389312744}, "shared": {"value": false, "score": 4.172325134277344e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.877527117729187}, "created": {"value": false, "score": 0.012453317642211914}, "shared": {"value": false, "score": 2.682209014892578e-06}}, "references": [{"label": "(Donatelli et al. 2010", "normalizedForm": "(Donatelli et al. 2010", "refKey": 19, "offsetStart": 4260, "offsetEnd": 4282}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "BioMA", "normalizedForm": "BioMA", "offsetStart": 95, "offsetEnd": 100}, "context": "CyMLT is also able to directly generate components to target modeling platforms such as DSSAT, BioMA, Record, SIMPLACE and OpenAlea.", "mentionContextAttributes": {"used": {"value": false, "score": 6.967782974243164e-05}, "created": {"value": false, "score": 0.0007743239402770996}, "shared": {"value": false, "score": 1.6093254089355469e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.877527117729187}, "created": {"value": false, "score": 0.012453317642211914}, "shared": {"value": false, "score": 2.682209014892578e-06}}, "references": [{"label": "(Donatelli et al. 2010", "normalizedForm": "(Donatelli et al. 2010", "refKey": 19}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyMLT", "normalizedForm": "CyMLT", "offsetStart": 100, "offsetEnd": 105}, "language": {"rawForm": "C++", "normalizedForm": "C++"}, "context": "CyML users can implement a model in CyML and transform the algorithms into various targets by using CyMLT. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.00014519691467285156}, "created": {"value": false, "score": 0.006279706954956055}, "shared": {"value": false, "score": 4.172325134277344e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9926429390907288}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.986687958240509}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "BioMA", "normalizedForm": "BioMA", "offsetStart": 100, "offsetEnd": 105}, "context": "For example, as BioMA uses the C# language, the BioMAGenerator class (i.e. the class that generates BioMA components) inherits the CsharpGenerator class that generates the source code in C#.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0064699649810791016}, "created": {"value": false, "score": 0.0001189112663269043}, "shared": {"value": false, "score": 2.682209014892578e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.877527117729187}, "created": {"value": false, "score": 0.012453317642211914}, "shared": {"value": false, "score": 2.682209014892578e-06}}, "references": [{"label": "(Donatelli et al. 2010", "normalizedForm": "(Donatelli et al. 2010", "refKey": 19}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Simplace", "normalizedForm": "Simplace", "offsetStart": 100, "offsetEnd": 108}, "context": "DSSAT, BioMA, OpenAlea) whereas others extend their language with a high-level specificity (Record, Simplace) that requires a complex transformation.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00013327598571777344}, "created": {"value": false, "score": 5.072355270385742e-05}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.003706991672515869}, "created": {"value": false, "score": 0.012453317642211914}, "shared": {"value": false, "score": 2.682209014892578e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "APSIM", "normalizedForm": "APSIM", "offsetStart": 101, "offsetEnd": 106}, "context": "AMEI brings together some of the most widely used crop modelling and simulation platforms, including APSIM, BioMA, DSSAT, OpenAlea, RECORD, Simplace and other crop models such as STICS and SiriusQuality (Martre et al. 2006) The vision of AMEI is to (i) increase capabilities and responsiveness to model developers' needs; (ii) use modular modelling to share knowledge and rapidly develop operational tools; (iii) reuse model parts to leverage the expertise of third parties; (iv) renovate legacy code; and (v) realize the benefit of sharing and complementing different expertise.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0005155205726623535}, "created": {"value": false, "score": 0.012453317642211914}, "shared": {"value": false, "score": 2.682209014892578e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.004515290260314941}, "created": {"value": true, "score": 0.986785352230072}, "shared": {"value": false, "score": 2.682209014892578e-06}}, "references": [{"label": "(Holzworth et al. 2014", "normalizedForm": "(Holzworth et al. 2014", "refKey": 0}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyMLT", "normalizedForm": "CyMLT", "offsetStart": 101, "offsetEnd": 106}, "language": {"rawForm": "C++", "normalizedForm": "C++", "wikidataId": "Q2407", "offsetStart": 118, "offsetEnd": 121}, "context": "Listing 6. CyML code of a function that computes the sum of the elements of a list transformed using CyMLT in Python, C++, C#, Java, and Fortran.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00041872262954711914}, "created": {"value": false, "score": 3.260374069213867e-05}, "shared": {"value": false, "score": 8.940696716308594e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9926429390907288}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.986687958240509}}}, {"type": "software", "software-type": "software", "wikidataId": "Q975594", "wikipediaExternalRef": 18384111, "lang": "en", "confidence": 0.7801, "software-name": {"rawForm": "Cython", "normalizedForm": "Cython", "wikidataId": "Q975594", "wikipediaExternalRef": 18384111, "lang": "en", "confidence": 0.7801, "offsetStart": 106, "offsetEnd": 132}, "context": "Therefore, we proposed to add an explicit type declaration to the Python language, which led us to choose Cython (Behnel et al. 2000). ", "mentionContextAttributes": {"used": {"value": true, "score": 0.9448903203010559}, "created": {"value": true, "score": 0.952930748462677}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9448903203010559}, "created": {"value": true, "score": 0.9999222159385681}, "shared": {"value": false, "score": 2.8014183044433594e-06}}}, {"type": "software", "software-type": "software", "wikidataId": "Q975594", "wikipediaExternalRef": 18384111, "lang": "en", "confidence": 0.7801, "software-name": {"rawForm": "Cython", "normalizedForm": "Cython", "wikidataId": "Q975594", "wikipediaExternalRef": 18384111, "lang": "en", "confidence": 0.7801, "offsetStart": 107, "offsetEnd": 113}, "context": "Indeed, this language limitation reduces ambiguity in the language transformation since the base language (Cython) has some features that cannot be transformed into some target languages.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00028502941131591797}, "created": {"value": false, "score": 0.0003625154495239258}, "shared": {"value": false, "score": 8.940696716308594e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9448903203010559}, "created": {"value": true, "score": 0.9999222159385681}, "shared": {"value": false, "score": 2.8014183044433594e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "BioMA", "normalizedForm": "BioMA", "offsetStart": 108, "offsetEnd": 113}, "context": "AMEI brings together some of the most widely used crop modelling and simulation platforms, including APSIM, BioMA, DSSAT, OpenAlea, RECORD, Simplace and other crop models such as STICS and SiriusQuality (Martre et al. 2006) The vision of AMEI is to (i) increase capabilities and responsiveness to model developers' needs; (ii) use modular modelling to share knowledge and rapidly develop operational tools; (iii) reuse model parts to leverage the expertise of third parties; (iv) renovate legacy code; and (v) realize the benefit of sharing and complementing different expertise.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0005155205726623535}, "created": {"value": false, "score": 0.012453317642211914}, "shared": {"value": false, "score": 2.682209014892578e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.877527117729187}, "created": {"value": false, "score": 0.012453317642211914}, "shared": {"value": false, "score": 2.682209014892578e-06}}, "references": [{"label": "(Donatelli et al. 2010", "normalizedForm": "(Donatelli et al. 2010", "refKey": 19}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LanguageGenerator", "normalizedForm": "LanguageGenerator", "offsetStart": 108, "offsetEnd": 125}, "context": "During traversal, the appropriate visitor method corresponding to the type of the current node is called in LanguageGenerator or PlatformGenerator and the associated code fragment is emitted. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.02056974172592163}, "created": {"value": false, "score": 2.4616718292236328e-05}, "shared": {"value": false, "score": 1.7881393432617188e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.02700108289718628}, "created": {"value": false, "score": 0.06392449140548706}, "shared": {"value": false, "score": 7.748603820800781e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 109, "offsetEnd": 113}, "context": "The availability of CyMLT through AMEI will allow building a large community around this system and can make CyML a standard language providing a means to seamlessly compare independent biophysical processes or promote alternatives approaches.", "mentionContextAttributes": {"used": {"value": false, "score": 7.659196853637695e-05}, "created": {"value": false, "score": 0.0071520209312438965}, "shared": {"value": false, "score": 1.9848346710205078e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 109, "offsetEnd": 113}, "context": "The association of model specifications in XML-based format with the description of model algorithm based on CyML specifications allows to annotate each variable used in the algorithm.", "mentionContextAttributes": {"used": {"value": false, "score": 0.002117931842803955}, "created": {"value": false, "score": 0.0002751350402832031}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyMLT", "normalizedForm": "CyMLT", "offsetStart": 115, "offsetEnd": 120}, "language": {"rawForm": "C++", "normalizedForm": "C++"}, "context": "Although CyML provides a procedural mechanism to implement model algorithm, the programming languages supported by CyMLT can be classified in procedural and object-oriented programming paradigms. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.00010281801223754883}, "created": {"value": false, "score": 0.003949880599975586}, "shared": {"value": false, "score": 1.8477439880371094e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9926429390907288}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.986687958240509}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "DSSAT", "normalizedForm": "DSSAT", "offsetStart": 115, "offsetEnd": 120}, "context": "AMEI brings together some of the most widely used crop modelling and simulation platforms, including APSIM, BioMA, DSSAT, OpenAlea, RECORD, Simplace and other crop models such as STICS and SiriusQuality (Martre et al. 2006) The vision of AMEI is to (i) increase capabilities and responsiveness to model developers' needs; (ii) use modular modelling to share knowledge and rapidly develop operational tools; (iii) reuse model parts to leverage the expertise of third parties; (iv) renovate legacy code; and (v) realize the benefit of sharing and complementing different expertise.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0005155205726623535}, "created": {"value": false, "score": 0.012453317642211914}, "shared": {"value": false, "score": 2.682209014892578e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.012733817100524902}, "created": {"value": false, "score": 0.11902010440826416}, "shared": {"value": false, "score": 2.682209014892578e-06}}, "references": [{"label": "(Jones et al. 2003;", "normalizedForm": "(Jones et al. 2003", "refKey": 33}, {"label": "Hoogenboom et al. 2019)", "normalizedForm": "Hoogenboom et al. 2019)", "refKey": 31}, {"label": "(Jones et al. 2003;", "normalizedForm": "(Jones et al. 2003", "refKey": 33}, {"label": "Hoogenboom et al. 2019)", "normalizedForm": "Hoogenboom et al. 2019)", "refKey": 31}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 119, "offsetEnd": 123}, "context": "Thus, the visit_bool method allowing generation of the corresponding boolean value in R will only consist in uppercase CyML logical value (Listing 14).", "mentionContextAttributes": {"used": {"value": false, "score": 0.0264204740524292}, "created": {"value": false, "score": 3.993511199951172e-06}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "OpenAlea", "normalizedForm": "OpenAlea", "offsetStart": 120, "offsetEnd": 128}, "context": "CyMLT is also able to generate model components to target modeling platforms such as DSSAT, BioMA, Record, SIMPLACE and OpenAlea.", "mentionContextAttributes": {"used": {"value": false, "score": 4.750490188598633e-05}, "created": {"value": false, "score": 0.0007250308990478516}, "shared": {"value": false, "score": 6.556510925292969e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0005155205726623535}, "created": {"value": false, "score": 0.2043190598487854}, "shared": {"value": false, "score": 1.2576580047607422e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "OpenAlea", "normalizedForm": "OpenAlea", "offsetStart": 122, "offsetEnd": 130}, "context": "AMEI brings together some of the most widely used crop modelling and simulation platforms, including APSIM, BioMA, DSSAT, OpenAlea, RECORD, Simplace and other crop models such as STICS and SiriusQuality (Martre et al. 2006) The vision of AMEI is to (i) increase capabilities and responsiveness to model developers' needs; (ii) use modular modelling to share knowledge and rapidly develop operational tools; (iii) reuse model parts to leverage the expertise of third parties; (iv) renovate legacy code; and (v) realize the benefit of sharing and complementing different expertise.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0005155205726623535}, "created": {"value": false, "score": 0.012453317642211914}, "shared": {"value": false, "score": 2.682209014892578e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0005155205726623535}, "created": {"value": false, "score": 0.2043190598487854}, "shared": {"value": false, "score": 1.2576580047607422e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "OpenAlea", "normalizedForm": "OpenAlea", "offsetStart": 123, "offsetEnd": 131}, "context": "CyMLT is also able to directly generate components to target modeling platforms such as DSSAT, BioMA, Record, SIMPLACE and OpenAlea.", "mentionContextAttributes": {"used": {"value": false, "score": 6.967782974243164e-05}, "created": {"value": false, "score": 0.0007743239402770996}, "shared": {"value": false, "score": 1.6093254089355469e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0005155205726623535}, "created": {"value": false, "score": 0.2043190598487854}, "shared": {"value": false, "score": 1.2576580047607422e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "PlatformGenerator", "normalizedForm": "PlatformGenerator", "offsetStart": 129, "offsetEnd": 146}, "context": "During traversal, the appropriate visitor method corresponding to the type of the current node is called in LanguageGenerator or PlatformGenerator and the associated code fragment is emitted. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.02056974172592163}, "created": {"value": false, "score": 2.4616718292236328e-05}, "shared": {"value": false, "score": 1.7881393432617188e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.02056974172592163}, "created": {"value": false, "score": 0.03530383110046387}, "shared": {"value": false, "score": 7.748603820800781e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyMLT", "normalizedForm": "CyMLT", "offsetStart": 130, "offsetEnd": 135}, "language": {"rawForm": "C++", "normalizedForm": "C++"}, "context": "Then we demonstrate the use of CyML and for a simple model component, which simulates wheat shoot number and the extensibility of CyMLT to new languages or simulation platforms. ", "mentionContextAttributes": {"used": {"value": true, "score": 0.9926429390907288}, "created": {"value": true, "score": 0.8420165181159973}, "shared": {"value": false, "score": 1.7881393432617188e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9926429390907288}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.986687958240509}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 134, "offsetEnd": 138}, "context": "To restrict Cython grammar, the generated Cython AST is processed to ensure that it incorporates only syntactic components defined in CyML.", "mentionContextAttributes": {"used": {"value": false, "score": 0.09611278772354126}, "created": {"value": false, "score": 4.738569259643555e-05}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 134, "offsetEnd": 138}, "context": "This class is implemented for each language as a mapping where keys corresponds to the different methods, datatypes, and operators of CyML, and values are their emulation in target languages provided from their standard libraries (Supporting Information Table S1 to S5).", "mentionContextAttributes": {"used": {"value": false, "score": 0.003602266311645508}, "created": {"value": false, "score": 0.0011696219444274902}, "shared": {"value": false, "score": 4.172325134277344e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 135, "offsetEnd": 139}, "context": "phenology, soil water balance, photosynthesis) can be decomposed into independent components, which can be implemented and composed in CyML.", "mentionContextAttributes": {"used": {"value": false, "score": 8.577108383178711e-05}, "created": {"value": false, "score": 0.020172059535980225}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Simplace", "normalizedForm": "Simplace", "offsetStart": 140, "offsetEnd": 148}, "context": "AMEI brings together some of the most widely used crop modelling and simulation platforms, including APSIM, BioMA, DSSAT, OpenAlea, RECORD, Simplace and other crop models such as STICS and SiriusQuality (Martre et al. 2006) The vision of AMEI is to (i) increase capabilities and responsiveness to model developers' needs; (ii) use modular modelling to share knowledge and rapidly develop operational tools; (iii) reuse model parts to leverage the expertise of third parties; (iv) renovate legacy code; and (v) realize the benefit of sharing and complementing different expertise.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0005155205726623535}, "created": {"value": false, "score": 0.012453317642211914}, "shared": {"value": false, "score": 2.682209014892578e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.003706991672515869}, "created": {"value": false, "score": 0.012453317642211914}, "shared": {"value": false, "score": 2.682209014892578e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "BioMA", "normalizedForm": "BioMA", "offsetStart": 143, "offsetEnd": 148}, "context": "For instance, model components in PMF (APSIM next generation) and BioMA are written in C# in both platforms but the reuse of PMF components in BioMA (and vice versa) can only be done at the level of binaries, and, therefore, as black boxes.", "mentionContextAttributes": {"used": {"value": false, "score": 0.004515290260314941}, "created": {"value": false, "score": 9.304285049438477e-05}, "shared": {"value": false, "score": 5.364418029785156e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.877527117729187}, "created": {"value": false, "score": 0.012453317642211914}, "shared": {"value": false, "score": 2.682209014892578e-06}}, "references": [{"label": "(Donatelli et al. 2010", "normalizedForm": "(Donatelli et al. 2010", "refKey": 19}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "NodeVisitor", "normalizedForm": "NodeVisitor", "offsetStart": 143, "offsetEnd": 154}, "context": "The developer of the R code generator implemented the different visit methods without bothering with the dispatching mechanism provided by the NodeVisitor class. ", "mentionContextAttributes": {"used": {"value": true, "score": 0.6896926760673523}, "created": {"value": false, "score": 0.21518927812576294}, "shared": {"value": false, "score": 1.7881393432617188e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.6896926760673523}, "created": {"value": false, "score": 0.21518927812576294}, "shared": {"value": false, "score": 4.172325134277344e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyMLT", "normalizedForm": "CyMLT", "offsetStart": 147, "offsetEnd": 152}, "language": {"rawForm": "C++", "normalizedForm": "C++"}, "context": "The definition of these rules limits the use of conditional statements in the implementation of the visit methods and facilitates the extension of CyMLT.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0011537671089172363}, "created": {"value": false, "score": 0.000910639762878418}, "shared": {"value": false, "score": 4.172325134277344e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9926429390907288}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.986687958240509}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 148, "offsetEnd": 152}, "context": "As an example, consider the statement at  Some languages like Java, C++ and C# manage variable scope differently and this variability is handled by CyML.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0023071765899658203}, "created": {"value": false, "score": 1.8656253814697266e-05}, "shared": {"value": false, "score": 5.364418029785156e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 155, "offsetEnd": 159}, "context": "Given that CyML is built to serve as an intermediate representation of a set of languages, its validity is practically proved if all unit tests written in CyML succeed in all languages after transformation.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00018477439880371094}, "created": {"value": false, "score": 0.002982020378112793}, "shared": {"value": false, "score": 1.7881393432617188e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyML", "normalizedForm": "CyML", "offsetStart": 155, "offsetEnd": 159}, "context": "The scope of the iteration index on an array variable in a For-loop construct is limited to the loop scope, whereas it is extended to all the functions in CyML and Python.", "mentionContextAttributes": {"used": {"value": false, "score": 0.04480099678039551}, "created": {"value": false, "score": 6.502866744995117e-05}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999634861946106}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.9863056540489197}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyMLT", "normalizedForm": "CyMLT", "offsetStart": 161, "offsetEnd": 166}, "language": {"rawForm": "C++", "normalizedForm": "C++"}, "context": "OpenAlea offers capabilities to benefit of oriented-object features of Python, OpenAlea components can be defined as pure Python functions, already generated by CyMLT. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.00028574466705322266}, "created": {"value": false, "score": 0.2043190598487854}, "shared": {"value": false, "score": 1.2576580047607422e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9926429390907288}, "created": {"value": true, "score": 0.9999377131462097}, "shared": {"value": true, "score": 0.986687958240509}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "STICS", "normalizedForm": "STICS", "offsetStart": 179, "offsetEnd": 184}, "context": "AMEI brings together some of the most widely used crop modelling and simulation platforms, including APSIM, BioMA, DSSAT, OpenAlea, RECORD, Simplace and other crop models such as STICS and SiriusQuality (Martre et al. 2006) The vision of AMEI is to (i) increase capabilities and responsiveness to model developers' needs; (ii) use modular modelling to share knowledge and rapidly develop operational tools; (iii) reuse model parts to leverage the expertise of third parties; (iv) renovate legacy code; and (v) realize the benefit of sharing and complementing different expertise.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0005155205726623535}, "created": {"value": false, "score": 0.012453317642211914}, "shared": {"value": false, "score": 2.682209014892578e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0005155205726623535}, "created": {"value": false, "score": 0.012453317642211914}, "shared": {"value": false, "score": 2.682209014892578e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CodeGenerator", "normalizedForm": "CodeGenerator", "offsetStart": 181, "offsetEnd": 194}, "context": "All target language generators share the principle of implementing a visitor method for standard functions or standard methods call nodes, and, it is, therefore, implemented in the CodeGenerator class.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00013399124145507812}, "created": {"value": false, "score": 0.0071443915367126465}, "shared": {"value": false, "score": 1.1920928955078125e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.02700108289718628}, "created": {"value": false, "score": 0.00818932056427002}, "shared": {"value": false, "score": 9.059906005859375e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LanguageGenerator", "normalizedForm": "LanguageGenerator", "offsetStart": 201, "offsetEnd": 218}, "context": "These additional operations have been implemented in the Adapter class containing some methods to traverse the ASG and, where the conditions have been defined, to retrieve the new features required in LanguageGenerator. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0001533031463623047}, "created": {"value": false, "score": 0.06392449140548706}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.02700108289718628}, "created": {"value": false, "score": 0.06392449140548706}, "shared": {"value": false, "score": 7.748603820800781e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CodeGenerator", "normalizedForm": "CodeGenerator", "offsetStart": 207, "offsetEnd": 220}, "context": "These methods emit fragments of code, which will be joined to produce a formatted source code in R. The properties that enable write and format functions for these fragments are implemented in a class named CodeGenerator inherited by RGenerator.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00013005733489990234}, "created": {"value": false, "score": 0.00818932056427002}, "shared": {"value": false, "score": 9.059906005859375e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.02700108289718628}, "created": {"value": false, "score": 0.00818932056427002}, "shared": {"value": false, "score": 9.059906005859375e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "RGenerator", "normalizedForm": "RGenerator", "offsetStart": 234, "offsetEnd": 244}, "context": "These methods emit fragments of code, which will be joined to produce a formatted source code in R. The properties that enable write and format functions for these fragments are implemented in a class named CodeGenerator inherited by RGenerator. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.00013005733489990234}, "created": {"value": false, "score": 0.00818932056427002}, "shared": {"value": false, "score": 9.059906005859375e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.009911775588989258}, "created": {"value": false, "score": 0.00818932056427002}, "shared": {"value": false, "score": 9.059906005859375e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "BioMA", "normalizedForm": "BioMA", "offsetStart": 281, "offsetEnd": 286}, "context": "For example, the WOFOST model is implemented in Fortran in the WOFOST Control Centre (WCC) package, in Python in the Python Crop Simulation Environment framework, in Java in the Wageningen Integrated Systems Simulator framework (WISS), in C# in the Biophysical Models Application (BioMA) framework, and in C++ in the Crop Growth Monitoring System (CGMS) (de Wit et al. 2019;van Kraalingen et al. 2020).", "mentionContextAttributes": {"used": {"value": true, "score": 0.877527117729187}, "created": {"value": false, "score": 3.8623809814453125e-05}, "shared": {"value": false, "score": 2.2649765014648438e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.877527117729187}, "created": {"value": false, "score": 0.012453317642211914}, "shared": {"value": false, "score": 2.682209014892578e-06}}, "references": [{"label": "(Donatelli et al. 2010", "normalizedForm": "(Donatelli et al. 2010", "refKey": 19}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Mathematical Markup Language (MathML", "normalizedForm": "Mathematical Markup Language (MathML", "offsetStart": 333, "offsetEnd": 369}, "context": "These XML-based languages provide specific elements to describe model structure and equations Downloaded from https://academic.oup.com/insilicoplants/advance-article/doi/10.1093/insilicoplants/diaa007/5918454 by INRAE Institut National de Recherche pour l'Agriculture, l'Alimentation et l'Environnement user on 09 October 2020 using Mathematical Markup Language (MathML; Ausbrooks et al. 2003) that describes mathematical notations and captures both its structure and content. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.16843056678771973}, "created": {"value": false, "score": 4.5299530029296875e-06}, "shared": {"value": false, "score": 0.00023108720779418945}}, "documentContextAttributes": {"used": {"value": false, "score": 0.16843056678771973}, "created": {"value": false, "score": 4.5299530029296875e-06}, "shared": {"value": false, "score": 0.00023108720779418945}}, "references": [{"label": "Ausbrooks et al. 2003", "normalizedForm": "Ausbrooks et al. 2003", "refKey": 7, "offsetStart": 8619, "offsetEnd": 8640}]}], "references": [{"refKey": 33, "tei": "<biblStruct xml:id=\"b33\">\n\t<analytic>\n\t\t<title level=\"a\" type=\"main\">The DSSAT cropping system model</title>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">J</forename><forename type=\"middle\">W</forename><surname>Jones</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">G</forename><surname>Hoogenboom</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">C</forename><forename type=\"middle\">H</forename><surname>Porter</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">K</forename><forename type=\"middle\">J</forename><surname>Boote</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">W</forename><forename type=\"middle\">D</forename><surname>Batchelor</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">L</forename><forename type=\"middle\">A</forename><surname>Hunt</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">P</forename><forename type=\"middle\">W</forename><surname>Wilkens</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">U</forename><surname>Singh</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">A</forename><forename type=\"middle\">J</forename><surname>Gijsman</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">J</forename><forename type=\"middle\">T</forename><surname>Ritchie</surname></persName>\n\t\t</author>\n\t\t<idno type=\"DOI\">10.1016/s1161-0301(02)00107-7</idno>\n\t</analytic>\n\t<monogr>\n\t\t<title level=\"j\">European Journal of Agronomy</title>\n\t\t<title level=\"j\" type=\"abbrev\">European Journal of Agronomy</title>\n\t\t<idno type=\"ISSN\">1161-0301</idno>\n\t\t<imprint>\n\t\t\t<biblScope unit=\"volume\">18</biblScope>\n\t\t\t<biblScope unit=\"issue\">3-4</biblScope>\n\t\t\t<biblScope unit=\"page\" from=\"235\" to=\"265\" />\n\t\t\t<date type=\"published\" when=\"2003-01\">2003</date>\n\t\t\t<publisher>Elsevier BV</publisher>\n\t\t</imprint>\n\t</monogr>\n</biblStruct>\n"}, {"refKey": 31, "tei": "<biblStruct xml:id=\"b31\">\n\t<analytic>\n\t\t<title level=\"a\" type=\"main\">The DSSAT crop modeling ecosystem</title>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Gerrit</forename><surname>Hoogenboom</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Cheryl</forename><forename type=\"middle\">H</forename><surname>Porter</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Kenneth</forename><forename type=\"middle\">J</forename><surname>Boote</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Vakhtang</forename><surname>Shelia</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Paul</forename><forename type=\"middle\">W</forename><surname>Wilkens</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Upendra</forename><surname>Singh</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Jeffrey</forename><forename type=\"middle\">W</forename><surname>White</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Senthold</forename><surname>Asseng</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Jon</forename><forename type=\"middle\">I</forename><surname>Lizaso</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">L</forename><forename type=\"middle\">Patricia</forename><surname>Moreno</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Willingthon</forename><surname>Pavan</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Richard</forename><surname>Ogoshi</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">L</forename><forename type=\"middle\">Anthony</forename><surname>Hunt</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Gordon</forename><forename type=\"middle\">Y</forename><surname>Tsuji</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">James</forename><forename type=\"middle\">W</forename><surname>Jones</surname></persName>\n\t\t</author>\n\t\t<idno type=\"DOI\">10.19103/as.2019.0061.10</idno>\n\t</analytic>\n\t<monogr>\n\t\t<title level=\"m\">Advances in crop modelling for a sustainable agriculture</title>\n\t\t<imprint>\n\t\t\t<publisher>Burleigh Dodds Science Publishing</publisher>\n\t\t\t<date type=\"published\" when=\"2019-12-03\">2019. 09 October 2020</date>\n\t\t\t<biblScope unit=\"page\" from=\"173\" to=\"216\" />\n\t\t</imprint>\n\t</monogr>\n</biblStruct>\n"}, {"refKey": 0, "tei": "<biblStruct xml:id=\"b0\">\n\t<monogr>\n\t\t<title level=\"m\" type=\"main\">Reuse of process-based models: automatic transformation into many programming languages and simulation platforms</title>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Cyrille</forename><forename type=\"middle\">Ahmed</forename><surname>Midingoyi</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Christophe</forename><surname>Pradal</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Ioannis</forename><forename type=\"middle\">N</forename><surname>Athanasiadis</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Marcello</forename><surname>Donatelli</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Andreas</forename><surname>Enders</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Davide</forename><surname>Fumagalli</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Fr\u00e9d\u00e9rick</forename><surname>Garcia</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Dean</forename><surname>Holzworth</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Gerrit</forename><surname>Hoogenboom</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Cheryl</forename><surname>Porter</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">H\u00e9l\u00e8ne</forename><surname>Raynal</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Peter</forename><surname>Thorburn</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Pierre</forename><surname>Martre</surname></persName>\n\t\t</author>\n\t\t<idno type=\"DOI\">10.1093/insilicoplants/diaa007/5918454</idno>\n\t\t<idno>5B5870EDF9F26688703A215BF95EF3F2</idno>\n\t\t<imprint>\n\t\t\t<date>09 October 2020</date>\n\t\t</imprint>\n\t</monogr>\n</biblStruct>\n"}, {"refKey": 19, "tei": "<biblStruct xml:id=\"b19\">\n\t<analytic>\n\t\t<title level=\"a\" type=\"main\">A Component-Based Framework for Simulating Agricultural Production and Externalities</title>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Marcello</forename><surname>Donatelli</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Graham</forename><surname>Russell</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Andrea</forename><forename type=\"middle\">Emilio</forename><surname>Rizzoli</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Marco</forename><surname>Acutis</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Myriam</forename><surname>Adam</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Ioannis</forename><forename type=\"middle\">N</forename><surname>Athanasiadis</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Matteo</forename><surname>Balderacchi</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Luca</forename><surname>Bechini</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Hatem</forename><surname>Belhouchette</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Gianni</forename><surname>Bellocchi</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Jacques-Eric</forename><surname>Bergez</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Marco</forename><surname>Botta</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Erik</forename><surname>Braudeau</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Simone</forename><surname>Bregaglio</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Laura</forename><surname>Carlini</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Eric</forename><surname>Casellas</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Florian</forename><surname>Celette</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Enrico</forename><surname>Ceotto</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Marie</forename><forename type=\"middle\">H\u00e9l\u00e8ne</forename><surname>Charron-Moirez</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Roberto</forename><surname>Confalonieri</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Marc</forename><surname>Corbeels</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Luca</forename><surname>Criscuolo</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Pablo</forename><surname>Cruz</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Andrea</forename><surname>Guardo</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Domenico</forename><surname>Ditto</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Christian</forename><surname>Dupraz</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Michel</forename><surname>Duru</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Diego</forename><surname>Fiorani</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Antonella</forename><surname>Gentile</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Frank</forename><surname>Ewert</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Christian</forename><surname>Gary</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Ephrem</forename><surname>Habyarimana</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Claire</forename><surname>Jouany</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Kamel</forename><surname>Kansou</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Rob</forename><surname>Knapen</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Giovanni</forename><forename type=\"middle\">Lanza</forename><surname>Filippi</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Peter</forename><forename type=\"middle\">A</forename><surname>Leffelaar</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Luisa</forename><surname>Manici</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Guillaume</forename><surname>Martin</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Pierre</forename><surname>Martin</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Eelco</forename><surname>Meuter</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Nora</forename><surname>Mugueta</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Rachmat</forename><surname>Mulia</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Meine</forename><surname>Noordwijk</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Roelof</forename><surname>Oomen</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Alexandra</forename><surname>Rosenmund</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Vittorio</forename><surname>Rossi</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Francesca</forename><surname>Salinari</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Ariel</forename><surname>Serrano</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Andrea</forename><surname>Sorce</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Gr\u00e9goire</forename><surname>Vincent</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Jean-Pierre</forename><surname>Theau</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Olivier</forename><surname>Th\u00e9rond</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Marco</forename><surname>Trevisan</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Patrizia</forename><surname>Trevisiol</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Frits</forename><forename type=\"middle\">K</forename><surname>Evert</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Daniel</forename><surname>Wallach</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Jacques</forename><surname>Wery</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Arezki</forename><surname>Zerourou</surname></persName>\n\t\t</author>\n\t\t<idno type=\"DOI\">10.1007/978-90-481-3619-3_4</idno>\n\t</analytic>\n\t<monogr>\n\t\t<title level=\"m\">Environmental and Agricultural Modeling:</title>\n\t\t<imprint>\n\t\t\t<publisher>Springer Netherlands</publisher>\n\t\t\t<date type=\"published\" when=\"2009-12-18\">2010</date>\n\t\t\t<biblScope unit=\"page\" from=\"63\" to=\"108\" />\n\t\t</imprint>\n\t</monogr>\n</biblStruct>\n"}, {"refKey": 7, "tei": "<biblStruct xml:id=\"b7\">\n\t<analytic>\n\t\t<title level=\"a\" type=\"main\">Exploring Linguistic Interdependence between American Sign Language and English through Correlational and Multiple Regression Analyses of the Abilities of Biliterate Deaf Adults</title>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Melissa</forename><forename type=\"middle\">M</forename><surname>Ausbrooks</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Mary</forename><forename type=\"middle\">Anne</forename><surname>Gentry</surname></persName>\n\t\t</author>\n\t\t<idno type=\"DOI\">10.5539/ijel.v4n1p1</idno>\n\t</analytic>\n\t<monogr>\n\t\t<title level=\"j\">International Journal of English Linguistics</title>\n\t\t<title level=\"j\" type=\"abbrev\">IJEL</title>\n\t\t<idno type=\"ISSN\">1923-869X</idno>\n\t\t<idno type=\"ISSNe\">1923-8703</idno>\n\t\t<imprint>\n\t\t\t<biblScope unit=\"volume\">4</biblScope>\n\t\t\t<biblScope unit=\"issue\">1</biblScope>\n\t\t\t<biblScope unit=\"page\">385</biblScope>\n\t\t\t<date type=\"published\" when=\"2014-01-22\">2003. October</date>\n\t\t\t<publisher>Canadian Center of Science and Education</publisher>\n\t\t</imprint>\n\t</monogr>\n</biblStruct>\n"}], "runtime": 125792, "id": "9c21fd791b92f14801e99c62692d811376df8ea4", "metadata": {"id": "9c21fd791b92f14801e99c62692d811376df8ea4"}, "original_file_path": "../../datalake/Samuel/SOFTware-Sync/data/xml_files/hal-02962262.grobid.tei.xml", "file_name": "hal-02962262.grobid.tei.xml"}