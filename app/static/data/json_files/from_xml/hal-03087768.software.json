{"application": "software-mentions", "version": "0.8.0", "date": "2024-10-07T11:37+0000", "md5": "F8AE21A9AD2BB1CA146F7B0BFED64518", "mentions": [{"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 0, "offsetEnd": 5}, "context": "FAUST has proven to be particularly suitable for porting the JavaScript code of an existing Power Amp in a very similar way, freeing it from the limitations, inconsistencies and constraints of the WebAudio API. ", "mentionContextAttributes": {"used": {"value": false, "score": 3.349781036376953e-05}, "created": {"value": false, "score": 0.0022568702697753906}, "shared": {"value": false, "score": 7.164478302001953e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999885559082031}, "created": {"value": true, "score": 0.9931788444519043}, "shared": {"value": false, "score": 7.164478302001953e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 0, "offsetEnd": 5}, "context": "FAUST does not come with similar filters out of the box.", "mentionContextAttributes": {"used": {"value": false, "score": 8.511543273925781e-05}, "created": {"value": false, "score": 3.8504600524902344e-05}, "shared": {"value": false, "score": 5.960464477539062e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999885559082031}, "created": {"value": true, "score": 0.9931788444519043}, "shared": {"value": false, "score": 7.164478302001953e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 0, "offsetEnd": 8}, "context": "WebAudio is a W3C-standard JavaScript API that relies on 1 building an \"audio graph\" by connecting processing nodes one to another. ", "mentionContextAttributes": {"used": {"value": false, "score": 4.9233436584472656e-05}, "created": {"value": false, "score": 0.001316845417022705}, "shared": {"value": false, "score": 1.4901161193847656e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999984622001648}, "created": {"value": true, "score": 0.998375415802002}, "shared": {"value": true, "score": 0.9525911211967468}}, "references": [{"label": "[6]", "normalizedForm": "[6]", "refKey": 6}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 0, "offsetEnd": 8}, "context": "WebAudio provides a set of \"high-level\" nodes (such as the WaveShaper node and the BiquadFilter node) that can be used to model the lamps and filters, and it has been shown that when properly used, waveshaping techniques , 2 combined with proper oversampling and filtering, can give quite good results [5].", "mentionContextAttributes": {"used": {"value": false, "score": 7.82012939453125e-05}, "created": {"value": false, "score": 3.0517578125e-05}, "shared": {"value": false, "score": 5.960464477539062e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999984622001648}, "created": {"value": true, "score": 0.998375415802002}, "shared": {"value": true, "score": 0.9525911211967468}}, "references": [{"label": "[6]", "normalizedForm": "[6]", "refKey": 6}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 0, "offsetEnd": 8}, "context": "WebAudio implementation demo of the PowerAmp stage: https://www.youtube.com/watch?v=-NdMdJQx2Bw", "mentionContextAttributes": {"used": {"value": false, "score": 0.012989521026611328}, "created": {"value": false, "score": 5.614757537841797e-05}, "shared": {"value": true, "score": 0.9525911211967468}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999984622001648}, "created": {"value": true, "score": 0.998375415802002}, "shared": {"value": true, "score": 0.9525911211967468}}, "references": [{"label": "[6]", "normalizedForm": "[6]", "refKey": 6}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAssembly", "normalizedForm": "WebAssembly", "offsetStart": 0, "offsetEnd": 11}, "context": "WebAssembly is a W3C standard: a portable binary-code format for executable programs, firstly to be used on the Web, but also on native environments. ", "mentionContextAttributes": {"used": {"value": false, "score": 5.1021575927734375e-05}, "created": {"value": false, "score": 0.0002459883689880371}, "shared": {"value": false, "score": 0.0002582669258117676}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9795814752578735}, "created": {"value": true, "score": 0.9910354614257812}, "shared": {"value": false, "score": 0.0002582669258117676}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAssembly", "normalizedForm": "WebAssembly", "offsetStart": 0, "offsetEnd": 11}, "context": "WebAssembly aims to execute at native speed by taking advantage of common hardware capabilities available on a wide range of platforms. ", "mentionContextAttributes": {"used": {"value": false, "score": 4.124641418457031e-05}, "created": {"value": false, "score": 0.2642574906349182}, "shared": {"value": false, "score": 3.814697265625e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9795814752578735}, "created": {"value": true, "score": 0.9910354614257812}, "shared": {"value": false, "score": 0.0002582669258117676}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 3, "offsetEnd": 11}, "context": "12 WebAudio comes with a set of classic biquad filters types: lowpass, highpass, bandpass, lowshelf, highshelf, peaking, notch and allpass. ", "mentionContextAttributes": {"used": {"value": false, "score": 4.589557647705078e-05}, "created": {"value": false, "score": 0.0001163482666015625}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999984622001648}, "created": {"value": true, "score": 0.998375415802002}, "shared": {"value": true, "score": 0.9525911211967468}}, "references": [{"label": "[6]", "normalizedForm": "[6]", "refKey": 6}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 4, "offsetEnd": 9}, "context": "The FAUST team did the port and provided us with the so-called webaudio.lib", "mentionContextAttributes": {"used": {"value": true, "score": 0.9992498755455017}, "created": {"value": false, "score": 0.0015472173690795898}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999885559082031}, "created": {"value": true, "score": 0.9931788444519043}, "shared": {"value": false, "score": 7.164478302001953e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Presence", "normalizedForm": "Presence", "offsetStart": 4, "offsetEnd": 12}, "context": "The Presence may be looked at as a global time/frequency control on the brightness of timbre by 4 altering the signal fed back from the negative feedback loop.", "mentionContextAttributes": {"used": {"value": false, "score": 0.001118481159210205}, "created": {"value": false, "score": 1.3828277587890625e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999885559082031}, "created": {"value": true, "score": 0.9963609576225281}, "shared": {"value": false, "score": 2.0265579223632812e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 7, "offsetEnd": 12}, "context": "In the FAUST implementation, the measurement 20 tools (Fig. 16) proved the sample-wise nature of the processing with a delay of just one-sample for the NFB/Presence loop.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9999885559082031}, "created": {"value": false, "score": 1.2755393981933594e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999885559082031}, "created": {"value": true, "score": 0.9931788444519043}, "shared": {"value": false, "score": 7.164478302001953e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 7, "offsetEnd": 15}, "context": "In the WebAudio API specs, loops in the graph are required to include at least one delay node. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.17105364799499512}, "created": {"value": false, "score": 1.9311904907226562e-05}, "shared": {"value": false, "score": 1.0728836059570312e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999984622001648}, "created": {"value": true, "score": 0.998375415802002}, "shared": {"value": true, "score": 0.9525911211967468}}, "references": [{"label": "[6]", "normalizedForm": "[6]", "refKey": 6}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 9, "offsetEnd": 14}, "context": "Once our FAUST-based Power Amp re-creation was functional and adjustable, we could proceed to the evaluation phase.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9694439172744751}, "created": {"value": true, "score": 0.9484397172927856}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999885559082031}, "created": {"value": true, "score": 0.9931788444519043}, "shared": {"value": false, "score": 7.164478302001953e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 13, "offsetEnd": 18}, "context": "Fortunately, FAUST quickly proposed WebAudio/WebAssembly as a compilation target and proved to be an ideal framework for developing powerful custom code (we even did some personal contributions to FAUST's WebAudio support) [6].", "mentionContextAttributes": {"used": {"value": false, "score": 0.0013812780380249023}, "created": {"value": false, "score": 0.23507970571517944}, "shared": {"value": false, "score": 2.5033950805664062e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999885559082031}, "created": {"value": true, "score": 0.9931788444519043}, "shared": {"value": false, "score": 7.164478302001953e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 15, "offsetEnd": 23}, "context": "Namely, in the WebAudio API, the slope of the tube transfer function curves can be driven real-time by the power of input signal enveloppe emulating hysteresis phenomena.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0001285076141357422}, "created": {"value": false, "score": 0.00032258033752441406}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999984622001648}, "created": {"value": true, "score": 0.998375415802002}, "shared": {"value": true, "score": 0.9525911211967468}}, "references": [{"label": "[6]", "normalizedForm": "[6]", "refKey": 6}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Presence", "normalizedForm": "Presence", "offsetStart": 21, "offsetEnd": 29}, "context": "These tools (NFB and Presence) are quite sensitive (at the edge of creating positive feedback with oscillations and Larsen effects so we provide controls in the GUI to adjust/restrict the admissible range) but this novel presence control provides an utterly powerful and spectacular tool to shape the final sound.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0001462697982788086}, "created": {"value": false, "score": 0.003076493740081787}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999885559082031}, "created": {"value": true, "score": 0.9963609576225281}, "shared": {"value": false, "score": 2.0265579223632812e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 22, "offsetEnd": 30}, "context": "In our initial purely WebAudio implementation [1, 2], we were using a bank of biquad filters in series (for the presence implementation), a waveshaper node with appropriate biquad filters (for simulating tubes), some gain nodes (master volume at the input of the stage, negative gain in the NFB loop and a few others for fine tuning the signal level at different locations in the audio graph), and a delay node (in the NFB loop). ", "mentionContextAttributes": {"used": {"value": true, "score": 0.9998557567596436}, "created": {"value": false, "score": 4.0531158447265625e-06}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999984622001648}, "created": {"value": true, "score": 0.998375415802002}, "shared": {"value": true, "score": 0.9525911211967468}}, "references": [{"label": "[6]", "normalizedForm": "[6]", "refKey": 6}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST IDE", "normalizedForm": "FAUST IDE", "offsetStart": 22, "offsetEnd": 31}, "context": "20 As measured in the FAUST IDE, using process = button(\"gate\") <: ((poweramp), _); style code and the embedded visualization tools. ", "mentionContextAttributes": {"used": {"value": true, "score": 0.9999898672103882}, "created": {"value": false, "score": 1.4901161193847656e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999898672103882}, "created": {"value": false, "score": 0.006090283393859863}, "shared": {"value": false, "score": 1.3113021850585938e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST IDE", "normalizedForm": "FAUST IDE", "offsetStart": 22, "offsetEnd": 31}, "context": "21 As measured in the FAUST IDE, using process = button(\"gate\") <: ((poweramp), _); style code and the embedded visualisation tools.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9999891519546509}, "created": {"value": false, "score": 1.2159347534179688e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999898672103882}, "created": {"value": false, "score": 0.006090283393859863}, "shared": {"value": false, "score": 1.3113021850585938e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 24, "offsetEnd": 29}, "context": "Finally we also compare FAUST vs JavaScript development, and mention future optimizations.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9967696666717529}, "created": {"value": false, "score": 0.2862324118614197}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999885559082031}, "created": {"value": true, "score": 0.9931788444519043}, "shared": {"value": false, "score": 7.164478302001953e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Firefox", "normalizedForm": "Firefox", "offsetStart": 25, "offsetEnd": 32}, "context": "Without this delay node, Firefox stops rendering the graph, while Chrome does not complain but adds, behind the scenes, a 3 ms delay (the minimal delay from a frame audio buffer of 128 sample-frames as within WebAudio API, the signal is always processed in packets of 128 samples, which means that the minimum value for a delay is 128 / sample rate, i.e. about 128/44100 = 3ms). ", "mentionContextAttributes": {"used": {"value": false, "score": 0.02123206853866577}, "created": {"value": false, "score": 2.7418136596679688e-06}, "shared": {"value": false, "score": 2.1457672119140625e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9817620515823364}, "created": {"value": false, "score": 0.026026606559753418}, "shared": {"value": false, "score": 2.1457672119140625e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Presence", "normalizedForm": "Presence", "offsetStart": 25, "offsetEnd": 33}, "context": "To design properly a NFB/Presence circuit, lots of parameters are involved and a lot of care must be taken when adjusting them.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00019508600234985352}, "created": {"value": false, "score": 0.00024431943893432617}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999885559082031}, "created": {"value": true, "score": 0.9963609576225281}, "shared": {"value": false, "score": 2.0265579223632812e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 27, "offsetEnd": 35}, "context": "Another advantage of using WebAudio high level nodes, is that most of the audio processing is done in their C++ implementation that lies in the web browser internals, so performance is generally not an issue. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0012067556381225586}, "created": {"value": false, "score": 0.0005342364311218262}, "shared": {"value": false, "score": 1.1444091796875e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999984622001648}, "created": {"value": true, "score": 0.998375415802002}, "shared": {"value": true, "score": 0.9525911211967468}}, "references": [{"label": "[6]", "normalizedForm": "[6]", "refKey": 6}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 28, "offsetEnd": 33}, "context": "In addition, the use of the FAUST IDE for coding, debugging and profiling this Power Amp plugin has been evaluated by six audio plugin developers with different levels of expertise with the FAUST language.", "mentionContextAttributes": {"used": {"value": true, "score": 0.8588165044784546}, "created": {"value": false, "score": 0.000999152660369873}, "shared": {"value": false, "score": 1.0728836059570312e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999885559082031}, "created": {"value": true, "score": 0.9931788444519043}, "shared": {"value": false, "score": 7.164478302001953e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 29, "offsetEnd": 34}, "context": "that is now available in the FAUST distribution.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00019508600234985352}, "created": {"value": false, "score": 0.008363723754882812}, "shared": {"value": false, "score": 1.9311904907226562e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999885559082031}, "created": {"value": true, "score": 0.9931788444519043}, "shared": {"value": false, "score": 7.164478302001953e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 29, "offsetEnd": 34}, "context": "However, we noticed that the FAUST implementation was much more stable and versatile when adjusting the internal parameters of the feedback loop.", "mentionContextAttributes": {"used": {"value": true, "score": 0.990770161151886}, "created": {"value": false, "score": 0.009209275245666504}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999885559082031}, "created": {"value": true, "score": 0.9931788444519043}, "shared": {"value": false, "score": 7.164478302001953e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST IDE", "normalizedForm": "FAUST IDE", "offsetStart": 29, "offsetEnd": 38}, "context": "In a second step we used the FAUST IDE to create a WebAudio plugin from the FAUST implementation of the Power Amp (Fig. 14) and we chained a special version of our tube guitar amplifier simulations in which we bypassed the embedded power amp and cabinet simulation stages (Fig. 15), and compared with the full featured, JavaScript based simulations. ", "mentionContextAttributes": {"used": {"value": true, "score": 0.9934813976287842}, "created": {"value": false, "score": 0.006090283393859863}, "shared": {"value": false, "score": 1.3113021850585938e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999898672103882}, "created": {"value": false, "score": 0.006090283393859863}, "shared": {"value": false, "score": 1.3113021850585938e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Presence", "normalizedForm": "Presence", "offsetStart": 30, "offsetEnd": 38}, "context": "Proper simulations of NFB and Presence have been quite difficult to achieve due to some limitations of the WebAudio API and divergences/bugs in how browsers generally parse the WebAudio graphs with loops.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0006154775619506836}, "created": {"value": false, "score": 0.00038564205169677734}, "shared": {"value": false, "score": 2.0265579223632812e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999885559082031}, "created": {"value": true, "score": 0.9963609576225281}, "shared": {"value": false, "score": 2.0265579223632812e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Presence", "normalizedForm": "Presence", "offsetStart": 30, "offsetEnd": 38}, "context": "Fender: Be in the Moment: The Presence Control Explained: What is it and how can it help energize your live sound?", "mentionContextAttributes": {"used": {"value": false, "score": 0.0005431771278381348}, "created": {"value": false, "score": 0.00011682510375976562}, "shared": {"value": false, "score": 1.430511474609375e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999885559082031}, "created": {"value": true, "score": 0.9963609576225281}, "shared": {"value": false, "score": 2.0265579223632812e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 31, "offsetEnd": 36}, "context": "After trying to adapt existing FAUST filters to behave like WebAudio filter ones, and after talking with FAUST and WebAudio implementers the conclusion was that for a really faithfull behavior, it would be better to start from the original C++ implementation of the WebAudio filter API, taken from the Chromium browser source code.", "mentionContextAttributes": {"used": {"value": true, "score": 0.8167412281036377}, "created": {"value": false, "score": 0.00015974044799804688}, "shared": {"value": false, "score": 1.9073486328125e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999885559082031}, "created": {"value": true, "score": 0.9931788444519043}, "shared": {"value": false, "score": 7.164478302001953e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 32, "offsetEnd": 40}, "context": "With the current limitations in WebAudio, and quite strangely, this 3ms delay in the loop to conform to the specs, brings slightly different coloring of the amps between FF and Chrome. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.00043886899948120117}, "created": {"value": false, "score": 7.581710815429688e-05}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999984622001648}, "created": {"value": true, "score": 0.998375415802002}, "shared": {"value": true, "score": 0.9525911211967468}}, "references": [{"label": "[6]", "normalizedForm": "[6]", "refKey": 6}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio API", "normalizedForm": "WebAudio API", "offsetStart": 32, "offsetEnd": 44}, "context": "One big advantage of JavaScript/WebAudio API is the really flexible and dynamic way you can manipulate the audiograph (by changing its topology in real-time, even while playing guitar) or the parameters of the different nodes, in particular, you can reshape in real-time the transfer functions used by the waveshaper nodes. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.00010156631469726562}, "created": {"value": false, "score": 0.01692277193069458}, "shared": {"value": false, "score": 2.372264862060547e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.988264799118042}, "created": {"value": true, "score": 0.9997884631156921}, "shared": {"value": false, "score": 3.62396240234375e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 36, "offsetEnd": 44}, "context": "Fortunately, FAUST quickly proposed WebAudio/WebAssembly as a compilation target and proved to be an ideal framework for developing powerful custom code (we even did some personal contributions to FAUST's WebAudio support) [6].", "mentionContextAttributes": {"used": {"value": false, "score": 0.0013812780380249023}, "created": {"value": false, "score": 0.23507970571517944}, "shared": {"value": false, "score": 2.5033950805664062e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999984622001648}, "created": {"value": true, "score": 0.998375415802002}, "shared": {"value": true, "score": 0.9525911211967468}}, "references": [{"label": "[6]", "normalizedForm": "[6]", "refKey": 6}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 37, "offsetEnd": 45}, "context": "We show the limits of the high-level WebAudio API layer, and how FAUST allows us to re-implement the Power Amp part more faithfully. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.002180933952331543}, "created": {"value": true, "score": 0.9931788444519043}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999984622001648}, "created": {"value": true, "score": 0.998375415802002}, "shared": {"value": true, "score": 0.9525911211967468}}, "references": [{"label": "[6]", "normalizedForm": "[6]", "refKey": 6}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Presence", "normalizedForm": "Presence", "offsetStart": 39, "offsetEnd": 47}, "context": "It should be noticed also that the NFB/Presence has a major influence at the temporal level [9] as the RC networks controlled by the Presence knob induce some frequency-dependent group-delay in the NFB loop.", "mentionContextAttributes": {"used": {"value": false, "score": 0.10157865285873413}, "created": {"value": false, "score": 7.510185241699219e-06}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999885559082031}, "created": {"value": true, "score": 0.9963609576225281}, "shared": {"value": false, "score": 2.0265579223632812e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAssembly", "normalizedForm": "WebAssembly", "offsetStart": 45, "offsetEnd": 56}, "context": "Fortunately, FAUST quickly proposed WebAudio/WebAssembly as a compilation target and proved to be an ideal framework for developing powerful custom code (we even did some personal contributions to FAUST's WebAudio support) [6].", "mentionContextAttributes": {"used": {"value": false, "score": 0.0013812780380249023}, "created": {"value": false, "score": 0.23507970571517944}, "shared": {"value": false, "score": 2.5033950805664062e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9795814752578735}, "created": {"value": true, "score": 0.9910354614257812}, "shared": {"value": false, "score": 0.0002582669258117676}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 46, "offsetEnd": 51}, "context": "For the power amp tubes, we looked at the way FAUST developers simulated tubes (e.g. in the Guitarix project 13source repository, in particular in the guitarix.lib", "mentionContextAttributes": {"used": {"value": true, "score": 0.9998170733451843}, "created": {"value": false, "score": 0.0008542537689208984}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999885559082031}, "created": {"value": true, "score": 0.9931788444519043}, "shared": {"value": false, "score": 7.164478302001953e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Presence", "normalizedForm": "Presence", "offsetStart": 47, "offsetEnd": 55}, "context": "In our simulations, the curve-based parametric Presence control allows us to fully carve the time/frequency coloration at the Power Amp level to add punch or special effects to the output from the Preamp and Tonestack.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0005728006362915039}, "created": {"value": false, "score": 0.03543984889984131}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999885559082031}, "created": {"value": true, "score": 0.9963609576225281}, "shared": {"value": false, "score": 2.0265579223632812e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Presence", "normalizedForm": "Presence", "offsetStart": 48, "offsetEnd": 56}, "context": "In Power Amps, the Negative Feedback Loop (NFB)/Presence control (see Figs. 5 and6) are typically introduced to extend the usable frequency bandwidth by limiting/reshaping the unwanted distortions originating from the non-linearities of the output transformer at the price of a slightly lower total gain.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0003082752227783203}, "created": {"value": false, "score": 1.0013580322265625e-05}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999885559082031}, "created": {"value": true, "score": 0.9963609576225281}, "shared": {"value": false, "score": 2.0265579223632812e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Presence", "normalizedForm": "Presence", "offsetStart": 48, "offsetEnd": 56}, "context": "Unknown to concert stage or HiFi power amps, a 'Presence' control is added to the NFB loop of guitar amps to allow control on the coloration of the NFB and thus to provide a simple but efficient way of adjusting the brightness and sharpness of the sound at the Power Amp stage.", "mentionContextAttributes": {"used": {"value": false, "score": 0.013040244579315186}, "created": {"value": false, "score": 0.00012671947479248047}, "shared": {"value": false, "score": 7.152557373046875e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999885559082031}, "created": {"value": true, "score": 0.9963609576225281}, "shared": {"value": false, "score": 2.0265579223632812e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Presence", "normalizedForm": "Presence", "offsetStart": 51, "offsetEnd": 59}, "context": "Usually solely controlled by the Master Volume and Presence knobs (Fig 4 .), the Power Amp stage has a profound impact on the sound and overall dynamics.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0024539828300476074}, "created": {"value": false, "score": 0.0002581477165222168}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999885559082031}, "created": {"value": true, "score": 0.9963609576225281}, "shared": {"value": false, "score": 2.0265579223632812e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 51, "offsetEnd": 59}, "context": "In a second step we used the FAUST IDE to create a WebAudio plugin from the FAUST implementation of the Power Amp (Fig. 14) and we chained a special version of our tube guitar amplifier simulations in which we bypassed the embedded power amp and cabinet simulation stages (Fig. 15), and compared with the full featured, JavaScript based simulations.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9934813976287842}, "created": {"value": false, "score": 0.006090283393859863}, "shared": {"value": false, "score": 1.3113021850585938e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999984622001648}, "created": {"value": true, "score": 0.998375415802002}, "shared": {"value": true, "score": 0.9525911211967468}}, "references": [{"label": "[6]", "normalizedForm": "[6]", "refKey": 6}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio API", "normalizedForm": "WebAudio API", "offsetStart": 52, "offsetEnd": 64}, "context": "However, until recently, one main limitation of the WebAudio API design was that default signal processing is constrained to block-processing of chunks of 128 samples at a time, and until very recently it was not possible to do stream processing at the sample-wise level without introducing glitches and latency. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0001977086067199707}, "created": {"value": false, "score": 0.0006421208381652832}, "shared": {"value": false, "score": 1.0728836059570312e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.988264799118042}, "created": {"value": true, "score": 0.9997884631156921}, "shared": {"value": false, "score": 3.62396240234375e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Presence", "normalizedForm": "Presence", "offsetStart": 53, "offsetEnd": 61}, "context": "This may explain the blurring/sharpening effect that Presence has on the attack slopes of the notes played, acting as a \"softening/anti-softening\" pedal.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0006389021873474121}, "created": {"value": false, "score": 3.445148468017578e-05}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999885559082031}, "created": {"value": true, "score": 0.9963609576225281}, "shared": {"value": false, "score": 2.0265579223632812e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAssembly", "normalizedForm": "WebAssembly", "offsetStart": 54, "offsetEnd": 65}, "context": "Writing custom DSP code in JavaScript, 3 or coding in WebAssembly by hand, is nevertheless quite tedious.", "mentionContextAttributes": {"used": {"value": false, "score": 9.97781753540039e-05}, "created": {"value": false, "score": 6.020069122314453e-05}, "shared": {"value": false, "score": 1.5497207641601562e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9795814752578735}, "created": {"value": true, "score": 0.9910354614257812}, "shared": {"value": false, "score": 0.0002582669258117676}}}, {"type": "software", "software-type": "implicit", "software-name": {"rawForm": "code", "normalizedForm": "code", "offsetStart": 59, "offsetEnd": 63}, "language": {"rawForm": "JavaScript", "normalizedForm": "JavaScript"}, "context": "We found out that most 15 tube simulations relied on C/C++ code and could not be used out of the box (typ. ", "mentionContextAttributes": {"used": {"value": true, "score": 0.9999626874923706}, "created": {"value": false, "score": 1.4185905456542969e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999984622001648}, "created": {"value": false, "score": 0.0022568702697753906}, "shared": {"value": false, "score": 7.164478302001953e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 60, "offsetEnd": 68}, "context": "After trying to adapt existing FAUST filters to behave like WebAudio filter ones, and after talking with FAUST and WebAudio implementers the conclusion was that for a really faithfull behavior, it would be better to start from the original C++ implementation of the WebAudio filter API, taken from the Chromium browser source code. ", "mentionContextAttributes": {"used": {"value": true, "score": 0.8167412281036377}, "created": {"value": false, "score": 0.00015974044799804688}, "shared": {"value": false, "score": 1.9073486328125e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999984622001648}, "created": {"value": true, "score": 0.998375415802002}, "shared": {"value": true, "score": 0.9525911211967468}}, "references": [{"label": "[6]", "normalizedForm": "[6]", "refKey": 6}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 65, "offsetEnd": 70}, "context": "We show the limits of the high-level WebAudio API layer, and how FAUST allows us to re-implement the Power Amp part more faithfully.", "mentionContextAttributes": {"used": {"value": false, "score": 0.002180933952331543}, "created": {"value": true, "score": 0.9931788444519043}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999885559082031}, "created": {"value": true, "score": 0.9931788444519043}, "shared": {"value": false, "score": 7.164478302001953e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Chrome", "normalizedForm": "Chrome", "offsetStart": 66, "offsetEnd": 72}, "context": "Without this delay node, Firefox stops rendering the graph, while Chrome does not complain but adds, behind the scenes, a 3 ms delay (the minimal delay from a frame audio buffer of 128 sample-frames as within WebAudio API, the signal is always processed in packets of 128 samples, which means that the minimum value for a delay is 128 / sample rate, i.e. about 128/44100 = 3ms). ", "mentionContextAttributes": {"used": {"value": false, "score": 0.02123206853866577}, "created": {"value": false, "score": 2.7418136596679688e-06}, "shared": {"value": false, "score": 2.1457672119140625e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.02123206853866577}, "created": {"value": false, "score": 7.581710815429688e-05}, "shared": {"value": false, "score": 2.1457672119140625e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Presence", "normalizedForm": "Presence", "offsetStart": 68, "offsetEnd": 76}, "context": "This clearly motivates our introduction of a curve-based parametric Presence control to choose in which frequency band one wants its brightness.", "mentionContextAttributes": {"used": {"value": false, "score": 5.4717063903808594e-05}, "created": {"value": true, "score": 0.9963609576225281}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999885559082031}, "created": {"value": true, "score": 0.9963609576225281}, "shared": {"value": false, "score": 2.0265579223632812e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Presence", "normalizedForm": "Presence", "offsetStart": 69, "offsetEnd": 77}, "context": "The general feeling is that the two main settings, Master volume and Presence, reacted very closely with both implementations.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9914937019348145}, "created": {"value": false, "score": 0.0012637972831726074}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999885559082031}, "created": {"value": true, "score": 0.9963609576225281}, "shared": {"value": false, "score": 2.0265579223632812e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "AudioWorklet", "normalizedForm": "AudioWorklet", "offsetStart": 70, "offsetEnd": 82}, "context": "This issue has been recently partially solved with the arrival of the AudioWorklet node and a new WebAssembly standard in 2018 .", "mentionContextAttributes": {"used": {"value": false, "score": 0.0001188516616821289}, "created": {"value": false, "score": 0.0029351115226745605}, "shared": {"value": false, "score": 1.1920928955078125e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0006461739540100098}, "created": {"value": false, "score": 0.061369121074676514}, "shared": {"value": false, "score": 1.1920928955078125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": ".lib", "normalizedForm": ".lib", "offsetStart": 71, "offsetEnd": 75}, "context": "The FAUST team did the port and provided us with the so-called webaudio.lib ", "mentionContextAttributes": {"used": {"value": true, "score": 0.9992498755455017}, "created": {"value": false, "score": 0.0015472173690795898}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9992498755455017}, "created": {"value": false, "score": 0.0015472173690795898}, "shared": {"value": false, "score": 4.76837158203125e-07}}}, {"type": "software", "software-type": "implicit", "software-name": {"rawForm": "code", "normalizedForm": "code", "offsetStart": 72, "offsetEnd": 76}, "language": {"rawForm": "JavaScript", "normalizedForm": "JavaScript", "wikidataId": "Q2005", "offsetStart": 61, "offsetEnd": 71}, "context": "FAUST has proven to be particularly suitable for porting the JavaScript code of an existing Power Amp in a very similar way, freeing it from the limitations, inconsistencies and constraints of the WebAudio API. ", "mentionContextAttributes": {"used": {"value": false, "score": 3.349781036376953e-05}, "created": {"value": false, "score": 0.0022568702697753906}, "shared": {"value": false, "score": 7.164478302001953e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999984622001648}, "created": {"value": false, "score": 0.0022568702697753906}, "shared": {"value": false, "score": 7.164478302001953e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Presence", "normalizedForm": "Presence", "offsetStart": 72, "offsetEnd": 80}, "context": "Namely, unlike conventional treble control which is mainly subtractive, Presence control is pseudo-additive in that it limits the fundamental subtractive aspect of the NFB loop.", "mentionContextAttributes": {"used": {"value": false, "score": 6.628036499023438e-05}, "created": {"value": false, "score": 9.572505950927734e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999885559082031}, "created": {"value": true, "score": 0.9963609576225281}, "shared": {"value": false, "score": 2.0265579223632812e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 73, "offsetEnd": 78}, "context": "We already did that in the past by replacing the tonestack stage by some FAUST implementations[2].", "mentionContextAttributes": {"used": {"value": false, "score": 0.04190635681152344}, "created": {"value": false, "score": 0.0012746453285217285}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999885559082031}, "created": {"value": true, "score": 0.9931788444519043}, "shared": {"value": false, "score": 7.164478302001953e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 74, "offsetEnd": 82}, "context": "The lamps and filters are identified and simulated part by part using the WebAudio API.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9995424747467041}, "created": {"value": false, "score": 0.00017082691192626953}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999984622001648}, "created": {"value": true, "score": 0.998375415802002}, "shared": {"value": true, "score": 0.9525911211967468}}, "references": [{"label": "[6]", "normalizedForm": "[6]", "refKey": 6}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 76, "offsetEnd": 81}, "context": "In a second step we used the FAUST IDE to create a WebAudio plugin from the FAUST implementation of the Power Amp (Fig. 14) and we chained a special version of our tube guitar amplifier simulations in which we bypassed the embedded power amp and cabinet simulation stages (Fig. 15), and compared with the full featured, JavaScript based simulations.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9934813976287842}, "created": {"value": false, "score": 0.006090283393859863}, "shared": {"value": false, "score": 1.3113021850585938e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999885559082031}, "created": {"value": true, "score": 0.9931788444519043}, "shared": {"value": false, "score": 7.164478302001953e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio API", "normalizedForm": "WebAudio API", "offsetStart": 76, "offsetEnd": 88}, "context": "So far, our simulations were fully developed in JavaScript and based on the WebAudio API.", "mentionContextAttributes": {"used": {"value": true, "score": 0.8528282642364502}, "created": {"value": true, "score": 0.985245406627655}, "shared": {"value": false, "score": 3.62396240234375e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.988264799118042}, "created": {"value": true, "score": 0.9997884631156921}, "shared": {"value": false, "score": 3.62396240234375e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 79, "offsetEnd": 87}, "context": "It can be implemented real-time within a browser and is surely more adapted to WebAudio, its ecosystem and its limitations.", "mentionContextAttributes": {"used": {"value": false, "score": 4.684925079345703e-05}, "created": {"value": false, "score": 0.030171096324920654}, "shared": {"value": false, "score": 0.0004195570945739746}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999984622001648}, "created": {"value": true, "score": 0.998375415802002}, "shared": {"value": true, "score": 0.9525911211967468}}, "references": [{"label": "[6]", "normalizedForm": "[6]", "refKey": 6}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Presence", "normalizedForm": "Presence", "offsetStart": 79, "offsetEnd": 87}, "context": "The effects of negative feedback can be reduced for certain frequencies as the Presence knob controls the resistor part of a RC network, hence a tunable filter made of Resistors and Capacitors (RC) in the loop.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00027364492416381836}, "created": {"value": false, "score": 9.429454803466797e-05}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999885559082031}, "created": {"value": true, "score": 0.9963609576225281}, "shared": {"value": false, "score": 2.0265579223632812e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Presence", "normalizedForm": "Presence", "offsetStart": 81, "offsetEnd": 89}, "context": "class AB for push-pull) from almost class A to almost class B. And of course the Presence setting for adjusting the overall tone/brightness is quite important and can lead to destructive positive feedback if not designed correctly (freq ranges, etc.).", "mentionContextAttributes": {"used": {"value": false, "score": 0.0003445148468017578}, "created": {"value": false, "score": 2.2649765014648438e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999885559082031}, "created": {"value": true, "score": 0.9963609576225281}, "shared": {"value": false, "score": 2.0265579223632812e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 86, "offsetEnd": 91}, "context": "guitarix tube simulations), as we must be able to run these in a Web browser, and the FAUST toolchain still does not support hybrid FAUST/C source code when the compilation target is set to WebAudio/WebAssembly. The Temper distortion simulation, however, used a 100% FAUST based implementation of a simple waveshaper that produced a warm, adjustable, distortion sound that could easily fit our needs.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9108707904815674}, "created": {"value": false, "score": 0.0001830458641052246}, "shared": {"value": false, "score": 1.0251998901367188e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999885559082031}, "created": {"value": true, "score": 0.9931788444519043}, "shared": {"value": false, "score": 7.164478302001953e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 86, "offsetEnd": 94}, "context": "Nevertheless, we encountered many issues in the implementation of our signal loops in WebAudio. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.010659754276275635}, "created": {"value": true, "score": 0.998375415802002}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999984622001648}, "created": {"value": true, "score": 0.998375415802002}, "shared": {"value": true, "score": 0.9525911211967468}}, "references": [{"label": "[6]", "normalizedForm": "[6]", "refKey": 6}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 86, "offsetEnd": 94}, "context": "Aware of the great difficulties encountered in simulating the power amp in JavaScript/WebAudio, we first tried to re-create as faithfully as possible the signal chain that gave good results. ", "mentionContextAttributes": {"used": {"value": true, "score": 0.68088698387146}, "created": {"value": false, "score": 0.12396007776260376}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999984622001648}, "created": {"value": true, "score": 0.998375415802002}, "shared": {"value": true, "score": 0.9525911211967468}}, "references": [{"label": "[6]", "normalizedForm": "[6]", "refKey": 6}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio 18", "normalizedForm": "WebAudio 18", "offsetStart": 87, "offsetEnd": 98}, "context": "Results can be seen/heard in a video we published online , or in the online pedalboard WebAudio 18 application .", "mentionContextAttributes": {"used": {"value": false, "score": 0.0038552284240722656}, "created": {"value": false, "score": 0.01006096601486206}, "shared": {"value": false, "score": 0.19464826583862305}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0038552284240722656}, "created": {"value": false, "score": 0.01006096601486206}, "shared": {"value": false, "score": 0.19464826583862305}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Presence", "normalizedForm": "Presence", "offsetStart": 92, "offsetEnd": 100}, "context": "With real amplifiers' power amps, manufacturers are very conservative: the allowed range of Presence control is restricted so as to avoid unwanted oscillations that may be destructive to the speaker/cabinet.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0004380345344543457}, "created": {"value": false, "score": 9.906291961669922e-05}, "shared": {"value": false, "score": 8.344650268554688e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999885559082031}, "created": {"value": true, "score": 0.9963609576225281}, "shared": {"value": false, "score": 2.0265579223632812e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 93, "offsetEnd": 101}, "context": "This way, we can replace the current power amp implementation (made of a dozen of high level WebAudio nodes) with a single FAUST generated AudioWorklet node .", "mentionContextAttributes": {"used": {"value": false, "score": 0.0006461739540100098}, "created": {"value": false, "score": 0.061369121074676514}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999984622001648}, "created": {"value": true, "score": 0.998375415802002}, "shared": {"value": true, "score": 0.9525911211967468}}, "references": [{"label": "[6]", "normalizedForm": "[6]", "refKey": 6}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 95, "offsetEnd": 100}, "context": "This confirms a saving of 3ms in accordance with the difference of processing of loops between FAUST (sample-wise) and WebAudio API/JavaScript (block based).", "mentionContextAttributes": {"used": {"value": true, "score": 0.988264799118042}, "created": {"value": false, "score": 1.6689300537109375e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999885559082031}, "created": {"value": true, "score": 0.9931788444519043}, "shared": {"value": false, "score": 7.164478302001953e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAssembly", "normalizedForm": "WebAssembly", "offsetStart": 98, "offsetEnd": 109}, "context": "This issue has been recently partially solved with the arrival of the AudioWorklet node and a new WebAssembly standard in 2018 . ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0001188516616821289}, "created": {"value": false, "score": 0.0029351115226745605}, "shared": {"value": false, "score": 1.1920928955078125e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9795814752578735}, "created": {"value": true, "score": 0.9910354614257812}, "shared": {"value": false, "score": 0.0002582669258117676}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 99, "offsetEnd": 107}, "context": "We will conclude by comparing the advantages and disadvantages of the two approaches (JavaScript + WebAudio high level nodes vs. FAUST/WebAssembly) with special care on the performance measurements (latency, cpu usage, etc.) (Section 6).", "mentionContextAttributes": {"used": {"value": true, "score": 0.9795814752578735}, "created": {"value": false, "score": 1.609325408935547e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999984622001648}, "created": {"value": true, "score": 0.998375415802002}, "shared": {"value": true, "score": 0.9525911211967468}}, "references": [{"label": "[6]", "normalizedForm": "[6]", "refKey": 6}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 103, "offsetEnd": 111}, "context": "This work consisted in emulating the different parts of the electronic circuit of this amplifier using WebAudio, implementing the necessary signal processing algorithms using the available API, and finding adequate solutions to circumvent some limitations specific to the web browser environment (thread priority, latency, JavaScript API limitations).", "mentionContextAttributes": {"used": {"value": false, "score": 0.0663672685623169}, "created": {"value": true, "score": 0.8272236585617065}, "shared": {"value": false, "score": 8.344650268554688e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999984622001648}, "created": {"value": true, "score": 0.998375415802002}, "shared": {"value": true, "score": 0.9525911211967468}}, "references": [{"label": "[6]", "normalizedForm": "[6]", "refKey": 6}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 105, "offsetEnd": 110}, "context": "After trying to adapt existing FAUST filters to behave like WebAudio filter ones, and after talking with FAUST and WebAudio implementers the conclusion was that for a really faithfull behavior, it would be better to start from the original C++ implementation of the WebAudio filter API, taken from the Chromium browser source code.", "mentionContextAttributes": {"used": {"value": true, "score": 0.8167412281036377}, "created": {"value": false, "score": 0.00015974044799804688}, "shared": {"value": false, "score": 1.9073486328125e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999885559082031}, "created": {"value": true, "score": 0.9931788444519043}, "shared": {"value": false, "score": 7.164478302001953e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Adenot", "normalizedForm": "Adenot", "offsetStart": 105, "offsetEnd": 111}, "context": "We have reported these errors and discussed them with the implementers (Raymond Toy from Google and Paul Adenot from Firefox) but so far, nothing has been fixed (September 2020). ", "mentionContextAttributes": {"used": {"value": true, "score": 0.9817620515823364}, "created": {"value": false, "score": 0.026026606559753418}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9817620515823364}, "created": {"value": false, "score": 0.026026606559753418}, "shared": {"value": false, "score": 3.5762786865234375e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio API", "normalizedForm": "WebAudio API", "offsetStart": 107, "offsetEnd": 119}, "context": "Proper simulations of NFB and Presence have been quite difficult to achieve due to some limitations of the WebAudio API and divergences/bugs in how browsers generally parse the WebAudio graphs with loops. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0006154775619506836}, "created": {"value": false, "score": 0.00038564205169677734}, "shared": {"value": false, "score": 2.0265579223632812e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.988264799118042}, "created": {"value": true, "score": 0.9997884631156921}, "shared": {"value": false, "score": 3.62396240234375e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 114, "offsetEnd": 122}, "context": "To our knowledge, there is no previous research work that has tried to simulate a complete guitar amplifier using WebAudio. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.00020962953567504883}, "created": {"value": true, "score": 0.9678788781166077}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999984622001648}, "created": {"value": true, "score": 0.998375415802002}, "shared": {"value": true, "score": 0.9525911211967468}}, "references": [{"label": "[6]", "normalizedForm": "[6]", "refKey": 6}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 115, "offsetEnd": 123}, "context": "After trying to adapt existing FAUST filters to behave like WebAudio filter ones, and after talking with FAUST and WebAudio implementers the conclusion was that for a really faithfull behavior, it would be better to start from the original C++ implementation of the WebAudio filter API, taken from the Chromium browser source code. ", "mentionContextAttributes": {"used": {"value": true, "score": 0.8167412281036377}, "created": {"value": false, "score": 0.00015974044799804688}, "shared": {"value": false, "score": 1.9073486328125e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999984622001648}, "created": {"value": true, "score": 0.998375415802002}, "shared": {"value": true, "score": 0.9525911211967468}}, "references": [{"label": "[6]", "normalizedForm": "[6]", "refKey": 6}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Firefox", "normalizedForm": "Firefox", "offsetStart": 117, "offsetEnd": 124}, "context": "We have reported these errors and discussed them with the implementers (Raymond Toy from Google and Paul Adenot from Firefox) but so far, nothing has been fixed (September 2020). ", "mentionContextAttributes": {"used": {"value": true, "score": 0.9817620515823364}, "created": {"value": false, "score": 0.026026606559753418}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9817620515823364}, "created": {"value": false, "score": 0.026026606559753418}, "shared": {"value": false, "score": 2.1457672119140625e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio API", "normalizedForm": "WebAudio API", "offsetStart": 119, "offsetEnd": 131}, "context": "This confirms a saving of 3ms in accordance with the difference of processing of loops between FAUST (sample-wise) and WebAudio API/JavaScript (block based). ", "mentionContextAttributes": {"used": {"value": true, "score": 0.988264799118042}, "created": {"value": false, "score": 1.6689300537109375e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.988264799118042}, "created": {"value": true, "score": 0.9997884631156921}, "shared": {"value": false, "score": 3.62396240234375e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 123, "offsetEnd": 128}, "context": "This way, we can replace the current power amp implementation (made of a dozen of high level WebAudio nodes) with a single FAUST generated AudioWorklet node .", "mentionContextAttributes": {"used": {"value": false, "score": 0.0006461739540100098}, "created": {"value": false, "score": 0.061369121074676514}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999885559082031}, "created": {"value": true, "score": 0.9931788444519043}, "shared": {"value": false, "score": 7.164478302001953e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 129, "offsetEnd": 134}, "context": "We will conclude by comparing the advantages and disadvantages of the two approaches (JavaScript + WebAudio high level nodes vs. FAUST/WebAssembly) with special care on the performance measurements (latency, cpu usage, etc.) (Section 6).", "mentionContextAttributes": {"used": {"value": true, "score": 0.9795814752578735}, "created": {"value": false, "score": 1.609325408935547e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999885559082031}, "created": {"value": true, "score": 0.9931788444519043}, "shared": {"value": false, "score": 7.164478302001953e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 132, "offsetEnd": 137}, "context": "guitarix tube simulations), as we must be able to run these in a Web browser, and the FAUST toolchain still does not support hybrid FAUST/C source code when the compilation target is set to WebAudio/WebAssembly. The Temper distortion simulation, however, used a 100% FAUST based implementation of a simple waveshaper that produced a warm, adjustable, distortion sound that could easily fit our needs.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9108707904815674}, "created": {"value": false, "score": 0.0001830458641052246}, "shared": {"value": false, "score": 1.0251998901367188e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999885559082031}, "created": {"value": true, "score": 0.9931788444519043}, "shared": {"value": false, "score": 7.164478302001953e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Presence", "normalizedForm": "Presence", "offsetStart": 133, "offsetEnd": 141}, "context": "It should be noticed also that the NFB/Presence has a major influence at the temporal level [9] as the RC networks controlled by the Presence knob induce some frequency-dependent group-delay in the NFB loop.", "mentionContextAttributes": {"used": {"value": false, "score": 0.10157865285873413}, "created": {"value": false, "score": 7.510185241699219e-06}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999885559082031}, "created": {"value": true, "score": 0.9963609576225281}, "shared": {"value": false, "score": 2.0265579223632812e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 134, "offsetEnd": 139}, "context": "We did not investigate some aspects that can still be improved/optimized, such as the implementation of a full-featured waveshaper in FAUST (based on pre-calculated tables and interpolation to describe the transfer function, for example), or on more complex tube models. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.00016558170318603516}, "created": {"value": true, "score": 0.871303141117096}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999885559082031}, "created": {"value": true, "score": 0.9931788444519043}, "shared": {"value": false, "score": 7.164478302001953e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAssembly", "normalizedForm": "WebAssembly", "offsetStart": 135, "offsetEnd": 146}, "context": "We will conclude by comparing the advantages and disadvantages of the two approaches (JavaScript + WebAudio high level nodes vs. FAUST/WebAssembly) with special care on the performance measurements (latency, cpu usage, etc.) (Section 6).", "mentionContextAttributes": {"used": {"value": true, "score": 0.9795814752578735}, "created": {"value": false, "score": 1.609325408935547e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9795814752578735}, "created": {"value": true, "score": 0.9910354614257812}, "shared": {"value": false, "score": 0.0002582669258117676}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "AudioWorklet", "normalizedForm": "AudioWorklet", "offsetStart": 139, "offsetEnd": 151}, "context": "This way, we can replace the current power amp implementation (made of a dozen of high level WebAudio nodes) with a single FAUST generated AudioWorklet node .", "mentionContextAttributes": {"used": {"value": false, "score": 0.0006461739540100098}, "created": {"value": false, "score": 0.061369121074676514}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0006461739540100098}, "created": {"value": false, "score": 0.061369121074676514}, "shared": {"value": false, "score": 1.1920928955078125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 143, "offsetEnd": 151}, "context": "In this paper, we will detail how a PowerAmp works (Section 3), introduce our initial solution to mitigate the block-processing limitations of WebAudio (Section 4), and devote the rest of the article to detail our FAUST and WebAssembly-based approaches to achieve more faithful low-latency simulations (Section 5). ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0002459883689880371}, "created": {"value": true, "score": 0.9910354614257812}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999984622001648}, "created": {"value": true, "score": 0.998375415802002}, "shared": {"value": true, "score": 0.9525911211967468}}, "references": [{"label": "[6]", "normalizedForm": "[6]", "refKey": 6}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Presence", "normalizedForm": "Presence", "offsetStart": 150, "offsetEnd": 158}, "context": "In addition, the classic effects of oscillation and positive feedback could be obtained again when pushing some parameters close to the limit values (Presence, NFB gain).", "mentionContextAttributes": {"used": {"value": true, "score": 0.99988853931427}, "created": {"value": false, "score": 1.2755393981933594e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999885559082031}, "created": {"value": true, "score": 0.9963609576225281}, "shared": {"value": false, "score": 2.0265579223632812e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 151, "offsetEnd": 159}, "context": "Being able to adjust all the parameters (gains, filter parameters, transfer function of the waveshaper, etc.) is crucial to fine tune this stage using WebAudio nodes. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.12893974781036377}, "created": {"value": false, "score": 5.900859832763672e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999984622001648}, "created": {"value": true, "score": 0.998375415802002}, "shared": {"value": true, "score": 0.9525911211967468}}, "references": [{"label": "[6]", "normalizedForm": "[6]", "refKey": 6}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 156, "offsetEnd": 161}, "context": "for the Power Amp, we did measurements of the \"end-to-end\" latency, from guitar to cabinet and obtained consistently better values for latency with the new FAUST implementation: around 20-21 ms compared to the 23-24 ms latency of our previous finely-tuned JavaScript implementation (both using a Firefox Nightly 75.0a1 browser with an external Focusrite Scarlett and a Macbook Pro 16 under 10.14).", "mentionContextAttributes": {"used": {"value": true, "score": 0.9963127970695496}, "created": {"value": false, "score": 7.867813110351562e-06}, "shared": {"value": false, "score": 5.960464477539062e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999885559082031}, "created": {"value": true, "score": 0.9931788444519043}, "shared": {"value": false, "score": 7.164478302001953e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Presence", "normalizedForm": "Presence", "offsetStart": 156, "offsetEnd": 164}, "context": "In the FAUST implementation, the measurement 20 tools (Fig. 16) proved the sample-wise nature of the processing with a delay of just one-sample for the NFB/Presence loop.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9999885559082031}, "created": {"value": false, "score": 1.2755393981933594e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999885559082031}, "created": {"value": true, "score": 0.9963609576225281}, "shared": {"value": false, "score": 2.0265579223632812e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 157, "offsetEnd": 162}, "context": "For example, using the same types of filters with the same parameters, the same transfer function with the core issue of simulating properly a waveshaper in FAUST, the same gain values, etc.", "mentionContextAttributes": {"used": {"value": false, "score": 0.49961864948272705}, "created": {"value": false, "score": 1.5616416931152344e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999885559082031}, "created": {"value": true, "score": 0.9931788444519043}, "shared": {"value": false, "score": 7.164478302001953e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Presence", "normalizedForm": "Presence", "offsetStart": 172, "offsetEnd": 180}, "context": "The first step of the evaluation was to listen to the global overall sound when we used the Power Amp in standalone mode, tweaking the different parameters (Master volume, Presence, negative gain, transfer function parameters), and to check its behavior compared to our previous WebAudio/JavaScript implementation.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9999264478683472}, "created": {"value": false, "score": 0.0014865994453430176}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999885559082031}, "created": {"value": true, "score": 0.9963609576225281}, "shared": {"value": false, "score": 2.0265579223632812e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio API", "normalizedForm": "WebAudio API", "offsetStart": 176, "offsetEnd": 188}, "context": "In this paper, we detail our on-going browser-based re-creations of famous tube guitar amplifiers and describe the JavaScript implementations we have been developing using the WebAudio API. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0001418590545654297}, "created": {"value": true, "score": 0.9997884631156921}, "shared": {"value": false, "score": 6.318092346191406e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.988264799118042}, "created": {"value": true, "score": 0.9997884631156921}, "shared": {"value": false, "score": 3.62396240234375e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Chrome", "normalizedForm": "Chrome", "offsetStart": 177, "offsetEnd": 183}, "context": "With the current limitations in WebAudio, and quite strangely, this 3ms delay in the loop to conform to the specs, brings slightly different coloring of the amps between FF and Chrome. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.00043886899948120117}, "created": {"value": false, "score": 7.581710815429688e-05}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.02123206853866577}, "created": {"value": false, "score": 7.581710815429688e-05}, "shared": {"value": false, "score": 2.1457672119140625e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 177, "offsetEnd": 185}, "context": "Proper simulations of NFB and Presence have been quite difficult to achieve due to some limitations of the WebAudio API and divergences/bugs in how browsers generally parse the WebAudio graphs with loops. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0006154775619506836}, "created": {"value": false, "score": 0.00038564205169677734}, "shared": {"value": false, "score": 2.0265579223632812e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999984622001648}, "created": {"value": true, "score": 0.998375415802002}, "shared": {"value": true, "score": 0.9525911211967468}}, "references": [{"label": "[6]", "normalizedForm": "[6]", "refKey": 6}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 181, "offsetEnd": 186}, "context": "To circumvent these limitations and allow a proper sample-wise accuracy in the processing of loops, we decided to re-implement the NFB loop (and other critical parts in general) in FAUST as AudioWorklets, ending up re-implementing all the processing nodes present in the circuit: filters, gain and wave shaper, in this language.", "mentionContextAttributes": {"used": {"value": false, "score": 0.008364081382751465}, "created": {"value": false, "score": 0.01017540693283081}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999885559082031}, "created": {"value": true, "score": 0.9931788444519043}, "shared": {"value": false, "score": 7.164478302001953e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 184, "offsetEnd": 189}, "context": "The processing in our JavaScript implementation was based on blocks of 128 samples, inducing an undesirable delay of 3ms in the back-fed signal as opposed to only two samples with the FAUST loop .", "mentionContextAttributes": {"used": {"value": true, "score": 0.9998307228088379}, "created": {"value": false, "score": 0.01678633689880371}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999885559082031}, "created": {"value": true, "score": 0.9931788444519043}, "shared": {"value": false, "score": 7.164478302001953e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 190, "offsetEnd": 195}, "context": "In addition, the use of the FAUST IDE for coding, debugging and profiling this Power Amp plugin has been evaluated by six audio plugin developers with different levels of expertise with the FAUST language.", "mentionContextAttributes": {"used": {"value": true, "score": 0.8588145971298218}, "created": {"value": false, "score": 0.000999152660369873}, "shared": {"value": false, "score": 1.0728836059570312e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999885559082031}, "created": {"value": true, "score": 0.9931788444519043}, "shared": {"value": false, "score": 7.164478302001953e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 190, "offsetEnd": 198}, "context": "guitarix tube simulations), as we must be able to run these in a Web browser, and the FAUST toolchain still does not support hybrid FAUST/C source code when the compilation target is set to WebAudio/WebAssembly. The Temper distortion simulation, however, used a 100% FAUST based implementation of a simple waveshaper that produced a warm, adjustable, distortion sound that could easily fit our needs. ", "mentionContextAttributes": {"used": {"value": true, "score": 0.9108695983886719}, "created": {"value": false, "score": 0.0001830458641052246}, "shared": {"value": false, "score": 1.0251998901367188e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999984622001648}, "created": {"value": true, "score": 0.998375415802002}, "shared": {"value": true, "score": 0.9525911211967468}}, "references": [{"label": "[6]", "normalizedForm": "[6]", "refKey": 6}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "AudioWorklets", "normalizedForm": "AudioWorklets", "offsetStart": 190, "offsetEnd": 203}, "context": "To circumvent these limitations and allow a proper sample-wise accuracy in the processing of loops, we decided to re-implement the NFB loop (and other critical parts in general) in FAUST as AudioWorklets, ending up re-implementing all the processing nodes present in the circuit: filters, gain and wave shaper, in this language.", "mentionContextAttributes": {"used": {"value": false, "score": 0.008364081382751465}, "created": {"value": false, "score": 0.01017540693283081}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.008364081382751465}, "created": {"value": false, "score": 0.01017540693283081}, "shared": {"value": false, "score": 3.5762786865234375e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 197, "offsetEnd": 202}, "context": "Fortunately, FAUST quickly proposed WebAudio/WebAssembly as a compilation target and proved to be an ideal framework for developing powerful custom code (we even did some personal contributions to FAUST's WebAudio support) [6].", "mentionContextAttributes": {"used": {"value": false, "score": 0.0013813972473144531}, "created": {"value": false, "score": 0.23507946729660034}, "shared": {"value": false, "score": 2.5033950805664062e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999885559082031}, "created": {"value": true, "score": 0.9931788444519043}, "shared": {"value": false, "score": 7.164478302001953e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 197, "offsetEnd": 205}, "context": "FAUST has proven to be particularly suitable for porting the JavaScript code of an existing Power Amp in a very similar way, freeing it from the limitations, inconsistencies and constraints of the WebAudio API. ", "mentionContextAttributes": {"used": {"value": false, "score": 3.349781036376953e-05}, "created": {"value": false, "score": 0.0022568702697753906}, "shared": {"value": false, "score": 7.164478302001953e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999984622001648}, "created": {"value": true, "score": 0.998375415802002}, "shared": {"value": true, "score": 0.9525911211967468}}, "references": [{"label": "[6]", "normalizedForm": "[6]", "refKey": 6}]}, {"type": "software", "software-type": "implicit", "software-name": {"rawForm": "code", "normalizedForm": "code", "offsetStart": 198, "offsetEnd": 202}, "language": {"rawForm": "JavaScript", "normalizedForm": "JavaScript", "wikidataId": "Q2005", "offsetStart": 187, "offsetEnd": 197}, "context": "In our approach, we precisely analyzed the electronic schematics of amplifiers: lamps, filters structures, power supply, output transformers were identified and simulated part by part by JavaScript code relying on the WebAudio API. ", "mentionContextAttributes": {"used": {"value": true, "score": 0.999984622001648}, "created": {"value": false, "score": 0.0005170106887817383}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999984622001648}, "created": {"value": false, "score": 0.0022568702697753906}, "shared": {"value": false, "score": 7.164478302001953e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAssembly", "normalizedForm": "WebAssembly", "offsetStart": 199, "offsetEnd": 210}, "context": "guitarix tube simulations), as we must be able to run these in a Web browser, and the FAUST toolchain still does not support hybrid FAUST/C source code when the compilation target is set to WebAudio/WebAssembly. The Temper distortion simulation, however, used a 100% FAUST based implementation of a simple waveshaper that produced a warm, adjustable, distortion sound that could easily fit our needs. ", "mentionContextAttributes": {"used": {"value": true, "score": 0.9108695983886719}, "created": {"value": false, "score": 0.0001830458641052246}, "shared": {"value": false, "score": 1.0251998901367188e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9795814752578735}, "created": {"value": true, "score": 0.9910354614257812}, "shared": {"value": false, "score": 0.0002582669258117676}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 205, "offsetEnd": 213}, "context": "Fortunately, FAUST quickly proposed WebAudio/WebAssembly as a compilation target and proved to be an ideal framework for developing powerful custom code (we even did some personal contributions to FAUST's WebAudio support) [6].", "mentionContextAttributes": {"used": {"value": false, "score": 0.0013813972473144531}, "created": {"value": false, "score": 0.23507946729660034}, "shared": {"value": false, "score": 2.5033950805664062e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999984622001648}, "created": {"value": true, "score": 0.998375415802002}, "shared": {"value": true, "score": 0.9525911211967468}}, "references": [{"label": "[6]", "normalizedForm": "[6]", "refKey": 6, "offsetStart": 6202, "offsetEnd": 6205}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Presence", "normalizedForm": "Presence", "offsetStart": 205, "offsetEnd": 213}, "context": "Finally we added GUI elements (knobs) in order to fine tune in real time different parameters (Fig. 13), in particular the ones that control the waveshaper (drive, curve, distorsion), the NFB gain and the Presence filters.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9891793727874756}, "created": {"value": false, "score": 0.002908945083618164}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999885559082031}, "created": {"value": true, "score": 0.9963609576225281}, "shared": {"value": false, "score": 2.0265579223632812e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio API", "normalizedForm": "WebAudio API", "offsetStart": 209, "offsetEnd": 221}, "context": "Without this delay node, Firefox stops rendering the graph, while Chrome does not complain but adds, behind the scenes, a 3 ms delay (the minimal delay from a frame audio buffer of 128 sample-frames as within WebAudio API, the signal is always processed in packets of 128 samples, which means that the minimum value for a delay is 128 / sample rate, i.e. about 128/44100 = 3ms). ", "mentionContextAttributes": {"used": {"value": false, "score": 0.02123206853866577}, "created": {"value": false, "score": 2.7418136596679688e-06}, "shared": {"value": false, "score": 2.1457672119140625e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.988264799118042}, "created": {"value": true, "score": 0.9997884631156921}, "shared": {"value": false, "score": 3.62396240234375e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 214, "offsetEnd": 219}, "context": "In this paper, we will detail how a PowerAmp works (Section 3), introduce our initial solution to mitigate the block-processing limitations of WebAudio (Section 4), and devote the rest of the article to detail our FAUST and WebAssembly-based approaches to achieve more faithful low-latency simulations (Section 5).", "mentionContextAttributes": {"used": {"value": false, "score": 0.0002459883689880371}, "created": {"value": true, "score": 0.9910354614257812}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999885559082031}, "created": {"value": true, "score": 0.9931788444519043}, "shared": {"value": false, "score": 7.164478302001953e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 218, "offsetEnd": 226}, "context": "In our approach, we precisely analyzed the electronic schematics of amplifiers: lamps, filters structures, power supply, output transformers were identified and simulated part by part by JavaScript code relying on the WebAudio API. ", "mentionContextAttributes": {"used": {"value": true, "score": 0.999984622001648}, "created": {"value": false, "score": 0.0005170106887817383}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999984622001648}, "created": {"value": true, "score": 0.998375415802002}, "shared": {"value": true, "score": 0.9525911211967468}}, "references": [{"label": "[6]", "normalizedForm": "[6]", "refKey": 6}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAssembly", "normalizedForm": "WebAssembly", "offsetStart": 224, "offsetEnd": 235}, "context": "In this paper, we will detail how a PowerAmp works (Section 3), introduce our initial solution to mitigate the block-processing limitations of WebAudio (Section 4), and devote the rest of the article to detail our FAUST and WebAssembly-based approaches to achieve more faithful low-latency simulations (Section 5).", "mentionContextAttributes": {"used": {"value": false, "score": 0.0002459883689880371}, "created": {"value": true, "score": 0.9910354614257812}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9795814752578735}, "created": {"value": true, "score": 0.9910354614257812}, "shared": {"value": false, "score": 0.0002582669258117676}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio filter API", "normalizedForm": "WebAudio filter API", "offsetStart": 266, "offsetEnd": 285}, "context": "After trying to adapt existing FAUST filters to behave like WebAudio filter ones, and after talking with FAUST and WebAudio implementers the conclusion was that for a really faithfull behavior, it would be better to start from the original C++ implementation of the WebAudio filter API, taken from the Chromium browser source code. ", "mentionContextAttributes": {"used": {"value": true, "score": 0.8167414665222168}, "created": {"value": false, "score": 0.00015974044799804688}, "shared": {"value": false, "score": 1.9073486328125e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.8167414665222168}, "created": {"value": false, "score": 0.00015974044799804688}, "shared": {"value": false, "score": 1.9073486328125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 267, "offsetEnd": 272}, "context": "guitarix tube simulations), as we must be able to run these in a Web browser, and the FAUST toolchain still does not support hybrid FAUST/C source code when the compilation target is set to WebAudio/WebAssembly. The Temper distortion simulation, however, used a 100% FAUST based implementation of a simple waveshaper that produced a warm, adjustable, distortion sound that could easily fit our needs.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9108695983886719}, "created": {"value": false, "score": 0.0001830458641052246}, "shared": {"value": false, "score": 1.0251998901367188e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999885559082031}, "created": {"value": true, "score": 0.9931788444519043}, "shared": {"value": false, "score": 7.164478302001953e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 279, "offsetEnd": 287}, "context": "The first step of the evaluation was to listen to the global overall sound when we used the Power Amp in standalone mode, tweaking the different parameters (Master volume, Presence, negative gain, transfer function parameters), and to check its behavior compared to our previous WebAudio/JavaScript implementation. ", "mentionContextAttributes": {"used": {"value": true, "score": 0.9999264478683472}, "created": {"value": false, "score": 0.0014865994453430176}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999984622001648}, "created": {"value": true, "score": 0.998375415802002}, "shared": {"value": true, "score": 0.9525911211967468}}, "references": [{"label": "[6]", "normalizedForm": "[6]", "refKey": 6}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Firefox Nightly", "normalizedForm": "Firefox Nightly", "offsetStart": 296, "offsetEnd": 311}, "version": {"rawForm": "75.0a1", "normalizedForm": "75.0a1", "offsetStart": 312, "offsetEnd": 318}, "context": "for the Power Amp, we did measurements of the \"end-to-end\" latency, from guitar to cabinet and obtained consistently better values for latency with the new FAUST implementation: around 20-21 ms compared to the 23-24 ms latency of our previous finely-tuned JavaScript implementation (both using a Firefox Nightly 75.0a1 browser with an external Focusrite Scarlett and a Macbook Pro 16 under 10.14). ", "mentionContextAttributes": {"used": {"value": true, "score": 0.9963127970695496}, "created": {"value": false, "score": 7.867813110351562e-06}, "shared": {"value": false, "score": 5.960464477539062e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9963127970695496}, "created": {"value": false, "score": 7.867813110351562e-06}, "shared": {"value": false, "score": 5.960464477539062e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Chromium", "normalizedForm": "Chromium", "offsetStart": 302, "offsetEnd": 310}, "context": "After trying to adapt existing FAUST filters to behave like WebAudio filter ones, and after talking with FAUST and WebAudio implementers the conclusion was that for a really faithfull behavior, it would be better to start from the original C++ implementation of the WebAudio filter API, taken from the Chromium browser source code. ", "mentionContextAttributes": {"used": {"value": true, "score": 0.8167414665222168}, "created": {"value": false, "score": 0.00015974044799804688}, "shared": {"value": false, "score": 1.9073486328125e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.8167414665222168}, "created": {"value": false, "score": 0.00015974044799804688}, "shared": {"value": false, "score": 1.9073486328125e-06}}}], "references": [{"refKey": 6, "tei": "<biblStruct xml:id=\"b6\">\n\t<analytic>\n\t\t<title level=\"a\" type=\"main\">Using Faust DSL to Develop Custom, Sample Accurate DSP Code and Audio Plugins for the Web Browser</title>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Shihong</forename><surname>Ren</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">St\u00e9phane</forename><surname>Letz</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Yann</forename><surname>Orlarey</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Romain</forename><surname>Michon</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Dominique</forename><surname>Fober</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Michel</forename><surname>Buffa</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Jerome</forename><surname>Lebrun</surname></persName>\n\t\t</author>\n\t\t<idno type=\"DOI\">10.17743/jaes.2020.0014</idno>\n\t</analytic>\n\t<monogr>\n\t\t<title level=\"j\">Journal of the Audio Engineering Society</title>\n\t\t<title level=\"j\" type=\"abbrev\">J. Audio Eng. Soc.</title>\n\t\t<idno type=\"ISSN\">1549-4950</idno>\n\t\t<imprint>\n\t\t\t<biblScope unit=\"volume\">68</biblScope>\n\t\t\t<biblScope unit=\"issue\">10</biblScope>\n\t\t\t<biblScope unit=\"page\" from=\"703\" to=\"716\" />\n\t\t\t<date type=\"published\" when=\"2020-12-07\" />\n\t\t\t<publisher>Audio Engineering Society</publisher>\n\t\t</imprint>\n\t</monogr>\n</biblStruct>\n"}], "runtime": 16076, "id": "57e1f9a762dabe5aaeb3a50bdd1d20b6a8dabb37", "metadata": {"id": "57e1f9a762dabe5aaeb3a50bdd1d20b6a8dabb37"}, "original_file_path": "../../datalake/Samuel/SOFTware-Sync/downloads/xml/hal-03087768.grobid.tei.xml", "file_name": "hal-03087768.grobid.tei.xml"}