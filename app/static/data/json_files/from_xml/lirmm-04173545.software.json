{"application": "software-mentions", "version": "0.8.0", "date": "2024-04-15T07:34+0000", "md5": "7CB05985CA4E48D5CB58246C412AFAB8", "mentions": [{"type": "software", "software-type": "software", "software-name": {"rawForm": "LifeSWS", "normalizedForm": "LifeSWS", "offsetStart": 0, "offsetEnd": 7}, "context": "LifeSWS supports complete and automatic model retraining, using ML tools, or it can delegate the model update process to components that implement a more sophisticated update procedure, involving for instance a fast training of a simple surrogate model, while the main model is updated.", "mentionContextAttributes": {"used": {"value": false, "score": 3.796815872192383e-05}, "created": {"value": false, "score": 0.00016689300537109375}, "shared": {"value": false, "score": 6.556510925292969e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9950466752052307}, "created": {"value": true, "score": 0.9999451041221619}, "shared": {"value": false, "score": 0.4200749397277832}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Gypscie", "normalizedForm": "Gypscie", "offsetStart": 0, "offsetEnd": 7}, "context": "Gypscie offers a web interface that eases ML model management. ", "mentionContextAttributes": {"used": {"value": false, "score": 2.5093555450439453e-05}, "created": {"value": false, "score": 0.04744678735733032}, "shared": {"value": false, "score": 0.0008805990219116211}}, "documentContextAttributes": {"used": {"value": false, "score": 0.23937523365020752}, "created": {"value": true, "score": 0.999470591545105}, "shared": {"value": false, "score": 0.002493917942047119}}, "references": [{"label": "[35]", "normalizedForm": "[35]", "refKey": 35}, {"label": "[38]", "normalizedForm": "[38]", "refKey": 38}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Gypscie", "normalizedForm": "Gypscie", "offsetStart": 0, "offsetEnd": 7}, "context": "Gypscie instruments the running scripts to register in MLFlow the values of performance metrics, which the system collects and stores into its catalog, once the job has finished its execution.", "mentionContextAttributes": {"used": {"value": false, "score": 0.01501154899597168}, "created": {"value": false, "score": 0.00023484230041503906}, "shared": {"value": false, "score": 1.7881393432617188e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.23937523365020752}, "created": {"value": true, "score": 0.999470591545105}, "shared": {"value": false, "score": 0.002493917942047119}}, "references": [{"label": "[35]", "normalizedForm": "[35]", "refKey": 35}, {"label": "[38]", "normalizedForm": "[38]", "refKey": 38}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LifeSWS", "normalizedForm": "LifeSWS", "offsetStart": 0, "offsetEnd": 7}, "context": "LifeSWS looks up the provenance and cache, and triggers OpenAlea's distributed execution. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.00822538137435913}, "created": {"value": false, "score": 0.00037997961044311523}, "shared": {"value": false, "score": 4.172325134277344e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9950466752052307}, "created": {"value": true, "score": 0.9999451041221619}, "shared": {"value": false, "score": 0.4200749397277832}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LifeSWS", "normalizedForm": "LifeSWS", "offsetStart": 0, "offsetEnd": 7}, "context": "LifeSWS provides Data Services to feed the Galaxy workflow with the output of OpenAlea workflow when execution has been done. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0006503462791442871}, "created": {"value": false, "score": 3.129243850708008e-05}, "shared": {"value": false, "score": 2.086162567138672e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9950466752052307}, "created": {"value": true, "score": 0.9999451041221619}, "shared": {"value": false, "score": 0.4200749397277832}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyVerse", "normalizedForm": "CyVerse", "offsetStart": 0, "offsetEnd": 7}, "context": "CyVerse is the closest to LifeSWS, but lacks key services such as user-specific Web dashboards, model management, provenance and cache, and Model/Workflow APIs.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00011628866195678711}, "created": {"value": false, "score": 0.0001150965690612793}, "shared": {"value": false, "score": 5.662441253662109e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0001289844512939453}, "created": {"value": false, "score": 0.002932131290435791}, "shared": {"value": false, "score": 5.662441253662109e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LifeSWS", "normalizedForm": "LifeSWS", "offsetStart": 0, "offsetEnd": 7}, "context": "LifeSWS capitalizes on our previous experience in developing major systems for scientific applications such as: polystores with CloudMdSQL [17], workflows with OpenAlea [30], model management with Gypscie [35]  [38], querying data across distributed services with DfAnalyzer [32] and Provlake [33], monitoring and debugging applications implemented in big data frameworks such as Apache Spark [12], and debugging workflows with BugDoc [18] and VersionClimber [29].", "mentionContextAttributes": {"used": {"value": false, "score": 0.00041860342025756836}, "created": {"value": false, "score": 0.11935621500015259}, "shared": {"value": false, "score": 2.562999725341797e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9950466752052307}, "created": {"value": true, "score": 0.9999451041221619}, "shared": {"value": false, "score": 0.4200749397277832}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LifeSWS", "normalizedForm": "LifeSWS", "offsetStart": 0, "offsetEnd": 7}, "context": "LifeSWS services can be implemented and deployed in various platforms (using different software and hardware infrastructures) to address the specific requirements of vertical applications.", "mentionContextAttributes": {"used": {"value": false, "score": 3.510713577270508e-05}, "created": {"value": false, "score": 0.03180474042892456}, "shared": {"value": false, "score": 0.00044459104537963867}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9950466752052307}, "created": {"value": true, "score": 0.9999451041221619}, "shared": {"value": false, "score": 0.4200749397277832}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Gypscie", "normalizedForm": "Gypscie", "offsetStart": 0, "offsetEnd": 7}, "context": "Gypscie's services are available through two different interfaces.", "mentionContextAttributes": {"used": {"value": false, "score": 5.1081180572509766e-05}, "created": {"value": false, "score": 0.0011522173881530762}, "shared": {"value": false, "score": 0.002493917942047119}}, "documentContextAttributes": {"used": {"value": false, "score": 0.23937523365020752}, "created": {"value": true, "score": 0.999470591545105}, "shared": {"value": false, "score": 0.002493917942047119}}, "references": [{"label": "[35]", "normalizedForm": "[35]", "refKey": 35}, {"label": "[38]", "normalizedForm": "[38]", "refKey": 38}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Gypscie", "normalizedForm": "Gypscie", "offsetStart": 0, "offsetEnd": 7}, "context": "Gypscie implements the DJEnsemble [27] inference approach.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0001926422119140625}, "created": {"value": false, "score": 1.8656253814697266e-05}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.23937523365020752}, "created": {"value": true, "score": 0.999470591545105}, "shared": {"value": false, "score": 0.002493917942047119}}, "references": [{"label": "[35]", "normalizedForm": "[35]", "refKey": 35}, {"label": "[38]", "normalizedForm": "[38]", "refKey": 38}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Gypscie", "normalizedForm": "Gypscie", "offsetStart": 0, "offsetEnd": 7}, "context": "Gypscie runs the optimization process, executes the selected models, and composes the final result.", "mentionContextAttributes": {"used": {"value": false, "score": 0.013754665851593018}, "created": {"value": false, "score": 0.0003834366798400879}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.23937523365020752}, "created": {"value": true, "score": 0.999470591545105}, "shared": {"value": false, "score": 0.002493917942047119}}, "references": [{"label": "[35]", "normalizedForm": "[35]", "refKey": 35}, {"label": "[38]", "normalizedForm": "[38]", "refKey": 38}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Gypscie", "normalizedForm": "Gypscie", "offsetStart": 0, "offsetEnd": 7}, "context": "Gypscie registers metadata in its catalog for accessing data stored in an external data source, such as Databricks Delta Lake or Lustre file system.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0002962350845336914}, "created": {"value": false, "score": 6.93202018737793e-05}, "shared": {"value": false, "score": 7.748603820800781e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.23937523365020752}, "created": {"value": true, "score": 0.999470591545105}, "shared": {"value": false, "score": 0.002493917942047119}}, "references": [{"label": "[35]", "normalizedForm": "[35]", "refKey": 35}, {"label": "[38]", "normalizedForm": "[38]", "refKey": 38}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Gypscie", "normalizedForm": "Gypscie", "offsetStart": 0, "offsetEnd": 7}, "context": "Gypscie has been deployed on a server at LNCC, and interfaced with two execution environments (see Section 5 : the Santos Dumont HPC system at LNCC which could be used in large model training (e.g., using PyTorch) and a Spark shared-nothing cluster to perform large-scale data transformation.", "mentionContextAttributes": {"used": {"value": false, "score": 0.021603941917419434}, "created": {"value": false, "score": 0.0567590594291687}, "shared": {"value": false, "score": 4.172325134277344e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.23937523365020752}, "created": {"value": true, "score": 0.999470591545105}, "shared": {"value": false, "score": 0.002493917942047119}}, "references": [{"label": "[35]", "normalizedForm": "[35]", "refKey": 35}, {"label": "[38]", "normalizedForm": "[38]", "refKey": 38}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LifeSWS", "normalizedForm": "LifeSWS", "offsetStart": 0, "offsetEnd": 7}, "context": "LifeSWS provides three main layers of services (presentation and directory, workflow and data management) and APIs to interface with different workflow systems, data sources and data stores.", "mentionContextAttributes": {"used": {"value": false, "score": 7.88569450378418e-05}, "created": {"value": false, "score": 0.0010197162628173828}, "shared": {"value": false, "score": 5.304813385009766e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9950466752052307}, "created": {"value": true, "score": 0.9999451041221619}, "shared": {"value": false, "score": 0.4200749397277832}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LifeSWS", "normalizedForm": "LifeSWS", "offsetStart": 0, "offsetEnd": 7}, "context": "LifeSWS services can be implemented and deployed in various platforms to address the specific requirements of vertical applications.", "mentionContextAttributes": {"used": {"value": false, "score": 3.212690353393555e-05}, "created": {"value": false, "score": 0.17175441980361938}, "shared": {"value": false, "score": 8.159875869750977e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9950466752052307}, "created": {"value": true, "score": 0.9999451041221619}, "shared": {"value": false, "score": 0.4200749397277832}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LifeSWS", "normalizedForm": "LifeSWS", "offsetStart": 0, "offsetEnd": 7}, "context": "LifeSWS capitalizes on our previous experience in developing major systems for scientific applications.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00014019012451171875}, "created": {"value": true, "score": 0.9721166491508484}, "shared": {"value": false, "score": 5.364418029785156e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9950466752052307}, "created": {"value": true, "score": 0.9999451041221619}, "shared": {"value": false, "score": 0.4200749397277832}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "OpenAlea", "normalizedForm": "OpenAlea", "offsetStart": 0, "offsetEnd": 8}, "context": "OpenAlea then schedules the execution of the workflow on a distributed infrastructure. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.015827536582946777}, "created": {"value": false, "score": 0.004386186599731445}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.7235590219497681}, "created": {"value": true, "score": 0.956467866897583}, "shared": {"value": false, "score": 0.00012117624282836914}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Kepler", "normalizedForm": "Kepler", "offsetStart": 0, "offsetEnd": 11}, "context": "Kepler [19] addresses other scientific domains such as chemistry, ecology, geology, molecular biology and oceanography.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00015401840209960938}, "created": {"value": false, "score": 1.7344951629638672e-05}, "shared": {"value": false, "score": 1.1324882507324219e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.00015401840209960938}, "created": {"value": false, "score": 0.2663455009460449}, "shared": {"value": false, "score": 1.1324882507324219e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyVerse", "normalizedForm": "CyVerse", "offsetStart": 0, "offsetEnd": 12}, "context": "CyVerse [11] is a platform for life sciences with services and resources to deal with huge datasets and complex data analyses. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0001289844512939453}, "created": {"value": false, "score": 0.002932131290435791}, "shared": {"value": false, "score": 4.172325134277344e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0001289844512939453}, "created": {"value": false, "score": 0.002932131290435791}, "shared": {"value": false, "score": 5.662441253662109e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Pl@ntNet", "normalizedForm": "Pl@ntNet", "offsetStart": 0, "offsetEnd": 13}, "context": "Pl@ntNet [16] is a participatory platform and information system dedicated to the production and sharing of botanical data in order to study biodiversity. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.00016641616821289062}, "created": {"value": false, "score": 0.0015840530395507812}, "shared": {"value": false, "score": 3.6776065826416016e-05}}, "documentContextAttributes": {"used": {"value": false, "score": 0.00016641616821289062}, "created": {"value": false, "score": 0.0015840530395507812}, "shared": {"value": false, "score": 3.6776065826416016e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "VersionClimber", "normalizedForm": "VersionClimber", "offsetStart": 0, "offsetEnd": 14}, "context": "VersionClimber automatically discovers newer versions of these packages that are compatible.", "mentionContextAttributes": {"used": {"value": false, "score": 8.07642936706543e-05}, "created": {"value": false, "score": 0.0001628398895263672}, "shared": {"value": false, "score": 1.6093254089355469e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.001529395580291748}, "created": {"value": false, "score": 0.11935627460479736}, "shared": {"value": false, "score": 0.00012117624282836914}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Workflow Access", "normalizedForm": "Workflow Access", "offsetStart": 0, "offsetEnd": 15}, "context": "Workflow Access APIs.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00015997886657714844}, "created": {"value": false, "score": 9.137392044067383e-05}, "shared": {"value": false, "score": 0.004976809024810791}}, "documentContextAttributes": {"used": {"value": true, "score": 0.7235590219497681}, "created": {"value": false, "score": 0.01029139757156372}, "shared": {"value": false, "score": 0.004976809024810791}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "VersionClimber", "normalizedForm": "VersionClimber", "offsetStart": 0, "offsetEnd": 19}, "context": "VersionClimber [29] is another automated system that deals with the problem of the pipelines that apply multiple packages, each of which evolves independently, to one or several data sources. ", "mentionContextAttributes": {"used": {"value": false, "score": 4.380941390991211e-05}, "created": {"value": false, "score": 0.000286102294921875}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.001529395580291748}, "created": {"value": false, "score": 0.11935627460479736}, "shared": {"value": false, "score": 0.00012117624282836914}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "InfraPhenoGrid", "normalizedForm": "InfraPhenoGrid", "offsetStart": 0, "offsetEnd": 19}, "context": "InfraPhenoGrid [28] is a grid-based platform to efficiently manage datasets produced by the PhenoArch plant phenomics platform in Montpellier and deploy scientific workflows using a middleware that hides complexity.", "mentionContextAttributes": {"used": {"value": false, "score": 6.669759750366211e-05}, "created": {"value": false, "score": 0.0008345246315002441}, "shared": {"value": false, "score": 4.172325134277344e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0001036524772644043}, "created": {"value": false, "score": 0.028104424476623535}, "shared": {"value": false, "score": 3.635883331298828e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CloudMdsQL", "normalizedForm": "CloudMdsQL", "offsetStart": 2, "offsetEnd": 12}, "context": "A CloudMdsQL query may contain nested subqueries, and each subquery addresses directly a particular data store and may contain embedded invocations to the data store native query interface. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0005997419357299805}, "created": {"value": false, "score": 1.3649463653564453e-05}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0005997419357299805}, "created": {"value": false, "score": 0.09038668870925903}, "shared": {"value": false, "score": 2.4139881134033203e-05}}}, {"type": "software", "software-type": "software", "wikidataId": "Q165194", "wikipediaExternalRef": 27697009, "lang": "en", "confidence": 0.8291, "software-name": {"rawForm": "API", "normalizedForm": "API", "wikidataId": "Q165194", "wikipediaExternalRef": 27697009, "lang": "en", "confidence": 0.8291, "offsetStart": 5, "offsetEnd": 8}, "context": "This API consists of one or more publicly exposed endpoints that specify where and how to access the services with a request-response protocol, typically in JSON.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0005204081535339355}, "created": {"value": false, "score": 0.0008755922317504883}, "shared": {"value": false, "score": 1.1324882507324219e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.7235590219497681}, "created": {"value": false, "score": 0.01247626543045044}, "shared": {"value": false, "score": 0.42502152919769287}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LifeSWS", "normalizedForm": "LifeSWS", "offsetStart": 9, "offsetEnd": 16}, "context": "Finally, LifeSWS offers an external data view to ease the development of dashboards and workflows, which integrates observational and predictive data. ", "mentionContextAttributes": {"used": {"value": false, "score": 2.0802021026611328e-05}, "created": {"value": false, "score": 0.029262661933898926}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9950466752052307}, "created": {"value": true, "score": 0.9999451041221619}, "shared": {"value": false, "score": 0.4200749397277832}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Gypscie", "normalizedForm": "Gypscie", "offsetStart": 9, "offsetEnd": 16}, "context": "Finally, Gypscie integrates the SAVIME in-memory multi-dimensional array database system [20].", "mentionContextAttributes": {"used": {"value": false, "score": 0.0011137723922729492}, "created": {"value": false, "score": 1.4007091522216797e-05}, "shared": {"value": false, "score": 1.7881393432617188e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.23937523365020752}, "created": {"value": true, "score": 0.999470591545105}, "shared": {"value": false, "score": 0.002493917942047119}}, "references": [{"label": "[35]", "normalizedForm": "[35]", "refKey": 35}, {"label": "[38]", "normalizedForm": "[38]", "refKey": 38}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "RootSystemTracker", "normalizedForm": "RootSystemTracker", "offsetStart": 9, "offsetEnd": 26}, "context": "Finally, RootSystemTracker provides a workflow for the automatic structural and developmental 2D root phenotyping of Arabidopsis plants in Petri dishes [10].", "mentionContextAttributes": {"used": {"value": false, "score": 5.263090133666992e-05}, "created": {"value": false, "score": 4.2498111724853516e-05}, "shared": {"value": false, "score": 1.7881393432617188e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0691826343536377}, "created": {"value": false, "score": 4.2498111724853516e-05}, "shared": {"value": false, "score": 1.7881393432617188e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LifeSWS", "normalizedForm": "LifeSWS", "offsetStart": 10, "offsetEnd": 17}, "context": "For this, LifeSWS first uses the Data Store service, to find the metadata of the query r and other regions. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.024089038372039795}, "created": {"value": false, "score": 0.0003738999366760254}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9950466752052307}, "created": {"value": true, "score": 0.9999451041221619}, "shared": {"value": false, "score": 0.4200749397277832}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "OpenAlea", "normalizedForm": "OpenAlea", "offsetStart": 10, "offsetEnd": 18}, "context": "Moreover, OpenAlea models and workflows can be upgraded automatically using VersionClimber [29] from the Workflow Integration services to find the latest compatible versions of all the modela and libraries the workflows depend on.", "mentionContextAttributes": {"used": {"value": false, "score": 0.001529395580291748}, "created": {"value": false, "score": 4.6193599700927734e-05}, "shared": {"value": false, "score": 0.00012117624282836914}}, "documentContextAttributes": {"used": {"value": true, "score": 0.7235590219497681}, "created": {"value": true, "score": 0.956467866897583}, "shared": {"value": false, "score": 0.00012117624282836914}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LifeSWS", "normalizedForm": "LifeSWS", "offsetStart": 11, "offsetEnd": 18}, "context": "Otherwise, LifeSWS needs to find the similar regions to r and return their predicting models. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0008402466773986816}, "created": {"value": false, "score": 2.5570392608642578e-05}, "shared": {"value": false, "score": 1.7881393432617188e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9950466752052307}, "created": {"value": true, "score": 0.9999451041221619}, "shared": {"value": false, "score": 0.4200749397277832}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Gypscie", "normalizedForm": "Gypscie", "offsetStart": 13, "offsetEnd": 20}, "context": "Furthermore, Gypscie enables other tools to access its services through a ", "mentionContextAttributes": {"used": {"value": false, "score": 3.534555435180664e-05}, "created": {"value": false, "score": 0.000808417797088623}, "shared": {"value": false, "score": 3.796815872192383e-05}}, "documentContextAttributes": {"used": {"value": false, "score": 0.23937523365020752}, "created": {"value": true, "score": 0.999470591545105}, "shared": {"value": false, "score": 0.002493917942047119}}, "references": [{"label": "[35]", "normalizedForm": "[35]", "refKey": 35}, {"label": "[38]", "normalizedForm": "[38]", "refKey": 38}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Gypscie", "normalizedForm": "Gypscie", "offsetStart": 13, "offsetEnd": 20}, "context": "In addition, Gypscie allows models built in other external systems to be imported and registered into it. ", "mentionContextAttributes": {"used": {"value": false, "score": 4.404783248901367e-05}, "created": {"value": false, "score": 0.0029268860816955566}, "shared": {"value": false, "score": 2.4437904357910156e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.23937523365020752}, "created": {"value": true, "score": 0.999470591545105}, "shared": {"value": false, "score": 0.002493917942047119}}, "references": [{"label": "[35]", "normalizedForm": "[35]", "refKey": 35}, {"label": "[38]", "normalizedForm": "[38]", "refKey": 38}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LifeSWS", "normalizedForm": "LifeSWS", "offsetStart": 13, "offsetEnd": 20}, "context": "In contrast, LifeSWS addresses a wider spectrum of applications in life sciences and provides key services such as user-specific Web dashboards, model management, provenance and cache, and workflow integration. ", "mentionContextAttributes": {"used": {"value": false, "score": 3.7729740142822266e-05}, "created": {"value": false, "score": 0.0010454654693603516}, "shared": {"value": false, "score": 1.6391277313232422e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9950466752052307}, "created": {"value": true, "score": 0.9999451041221619}, "shared": {"value": false, "score": 0.4200749397277832}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Gypscie", "normalizedForm": "Gypscie", "offsetStart": 13, "offsetEnd": 20}, "context": "Thus, within Gypscie a user can always review the lineage of transformation that led to the dataset's current version.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00029540061950683594}, "created": {"value": false, "score": 6.848573684692383e-05}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.23937523365020752}, "created": {"value": true, "score": 0.999470591545105}, "shared": {"value": false, "score": 0.002493917942047119}}, "references": [{"label": "[35]", "normalizedForm": "[35]", "refKey": 35}, {"label": "[38]", "normalizedForm": "[38]", "refKey": 38}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Galaxy", "normalizedForm": "Galaxy", "offsetStart": 14, "offsetEnd": 20}, "context": "For instance, Galaxy is quite popular in bioinformatics, while OpenAlea is specialized in plant phenotyping. ", "mentionContextAttributes": {"used": {"value": false, "score": 5.728006362915039e-05}, "created": {"value": false, "score": 0.0013248920440673828}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999882578849792}, "created": {"value": true, "score": 0.956467866897583}, "shared": {"value": false, "score": 3.629922866821289e-05}}, "references": [{"label": "[1]", "normalizedForm": "[1]", "refKey": 1}, {"label": "[1]", "normalizedForm": "[1]", "refKey": 1}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Cloud-MdsQL", "normalizedForm": "Cloud-MdsQL", "offsetStart": 14, "offsetEnd": 25}, "context": "For instance, Cloud-MdsQL [17] supports a functional SQL-like language, capable of querying multiple heterogeneous data stores within a single query that may contain embedded invocations to each data store's native query interface.", "mentionContextAttributes": {"used": {"value": false, "score": 3.403425216674805e-05}, "created": {"value": false, "score": 0.0003066062927246094}, "shared": {"value": false, "score": 8.940696716308594e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 3.403425216674805e-05}, "created": {"value": false, "score": 0.0003066062927246094}, "shared": {"value": false, "score": 8.940696716308594e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "DfAnalyzer", "normalizedForm": "DfAnalyzer", "offsetStart": 14, "offsetEnd": 29}, "context": "For instance, DfAnalyzer [32] is a tool that enables monitoring, debugging, steering, and analysis of dataflows while the data is being generated by scientific applications. ", "mentionContextAttributes": {"used": {"value": false, "score": 2.3543834686279297e-05}, "created": {"value": false, "score": 0.003964483737945557}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.00041860342025756836}, "created": {"value": false, "score": 0.11935621500015259}, "shared": {"value": false, "score": 2.562999725341797e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LifeSWS", "normalizedForm": "LifeSWS", "offsetStart": 17, "offsetEnd": 24}, "context": "We illustrated a LifeSWS platform with Gypscie, which provides services to develop, share, improve and publish scientific artifacts (datasets, models, etc.).", "mentionContextAttributes": {"used": {"value": false, "score": 0.00030624866485595703}, "created": {"value": true, "score": 0.999470591545105}, "shared": {"value": false, "score": 7.647275924682617e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9950466752052307}, "created": {"value": true, "score": 0.9999451041221619}, "shared": {"value": false, "score": 0.4200749397277832}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LifeSWS", "normalizedForm": "LifeSWS", "offsetStart": 18, "offsetEnd": 25}, "context": "In this use case, LifeSWS is used by domain scientists in order to analyze, process and visualise High Throughput Phenotyping (HTP) experiments, with the following workflows, models and datasets: -OpenAlea workflows that implement a specific phenotyping processing such as 3D maize segmentation, organ tracking, or root system reconstruction; -A Galaxy workflow for a Genome-Wide Association Study (GWAS); -Image analysis algorithms to segment the background, to reconstruct the plant in 3D using space carving, semantic segmentation and tracking of the organs; -Functional-structural plant models that are used either to compute nonobserved information like light interception by leaves [2] or water fluxes inside the root system [4], or to generate synthetic data for training or validating methods of plant reconstruction; -Raw image datasets obtained from the phenotyping platform, which contain timeseries of several images per plant; -Outputs of plant traits (e.g., leaf angle, light use efficiency, or biomass accumulation) for each genotype are saved in the Phenotyping Hybrid Information System (PHIS) [22].", "mentionContextAttributes": {"used": {"value": false, "score": 0.0024166107177734375}, "created": {"value": false, "score": 0.0013208389282226562}, "shared": {"value": false, "score": 1.6093254089355469e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9950466752052307}, "created": {"value": true, "score": 0.9999451041221619}, "shared": {"value": false, "score": 0.4200749397277832}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LifeSWS", "normalizedForm": "LifeSWS", "offsetStart": 18, "offsetEnd": 25}, "context": "In this use case, LifeSWS is used by scientists in order to select ML models that would perform best to predict the transmission of the Dengue virus in a particular region.", "mentionContextAttributes": {"used": {"value": false, "score": 0.004906356334686279}, "created": {"value": false, "score": 0.00029659271240234375}, "shared": {"value": false, "score": 1.7881393432617188e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9950466752052307}, "created": {"value": true, "score": 0.9999451041221619}, "shared": {"value": false, "score": 0.4200749397277832}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Gypscie", "normalizedForm": "Gypscie", "offsetStart": 19, "offsetEnd": 26}, "context": "The latter enables Gypscie to communicate with the most frequently used ML engines, such as Pytorch and Scikit-learn. ", "mentionContextAttributes": {"used": {"value": false, "score": 7.063150405883789e-05}, "created": {"value": false, "score": 9.125471115112305e-05}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.23937523365020752}, "created": {"value": true, "score": 0.999470591545105}, "shared": {"value": false, "score": 0.002493917942047119}}, "references": [{"label": "[35]", "normalizedForm": "[35]", "refKey": 35}, {"label": "[38]", "normalizedForm": "[38]", "refKey": 38}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CloudMdsQL", "normalizedForm": "CloudMdsQL", "offsetStart": 19, "offsetEnd": 29}, "context": "In particular, the CloudMdsQL polystore [17] is efficient for querying multiple heterogeneous data sources (e.g. ", "mentionContextAttributes": {"used": {"value": false, "score": 6.562471389770508e-05}, "created": {"value": false, "score": 1.2218952178955078e-05}, "shared": {"value": false, "score": 1.7881393432617188e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0005997419357299805}, "created": {"value": false, "score": 0.09038668870925903}, "shared": {"value": false, "score": 2.4139881134033203e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LifeSWS", "normalizedForm": "LifeSWS", "offsetStart": 20, "offsetEnd": 27}, "context": "A good example of a LifeSWS platform is Gypscie [38], which provides services to develop, share, improve and publish scientific artifacts (datasets, models, etc.). ", "mentionContextAttributes": {"used": {"value": false, "score": 4.7147274017333984e-05}, "created": {"value": false, "score": 0.0564613938331604}, "shared": {"value": false, "score": 4.106760025024414e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9950466752052307}, "created": {"value": true, "score": 0.9999451041221619}, "shared": {"value": false, "score": 0.4200749397277832}}}, {"type": "software", "software-type": "software", "wikidataId": "Q82231", "wikipediaExternalRef": 23968131, "lang": "en", "confidence": 0.9147, "software-name": {"rawForm": "NoSQL", "normalizedForm": "NoSQL", "wikidataId": "Q82231", "wikipediaExternalRef": 23968131, "lang": "en", "confidence": 0.9147, "offsetStart": 22, "offsetEnd": 27}, "context": "files, relational and NoSQL) in the cloud.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9974804520606995}, "created": {"value": false, "score": 1.4007091522216797e-05}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9974804520606995}, "created": {"value": false, "score": 0.007766902446746826}, "shared": {"value": false, "score": 3.236532211303711e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LifeSWS", "normalizedForm": "LifeSWS", "offsetStart": 22, "offsetEnd": 29}, "context": "Let us illustrate how LifeSWS services would be supported by Gypscie services for presentation & directory, model management, and data management.", "mentionContextAttributes": {"used": {"value": false, "score": 0.003931939601898193}, "created": {"value": true, "score": 0.7386417388916016}, "shared": {"value": false, "score": 7.748603820800781e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9950466752052307}, "created": {"value": true, "score": 0.9999451041221619}, "shared": {"value": false, "score": 0.4200749397277832}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LifeSWS", "normalizedForm": "LifeSWS", "offsetStart": 22, "offsetEnd": 29}, "context": "The main objective of LifeSWS is to support the construction and maintenance of high quality, scalable and efficient workflows by organizing and making workflow artifacts (datasets, models, metadata, workflow components, etc.) easy to search and manipulate using various workflow systems.", "mentionContextAttributes": {"used": {"value": false, "score": 0.000148773193359375}, "created": {"value": false, "score": 0.38282400369644165}, "shared": {"value": false, "score": 7.092952728271484e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9950466752052307}, "created": {"value": true, "score": 0.9999451041221619}, "shared": {"value": false, "score": 0.4200749397277832}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Gypscie", "normalizedForm": "Gypscie", "offsetStart": 24, "offsetEnd": 31}, "context": "A particular feature of Gypscie is its ability to deal with spatio-temporal data, which are extremely common in scientific applications.", "mentionContextAttributes": {"used": {"value": false, "score": 2.4974346160888672e-05}, "created": {"value": false, "score": 0.0020366907119750977}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.23937523365020752}, "created": {"value": true, "score": 0.999470591545105}, "shared": {"value": false, "score": 0.002493917942047119}}, "references": [{"label": "[35]", "normalizedForm": "[35]", "refKey": 35}, {"label": "[38]", "normalizedForm": "[38]", "refKey": 38}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "BugDoc", "normalizedForm": "BugDoc", "offsetStart": 25, "offsetEnd": 36}, "context": "To address this problem, BugDoc [18] automatically infers the root causes and derive succinct explanations of failures for black-box pipelines using the results from previous runs. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0009018182754516602}, "created": {"value": false, "score": 5.543231964111328e-06}, "shared": {"value": false, "score": 1.7881393432617188e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0009018182754516602}, "created": {"value": true, "score": 0.956467866897583}, "shared": {"value": false, "score": 3.039836883544922e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LifeSWS", "normalizedForm": "LifeSWS", "offsetStart": 26, "offsetEnd": 33}, "context": "CyVerse is the closest to LifeSWS, but lacks key services such as user-specific Web dashboards, model management, provenance and cache, and Model/Workflow APIs.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00011628866195678711}, "created": {"value": false, "score": 0.0001150965690612793}, "shared": {"value": false, "score": 5.662441253662109e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9950466752052307}, "created": {"value": true, "score": 0.9999451041221619}, "shared": {"value": false, "score": 0.4200749397277832}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LifeSWS", "normalizedForm": "LifeSWS", "offsetStart": 27, "offsetEnd": 34}, "context": "In this paper, we proposed LifeSWS, an open service-based architecture that implements data analysis workflow services for life sciences.", "mentionContextAttributes": {"used": {"value": false, "score": 8.529424667358398e-05}, "created": {"value": true, "score": 0.9999451041221619}, "shared": {"value": false, "score": 1.8477439880371094e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9950466752052307}, "created": {"value": true, "score": 0.9999451041221619}, "shared": {"value": false, "score": 0.4200749397277832}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Gypscie", "normalizedForm": "Gypscie", "offsetStart": 28, "offsetEnd": 35}, "context": "The core functionalities of Gypscie cover the services needed to support the full ML life cycle. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.00013947486877441406}, "created": {"value": false, "score": 0.00010353326797485352}, "shared": {"value": false, "score": 6.556510925292969e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.23937523365020752}, "created": {"value": true, "score": 0.999470591545105}, "shared": {"value": false, "score": 0.002493917942047119}}, "references": [{"label": "[35]", "normalizedForm": "[35]", "refKey": 35}, {"label": "[38]", "normalizedForm": "[38]", "refKey": 38}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LifeSWS", "normalizedForm": "LifeSWS", "offsetStart": 28, "offsetEnd": 35}, "context": "The main potential users of LifeSWS are: the domain scientists who wish to analyze the data using different models and workflows; the workflow providers who create, maintain or enhance workflows for domain scientists using their workflow tools; the model providers who build models; and the data providers who supply data sources to the workflows.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00048619508743286133}, "created": {"value": false, "score": 0.000962674617767334}, "shared": {"value": false, "score": 7.450580596923828e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9950466752052307}, "created": {"value": true, "score": 0.9999451041221619}, "shared": {"value": false, "score": 0.4200749397277832}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LifeSWS", "normalizedForm": "LifeSWS", "offsetStart": 30, "offsetEnd": 37}, "context": "Using this similarity search, LifeSWS identifies the most similar region to r. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.005268692970275879}, "created": {"value": false, "score": 1.8775463104248047e-05}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9950466752052307}, "created": {"value": true, "score": 0.9999451041221619}, "shared": {"value": false, "score": 0.4200749397277832}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "OpenAlea", "normalizedForm": "OpenAlea", "offsetStart": 30, "offsetEnd": 38}, "context": "This allows to navigate among OpenAlea and Galaxy workflows and to select the Phenomenal and GWAS workflows. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0007792115211486816}, "created": {"value": false, "score": 6.93202018737793e-05}, "shared": {"value": false, "score": 4.172325134277344e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.7235590219497681}, "created": {"value": true, "score": 0.956467866897583}, "shared": {"value": false, "score": 0.00012117624282836914}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LifeSWS", "normalizedForm": "LifeSWS", "offsetStart": 31, "offsetEnd": 38}, "context": "Artifacts can be found outside LifeSWS and thus accessed through some API, or stored within LifeSWS for efficient reuse.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0045722126960754395}, "created": {"value": false, "score": 8.660554885864258e-05}, "shared": {"value": false, "score": 0.01234525442123413}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9950466752052307}, "created": {"value": true, "score": 0.9999451041221619}, "shared": {"value": false, "score": 0.4200749397277832}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LifeSWS", "normalizedForm": "LifeSWS", "offsetStart": 32, "offsetEnd": 39}, "context": "The directory stores data about LifeSWS users, access rights, dashboards and services.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0003625154495239258}, "created": {"value": false, "score": 2.104043960571289e-05}, "shared": {"value": false, "score": 0.14210128784179688}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9950466752052307}, "created": {"value": true, "score": 0.9999451041221619}, "shared": {"value": false, "score": 0.4200749397277832}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LifeSWS", "normalizedForm": "LifeSWS", "offsetStart": 32, "offsetEnd": 39}, "context": "These services make it easy for LifeSWS users to manage their artifacts (datasets, models, metadata, etc.) and session data (logs, intermediate datasets, etc.) with high-level capabilities using the Data Source, Model/Workflow and Data Store APIs.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00010353326797485352}, "created": {"value": false, "score": 0.004903733730316162}, "shared": {"value": false, "score": 4.273653030395508e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9950466752052307}, "created": {"value": true, "score": 0.9999451041221619}, "shared": {"value": false, "score": 0.4200749397277832}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Gypscie", "normalizedForm": "Gypscie", "offsetStart": 32, "offsetEnd": 39}, "context": "Regarding model management, the Gypscie data model fosters the reuse of all artifacts involved during the model's life cycle.", "mentionContextAttributes": {"used": {"value": false, "score": 6.705522537231445e-05}, "created": {"value": false, "score": 0.0006119608879089355}, "shared": {"value": false, "score": 4.172325134277344e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.23937523365020752}, "created": {"value": true, "score": 0.999470591545105}, "shared": {"value": false, "score": 0.002493917942047119}}, "references": [{"label": "[35]", "normalizedForm": "[35]", "refKey": 35}, {"label": "[38]", "normalizedForm": "[38]", "refKey": 38}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LifeSWS", "normalizedForm": "LifeSWS", "offsetStart": 33, "offsetEnd": 40}, "context": "The Web dashboard service allows LifeSWS developers to build specific dashboards for different types of users (domain scientists, workflow providers, model providers and data providers). ", "mentionContextAttributes": {"used": {"value": false, "score": 3.7729740142822266e-05}, "created": {"value": false, "score": 0.002122342586517334}, "shared": {"value": false, "score": 0.00011008977890014648}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9950466752052307}, "created": {"value": true, "score": 0.9999451041221619}, "shared": {"value": false, "score": 0.4200749397277832}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LifeSWS", "normalizedForm": "LifeSWS", "offsetStart": 33, "offsetEnd": 40}, "context": "The users send their region r to LifeSWS via their dashboard. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.11324185132980347}, "created": {"value": false, "score": 3.260374069213867e-05}, "shared": {"value": false, "score": 0.0004412531852722168}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9950466752052307}, "created": {"value": true, "score": 0.9999451041221619}, "shared": {"value": false, "score": 0.4200749397277832}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LifeSWS", "normalizedForm": "LifeSWS", "offsetStart": 33, "offsetEnd": 40}, "context": "In this section, we show how the LifeSWS services could be used to support the requirements of the two motivating examples, referring to the services of the previous section.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9950466752052307}, "created": {"value": false, "score": 0.004316091537475586}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9950466752052307}, "created": {"value": true, "score": 0.9999451041221619}, "shared": {"value": false, "score": 0.4200749397277832}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Galaxy", "normalizedForm": "Galaxy", "offsetStart": 35, "offsetEnd": 41}, "context": "Then, it triggers the execution of Galaxy on distributed resources.", "mentionContextAttributes": {"used": {"value": false, "score": 0.007135450839996338}, "created": {"value": false, "score": 0.0007499456405639648}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999882578849792}, "created": {"value": true, "score": 0.956467866897583}, "shared": {"value": false, "score": 3.629922866821289e-05}}, "references": [{"label": "[1]", "normalizedForm": "[1]", "refKey": 1}, {"label": "[1]", "normalizedForm": "[1]", "refKey": 1}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LifeSWS", "normalizedForm": "LifeSWS", "offsetStart": 35, "offsetEnd": 42}, "context": "For the applications envisioned in LifeSWS, these systems will help, because we may want to combine different workflows (e.g., Galaxy, OpenAlea and Spark), debug them with a tool like BugDoc with some other data analytics services (e.g., time series analysis) and keep versions up-to-date. ", "mentionContextAttributes": {"used": {"value": false, "score": 8.040666580200195e-05}, "created": {"value": true, "score": 0.956467866897583}, "shared": {"value": false, "score": 3.039836883544922e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9950466752052307}, "created": {"value": true, "score": 0.9999451041221619}, "shared": {"value": false, "score": 0.4200749397277832}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LifeSWS", "normalizedForm": "LifeSWS", "offsetStart": 35, "offsetEnd": 42}, "context": "The prediction models are given to LifeSWS via the dashboards of the Presentation and Directory services.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9829081892967224}, "created": {"value": false, "score": 4.0471553802490234e-05}, "shared": {"value": false, "score": 1.8477439880371094e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9950466752052307}, "created": {"value": true, "score": 0.9999451041221619}, "shared": {"value": false, "score": 0.4200749397277832}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LifeSWS", "normalizedForm": "LifeSWS", "offsetStart": 36, "offsetEnd": 43}, "context": "Examples of platforms would be some LifeSWS services deployed in the cloud (public, private or hybrid) or on-premise clusters of servers, reusing existing software components that (partially) implement the services.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0001289844512939453}, "created": {"value": false, "score": 0.0034592747688293457}, "shared": {"value": false, "score": 4.845857620239258e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9950466752052307}, "created": {"value": true, "score": 0.9999451041221619}, "shared": {"value": false, "score": 0.4200749397277832}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CloudMdsQL", "normalizedForm": "CloudMdsQL", "offsetStart": 37, "offsetEnd": 47}, "context": "Thus, the major innovation is that a CloudMdsQL query can exploit the full power of local data stores, by simply allowing some local data store native queries to be called as functions, and at the same time be optimized based on a simple cost model, CloudMd-sQL can also access address distributed processing frameworks such as Apache Spark by enabling the ad-hoc usage of user defined map/filter/reduce operators as subqueries.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0003275871276855469}, "created": {"value": false, "score": 0.09038668870925903}, "shared": {"value": false, "score": 2.4139881134033203e-05}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0005997419357299805}, "created": {"value": false, "score": 0.09038668870925903}, "shared": {"value": false, "score": 2.4139881134033203e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Galaxy", "normalizedForm": "Galaxy", "offsetStart": 39, "offsetEnd": 45}, "context": "These results are used as input of the Galaxy workflow to make a complete GWAS study.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9999882578849792}, "created": {"value": false, "score": 1.8417835235595703e-05}, "shared": {"value": false, "score": 1.7881393432617188e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999882578849792}, "created": {"value": true, "score": 0.956467866897583}, "shared": {"value": false, "score": 3.629922866821289e-05}}, "references": [{"label": "[1]", "normalizedForm": "[1]", "refKey": 1}, {"label": "[1]", "normalizedForm": "[1]", "refKey": 1}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Gypscie", "normalizedForm": "Gypscie", "offsetStart": 39, "offsetEnd": 46}, "context": "We illustrated a LifeSWS platform with Gypscie, which provides services to develop, share, improve and publish scientific artifacts (datasets, models, etc.).", "mentionContextAttributes": {"used": {"value": false, "score": 0.00030624866485595703}, "created": {"value": true, "score": 0.999470591545105}, "shared": {"value": false, "score": 7.647275924682617e-05}}, "documentContextAttributes": {"used": {"value": false, "score": 0.23937523365020752}, "created": {"value": true, "score": 0.999470591545105}, "shared": {"value": false, "score": 0.002493917942047119}}, "references": [{"label": "[35]", "normalizedForm": "[35]", "refKey": 35}, {"label": "[38]", "normalizedForm": "[38]", "refKey": 38}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Gypscie", "normalizedForm": "Gypscie", "offsetStart": 40, "offsetEnd": 47}, "context": "A good example of a LifeSWS platform is Gypscie [38], which provides services to develop, share, improve and publish scientific artifacts (datasets, models, etc.).", "mentionContextAttributes": {"used": {"value": false, "score": 4.7147274017333984e-05}, "created": {"value": false, "score": 0.0564613938331604}, "shared": {"value": false, "score": 4.106760025024414e-05}}, "documentContextAttributes": {"used": {"value": false, "score": 0.23937523365020752}, "created": {"value": true, "score": 0.999470591545105}, "shared": {"value": false, "score": 0.002493917942047119}}, "references": [{"label": "[38]", "normalizedForm": "[38]", "refKey": 38, "offsetStart": 30088, "offsetEnd": 30092}, {"label": "[38]", "normalizedForm": "[38]", "refKey": 38, "offsetStart": 30088, "offsetEnd": 30092}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "OpenAlea", "normalizedForm": "OpenAlea", "offsetStart": 40, "offsetEnd": 48}, "context": "To execute the Phenomenal workflow, the OpenAlea scheduler checks, using provenance data, whether some fragments have already been executed and are present in the cache. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.20862656831741333}, "created": {"value": false, "score": 1.9252300262451172e-05}, "shared": {"value": false, "score": 1.7881393432617188e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.7235590219497681}, "created": {"value": true, "score": 0.956467866897583}, "shared": {"value": false, "score": 0.00012117624282836914}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "OpenAlea", "normalizedForm": "OpenAlea", "offsetStart": 42, "offsetEnd": 50}, "context": "The catalog also knows about tools (e.g., OpenAlea, Spark) and code libraries that implement models (e.g., Phenomenal workflow). ", "mentionContextAttributes": {"used": {"value": false, "score": 6.157159805297852e-05}, "created": {"value": false, "score": 0.00044423341751098633}, "shared": {"value": false, "score": 1.1324882507324219e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.7235590219497681}, "created": {"value": true, "score": 0.956467866897583}, "shared": {"value": false, "score": 0.00012117624282836914}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Galaxy", "normalizedForm": "Galaxy", "offsetStart": 43, "offsetEnd": 49}, "context": "This allows to navigate among OpenAlea and Galaxy workflows and to select the Phenomenal and GWAS workflows.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0007792115211486816}, "created": {"value": false, "score": 6.93202018737793e-05}, "shared": {"value": false, "score": 4.172325134277344e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999882578849792}, "created": {"value": true, "score": 0.956467866897583}, "shared": {"value": false, "score": 3.629922866821289e-05}}, "references": [{"label": "[1]", "normalizedForm": "[1]", "refKey": 1}, {"label": "[1]", "normalizedForm": "[1]", "refKey": 1}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Galaxy", "normalizedForm": "Galaxy", "offsetStart": 43, "offsetEnd": 49}, "context": "LifeSWS provides Data Services to feed the Galaxy workflow with the output of OpenAlea workflow when execution has been done.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0006503462791442871}, "created": {"value": false, "score": 3.129243850708008e-05}, "shared": {"value": false, "score": 2.086162567138672e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999882578849792}, "created": {"value": true, "score": 0.956467866897583}, "shared": {"value": false, "score": 3.629922866821289e-05}}, "references": [{"label": "[1]", "normalizedForm": "[1]", "refKey": 1}, {"label": "[1]", "normalizedForm": "[1]", "refKey": 1}]}, {"type": "software", "software-type": "software", "wikidataId": "Q165194", "wikipediaExternalRef": 27697009, "lang": "en", "confidence": 0.8291, "software-name": {"rawForm": "API", "normalizedForm": "API", "wikidataId": "Q165194", "wikipediaExternalRef": 27697009, "lang": "en", "confidence": 0.8291, "offsetStart": 45, "offsetEnd": 48}, "context": "As an alternative to Web dashboards, the Web API is a server-side API that allows LifeSWS developers to access LifeSWS services from more general Web applications.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0003330707550048828}, "created": {"value": false, "score": 0.012182891368865967}, "shared": {"value": false, "score": 0.09695422649383545}}, "documentContextAttributes": {"used": {"value": true, "score": 0.7235590219497681}, "created": {"value": false, "score": 0.01247626543045044}, "shared": {"value": false, "score": 0.42502152919769287}}}, {"type": "software", "software-type": "software", "wikidataId": "Q165194", "wikipediaExternalRef": 27697009, "lang": "en", "confidence": 0.8291, "software-name": {"rawForm": "API", "normalizedForm": "API", "wikidataId": "Q165194", "wikipediaExternalRef": 27697009, "lang": "en", "confidence": 0.8291, "offsetStart": 51, "offsetEnd": 54}, "context": "The same functionality is available through a REST API based on the HTTP protocol.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0003088712692260742}, "created": {"value": false, "score": 0.008163988590240479}, "shared": {"value": false, "score": 0.0004932284355163574}}, "documentContextAttributes": {"used": {"value": true, "score": 0.7235590219497681}, "created": {"value": false, "score": 0.01247626543045044}, "shared": {"value": false, "score": 0.42502152919769287}}}, {"type": "software", "software-type": "software", "wikidataId": "Q7573619", "wikipediaExternalRef": 42164234, "lang": "en", "confidence": 0.5539, "software-name": {"rawForm": "Spark", "normalizedForm": "Spark", "wikidataId": "Q7573619", "wikipediaExternalRef": 42164234, "lang": "en", "confidence": 0.5539, "offsetStart": 52, "offsetEnd": 57}, "context": "The catalog also knows about tools (e.g., OpenAlea, Spark) and code libraries that implement models (e.g., Phenomenal workflow). ", "mentionContextAttributes": {"used": {"value": false, "score": 6.157159805297852e-05}, "created": {"value": false, "score": 0.00044423341751098633}, "shared": {"value": false, "score": 1.1324882507324219e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.021603941917419434}, "created": {"value": true, "score": 0.956467866897583}, "shared": {"value": false, "score": 6.616115570068359e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Gypscie", "normalizedForm": "Gypscie", "offsetStart": 52, "offsetEnd": 59}, "context": "As a workflow applies transformations on a dataset, Gypscie stores the provenance information regarding the operation.", "mentionContextAttributes": {"used": {"value": false, "score": 0.007943451404571533}, "created": {"value": false, "score": 3.8564205169677734e-05}, "shared": {"value": false, "score": 1.7881393432617188e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.23937523365020752}, "created": {"value": true, "score": 0.999470591545105}, "shared": {"value": false, "score": 0.002493917942047119}}, "references": [{"label": "[35]", "normalizedForm": "[35]", "refKey": 35}, {"label": "[38]", "normalizedForm": "[38]", "refKey": 38}]}, {"type": "software", "software-type": "implicit", "wikidataId": "Q187432", "wikipediaExternalRef": 21490336, "lang": "en", "confidence": 0.5074, "software-name": {"rawForm": "scripts", "normalizedForm": "scripts", "wikidataId": "Q187432", "wikipediaExternalRef": 21490336, "lang": "en", "confidence": 0.5074, "offsetStart": 54, "offsetEnd": 61}, "context": "It also offers a notebook interface for direct python scripts integration with the Flask framework. ", "mentionContextAttributes": {"used": {"value": false, "score": 3.11732292175293e-05}, "created": {"value": false, "score": 0.009859979152679443}, "shared": {"value": false, "score": 5.364418029785156e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 3.11732292175293e-05}, "created": {"value": false, "score": 0.009859979152679443}, "shared": {"value": false, "score": 5.364418029785156e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LifeSWS", "normalizedForm": "LifeSWS", "offsetStart": 54, "offsetEnd": 61}, "context": "In this scenario, the following inputs may be used by LifeSWS:", "mentionContextAttributes": {"used": {"value": false, "score": 0.037115633487701416}, "created": {"value": false, "score": 3.892183303833008e-05}, "shared": {"value": false, "score": 1.7881393432617188e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9950466752052307}, "created": {"value": true, "score": 0.9999451041221619}, "shared": {"value": false, "score": 0.4200749397277832}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MLFlow", "normalizedForm": "MLFlow", "offsetStart": 55, "offsetEnd": 61}, "context": "Gypscie instruments the running scripts to register in MLFlow the values of performance metrics, which the system collects and stores into its catalog, once the job has finished its execution.", "mentionContextAttributes": {"used": {"value": false, "score": 0.01501154899597168}, "created": {"value": false, "score": 0.00023484230041503906}, "shared": {"value": false, "score": 1.7881393432617188e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.6777467131614685}, "created": {"value": false, "score": 0.0010702013969421387}, "shared": {"value": false, "score": 2.980232238769531e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "OpenAlea", "normalizedForm": "OpenAlea", "offsetStart": 56, "offsetEnd": 64}, "context": "LifeSWS looks up the provenance and cache, and triggers OpenAlea's distributed execution. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.00822538137435913}, "created": {"value": false, "score": 0.00037997961044311523}, "shared": {"value": false, "score": 4.172325134277344e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.7235590219497681}, "created": {"value": true, "score": 0.956467866897583}, "shared": {"value": false, "score": 0.00012117624282836914}}}, {"type": "software", "software-type": "software", "wikidataId": "Q47509047", "wikipediaExternalRef": 54022970, "lang": "en", "confidence": 0.7842, "software-name": {"rawForm": "PyTorch", "normalizedForm": "PyTorch", "wikidataId": "Q47509047", "wikipediaExternalRef": 54022970, "lang": "en", "confidence": 0.7842, "offsetStart": 57, "offsetEnd": 64}, "context": "It provides APIs to access ML development tools, such as PyTorch, Scikit-learn and Tensorflow. ", "mentionContextAttributes": {"used": {"value": false, "score": 4.7266483306884766e-05}, "created": {"value": false, "score": 0.0009382367134094238}, "shared": {"value": false, "score": 0.0022509098052978516}}, "documentContextAttributes": {"used": {"value": false, "score": 0.021603941917419434}, "created": {"value": false, "score": 0.0567590594291687}, "shared": {"value": false, "score": 0.0022509098052978516}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "OpenAlea", "normalizedForm": "OpenAlea", "offsetStart": 57, "offsetEnd": 65}, "context": "Figure 1 shows a) the Phenomenal workflow implemented in OpenAlea; b) 3D organ tracking of a maize plant with PhenoTrack3D [9]; and c) a reconstructed root system architecture through time using RootSystemTracker [10]. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0691826343536377}, "created": {"value": false, "score": 3.0934810638427734e-05}, "shared": {"value": false, "score": 1.7881393432617188e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.7235590219497681}, "created": {"value": true, "score": 0.956467866897583}, "shared": {"value": false, "score": 0.00012117624282836914}}}, {"type": "software", "software-type": "software", "wikidataId": "Q7573619", "wikipediaExternalRef": 42164234, "lang": "en", "confidence": 0.5534, "software-name": {"rawForm": "Spark", "normalizedForm": "Spark", "wikidataId": "Q7573619", "wikipediaExternalRef": 42164234, "lang": "en", "confidence": 0.5534, "offsetStart": 59, "offsetEnd": 69}, "context": "They frequently make use of data analytics engines such as Spark [36] and Flink [6], as well as Machine Learning (ML) libraries such as PyTorch [25] and Scikit-learn [26]. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0014859437942504883}, "created": {"value": false, "score": 4.202127456665039e-05}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.021603941917419434}, "created": {"value": true, "score": 0.956467866897583}, "shared": {"value": false, "score": 6.616115570068359e-06}}}, {"type": "software", "software-type": "software", "wikidataId": "Q165194", "wikipediaExternalRef": 27697009, "lang": "en", "confidence": 0.8291, "software-name": {"rawForm": "API", "normalizedForm": "API", "wikidataId": "Q165194", "wikipediaExternalRef": 27697009, "lang": "en", "confidence": 0.8291, "offsetStart": 61, "offsetEnd": 64}, "context": "Presentation services include a Web dashboard service, a Web API and a directory service.", "mentionContextAttributes": {"used": {"value": false, "score": 5.1081180572509766e-05}, "created": {"value": false, "score": 0.01247626543045044}, "shared": {"value": false, "score": 0.42502152919769287}}, "documentContextAttributes": {"used": {"value": true, "score": 0.7235590219497681}, "created": {"value": false, "score": 0.01247626543045044}, "shared": {"value": false, "score": 0.42502152919769287}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Gypscie", "normalizedForm": "Gypscie", "offsetStart": 61, "offsetEnd": 68}, "context": "Let us illustrate how LifeSWS services would be supported by Gypscie services for presentation & directory, model management, and data management.", "mentionContextAttributes": {"used": {"value": false, "score": 0.003931939601898193}, "created": {"value": true, "score": 0.7386417388916016}, "shared": {"value": false, "score": 7.748603820800781e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.23937523365020752}, "created": {"value": true, "score": 0.999470591545105}, "shared": {"value": false, "score": 0.002493917942047119}}, "references": [{"label": "[35]", "normalizedForm": "[35]", "refKey": 35}, {"label": "[38]", "normalizedForm": "[38]", "refKey": 38}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "OpenAlea", "normalizedForm": "OpenAlea", "offsetStart": 63, "offsetEnd": 71}, "context": "For instance, Galaxy is quite popular in bioinformatics, while OpenAlea is specialized in plant phenotyping. ", "mentionContextAttributes": {"used": {"value": false, "score": 5.728006362915039e-05}, "created": {"value": false, "score": 0.0013248920440673828}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.7235590219497681}, "created": {"value": true, "score": 0.956467866897583}, "shared": {"value": false, "score": 0.00012117624282836914}}}, {"type": "software", "software-type": "software", "wikidataId": "Q165194", "wikipediaExternalRef": 27697009, "lang": "en", "confidence": 0.8291, "software-name": {"rawForm": "API", "normalizedForm": "API", "wikidataId": "Q165194", "wikipediaExternalRef": 27697009, "lang": "en", "confidence": 0.8291, "offsetStart": 66, "offsetEnd": 69}, "context": "As an alternative to Web dashboards, the Web API is a server-side API that allows LifeSWS developers to access LifeSWS services from more general Web applications.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0003330707550048828}, "created": {"value": false, "score": 0.012182891368865967}, "shared": {"value": false, "score": 0.09695422649383545}}, "documentContextAttributes": {"used": {"value": true, "score": 0.7235590219497681}, "created": {"value": false, "score": 0.01247626543045044}, "shared": {"value": false, "score": 0.42502152919769287}}}, {"type": "software", "software-type": "software", "wikidataId": "Q1026367", "wikipediaExternalRef": 33490859, "lang": "en", "confidence": 0.6142, "software-name": {"rawForm": "Scikit-learn", "normalizedForm": "Scikit-learn", "wikidataId": "Q1026367", "wikipediaExternalRef": 33490859, "lang": "en", "confidence": 0.6142, "offsetStart": 66, "offsetEnd": 78}, "context": "It provides APIs to access ML development tools, such as PyTorch, Scikit-learn and Tensorflow. ", "mentionContextAttributes": {"used": {"value": false, "score": 4.7266483306884766e-05}, "created": {"value": false, "score": 0.0009382367134094238}, "shared": {"value": false, "score": 0.0022509098052978516}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0014859437942504883}, "created": {"value": false, "score": 0.009965717792510986}, "shared": {"value": false, "score": 0.0022509098052978516}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "OpenAlea", "normalizedForm": "OpenAlea", "offsetStart": 69, "offsetEnd": 77}, "context": "A domain scientist, often a plant biologist, searches for a specific OpenAlea phenotyping workflow based on its metadata. ", "mentionContextAttributes": {"used": {"value": false, "score": 4.380941390991211e-05}, "created": {"value": false, "score": 0.002193927764892578}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.7235590219497681}, "created": {"value": true, "score": 0.956467866897583}, "shared": {"value": false, "score": 0.00012117624282836914}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Azure ML", "normalizedForm": "Azure ML", "offsetStart": 69, "offsetEnd": 77}, "publisher": {"rawForm": "Microsoft", "normalizedForm": "Microsoft", "offsetStart": 59, "offsetEnd": 68}, "context": "The most complete systems come from cloud providers, e.g., Microsoft Azure ML, Amazon SageMaker and Google Vertex AI, as ML as a service (MLaaS) platforms. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.005874156951904297}, "created": {"value": false, "score": 0.00014662742614746094}, "shared": {"value": false, "score": 0.00034809112548828125}}, "documentContextAttributes": {"used": {"value": false, "score": 0.005874156951904297}, "created": {"value": false, "score": 0.00014662742614746094}, "shared": {"value": false, "score": 0.00034809112548828125}}}, {"type": "software", "software-type": "software", "wikidataId": "Q7573619", "wikipediaExternalRef": 42164234, "lang": "en", "confidence": 0.5534, "software-name": {"rawForm": "Spark", "normalizedForm": "Spark", "wikidataId": "Q7573619", "wikipediaExternalRef": 42164234, "lang": "en", "confidence": 0.5534, "offsetStart": 69, "offsetEnd": 79}, "context": "More generic, we have the popular big data analytics engines such as Spark [36] and Flink [6] which allow for batch or realtime data processing, and ML libraries such as PyTorch [25] and Scikit-learn [26] with workflows to collect training data, preprocess data (cleaning, formatting, . . . ", "mentionContextAttributes": {"used": {"value": false, "score": 6.920099258422852e-05}, "created": {"value": false, "score": 0.009965717792510986}, "shared": {"value": false, "score": 7.748603820800781e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.021603941917419434}, "created": {"value": true, "score": 0.956467866897583}, "shared": {"value": false, "score": 6.616115570068359e-06}}}, {"type": "software", "software-type": "software", "wikidataId": "Q165194", "wikipediaExternalRef": 27697009, "lang": "en", "confidence": 0.8291, "software-name": {"rawForm": "API", "normalizedForm": "API", "wikidataId": "Q165194", "wikipediaExternalRef": 27697009, "lang": "en", "confidence": 0.8291, "offsetStart": 70, "offsetEnd": 73}, "context": "Artifacts can be found outside LifeSWS and thus accessed through some API, or stored within LifeSWS for efficient reuse.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0045722126960754395}, "created": {"value": false, "score": 8.660554885864258e-05}, "shared": {"value": false, "score": 0.01234525442123413}}, "documentContextAttributes": {"used": {"value": true, "score": 0.7235590219497681}, "created": {"value": false, "score": 0.01247626543045044}, "shared": {"value": false, "score": 0.42502152919769287}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Galaxy", "normalizedForm": "Galaxy", "offsetStart": 73, "offsetEnd": 79}, "context": "These standards are implemented in many popular workflow systems such as Galaxy, Pegasus, Streamflow, and CWL-Airflow.", "mentionContextAttributes": {"used": {"value": false, "score": 4.2498111724853516e-05}, "created": {"value": false, "score": 0.00815880298614502}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999882578849792}, "created": {"value": true, "score": 0.956467866897583}, "shared": {"value": false, "score": 3.629922866821289e-05}}, "references": [{"label": "[1]", "normalizedForm": "[1]", "refKey": 1}, {"label": "[1]", "normalizedForm": "[1]", "refKey": 1}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "OpenAlea", "normalizedForm": "OpenAlea", "offsetStart": 73, "offsetEnd": 81}, "context": "The cache and provenance information are updated during the execution of OpenAlea workflows using the Workflow Access API. ", "mentionContextAttributes": {"used": {"value": true, "score": 0.7235590219497681}, "created": {"value": false, "score": 0.00013566017150878906}, "shared": {"value": false, "score": 7.748603820800781e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.7235590219497681}, "created": {"value": true, "score": 0.956467866897583}, "shared": {"value": false, "score": 0.00012117624282836914}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LifeSWS", "normalizedForm": "LifeSWS", "offsetStart": 74, "offsetEnd": 81}, "context": "However, a first reason that prevents the use of such cloud platforms for LifeSWS is the lack of services directly available for scientific applications (workflows, provenance, numerical simulation, interface to HPC systems, . . .", "mentionContextAttributes": {"used": {"value": false, "score": 8.791685104370117e-05}, "created": {"value": false, "score": 0.000536799430847168}, "shared": {"value": false, "score": 7.873773574829102e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9950466752052307}, "created": {"value": true, "score": 0.9999451041221619}, "shared": {"value": false, "score": 0.4200749397277832}}}, {"type": "software", "software-type": "software", "wikidataId": "Q3073740", "wikipediaExternalRef": 5999274, "lang": "en", "confidence": 0.4462, "software-name": {"rawForm": "Flink", "normalizedForm": "Flink", "wikidataId": "Q3073740", "wikipediaExternalRef": 5999274, "lang": "en", "confidence": 0.4462, "offsetStart": 74, "offsetEnd": 82}, "context": "They frequently make use of data analytics engines such as Spark [36] and Flink [6], as well as Machine Learning (ML) libraries such as PyTorch [25] and Scikit-learn [26]. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0014859437942504883}, "created": {"value": false, "score": 4.202127456665039e-05}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0014859437942504883}, "created": {"value": false, "score": 0.009965717792510986}, "shared": {"value": false, "score": 7.748603820800781e-07}}}, {"type": "software", "software-type": "software", "wikidataId": "Q82231", "wikipediaExternalRef": 23968131, "lang": "en", "confidence": 0.9147, "software-name": {"rawForm": "NoSQL", "normalizedForm": "NoSQL", "wikidataId": "Q82231", "wikipediaExternalRef": 23968131, "lang": "en", "confidence": 0.9147, "offsetStart": 75, "offsetEnd": 80}, "context": "These APIs allow storing and accessing data in different data stores (SQL, NoSQL, Savime, files, . . . ", "mentionContextAttributes": {"used": {"value": false, "score": 0.00010567903518676758}, "created": {"value": false, "score": 0.00028896331787109375}, "shared": {"value": false, "score": 1.9371509552001953e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9974804520606995}, "created": {"value": false, "score": 0.007766902446746826}, "shared": {"value": false, "score": 3.236532211303711e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "InfraPhenoGrid", "normalizedForm": "InfraPhenoGrid", "offsetStart": 75, "offsetEnd": 89}, "context": "PHIS [22] is a rich Phenotyping Hybrid Information System complementary to InfraPhenoGrid designed for plant phenomics. ", "mentionContextAttributes": {"used": {"value": false, "score": 4.1544437408447266e-05}, "created": {"value": false, "score": 0.028104424476623535}, "shared": {"value": false, "score": 1.7881393432617188e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0001036524772644043}, "created": {"value": false, "score": 0.028104424476623535}, "shared": {"value": false, "score": 3.635883331298828e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "VersionClimber", "normalizedForm": "VersionClimber", "offsetStart": 76, "offsetEnd": 95}, "context": "Moreover, OpenAlea models and workflows can be upgraded automatically using VersionClimber [29] from the Workflow Integration services to find the latest compatible versions of all the modela and libraries the workflows depend on.", "mentionContextAttributes": {"used": {"value": false, "score": 0.001529395580291748}, "created": {"value": false, "score": 4.6193599700927734e-05}, "shared": {"value": false, "score": 0.00012117624282836914}}, "documentContextAttributes": {"used": {"value": false, "score": 0.001529395580291748}, "created": {"value": false, "score": 0.11935627460479736}, "shared": {"value": false, "score": 0.00012117624282836914}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "AgMIP", "normalizedForm": "AgMIP", "offsetStart": 77, "offsetEnd": 82}, "context": "These APIs allow connecting to various web data sources, such as Data World, AgMIP, etc., and performing various tasks (search for datasets, extract a dataset's metadata, import a dataset, get changes, etc.).", "mentionContextAttributes": {"used": {"value": false, "score": 8.589029312133789e-05}, "created": {"value": false, "score": 0.012864828109741211}, "shared": {"value": false, "score": 2.1636486053466797e-05}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0012735724449157715}, "created": {"value": false, "score": 0.012864828109741211}, "shared": {"value": false, "score": 2.1636486053466797e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Galaxy", "normalizedForm": "Galaxy", "offsetStart": 78, "offsetEnd": 84}, "context": "Workflows have been implemented on top of scientific workflow systems such as Galaxy [1] and OpenAlea [30].", "mentionContextAttributes": {"used": {"value": false, "score": 0.0010128021240234375}, "created": {"value": false, "score": 0.002995729446411133}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999882578849792}, "created": {"value": true, "score": 0.956467866897583}, "shared": {"value": false, "score": 3.629922866821289e-05}}, "references": [{"label": "[1]", "normalizedForm": "[1]", "refKey": 1, "offsetStart": 2123, "offsetEnd": 2126}, {"label": "[1]", "normalizedForm": "[1]", "refKey": 1, "offsetStart": 2123, "offsetEnd": 2126}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "OpenAlea", "normalizedForm": "OpenAlea", "offsetStart": 78, "offsetEnd": 86}, "context": "LifeSWS provides Data Services to feed the Galaxy workflow with the output of OpenAlea workflow when execution has been done. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0006503462791442871}, "created": {"value": false, "score": 3.129243850708008e-05}, "shared": {"value": false, "score": 2.086162567138672e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.7235590219497681}, "created": {"value": true, "score": 0.956467866897583}, "shared": {"value": false, "score": 0.00012117624282836914}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LifeSWS", "normalizedForm": "LifeSWS", "offsetStart": 79, "offsetEnd": 86}, "context": "Using the DJEnsemble method [27], ensembles can be computed automatically by a LifeSWS platform such as Gypscie (see Section 4), so that the selection of participant models follows a cost-based selection approach. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.23937523365020752}, "created": {"value": false, "score": 9.357929229736328e-06}, "shared": {"value": false, "score": 1.7881393432617188e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9950466752052307}, "created": {"value": true, "score": 0.9999451041221619}, "shared": {"value": false, "score": 0.4200749397277832}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "OpenAlea", "normalizedForm": "OpenAlea", "offsetStart": 81, "offsetEnd": 89}, "context": "To support high throughput phenotyping, many workflows have been developed using OpenAlea to analyze, reconstruct, and visualize the spatial and temporal development of the geometry and topology of thousands of plants in various environmental conditions. ", "mentionContextAttributes": {"used": {"value": false, "score": 8.171796798706055e-05}, "created": {"value": true, "score": 0.6019567251205444}, "shared": {"value": false, "score": 7.748603820800781e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.7235590219497681}, "created": {"value": true, "score": 0.956467866897583}, "shared": {"value": false, "score": 0.00012117624282836914}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Savime", "normalizedForm": "Savime", "offsetStart": 82, "offsetEnd": 88}, "context": "These APIs allow storing and accessing data in different data stores (SQL, NoSQL, Savime, files, . . . ", "mentionContextAttributes": {"used": {"value": false, "score": 0.00010567903518676758}, "created": {"value": false, "score": 0.00028896331787109375}, "shared": {"value": false, "score": 1.9371509552001953e-05}}, "documentContextAttributes": {"used": {"value": false, "score": 0.2906532287597656}, "created": {"value": false, "score": 0.00028896331787109375}, "shared": {"value": false, "score": 1.9371509552001953e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LifeSWS", "normalizedForm": "LifeSWS", "offsetStart": 82, "offsetEnd": 89}, "context": "As an alternative to Web dashboards, the Web API is a server-side API that allows LifeSWS developers to access LifeSWS services from more general Web applications.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0003330707550048828}, "created": {"value": false, "score": 0.012182891368865967}, "shared": {"value": false, "score": 0.09695422649383545}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9950466752052307}, "created": {"value": true, "score": 0.9999451041221619}, "shared": {"value": false, "score": 0.4200749397277832}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "InfraPhenoGrid", "normalizedForm": "InfraPhenoGrid", "offsetStart": 82, "offsetEnd": 96}, "context": "Science platforms are more or less specialized for some particular science, e.g., InfraPhenoGrid, PHIS, Plntnet and CyVerse.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0001036524772644043}, "created": {"value": false, "score": 0.0023664236068725586}, "shared": {"value": false, "score": 3.635883331298828e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0001036524772644043}, "created": {"value": false, "score": 0.028104424476623535}, "shared": {"value": false, "score": 3.635883331298828e-06}}}, {"type": "software", "software-type": "software", "wikidataId": "Q289281", "wikipediaExternalRef": 29040606, "lang": "en", "confidence": 0.7458, "software-name": {"rawForm": "Flask", "normalizedForm": "Flask", "wikidataId": "Q289281", "wikipediaExternalRef": 29040606, "lang": "en", "confidence": 0.7458, "offsetStart": 83, "offsetEnd": 88}, "context": "It also offers a notebook interface for direct python scripts integration with the Flask framework. ", "mentionContextAttributes": {"used": {"value": false, "score": 3.11732292175293e-05}, "created": {"value": false, "score": 0.009859979152679443}, "shared": {"value": false, "score": 5.364418029785156e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 3.11732292175293e-05}, "created": {"value": false, "score": 0.009859979152679443}, "shared": {"value": false, "score": 5.364418029785156e-07}}}, {"type": "software", "software-type": "software", "wikidataId": "Q82231", "wikipediaExternalRef": 23968131, "lang": "en", "confidence": 0.9147, "software-name": {"rawForm": "NoSQL", "normalizedForm": "NoSQL", "wikidataId": "Q82231", "wikipediaExternalRef": 23968131, "lang": "en", "confidence": 0.9147, "offsetStart": 83, "offsetEnd": 88}, "context": "By contrast, external data could be stored in the original format, e.g., JSON in a NoSQL document database, and extracted using data-specific APIs.", "mentionContextAttributes": {"used": {"value": false, "score": 0.49070852994918823}, "created": {"value": false, "score": 3.248453140258789e-05}, "shared": {"value": false, "score": 7.748603820800781e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9974804520606995}, "created": {"value": false, "score": 0.007766902446746826}, "shared": {"value": false, "score": 3.236532211303711e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Tensorflow", "normalizedForm": "Tensorflow", "offsetStart": 83, "offsetEnd": 93}, "context": "It provides APIs to access ML development tools, such as PyTorch, Scikit-learn and Tensorflow. ", "mentionContextAttributes": {"used": {"value": false, "score": 4.7266483306884766e-05}, "created": {"value": false, "score": 0.0009382367134094238}, "shared": {"value": false, "score": 0.0022509098052978516}}, "documentContextAttributes": {"used": {"value": false, "score": 4.7266483306884766e-05}, "created": {"value": false, "score": 0.0009382367134094238}, "shared": {"value": false, "score": 0.0022509098052978516}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LifeSWS", "normalizedForm": "LifeSWS", "offsetStart": 84, "offsetEnd": 91}, "context": "Let us now explain how this use case can be realized using the services provided by LifeSWS. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.003631591796875}, "created": {"value": false, "score": 0.02668827772140503}, "shared": {"value": false, "score": 5.364418029785156e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9950466752052307}, "created": {"value": true, "score": 0.9999451041221619}, "shared": {"value": false, "score": 0.4200749397277832}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LifeSWS", "normalizedForm": "LifeSWS", "offsetStart": 84, "offsetEnd": 91}, "context": "Let us now explain how this use case can be realized using the services provided by LifeSWS.", "mentionContextAttributes": {"used": {"value": false, "score": 0.003631591796875}, "created": {"value": false, "score": 0.02668827772140503}, "shared": {"value": false, "score": 5.364418029785156e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9950466752052307}, "created": {"value": true, "score": 0.9999451041221619}, "shared": {"value": false, "score": 0.4200749397277832}}}, {"type": "software", "software-type": "software", "wikidataId": "Q3073740", "wikipediaExternalRef": 5999274, "lang": "en", "confidence": 0.4462, "software-name": {"rawForm": "Flink", "normalizedForm": "Flink", "wikidataId": "Q3073740", "wikipediaExternalRef": 5999274, "lang": "en", "confidence": 0.4462, "offsetStart": 84, "offsetEnd": 93}, "context": "More generic, we have the popular big data analytics engines such as Spark [36] and Flink [6] which allow for batch or realtime data processing, and ML libraries such as PyTorch [25] and Scikit-learn [26] with workflows to collect training data, preprocess data (cleaning, formatting, . . . ", "mentionContextAttributes": {"used": {"value": false, "score": 6.920099258422852e-05}, "created": {"value": false, "score": 0.009965717792510986}, "shared": {"value": false, "score": 7.748603820800781e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0014859437942504883}, "created": {"value": false, "score": 0.009965717792510986}, "shared": {"value": false, "score": 7.748603820800781e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LifeSWS", "normalizedForm": "LifeSWS", "offsetStart": 85, "offsetEnd": 92}, "context": "Through a unified view of different model artifacts (produced with different tools), LifeSWS can improve model selection and allow for model integration.", "mentionContextAttributes": {"used": {"value": false, "score": 2.2470951080322266e-05}, "created": {"value": false, "score": 0.0017261505126953125}, "shared": {"value": false, "score": 7.748603820800781e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9950466752052307}, "created": {"value": true, "score": 0.9999451041221619}, "shared": {"value": false, "score": 0.4200749397277832}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LifeSWS", "normalizedForm": "LifeSWS", "offsetStart": 85, "offsetEnd": 92}, "context": "As a service directory, it provides a single place to publish, discover, and connect LifeSWS services as well as external services that can be distributed over the network.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0001442432403564453}, "created": {"value": false, "score": 0.0011941790580749512}, "shared": {"value": false, "score": 0.4200749397277832}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9950466752052307}, "created": {"value": true, "score": 0.9999451041221619}, "shared": {"value": false, "score": 0.4200749397277832}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Gypscie", "normalizedForm": "Gypscie", "offsetStart": 86, "offsetEnd": 93}, "context": "Thus, models can be automatically registered when built using a known learner and the Gypscie training functionality, or they can be manually imported.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0013766884803771973}, "created": {"value": false, "score": 0.0004950165748596191}, "shared": {"value": false, "score": 3.3974647521972656e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.23937523365020752}, "created": {"value": true, "score": 0.999470591545105}, "shared": {"value": false, "score": 0.002493917942047119}}, "references": [{"label": "[35]", "normalizedForm": "[35]", "refKey": 35}, {"label": "[38]", "normalizedForm": "[38]", "refKey": 38}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "SageMaker", "normalizedForm": "SageMaker", "offsetStart": 86, "offsetEnd": 95}, "context": "The most complete systems come from cloud providers, e.g., Microsoft Azure ML, Amazon SageMaker and Google Vertex AI, as ML as a service (MLaaS) platforms. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.005874156951904297}, "created": {"value": false, "score": 0.00014662742614746094}, "shared": {"value": false, "score": 0.00034809112548828125}}, "documentContextAttributes": {"used": {"value": false, "score": 0.005874156951904297}, "created": {"value": false, "score": 0.00014662742614746094}, "shared": {"value": false, "score": 0.00034809112548828125}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MLFlow", "normalizedForm": "MLFlow", "offsetStart": 88, "offsetEnd": 94}, "context": "The functionalities involving model training and inferencing are both implemented using MLFlow. ", "mentionContextAttributes": {"used": {"value": true, "score": 0.6777467131614685}, "created": {"value": false, "score": 0.0010702013969421387}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.6777467131614685}, "created": {"value": false, "score": 0.0010702013969421387}, "shared": {"value": false, "score": 2.980232238769531e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LifeSWS", "normalizedForm": "LifeSWS", "offsetStart": 91, "offsetEnd": 98}, "context": "The catalog is the central place to find out about all artifacts and tools of interest for LifeSWS users: data sources, datasets, models, workflows and code libraries.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00014710426330566406}, "created": {"value": false, "score": 0.00039440393447875977}, "shared": {"value": false, "score": 1.4901161193847656e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9950466752052307}, "created": {"value": true, "score": 0.9999451041221619}, "shared": {"value": false, "score": 0.4200749397277832}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LifeSWS", "normalizedForm": "LifeSWS", "offsetStart": 92, "offsetEnd": 99}, "context": "Artifacts can be found outside LifeSWS and thus accessed through some API, or stored within LifeSWS for efficient reuse. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0045722126960754395}, "created": {"value": false, "score": 8.660554885864258e-05}, "shared": {"value": false, "score": 0.01234525442123413}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9950466752052307}, "created": {"value": true, "score": 0.9999451041221619}, "shared": {"value": false, "score": 0.4200749397277832}}}, {"type": "software", "software-type": "software", "wikidataId": "Q47509047", "wikipediaExternalRef": 54022970, "lang": "en", "confidence": 0.7789, "software-name": {"rawForm": "Pytorch", "normalizedForm": "Pytorch", "wikidataId": "Q47509047", "wikipediaExternalRef": 54022970, "lang": "en", "confidence": 0.7789, "offsetStart": 92, "offsetEnd": 99}, "context": "The latter enables Gypscie to communicate with the most frequently used ML engines, such as Pytorch and Scikit-learn. ", "mentionContextAttributes": {"used": {"value": false, "score": 7.063150405883789e-05}, "created": {"value": false, "score": 9.125471115112305e-05}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 9.435415267944336e-05}, "created": {"value": false, "score": 0.002771139144897461}, "shared": {"value": false, "score": 6.616115570068359e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "OpenAlea", "normalizedForm": "OpenAlea", "offsetStart": 93, "offsetEnd": 105}, "context": "Workflows have been implemented on top of scientific workflow systems such as Galaxy [1] and OpenAlea [30]. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0010128021240234375}, "created": {"value": false, "score": 0.002995729446411133}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.7235590219497681}, "created": {"value": true, "score": 0.956467866897583}, "shared": {"value": false, "score": 0.00012117624282836914}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Galaxy", "normalizedForm": "Galaxy", "offsetStart": 94, "offsetEnd": 100}, "context": "Because the users want to be able to use their familiar tools (e.g., workflow systems such as Galaxy or OpenAlea) and data sources (e.g., Data World), this layer provides efficient services to register and manage data and models, and allow model execution using different tools and data sources.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00014781951904296875}, "created": {"value": false, "score": 0.0032050609588623047}, "shared": {"value": false, "score": 3.629922866821289e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999882578849792}, "created": {"value": true, "score": 0.956467866897583}, "shared": {"value": false, "score": 3.629922866821289e-05}}, "references": [{"label": "[1]", "normalizedForm": "[1]", "refKey": 1}, {"label": "[1]", "normalizedForm": "[1]", "refKey": 1}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LifeSWS", "normalizedForm": "LifeSWS", "offsetStart": 96, "offsetEnd": 103}, "context": "These examples share common requirements but have specific features that show different uses of LifeSWS.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0002665519714355469}, "created": {"value": false, "score": 3.68952751159668e-05}, "shared": {"value": false, "score": 5.364418029785156e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9950466752052307}, "created": {"value": true, "score": 0.9999451041221619}, "shared": {"value": false, "score": 0.4200749397277832}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LifeSWS", "normalizedForm": "LifeSWS", "offsetStart": 97, "offsetEnd": 104}, "context": "Presentation and directory services provide users and applications with secure ways of accessing LifeSWS services.", "mentionContextAttributes": {"used": {"value": false, "score": 5.418062210083008e-05}, "created": {"value": false, "score": 0.0008431077003479004}, "shared": {"value": false, "score": 0.11176031827926636}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9950466752052307}, "created": {"value": true, "score": 0.9999451041221619}, "shared": {"value": false, "score": 0.4200749397277832}}}, {"type": "software", "software-type": "software", "wikidataId": "Q192490", "wikipediaExternalRef": 23824, "lang": "en", "confidence": 0.9154, "software-name": {"rawForm": "PostgreSQL", "normalizedForm": "PostgreSQL", "wikidataId": "Q192490", "wikipediaExternalRef": 23824, "lang": "en", "confidence": 0.9154, "offsetStart": 100, "offsetEnd": 110}, "context": "For instance, the catalog, provenance, and cache databases are typically in an SQL database such as PostgreSQL. ", "mentionContextAttributes": {"used": {"value": true, "score": 0.8104157447814941}, "created": {"value": false, "score": 9.018182754516602e-05}, "shared": {"value": false, "score": 8.940696716308594e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.8104157447814941}, "created": {"value": false, "score": 9.018182754516602e-05}, "shared": {"value": false, "score": 8.940696716308594e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Google Vertex AI", "normalizedForm": "Google Vertex AI", "offsetStart": 100, "offsetEnd": 116}, "context": "The most complete systems come from cloud providers, e.g., Microsoft Azure ML, Amazon SageMaker and Google Vertex AI, as ML as a service (MLaaS) platforms. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.005874156951904297}, "created": {"value": false, "score": 0.00014662742614746094}, "shared": {"value": false, "score": 0.00034809112548828125}}, "documentContextAttributes": {"used": {"value": false, "score": 0.005874156951904297}, "created": {"value": false, "score": 0.00014662742614746094}, "shared": {"value": false, "score": 0.00034809112548828125}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LifeSWS", "normalizedForm": "LifeSWS", "offsetStart": 101, "offsetEnd": 108}, "context": "In this paper, we propose an open service-based architecture, called Life Science Workflow Services (LifeSWS).", "mentionContextAttributes": {"used": {"value": false, "score": 0.00013494491577148438}, "created": {"value": true, "score": 0.9999433159828186}, "shared": {"value": false, "score": 7.927417755126953e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9950466752052307}, "created": {"value": true, "score": 0.9999451041221619}, "shared": {"value": false, "score": 0.4200749397277832}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LifeSWS", "normalizedForm": "LifeSWS", "offsetStart": 101, "offsetEnd": 108}, "context": "These examples share common requirements but have specific features that will show different uses of LifeSWS.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0001220703125}, "created": {"value": false, "score": 6.908178329467773e-05}, "shared": {"value": false, "score": 7.748603820800781e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9950466752052307}, "created": {"value": true, "score": 0.9999451041221619}, "shared": {"value": false, "score": 0.4200749397277832}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Workflow Access", "normalizedForm": "Workflow Access", "offsetStart": 102, "offsetEnd": 117}, "context": "The cache and provenance information are updated during the execution of OpenAlea workflows using the Workflow Access API.", "mentionContextAttributes": {"used": {"value": true, "score": 0.7235590219497681}, "created": {"value": false, "score": 0.00013566017150878906}, "shared": {"value": false, "score": 7.748603820800781e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.7235590219497681}, "created": {"value": false, "score": 0.01029139757156372}, "shared": {"value": false, "score": 0.004976809024810791}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Gypscie", "normalizedForm": "Gypscie", "offsetStart": 104, "offsetEnd": 111}, "context": "Using the DJEnsemble method [27], ensembles can be computed automatically by a LifeSWS platform such as Gypscie (see Section 4), so that the selection of participant models follows a cost-based selection approach.", "mentionContextAttributes": {"used": {"value": false, "score": 0.23937523365020752}, "created": {"value": false, "score": 9.357929229736328e-06}, "shared": {"value": false, "score": 1.7881393432617188e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.23937523365020752}, "created": {"value": true, "score": 0.999470591545105}, "shared": {"value": false, "score": 0.002493917942047119}}, "references": [{"label": "[35]", "normalizedForm": "[35]", "refKey": 35}, {"label": "[38]", "normalizedForm": "[38]", "refKey": 38}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LifeSWS", "normalizedForm": "LifeSWS", "offsetStart": 104, "offsetEnd": 111}, "context": "This is a very complex task that is completely abstracted from the final user, showing the potential of LifeSWS to create an easy ML environment.", "mentionContextAttributes": {"used": {"value": false, "score": 8.660554885864258e-05}, "created": {"value": false, "score": 0.015643537044525146}, "shared": {"value": false, "score": 1.7881393432617188e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9950466752052307}, "created": {"value": true, "score": 0.9999451041221619}, "shared": {"value": false, "score": 0.4200749397277832}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "OpenAlea", "normalizedForm": "OpenAlea", "offsetStart": 104, "offsetEnd": 112}, "context": "Because the users want to be able to use their familiar tools (e.g., workflow systems such as Galaxy or OpenAlea) and data sources (e.g., Data World), this layer provides efficient services to register and manage data and models, and allow model execution using different tools and data sources. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.00014781951904296875}, "created": {"value": false, "score": 0.0032050609588623047}, "shared": {"value": false, "score": 3.629922866821289e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.7235590219497681}, "created": {"value": true, "score": 0.956467866897583}, "shared": {"value": false, "score": 0.00012117624282836914}}}, {"type": "software", "software-type": "software", "wikidataId": "Q1026367", "wikipediaExternalRef": 33490859, "lang": "en", "confidence": 0.6142, "software-name": {"rawForm": "Scikit-learn", "normalizedForm": "Scikit-learn", "wikidataId": "Q1026367", "wikipediaExternalRef": 33490859, "lang": "en", "confidence": 0.6142, "offsetStart": 104, "offsetEnd": 116}, "context": "The latter enables Gypscie to communicate with the most frequently used ML engines, such as Pytorch and Scikit-learn. ", "mentionContextAttributes": {"used": {"value": false, "score": 7.063150405883789e-05}, "created": {"value": false, "score": 9.125471115112305e-05}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0014859437942504883}, "created": {"value": false, "score": 0.009965717792510986}, "shared": {"value": false, "score": 0.0022509098052978516}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ProvLake", "normalizedForm": "ProvLake", "offsetStart": 104, "offsetEnd": 117}, "context": "Also motivated by the objective of providing a holistic view to support the lifecycle of scientific ML, ProvLake [33] is a provenance data management system capable of capturing, integrating, and querying data across multiple distributed services, programs, databases, stores, and computational workflows by leveraging provenance data.", "mentionContextAttributes": {"used": {"value": false, "score": 8.07642936706543e-05}, "created": {"value": false, "score": 0.4659620523452759}, "shared": {"value": false, "score": 1.4901161193847656e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 8.07642936706543e-05}, "created": {"value": false, "score": 0.4659620523452759}, "shared": {"value": false, "score": 1.4901161193847656e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CWL-Airflow", "normalizedForm": "CWL-Airflow", "offsetStart": 106, "offsetEnd": 117}, "context": "These standards are implemented in many popular workflow systems such as Galaxy, Pegasus, Streamflow, and CWL-Airflow. ", "mentionContextAttributes": {"used": {"value": false, "score": 4.2498111724853516e-05}, "created": {"value": false, "score": 0.00815880298614502}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 4.2498111724853516e-05}, "created": {"value": false, "score": 0.00815880298614502}, "shared": {"value": false, "score": 2.980232238769531e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "OpenAlea", "normalizedForm": "OpenAlea", "offsetStart": 107, "offsetEnd": 115}, "context": "Similarly, the workflow systems to manipulate data and models are specialized for a research domain, e.g., OpenAlea for plant phenotyping, Galaxy for genomics. ", "mentionContextAttributes": {"used": {"value": false, "score": 7.88569450378418e-05}, "created": {"value": false, "score": 0.002215445041656494}, "shared": {"value": false, "score": 4.172325134277344e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.7235590219497681}, "created": {"value": true, "score": 0.956467866897583}, "shared": {"value": false, "score": 0.00012117624282836914}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LifeSWS", "normalizedForm": "LifeSWS", "offsetStart": 110, "offsetEnd": 117}, "context": "As a user directory, it helps register users, find out about them as well as authenticate them when accessing LifeSWS services.", "mentionContextAttributes": {"used": {"value": false, "score": 8.70823860168457e-05}, "created": {"value": false, "score": 0.002348184585571289}, "shared": {"value": false, "score": 0.012034833431243896}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9950466752052307}, "created": {"value": true, "score": 0.9999451041221619}, "shared": {"value": false, "score": 0.4200749397277832}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LifeSWS", "normalizedForm": "LifeSWS", "offsetStart": 111, "offsetEnd": 118}, "context": "As an alternative to Web dashboards, the Web API is a server-side API that allows LifeSWS developers to access LifeSWS services from more general Web applications.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0003330707550048828}, "created": {"value": false, "score": 0.012182891368865967}, "shared": {"value": false, "score": 0.09695422649383545}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9950466752052307}, "created": {"value": true, "score": 0.9999451041221619}, "shared": {"value": false, "score": 0.4200749397277832}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LifeSWS", "normalizedForm": "LifeSWS", "offsetStart": 111, "offsetEnd": 118}, "context": "Once an integrated workflow has been defined and its mappings registered using CWL, it can be executed using a LifeSWS scheduler that orchestrates execution across different workflow systems, in connection with these systems' schedulers.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0036573410034179688}, "created": {"value": false, "score": 0.00047069787979125977}, "shared": {"value": false, "score": 1.3709068298339844e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9950466752052307}, "created": {"value": true, "score": 0.9999451041221619}, "shared": {"value": false, "score": 0.4200749397277832}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Galaxy", "normalizedForm": "Galaxy", "offsetStart": 111, "offsetEnd": 120}, "context": "At the other end of the spectrum (the most specific approaches), we have scientific workflows systems, such as Galaxy [1], Kepler [19] and OpenAlea [30], which are designed to help scientists developing complex applications. ", "mentionContextAttributes": {"used": {"value": false, "score": 6.574392318725586e-05}, "created": {"value": false, "score": 0.2663455009460449}, "shared": {"value": false, "score": 6.556510925292969e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999882578849792}, "created": {"value": true, "score": 0.956467866897583}, "shared": {"value": false, "score": 3.629922866821289e-05}}, "references": [{"label": "[1]", "normalizedForm": "[1]", "refKey": 1}, {"label": "[1]", "normalizedForm": "[1]", "refKey": 1}]}, {"type": "software", "software-type": "software", "wikidataId": "Q165194", "wikipediaExternalRef": 27697009, "lang": "en", "confidence": 0.8291, "software-name": {"rawForm": "API", "normalizedForm": "API", "wikidataId": "Q165194", "wikipediaExternalRef": 27697009, "lang": "en", "confidence": 0.8291, "offsetStart": 114, "offsetEnd": 117}, "context": "Another useful capability, using the Data Source APIs, is subscribing to some data sources that provide a publish API, to get warned of the new versions.", "mentionContextAttributes": {"used": {"value": false, "score": 5.143880844116211e-05}, "created": {"value": false, "score": 0.004338204860687256}, "shared": {"value": false, "score": 8.881092071533203e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.7235590219497681}, "created": {"value": false, "score": 0.01247626543045044}, "shared": {"value": false, "score": 0.42502152919769287}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LifeSWS", "normalizedForm": "LifeSWS", "offsetStart": 115, "offsetEnd": 122}, "context": "Each artifact has associated metadata that describes it and allows access to it, either locally if it is stored in LifeSWS, or through its URI if it is an external resource (tool or data source).", "mentionContextAttributes": {"used": {"value": false, "score": 0.011725127696990967}, "created": {"value": false, "score": 0.00021076202392578125}, "shared": {"value": false, "score": 9.232759475708008e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9950466752052307}, "created": {"value": true, "score": 0.9999451041221619}, "shared": {"value": false, "score": 0.4200749397277832}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CyVerse", "normalizedForm": "CyVerse", "offsetStart": 116, "offsetEnd": 123}, "context": "Science platforms are more or less specialized for some particular science, e.g., InfraPhenoGrid, PHIS, Plntnet and CyVerse.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0001036524772644043}, "created": {"value": false, "score": 0.0023664236068725586}, "shared": {"value": false, "score": 3.635883331298828e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0001289844512939453}, "created": {"value": false, "score": 0.002932131290435791}, "shared": {"value": false, "score": 5.662441253662109e-06}}}, {"type": "software", "software-type": "software", "wikidataId": "Q165194", "wikipediaExternalRef": 27697009, "lang": "en", "confidence": 0.8291, "software-name": {"rawForm": "API", "normalizedForm": "API", "wikidataId": "Q165194", "wikipediaExternalRef": 27697009, "lang": "en", "confidence": 0.8291, "offsetStart": 118, "offsetEnd": 121}, "context": "The cache and provenance information are updated during the execution of OpenAlea workflows using the Workflow Access API. ", "mentionContextAttributes": {"used": {"value": true, "score": 0.7235590219497681}, "created": {"value": false, "score": 0.00013566017150878906}, "shared": {"value": false, "score": 7.748603820800781e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.7235590219497681}, "created": {"value": false, "score": 0.01247626543045044}, "shared": {"value": false, "score": 0.42502152919769287}}}, {"type": "software", "software-type": "software", "wikidataId": "Q82231", "wikipediaExternalRef": 23968131, "lang": "en", "confidence": 0.9147, "software-name": {"rawForm": "NoSQL", "normalizedForm": "NoSQL", "wikidataId": "Q82231", "wikipediaExternalRef": 23968131, "lang": "en", "confidence": 0.9147, "offsetStart": 118, "offsetEnd": 123}, "context": "However, multidatabase systems have not been designed for the cloud, with a large variety of data stores such as SQL, NoSQL, NewSQL and HDFS.", "mentionContextAttributes": {"used": {"value": false, "score": 8.028745651245117e-05}, "created": {"value": false, "score": 0.007766902446746826}, "shared": {"value": false, "score": 3.993511199951172e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9974804520606995}, "created": {"value": false, "score": 0.007766902446746826}, "shared": {"value": false, "score": 3.236532211303711e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Workflow Access", "normalizedForm": "Workflow Access", "offsetStart": 122, "offsetEnd": 137}, "context": "This service provides support for integrating and efficiently executing workflows on different workflow systems using the Workflow Access APIs. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.00010579824447631836}, "created": {"value": false, "score": 0.01029139757156372}, "shared": {"value": false, "score": 7.68899917602539e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.7235590219497681}, "created": {"value": false, "score": 0.01029139757156372}, "shared": {"value": false, "score": 0.004976809024810791}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Kepler", "normalizedForm": "Kepler", "offsetStart": 123, "offsetEnd": 134}, "context": "At the other end of the spectrum (the most specific approaches), we have scientific workflows systems, such as Galaxy [1], Kepler [19] and OpenAlea [30], which are designed to help scientists developing complex applications. ", "mentionContextAttributes": {"used": {"value": false, "score": 6.574392318725586e-05}, "created": {"value": false, "score": 0.2663455009460449}, "shared": {"value": false, "score": 6.556510925292969e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.00015401840209960938}, "created": {"value": false, "score": 0.2663455009460449}, "shared": {"value": false, "score": 1.1324882507324219e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Savime", "normalizedForm": "Savime", "offsetStart": 124, "offsetEnd": 130}, "context": "Datasets produced using tools or cache data could be stored in files, e.g., Parquet, etc., or in a scientific database like Savime. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.2906532287597656}, "created": {"value": false, "score": 0.00010126829147338867}, "shared": {"value": false, "score": 5.364418029785156e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.2906532287597656}, "created": {"value": false, "score": 0.00028896331787109375}, "shared": {"value": false, "score": 1.9371509552001953e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Galaxy", "normalizedForm": "Galaxy", "offsetStart": 126, "offsetEnd": 132}, "context": "Finally, to breed varieties tolerant to drought, some outputs of the workflow will be associated with genetic markers using a Galaxy workflow that implements a Genome-Wide Association Study (GWAS).", "mentionContextAttributes": {"used": {"value": false, "score": 0.0009401440620422363}, "created": {"value": false, "score": 0.00069427490234375}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999882578849792}, "created": {"value": true, "score": 0.956467866897583}, "shared": {"value": false, "score": 3.629922866821289e-05}}, "references": [{"label": "[1]", "normalizedForm": "[1]", "refKey": 1}, {"label": "[1]", "normalizedForm": "[1]", "refKey": 1}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Galaxy", "normalizedForm": "Galaxy", "offsetStart": 127, "offsetEnd": 133}, "context": "For the applications envisioned in LifeSWS, these systems will help, because we may want to combine different workflows (e.g., Galaxy, OpenAlea and Spark), debug them with a tool like BugDoc with some other data analytics services (e.g., time series analysis) and keep versions up-to-date.", "mentionContextAttributes": {"used": {"value": false, "score": 8.040666580200195e-05}, "created": {"value": true, "score": 0.956467866897583}, "shared": {"value": false, "score": 3.039836883544922e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999882578849792}, "created": {"value": true, "score": 0.956467866897583}, "shared": {"value": false, "score": 3.629922866821289e-05}}, "references": [{"label": "[1]", "normalizedForm": "[1]", "refKey": 1}, {"label": "[1]", "normalizedForm": "[1]", "refKey": 1}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CloudMdSQL", "normalizedForm": "CloudMdSQL", "offsetStart": 128, "offsetEnd": 138}, "context": "LifeSWS capitalizes on our previous experience in developing major systems for scientific applications such as: polystores with CloudMdSQL [17], workflows with OpenAlea [30], model management with Gypscie [35]  [38], querying data across distributed services with DfAnalyzer [32] and Provlake [33], monitoring and debugging applications implemented in big data frameworks such as Apache Spark [12], and debugging workflows with BugDoc [18] and VersionClimber [29].", "mentionContextAttributes": {"used": {"value": false, "score": 0.00041860342025756836}, "created": {"value": false, "score": 0.11935621500015259}, "shared": {"value": false, "score": 2.562999725341797e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.00041860342025756836}, "created": {"value": false, "score": 0.11935621500015259}, "shared": {"value": false, "score": 2.562999725341797e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "OpenAlea", "normalizedForm": "OpenAlea", "offsetStart": 135, "offsetEnd": 143}, "context": "For the applications envisioned in LifeSWS, these systems will help, because we may want to combine different workflows (e.g., Galaxy, OpenAlea and Spark), debug them with a tool like BugDoc with some other data analytics services (e.g., time series analysis) and keep versions up-to-date. ", "mentionContextAttributes": {"used": {"value": false, "score": 8.040666580200195e-05}, "created": {"value": true, "score": 0.956467866897583}, "shared": {"value": false, "score": 3.039836883544922e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.7235590219497681}, "created": {"value": true, "score": 0.956467866897583}, "shared": {"value": false, "score": 0.00012117624282836914}}}, {"type": "software", "software-type": "software", "wikidataId": "Q47509047", "wikipediaExternalRef": 54022970, "lang": "en", "confidence": 0.7842, "software-name": {"rawForm": "PyTorch", "normalizedForm": "PyTorch", "wikidataId": "Q47509047", "wikipediaExternalRef": 54022970, "lang": "en", "confidence": 0.7842, "offsetStart": 136, "offsetEnd": 148}, "context": "They frequently make use of data analytics engines such as Spark [36] and Flink [6], as well as Machine Learning (ML) libraries such as PyTorch [25] and Scikit-learn [26]. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0014859437942504883}, "created": {"value": false, "score": 4.202127456665039e-05}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.021603941917419434}, "created": {"value": false, "score": 0.0567590594291687}, "shared": {"value": false, "score": 0.0022509098052978516}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Galaxy", "normalizedForm": "Galaxy", "offsetStart": 139, "offsetEnd": 145}, "context": "Similarly, the workflow systems to manipulate data and models are specialized for a research domain, e.g., OpenAlea for plant phenotyping, Galaxy for genomics.", "mentionContextAttributes": {"used": {"value": false, "score": 7.88569450378418e-05}, "created": {"value": false, "score": 0.002215445041656494}, "shared": {"value": false, "score": 4.172325134277344e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999882578849792}, "created": {"value": true, "score": 0.956467866897583}, "shared": {"value": false, "score": 3.629922866821289e-05}}, "references": [{"label": "[1]", "normalizedForm": "[1]", "refKey": 1}, {"label": "[1]", "normalizedForm": "[1]", "refKey": 1}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "OpenAlea", "normalizedForm": "OpenAlea", "offsetStart": 139, "offsetEnd": 151}, "context": "At the other end of the spectrum (the most specific approaches), we have scientific workflows systems, such as Galaxy [1], Kepler [19] and OpenAlea [30], which are designed to help scientists developing complex applications. ", "mentionContextAttributes": {"used": {"value": false, "score": 6.574392318725586e-05}, "created": {"value": false, "score": 0.2663455009460449}, "shared": {"value": false, "score": 6.556510925292969e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.7235590219497681}, "created": {"value": true, "score": 0.956467866897583}, "shared": {"value": false, "score": 0.00012117624282836914}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LifeSWS", "normalizedForm": "LifeSWS", "offsetStart": 142, "offsetEnd": 149}, "context": "Then, the Data Analytics service is used to perform a similarity search in order to find the most similar regions to r, which we denote as R. LifeSWS uses its Catalog to select the best models for predicting the transmission of the Dengue virus in the regions similar to r. ", "mentionContextAttributes": {"used": {"value": true, "score": 0.8785095810890198}, "created": {"value": false, "score": 0.0001690387725830078}, "shared": {"value": false, "score": 4.172325134277344e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9950466752052307}, "created": {"value": true, "score": 0.9999451041221619}, "shared": {"value": false, "score": 0.4200749397277832}}}, {"type": "software", "software-type": "software", "wikidataId": "Q7573619", "wikipediaExternalRef": 42164234, "lang": "en", "confidence": 0.5537, "software-name": {"rawForm": "Spark", "normalizedForm": "Spark", "wikidataId": "Q7573619", "wikipediaExternalRef": 42164234, "lang": "en", "confidence": 0.5537, "offsetStart": 148, "offsetEnd": 153}, "context": "For the applications envisioned in LifeSWS, these systems will help, because we may want to combine different workflows (e.g., Galaxy, OpenAlea and Spark), debug them with a tool like BugDoc with some other data analytics services (e.g., time series analysis) and keep versions up-to-date. ", "mentionContextAttributes": {"used": {"value": false, "score": 8.040666580200195e-05}, "created": {"value": true, "score": 0.956467866897583}, "shared": {"value": false, "score": 3.039836883544922e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.021603941917419434}, "created": {"value": true, "score": 0.956467866897583}, "shared": {"value": false, "score": 6.616115570068359e-06}}}, {"type": "software", "software-type": "software", "wikidataId": "Q1026367", "wikipediaExternalRef": 33490859, "lang": "en", "confidence": 0.6142, "software-name": {"rawForm": "Scikit-learn", "normalizedForm": "Scikit-learn", "wikidataId": "Q1026367", "wikipediaExternalRef": 33490859, "lang": "en", "confidence": 0.6142, "offsetStart": 153, "offsetEnd": 169}, "context": "They frequently make use of data analytics engines such as Spark [36] and Flink [6], as well as Machine Learning (ML) libraries such as PyTorch [25] and Scikit-learn [26]. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0014859437942504883}, "created": {"value": false, "score": 4.202127456665039e-05}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0014859437942504883}, "created": {"value": false, "score": 0.009965717792510986}, "shared": {"value": false, "score": 0.0022509098052978516}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LifeSWS", "normalizedForm": "LifeSWS", "offsetStart": 154, "offsetEnd": 161}, "context": "In this section, we introduce examples from real-life science applications that will serve as motivation for our work and as the basis for use cases with LifeSWS.", "mentionContextAttributes": {"used": {"value": false, "score": 8.922815322875977e-05}, "created": {"value": true, "score": 0.9998760223388672}, "shared": {"value": false, "score": 1.0132789611816406e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9950466752052307}, "created": {"value": true, "score": 0.9999451041221619}, "shared": {"value": false, "score": 0.4200749397277832}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "OpenAlea", "normalizedForm": "OpenAlea", "offsetStart": 156, "offsetEnd": 164}, "context": "Furthermore, to understand the genotype-to-phenotype relationships, we need to be able to relate plant traits computed by phenotyping workflows (e.g., with OpenAlea) with genetic information using genotyping workflows such as genomewide association studies (e.g., with Galaxy). ", "mentionContextAttributes": {"used": {"value": false, "score": 0.06125819683074951}, "created": {"value": false, "score": 0.0011911988258361816}, "shared": {"value": false, "score": 1.2516975402832031e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.7235590219497681}, "created": {"value": true, "score": 0.956467866897583}, "shared": {"value": false, "score": 0.00012117624282836914}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Workflow Access", "normalizedForm": "Workflow Access", "offsetStart": 159, "offsetEnd": 174}, "context": "In particular, the cache itself is small (only references) and the cached data can be managed using the underlying execution environments accessed through the Workflow Access APIs.", "mentionContextAttributes": {"used": {"value": false, "score": 0.005802273750305176}, "created": {"value": false, "score": 0.00024831295013427734}, "shared": {"value": false, "score": 5.364418029785156e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.7235590219497681}, "created": {"value": false, "score": 0.01029139757156372}, "shared": {"value": false, "score": 0.004976809024810791}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "OpenAlea", "normalizedForm": "OpenAlea", "offsetStart": 160, "offsetEnd": 172}, "context": "LifeSWS capitalizes on our previous experience in developing major systems for scientific applications such as: polystores with CloudMdSQL [17], workflows with OpenAlea [30], model management with Gypscie [35]  [38], querying data across distributed services with DfAnalyzer [32] and Provlake [33], monitoring and debugging applications implemented in big data frameworks such as Apache Spark [12], and debugging workflows with BugDoc [18] and VersionClimber [29].", "mentionContextAttributes": {"used": {"value": false, "score": 0.00041860342025756836}, "created": {"value": false, "score": 0.11935621500015259}, "shared": {"value": false, "score": 2.562999725341797e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.7235590219497681}, "created": {"value": true, "score": 0.956467866897583}, "shared": {"value": false, "score": 0.00012117624282836914}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LifeSWS", "normalizedForm": "LifeSWS", "offsetStart": 161, "offsetEnd": 168}, "context": "The management of such life science model artifacts requires model life cycle management and model deployment, using specific tools that can be accessed through LifeSWS. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0004546046257019043}, "created": {"value": false, "score": 0.0008658170700073242}, "shared": {"value": false, "score": 1.8775463104248047e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9950466752052307}, "created": {"value": true, "score": 0.9999451041221619}, "shared": {"value": false, "score": 0.4200749397277832}}}, {"type": "software", "software-type": "software", "wikidataId": "Q82231", "wikipediaExternalRef": 23968131, "lang": "en", "confidence": 0.9147, "software-name": {"rawForm": "NoSQL", "normalizedForm": "NoSQL", "wikidataId": "Q82231", "wikipediaExternalRef": 23968131, "lang": "en", "confidence": 0.9147, "offsetStart": 167, "offsetEnd": 172}, "context": "-Distributed architecture to provide performance, scalability and ease of use in the cloud using distributed database principles; -Support for various databases (SQL, NoSQL, SciDB, etc.) and scientific file types (e.g., HDF and NetCDF); -Integrated services on top of various databases, which can be local (in the same data center) or remote (in remote data centers) and access to various tools and execution environments.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00029850006103515625}, "created": {"value": false, "score": 0.0009055137634277344}, "shared": {"value": false, "score": 3.236532211303711e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9974804520606995}, "created": {"value": false, "score": 0.007766902446746826}, "shared": {"value": false, "score": 3.236532211303711e-05}}}, {"type": "software", "software-type": "software", "wikidataId": "Q47509047", "wikipediaExternalRef": 54022970, "lang": "en", "confidence": 0.7842, "software-name": {"rawForm": "PyTorch", "normalizedForm": "PyTorch", "wikidataId": "Q47509047", "wikipediaExternalRef": 54022970, "lang": "en", "confidence": 0.7842, "offsetStart": 170, "offsetEnd": 182}, "context": "More generic, we have the popular big data analytics engines such as Spark [36] and Flink [6] which allow for batch or realtime data processing, and ML libraries such as PyTorch [25] and Scikit-learn [26] with workflows to collect training data, preprocess data (cleaning, formatting, . . . ", "mentionContextAttributes": {"used": {"value": false, "score": 6.920099258422852e-05}, "created": {"value": false, "score": 0.009965717792510986}, "shared": {"value": false, "score": 7.748603820800781e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.021603941917419434}, "created": {"value": false, "score": 0.0567590594291687}, "shared": {"value": false, "score": 0.0022509098052978516}}}, {"type": "software", "software-type": "software", "wikidataId": "Q47509047", "wikipediaExternalRef": 54022970, "lang": "en", "confidence": 0.7789, "software-name": {"rawForm": "Pytorch", "normalizedForm": "Pytorch", "wikidataId": "Q47509047", "wikipediaExternalRef": 54022970, "lang": "en", "confidence": 0.7789, "offsetStart": 171, "offsetEnd": 178}, "context": "These APIs allow accessing and manipulating models and workflows as structured objects with their own semantics, execute them in their own execution environments, such as Pytorch (ML models), OpenAlea (workflows) and Spark (e.g., SparkSQL queries). ", "mentionContextAttributes": {"used": {"value": false, "score": 9.435415267944336e-05}, "created": {"value": false, "score": 0.002771139144897461}, "shared": {"value": false, "score": 6.616115570068359e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 9.435415267944336e-05}, "created": {"value": false, "score": 0.002771139144897461}, "shared": {"value": false, "score": 6.616115570068359e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "BugDoc", "normalizedForm": "BugDoc", "offsetStart": 184, "offsetEnd": 190}, "context": "For the applications envisioned in LifeSWS, these systems will help, because we may want to combine different workflows (e.g., Galaxy, OpenAlea and Spark), debug them with a tool like BugDoc with some other data analytics services (e.g., time series analysis) and keep versions up-to-date. ", "mentionContextAttributes": {"used": {"value": false, "score": 8.040666580200195e-05}, "created": {"value": true, "score": 0.956467866897583}, "shared": {"value": false, "score": 3.039836883544922e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0009018182754516602}, "created": {"value": true, "score": 0.956467866897583}, "shared": {"value": false, "score": 3.039836883544922e-06}}}, {"type": "software", "software-type": "software", "wikidataId": "Q1026367", "wikipediaExternalRef": 33490859, "lang": "en", "confidence": 0.6142, "software-name": {"rawForm": "Scikit-learn", "normalizedForm": "Scikit-learn", "wikidataId": "Q1026367", "wikipediaExternalRef": 33490859, "lang": "en", "confidence": 0.6142, "offsetStart": 187, "offsetEnd": 204}, "context": "More generic, we have the popular big data analytics engines such as Spark [36] and Flink [6] which allow for batch or realtime data processing, and ML libraries such as PyTorch [25] and Scikit-learn [26] with workflows to collect training data, preprocess data (cleaning, formatting, . . . ", "mentionContextAttributes": {"used": {"value": false, "score": 6.920099258422852e-05}, "created": {"value": false, "score": 0.009965717792510986}, "shared": {"value": false, "score": 7.748603820800781e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0014859437942504883}, "created": {"value": false, "score": 0.009965717792510986}, "shared": {"value": false, "score": 0.0022509098052978516}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "OpenAlea", "normalizedForm": "OpenAlea", "offsetStart": 192, "offsetEnd": 200}, "context": "These APIs allow accessing and manipulating models and workflows as structured objects with their own semantics, execute them in their own execution environments, such as Pytorch (ML models), OpenAlea (workflows) and Spark (e.g., SparkSQL queries). ", "mentionContextAttributes": {"used": {"value": false, "score": 9.435415267944336e-05}, "created": {"value": false, "score": 0.002771139144897461}, "shared": {"value": false, "score": 6.616115570068359e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.7235590219497681}, "created": {"value": true, "score": 0.956467866897583}, "shared": {"value": false, "score": 0.00012117624282836914}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Workflow Access", "normalizedForm": "Workflow Access", "offsetStart": 194, "offsetEnd": 209}, "context": "Using the Catalog and Model Management services, the user is able to select models and datasets of interest, execute the selected models using various workflow execution environments (using the Workflow Access APIs), and analyze the results.", "mentionContextAttributes": {"used": {"value": true, "score": 0.6344307065010071}, "created": {"value": false, "score": 0.00044041872024536133}, "shared": {"value": false, "score": 1.1324882507324219e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.7235590219497681}, "created": {"value": false, "score": 0.01029139757156372}, "shared": {"value": false, "score": 0.004976809024810791}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "RootSystemTracker", "normalizedForm": "RootSystemTracker", "offsetStart": 195, "offsetEnd": 216}, "context": "Figure 1 shows a) the Phenomenal workflow implemented in OpenAlea; b) 3D organ tracking of a maize plant with PhenoTrack3D [9]; and c) a reconstructed root system architecture through time using RootSystemTracker [10]. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0691826343536377}, "created": {"value": false, "score": 3.0934810638427734e-05}, "shared": {"value": false, "score": 1.7881393432617188e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0691826343536377}, "created": {"value": false, "score": 4.2498111724853516e-05}, "shared": {"value": false, "score": 1.7881393432617188e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Gypscie", "normalizedForm": "Gypscie", "offsetStart": 197, "offsetEnd": 204}, "context": "LifeSWS capitalizes on our previous experience in developing major systems for scientific applications such as: polystores with CloudMdSQL [17], workflows with OpenAlea [30], model management with Gypscie [35]  [38], querying data across distributed services with DfAnalyzer [32] and Provlake [33], monitoring and debugging applications implemented in big data frameworks such as Apache Spark [12], and debugging workflows with BugDoc [18] and VersionClimber [29].", "mentionContextAttributes": {"used": {"value": false, "score": 0.00041860342025756836}, "created": {"value": false, "score": 0.11935621500015259}, "shared": {"value": false, "score": 2.562999725341797e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.23937523365020752}, "created": {"value": true, "score": 0.999470591545105}, "shared": {"value": false, "score": 0.002493917942047119}}, "references": [{"label": "[35]", "normalizedForm": "[35]", "refKey": 35, "offsetStart": 6585, "offsetEnd": 6589}, {"label": "[38]", "normalizedForm": "[38]", "refKey": 38, "offsetStart": 6591, "offsetEnd": 6595}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "OpenAlea", "normalizedForm": "OpenAlea", "offsetStart": 197, "offsetEnd": 205}, "context": "In this use case, LifeSWS is used by domain scientists in order to analyze, process and visualise High Throughput Phenotyping (HTP) experiments, with the following workflows, models and datasets: -OpenAlea workflows that implement a specific phenotyping processing such as 3D maize segmentation, organ tracking, or root system reconstruction; -A Galaxy workflow for a Genome-Wide Association Study (GWAS); -Image analysis algorithms to segment the background, to reconstruct the plant in 3D using space carving, semantic segmentation and tracking of the organs; -Functional-structural plant models that are used either to compute nonobserved information like light interception by leaves [2] or water fluxes inside the root system [4], or to generate synthetic data for training or validating methods of plant reconstruction; -Raw image datasets obtained from the phenotyping platform, which contain timeseries of several images per plant; -Outputs of plant traits (e.g., leaf angle, light use efficiency, or biomass accumulation) for each genotype are saved in the Phenotyping Hybrid Information System (PHIS) [22].", "mentionContextAttributes": {"used": {"value": false, "score": 0.0024166107177734375}, "created": {"value": false, "score": 0.0013208389282226562}, "shared": {"value": false, "score": 1.6093254089355469e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.7235590219497681}, "created": {"value": true, "score": 0.956467866897583}, "shared": {"value": false, "score": 0.00012117624282836914}}}, {"type": "software", "software-type": "software", "wikidataId": "Q165194", "wikipediaExternalRef": 27697009, "lang": "en", "confidence": 0.8291, "software-name": {"rawForm": "API", "normalizedForm": "API", "wikidataId": "Q165194", "wikipediaExternalRef": 27697009, "lang": "en", "confidence": 0.8291, "offsetStart": 201, "offsetEnd": 204}, "context": "These APIs make it possible to simply perform various tasks using models and workflows, such as import or export of models, executing them using a dataset, saving the result data (using the Data Store API, . . .", "mentionContextAttributes": {"used": {"value": false, "score": 0.00025594234466552734}, "created": {"value": false, "score": 0.0010007023811340332}, "shared": {"value": false, "score": 1.8477439880371094e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.7235590219497681}, "created": {"value": false, "score": 0.01247626543045044}, "shared": {"value": false, "score": 0.42502152919769287}}}, {"type": "software", "software-type": "software", "wikidataId": "Q47509047", "wikipediaExternalRef": 54022970, "lang": "en", "confidence": 0.7826, "software-name": {"rawForm": "PyTorch", "normalizedForm": "PyTorch", "wikidataId": "Q47509047", "wikipediaExternalRef": 54022970, "lang": "en", "confidence": 0.7826, "offsetStart": 205, "offsetEnd": 212}, "context": "Gypscie has been deployed on a server at LNCC, and interfaced with two execution environments (see Section 5 : the Santos Dumont HPC system at LNCC which could be used in large model training (e.g., using PyTorch) and a Spark shared-nothing cluster to perform large-scale data transformation.", "mentionContextAttributes": {"used": {"value": false, "score": 0.021603941917419434}, "created": {"value": false, "score": 0.0567590594291687}, "shared": {"value": false, "score": 4.172325134277344e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.021603941917419434}, "created": {"value": false, "score": 0.0567590594291687}, "shared": {"value": false, "score": 0.0022509098052978516}}}, {"type": "software", "software-type": "software", "wikidataId": "Q1079645", "wikipediaExternalRef": 18457155, "lang": "en", "confidence": 0.6473, "software-name": {"rawForm": "Singularity", "normalizedForm": "Singularity", "wikidataId": "Q1079645", "wikipediaExternalRef": 18457155, "lang": "en", "confidence": 0.6473, "offsetStart": 215, "offsetEnd": 226}, "context": "To enable portability and reusability, CWL is explicit about inputs/outputs to form the workflow, data locations and execution models, which can be deployed using software container technologies, such as Docker and Singularity.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0016323328018188477}, "created": {"value": false, "score": 0.0036703944206237793}, "shared": {"value": false, "score": 4.351139068603516e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0016323328018188477}, "created": {"value": false, "score": 0.0036703944206237793}, "shared": {"value": false, "score": 4.351139068603516e-06}}}, {"type": "software", "software-type": "software", "wikidataId": "Q7573619", "wikipediaExternalRef": 42164234, "lang": "en", "confidence": 0.4259, "software-name": {"rawForm": "Spark", "normalizedForm": "Spark", "wikidataId": "Q7573619", "wikipediaExternalRef": 42164234, "lang": "en", "confidence": 0.4259, "offsetStart": 217, "offsetEnd": 222}, "context": "These APIs allow accessing and manipulating models and workflows as structured objects with their own semantics, execute them in their own execution environments, such as Pytorch (ML models), OpenAlea (workflows) and Spark (e.g., SparkSQL queries). ", "mentionContextAttributes": {"used": {"value": false, "score": 9.435415267944336e-05}, "created": {"value": false, "score": 0.002771139144897461}, "shared": {"value": false, "score": 6.616115570068359e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.021603941917419434}, "created": {"value": true, "score": 0.956467866897583}, "shared": {"value": false, "score": 6.616115570068359e-06}}}, {"type": "software", "software-type": "software", "wikidataId": "Q7573619", "wikipediaExternalRef": 42164234, "lang": "en", "confidence": 0.5534, "software-name": {"rawForm": "Spark", "normalizedForm": "Spark", "wikidataId": "Q7573619", "wikipediaExternalRef": 42164234, "lang": "en", "confidence": 0.5534, "offsetStart": 220, "offsetEnd": 225}, "context": "Gypscie has been deployed on a server at LNCC, and interfaced with two execution environments (see Section 5 : the Santos Dumont HPC system at LNCC which could be used in large model training (e.g., using PyTorch) and a Spark shared-nothing cluster to perform large-scale data transformation.", "mentionContextAttributes": {"used": {"value": false, "score": 0.021603941917419434}, "created": {"value": false, "score": 0.0567590594291687}, "shared": {"value": false, "score": 4.172325134277344e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.021603941917419434}, "created": {"value": true, "score": 0.956467866897583}, "shared": {"value": false, "score": 6.616115570068359e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "OpenAlea", "normalizedForm": "OpenAlea", "offsetStart": 240, "offsetEnd": 248}, "context": "For example, to visualize a 3D model of plant growth in a local environment, the 3D plant structure and biophysical models such as light interception, carbon allocation and water and mineral uptake can be simulated by a workflow modeled in OpenAlea.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0003840327262878418}, "created": {"value": false, "score": 0.0015360713005065918}, "shared": {"value": false, "score": 4.231929779052734e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.7235590219497681}, "created": {"value": true, "score": 0.956467866897583}, "shared": {"value": false, "score": 0.00012117624282836914}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CloudMd-sQL", "normalizedForm": "CloudMd-sQL", "offsetStart": 250, "offsetEnd": 261}, "context": "Thus, the major innovation is that a CloudMdsQL query can exploit the full power of local data stores, by simply allowing some local data store native queries to be called as functions, and at the same time be optimized based on a simple cost model, CloudMd-sQL can also access address distributed processing frameworks such as Apache Spark by enabling the ad-hoc usage of user defined map/filter/reduce operators as subqueries.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0003275871276855469}, "created": {"value": false, "score": 0.09038668870925903}, "shared": {"value": false, "score": 2.4139881134033203e-05}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0003275871276855469}, "created": {"value": false, "score": 0.09038668870925903}, "shared": {"value": false, "score": 2.4139881134033203e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "AgMIP", "normalizedForm": "AgMIP", "offsetStart": 259, "offsetEnd": 264}, "context": "The data in life science comes from many different data sources produced by modern platforms, e.g., high-throughput phenotyping, next-generation sequencing, remote sensing, etc., or readily available as international databases, such as Data.World, GenomeHub, AgMIP, EMPHASIS, etc.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0012735724449157715}, "created": {"value": false, "score": 0.0018570423126220703}, "shared": {"value": false, "score": 1.1980533599853516e-05}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0012735724449157715}, "created": {"value": false, "score": 0.012864828109741211}, "shared": {"value": false, "score": 2.1636486053466797e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "DfAnalyzer", "normalizedForm": "DfAnalyzer", "offsetStart": 264, "offsetEnd": 279}, "context": "LifeSWS capitalizes on our previous experience in developing major systems for scientific applications such as: polystores with CloudMdSQL [17], workflows with OpenAlea [30], model management with Gypscie [35]  [38], querying data across distributed services with DfAnalyzer [32] and Provlake [33], monitoring and debugging applications implemented in big data frameworks such as Apache Spark [12], and debugging workflows with BugDoc [18] and VersionClimber [29].", "mentionContextAttributes": {"used": {"value": false, "score": 0.00041860342025756836}, "created": {"value": false, "score": 0.11935621500015259}, "shared": {"value": false, "score": 2.562999725341797e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.00041860342025756836}, "created": {"value": false, "score": 0.11935621500015259}, "shared": {"value": false, "score": 2.562999725341797e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Galaxy", "normalizedForm": "Galaxy", "offsetStart": 269, "offsetEnd": 275}, "context": "Furthermore, to understand the genotype-to-phenotype relationships, we need to be able to relate plant traits computed by phenotyping workflows (e.g., with OpenAlea) with genetic information using genotyping workflows such as genomewide association studies (e.g., with Galaxy).", "mentionContextAttributes": {"used": {"value": false, "score": 0.06125819683074951}, "created": {"value": false, "score": 0.0011911988258361816}, "shared": {"value": false, "score": 1.2516975402832031e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999882578849792}, "created": {"value": true, "score": 0.956467866897583}, "shared": {"value": false, "score": 3.629922866821289e-05}}, "references": [{"label": "[1]", "normalizedForm": "[1]", "refKey": 1}, {"label": "[1]", "normalizedForm": "[1]", "refKey": 1}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Provlake", "normalizedForm": "Provlake", "offsetStart": 284, "offsetEnd": 296}, "context": "LifeSWS capitalizes on our previous experience in developing major systems for scientific applications such as: polystores with CloudMdSQL [17], workflows with OpenAlea [30], model management with Gypscie [35]  [38], querying data across distributed services with DfAnalyzer [32] and Provlake [33], monitoring and debugging applications implemented in big data frameworks such as Apache Spark [12], and debugging workflows with BugDoc [18] and VersionClimber [29].", "mentionContextAttributes": {"used": {"value": false, "score": 0.00041860342025756836}, "created": {"value": false, "score": 0.11935621500015259}, "shared": {"value": false, "score": 2.562999725341797e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.00041860342025756836}, "created": {"value": false, "score": 0.11935621500015259}, "shared": {"value": false, "score": 2.562999725341797e-06}}}, {"type": "software", "software-type": "software", "wikidataId": "Q7573619", "wikipediaExternalRef": 42164234, "lang": "en", "confidence": 0.7879, "software-name": {"rawForm": "Apache Spark", "normalizedForm": "Apache Spark", "wikidataId": "Q7573619", "wikipediaExternalRef": 42164234, "lang": "en", "confidence": 0.7879, "offsetStart": 328, "offsetEnd": 340}, "context": "Thus, the major innovation is that a CloudMdsQL query can exploit the full power of local data stores, by simply allowing some local data store native queries to be called as functions, and at the same time be optimized based on a simple cost model, CloudMd-sQL can also access address distributed processing frameworks such as Apache Spark by enabling the ad-hoc usage of user defined map/filter/reduce operators as subqueries.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0003275871276855469}, "created": {"value": false, "score": 0.09038668870925903}, "shared": {"value": false, "score": 2.4139881134033203e-05}}, "documentContextAttributes": {"used": {"value": false, "score": 0.00041860342025756836}, "created": {"value": false, "score": 0.11935621500015259}, "shared": {"value": false, "score": 2.4139881134033203e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Galaxy", "normalizedForm": "Galaxy", "offsetStart": 346, "offsetEnd": 352}, "context": "In this use case, LifeSWS is used by domain scientists in order to analyze, process and visualise High Throughput Phenotyping (HTP) experiments, with the following workflows, models and datasets: -OpenAlea workflows that implement a specific phenotyping processing such as 3D maize segmentation, organ tracking, or root system reconstruction; -A Galaxy workflow for a Genome-Wide Association Study (GWAS); -Image analysis algorithms to segment the background, to reconstruct the plant in 3D using space carving, semantic segmentation and tracking of the organs; -Functional-structural plant models that are used either to compute nonobserved information like light interception by leaves [2] or water fluxes inside the root system [4], or to generate synthetic data for training or validating methods of plant reconstruction; -Raw image datasets obtained from the phenotyping platform, which contain timeseries of several images per plant; -Outputs of plant traits (e.g., leaf angle, light use efficiency, or biomass accumulation) for each genotype are saved in the Phenotyping Hybrid Information System (PHIS) [22].", "mentionContextAttributes": {"used": {"value": false, "score": 0.0024166107177734375}, "created": {"value": false, "score": 0.0013208389282226562}, "shared": {"value": false, "score": 1.6093254089355469e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999882578849792}, "created": {"value": true, "score": 0.956467866897583}, "shared": {"value": false, "score": 3.629922866821289e-05}}, "references": [{"label": "[1]", "normalizedForm": "[1]", "refKey": 1}, {"label": "[1]", "normalizedForm": "[1]", "refKey": 1}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "BugDoc", "normalizedForm": "BugDoc", "offsetStart": 349, "offsetEnd": 360}, "context": "-Assisting scientists in analyzing diverse data types, such as time series, through the integration of advanced analytical methods for different analytical requirements such as clustering, anomaly detection, kNN search, etc; -Keeping track of the provenance of both data sources and software components, both to aid in debugging using tools such as BugDoc [18] and to enhance the reproducibility of these computational experiments.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0003548860549926758}, "created": {"value": false, "score": 0.40307682752609253}, "shared": {"value": false, "score": 2.205371856689453e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0009018182754516602}, "created": {"value": true, "score": 0.956467866897583}, "shared": {"value": false, "score": 3.039836883544922e-06}}}, {"type": "software", "software-type": "software", "wikidataId": "Q7573619", "wikipediaExternalRef": 42164234, "lang": "en", "confidence": 0.7879, "software-name": {"rawForm": "Apache Spark", "normalizedForm": "Apache Spark", "wikidataId": "Q7573619", "wikipediaExternalRef": 42164234, "lang": "en", "confidence": 0.7879, "offsetStart": 380, "offsetEnd": 396}, "context": "LifeSWS capitalizes on our previous experience in developing major systems for scientific applications such as: polystores with CloudMdSQL [17], workflows with OpenAlea [30], model management with Gypscie [35]  [38], querying data across distributed services with DfAnalyzer [32] and Provlake [33], monitoring and debugging applications implemented in big data frameworks such as Apache Spark [12], and debugging workflows with BugDoc [18] and VersionClimber [29].", "mentionContextAttributes": {"used": {"value": false, "score": 0.00041860342025756836}, "created": {"value": false, "score": 0.11935621500015259}, "shared": {"value": false, "score": 2.562999725341797e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.00041860342025756836}, "created": {"value": false, "score": 0.11935621500015259}, "shared": {"value": false, "score": 2.4139881134033203e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "BugDoc", "normalizedForm": "BugDoc", "offsetStart": 428, "offsetEnd": 439}, "context": "LifeSWS capitalizes on our previous experience in developing major systems for scientific applications such as: polystores with CloudMdSQL [17], workflows with OpenAlea [30], model management with Gypscie [35]  [38], querying data across distributed services with DfAnalyzer [32] and Provlake [33], monitoring and debugging applications implemented in big data frameworks such as Apache Spark [12], and debugging workflows with BugDoc [18] and VersionClimber [29].", "mentionContextAttributes": {"used": {"value": false, "score": 0.00041860342025756836}, "created": {"value": false, "score": 0.11935627460479736}, "shared": {"value": false, "score": 2.5033950805664062e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0009018182754516602}, "created": {"value": true, "score": 0.956467866897583}, "shared": {"value": false, "score": 3.039836883544922e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "VersionClimber", "normalizedForm": "VersionClimber", "offsetStart": 444, "offsetEnd": 462}, "context": "LifeSWS capitalizes on our previous experience in developing major systems for scientific applications such as: polystores with CloudMdSQL [17], workflows with OpenAlea [30], model management with Gypscie [35]  [38], querying data across distributed services with DfAnalyzer [32] and Provlake [33], monitoring and debugging applications implemented in big data frameworks such as Apache Spark [12], and debugging workflows with BugDoc [18] and VersionClimber [29].", "mentionContextAttributes": {"used": {"value": false, "score": 0.00041860342025756836}, "created": {"value": false, "score": 0.11935627460479736}, "shared": {"value": false, "score": 2.5033950805664062e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.001529395580291748}, "created": {"value": false, "score": 0.11935627460479736}, "shared": {"value": false, "score": 0.00012117624282836914}}}], "references": [{"refKey": 35, "tei": "<biblStruct xml:id=\"b35\">\n\t<analytic>\n\t\t<title level=\"a\" type=\"main\">Data and Machine Learning Model Management with Gypscie</title>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">P</forename><surname>Valduriez</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">F</forename><surname>Porto</surname></persName>\n\t\t</author>\n\t</analytic>\n\t<monogr>\n\t\t<title level=\"m\">CARLA Workshop on HPC and Data Sciences meet Scientific Computing</title>\n\t\t<imprint>\n\t\t\t<date>2022</date>\n\t\t\t<biblScope unit=\"page\">2</biblScope>\n\t\t</imprint>\n\t</monogr>\n</biblStruct>\n"}, {"refKey": 38, "tei": "<biblStruct xml:id=\"b38\">\n\t<analytic>\n\t\t<title level=\"a\" type=\"main\">A Data-Driven Model Selection Approach to Spatio-Temporal Prediction</title>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Roc\u00edo</forename><surname>Zorrilla</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Eduardo</forename><surname>Ogasawara</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Patrick</forename><surname>Valduriez</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">F\u00e1bio</forename><surname>Porto</surname></persName>\n\t\t</author>\n\t\t<idno type=\"DOI\">10.5753/sbbd.2022.224638</idno>\n\t</analytic>\n\t<monogr>\n\t\t<title level=\"m\">Anais do XXXVII Simp\u00f3sio Brasileiro de Banco de Dados (SBBD 2022)</title>\n\t\t<imprint>\n\t\t\t<publisher>Sociedade Brasileira de Computa\u00e7\u00e3o - SBC</publisher>\n\t\t\t<date type=\"published\" when=\"2022-09-19\">2022</date>\n\t\t\t<biblScope unit=\"page\">12</biblScope>\n\t\t</imprint>\n\t</monogr>\n</biblStruct>\n"}, {"refKey": 1, "tei": "<biblStruct xml:id=\"b1\">\n\t<analytic>\n\t\t<title level=\"a\" type=\"main\">The galaxy platform for accessible, reproducible and collaborative biomedical analyses: 2022 update</title>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">E</forename><surname>Afgan</surname></persName>\n\t\t</author>\n\t</analytic>\n\t<monogr>\n\t\t<title level=\"j\">Nucleic Acids Research</title>\n\t\t<imprint>\n\t\t\t<biblScope unit=\"volume\">50</biblScope>\n\t\t\t<biblScope unit=\"issue\">W1</biblScope>\n\t\t\t<biblScope unit=\"page\">351</biblScope>\n\t\t\t<date>2022</date>\n\t\t</imprint>\n\t</monogr>\n</biblStruct>\n"}], "runtime": 105479, "id": "c7494d2494e14f4499f7911fc74a8829d551ea01", "metadata": {"id": "c7494d2494e14f4499f7911fc74a8829d551ea01"}, "original_file_path": "../../datalake/Samuel/SOFTware-Sync/data/xml_not_sofctied/log_xml/lirmm-04173545.grobid.tei.xml", "file_name": "lirmm-04173545.grobid.tei.xml"}