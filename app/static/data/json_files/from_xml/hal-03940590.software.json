{"application": "software-mentions", "version": "0.8.0", "date": "2024-10-07T12:00+0000", "md5": "2BA0ECDC991097FA6BDCE301C0C30762", "mentions": [{"type": "software", "software-type": "software", "software-name": {"rawForm": "pushRpaq", "normalizedForm": "pushRpaq", "offsetStart": 12, "offsetEnd": 20}, "context": "If it was a pushRpaq successor, then all newly created nodes have a pushRpaqpredecessor that was already in the A-word DAG before the operation so we can easily determine their annotation by looking at the transition function of A. If it was a pushLpaqsuccessor (the case of Figure 6), then we can determine the state annotation of each new node by starting from the state annotation of node n 1 m`1 from the construction (which was in the A-word DAG before the operation), again by simply reading the transition function of A. This can clearly be done in linear time in the number of created nodes.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9998284578323364}, "created": {"value": false, "score": 3.4570693969726562e-06}, "shared": {"value": false, "score": 1.1920928955078125e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9998284578323364}, "created": {"value": false, "score": 0.0005980730056762695}, "shared": {"value": false, "score": 1.9073486328125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "pushLpaq", "normalizedForm": "pushLpaq", "offsetStart": 15, "offsetEnd": 23}, "context": "We then create pushLpaq-successors n 1 1 , . . .", "mentionContextAttributes": {"used": {"value": false, "score": 0.0008275508880615234}, "created": {"value": true, "score": 0.8805444240570068}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9780278205871582}, "created": {"value": true, "score": 0.9959970712661743}, "shared": {"value": false, "score": 1.9073486328125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "pushLpaq", "normalizedForm": "pushLpaq", "offsetStart": 18, "offsetEnd": 26}, "context": "Now, consider the pushLpaq-predecessors n 1  1 and n 1 2 of n 1 and n 2 , respectively (which must exist because n 1 and n 2 are not root).", "mentionContextAttributes": {"used": {"value": true, "score": 0.6386753916740417}, "created": {"value": false, "score": 1.33514404296875e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9780278205871582}, "created": {"value": true, "score": 0.9959970712661743}, "shared": {"value": false, "score": 1.9073486328125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "pushLpaq", "normalizedForm": "pushLpaq", "offsetStart": 22, "offsetEnd": 30}, "context": "If a node n has edges pushLpaq and pushRpaq to the same node n 1 , then n (and therefore n 1 ) capture a power of a.", "mentionContextAttributes": {"used": {"value": false, "score": 0.19671064615249634}, "created": {"value": false, "score": 1.0251998901367188e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9780278205871582}, "created": {"value": true, "score": 0.9959970712661743}, "shared": {"value": false, "score": 1.9073486328125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "pushLpaq", "normalizedForm": "pushLpaq", "offsetStart": 22, "offsetEnd": 30}, "context": "First, for each label pushLpaq with a P \u03a3 for which n has no outgoing edge, we do what follows, which is illustrated in Figure 6 for different cases.", "mentionContextAttributes": {"used": {"value": true, "score": 0.6053705811500549}, "created": {"value": false, "score": 8.106231689453125e-06}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9780278205871582}, "created": {"value": true, "score": 0.9959970712661743}, "shared": {"value": false, "score": 1.9073486328125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "pushRpaq", "normalizedForm": "pushRpaq", "offsetStart": 23, "offsetEnd": 31}, "context": "Second, for each label pushRpaq with a P \u03a3 for which n has no outgoing edge, we do the corresponding operation on a path of labels of the form pushLpbq, exchanging the role of the two kinds of labels.", "mentionContextAttributes": {"used": {"value": true, "score": 0.5893611907958984}, "created": {"value": false, "score": 8.821487426757812e-06}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9998284578323364}, "created": {"value": false, "score": 0.0005980730056762695}, "shared": {"value": false, "score": 1.9073486328125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "pushRpaq", "normalizedForm": "pushRpaq", "offsetStart": 35, "offsetEnd": 43}, "context": "If a node n has edges pushLpaq and pushRpaq to the same node n 1 , then n (and therefore n 1 ) capture a power of a.", "mentionContextAttributes": {"used": {"value": false, "score": 0.19671064615249634}, "created": {"value": false, "score": 1.0251998901367188e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9998284578323364}, "created": {"value": false, "score": 0.0005980730056762695}, "shared": {"value": false, "score": 1.9073486328125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "pushLpaq", "normalizedForm": "pushLpaq", "offsetStart": 45, "offsetEnd": 53}, "context": "The same situation does not work if n 1 is a pushLpaq-successor, but we will always be able to define the annotation of new nodes by following the pushR-transitions from states with a known annotation.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0019052624702453613}, "created": {"value": false, "score": 0.00011432170867919922}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9780278205871582}, "created": {"value": true, "score": 0.9959970712661743}, "shared": {"value": false, "score": 1.9073486328125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "pushLpaq", "normalizedForm": "pushLpaq", "offsetStart": 50, "offsetEnd": 58}, "context": "In a word DAG, we cannot have a node n with edges pushLpaq and pushRpbq to the same node n 1 with a \u2030 b.", "mentionContextAttributes": {"used": {"value": false, "score": 0.024071156978607178}, "created": {"value": false, "score": 2.6226043701171875e-05}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9780278205871582}, "created": {"value": true, "score": 0.9959970712661743}, "shared": {"value": false, "score": 1.9073486328125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "pushLpaq", "normalizedForm": "pushLpaq", "offsetStart": 50, "offsetEnd": 58}, "context": "Then we create a new node n 1 , and set it as the pushLpaq-successor of n and the pushRpb 1 q-successor of n 1  1 .", "mentionContextAttributes": {"used": {"value": false, "score": 0.005647540092468262}, "created": {"value": true, "score": 0.9959970712661743}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9780278205871582}, "created": {"value": true, "score": 0.9959970712661743}, "shared": {"value": false, "score": 1.9073486328125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "pushRpaq", "normalizedForm": "pushRpaq", "offsetStart": 61, "offsetEnd": 69}, "context": "All other nodes have exactly two incoming edges: one labeled pushRpaq for some a P \u03a3, the other labeled pushLpbq for some b P \u03a3.", "mentionContextAttributes": {"used": {"value": false, "score": 0.06004136800765991}, "created": {"value": false, "score": 4.291534423828125e-06}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9998284578323364}, "created": {"value": false, "score": 0.0005980730056762695}, "shared": {"value": false, "score": 1.9073486328125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "pushLpaq", "normalizedForm": "pushLpaq", "offsetStart": 63, "offsetEnd": 71}, "context": "Our second observation is that we can have a node n with edges pushLpaq and pushRpaq to the same node n 1 , but this happens if and only if n (and therefore n 1 ) captures a word of the form a i for some i \u011b 0: \u00a7 Claim D.2.", "mentionContextAttributes": {"used": {"value": false, "score": 0.1418900489807129}, "created": {"value": false, "score": 5.257129669189453e-05}, "shared": {"value": false, "score": 5.960464477539062e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9780278205871582}, "created": {"value": true, "score": 0.9959970712661743}, "shared": {"value": false, "score": 1.9073486328125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "pushLpaq", "normalizedForm": "pushLpaq", "offsetStart": 74, "offsetEnd": 82}, "context": ", n m of n for labels of the form pushRpbq for b P \u03a3 which do not have an pushLpaq-successor (there may be none, in which case m \" 0).", "mentionContextAttributes": {"used": {"value": false, "score": 0.04436534643173218}, "created": {"value": false, "score": 9.5367431640625e-06}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9780278205871582}, "created": {"value": true, "score": 0.9959970712661743}, "shared": {"value": false, "score": 1.9073486328125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "pushRpaq", "normalizedForm": "pushRpaq", "offsetStart": 76, "offsetEnd": 84}, "context": "Our second observation is that we can have a node n with edges pushLpaq and pushRpaq to the same node n 1 , but this happens if and only if n (and therefore n 1 ) captures a word of the form a i for some i \u011b 0: \u00a7 Claim D.2.", "mentionContextAttributes": {"used": {"value": false, "score": 0.1418900489807129}, "created": {"value": false, "score": 5.257129669189453e-05}, "shared": {"value": false, "score": 5.960464477539062e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9998284578323364}, "created": {"value": false, "score": 0.0005980730056762695}, "shared": {"value": false, "score": 1.9073486328125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "pushLpaq", "normalizedForm": "pushLpaq", "offsetStart": 78, "offsetEnd": 86}, "context": "But then this node has two distinct successors n 1 and n 2 for the same label pushLpaq, a contradiction.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0012236237525939941}, "created": {"value": false, "score": 4.649162292480469e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9780278205871582}, "created": {"value": true, "score": 0.9959970712661743}, "shared": {"value": false, "score": 1.9073486328125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "pushLpaq", "normalizedForm": "pushLpaq", "offsetStart": 92, "offsetEnd": 100}, "context": "We also consider n m`1 the closest ancestor of n via labels of the form pushRpbq that has a pushLpaq child, and call this child n 1 m`1 .", "mentionContextAttributes": {"used": {"value": false, "score": 0.13055282831192017}, "created": {"value": false, "score": 6.0677528381347656e-05}, "shared": {"value": false, "score": 7.152557373046875e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9780278205871582}, "created": {"value": true, "score": 0.9959970712661743}, "shared": {"value": false, "score": 1.9073486328125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "pushLpaq", "normalizedForm": "pushLpaq", "offsetStart": 100, "offsetEnd": 108}, "context": "First, by definition all newly created nodes have exactly two parents, one with a label of the form pushLpaq and one with a label of the form pushRpbq for some a, b P \u03a3.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0024840831756591797}, "created": {"value": false, "score": 5.435943603515625e-05}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9780278205871582}, "created": {"value": true, "score": 0.9959970712661743}, "shared": {"value": false, "score": 1.9073486328125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "pushRpaq", "normalizedForm": "pushRpaq", "offsetStart": 107, "offsetEnd": 115}, "context": "We can annotate the newly created nodes efficiently when we enlarge a word DAG: for instance, if we have a pushRpaq-successor n 1 of n in the word DAG, then we could simply annotate q 1 by \u03b4pq, aq.", "mentionContextAttributes": {"used": {"value": true, "score": 0.8105811476707458}, "created": {"value": false, "score": 3.5881996154785156e-05}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9998284578323364}, "created": {"value": false, "score": 0.0005980730056762695}, "shared": {"value": false, "score": 1.9073486328125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "pushRpaq", "normalizedForm": "pushRpaq", "offsetStart": 135, "offsetEnd": 143}, "context": "For the state annotation, we consider two cases, depending on whether the missing outgoing edge of node n that we are completing was a pushRpaq-or a pushLpaqsuccessor.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9946730732917786}, "created": {"value": false, "score": 5.257129669189453e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9998284578323364}, "created": {"value": false, "score": 0.0005980730056762695}, "shared": {"value": false, "score": 1.9073486328125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "pushLpaq", "normalizedForm": "pushLpaq", "offsetStart": 138, "offsetEnd": 146}, "context": "We show next that it is also a word DAG, by checking that this holds after each step where we handle one missing outgoing label on n, say pushLpaq.", "mentionContextAttributes": {"used": {"value": false, "score": 0.39432626962661743}, "created": {"value": false, "score": 0.0004100203514099121}, "shared": {"value": false, "score": 5.960464477539062e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9780278205871582}, "created": {"value": true, "score": 0.9959970712661743}, "shared": {"value": false, "score": 1.9073486328125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "pushRpaq", "normalizedForm": "pushRpaq", "offsetStart": 138, "offsetEnd": 146}, "context": "be the words that are discovered during the i-th phase of the algorithm, considering that, e.g., when we expand a node n for some missing pushRpaq-label, we first \"discover\" its pushRpaq-child, and then discover the pillar nodes (if any) in descending order.", "mentionContextAttributes": {"used": {"value": false, "score": 0.07902061939239502}, "created": {"value": false, "score": 0.0005980730056762695}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9998284578323364}, "created": {"value": false, "score": 0.0005980730056762695}, "shared": {"value": false, "score": 1.9073486328125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "pushRpaq", "normalizedForm": "pushRpaq", "offsetStart": 146, "offsetEnd": 154}, "context": "We will start from the initial word DAG, which we define to be the word DAG whose nodes are trootu Y tv a | a P \u03a3u and where each v a is both the pushRpaq and the pushLpaq-successor of root for all a P \u03a3.", "mentionContextAttributes": {"used": {"value": true, "score": 0.7963696122169495}, "created": {"value": false, "score": 8.606910705566406e-05}, "shared": {"value": false, "score": 8.344650268554688e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9998284578323364}, "created": {"value": false, "score": 0.0005980730056762695}, "shared": {"value": false, "score": 1.9073486328125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "pushLpaq", "normalizedForm": "pushLpaq", "offsetStart": 155, "offsetEnd": 163}, "context": "Note that, in the case where n 1  1 \" n (which can only happen when m \" 0 and b 1 \" a by Claim D.1), we handle two labels at once, i.e., we set n 1 as the pushLpaq-and pushRpaq-child of n as illustrated in Figure 6c.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9780278205871582}, "created": {"value": false, "score": 3.5762786865234375e-06}, "shared": {"value": false, "score": 7.152557373046875e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9780278205871582}, "created": {"value": true, "score": 0.9959970712661743}, "shared": {"value": false, "score": 1.9073486328125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "pushLpaq", "normalizedForm": "pushLpaq", "offsetStart": 163, "offsetEnd": 171}, "context": "We will start from the initial word DAG, which we define to be the word DAG whose nodes are trootu Y tv a | a P \u03a3u and where each v a is both the pushRpaq and the pushLpaq-successor of root for all a P \u03a3.", "mentionContextAttributes": {"used": {"value": true, "score": 0.7963696122169495}, "created": {"value": false, "score": 8.606910705566406e-05}, "shared": {"value": false, "score": 8.344650268554688e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9780278205871582}, "created": {"value": true, "score": 0.9959970712661743}, "shared": {"value": false, "score": 1.9073486328125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "pushLpaq", "normalizedForm": "pushLpaq", "offsetStart": 167, "offsetEnd": 175}, "context": "For each state q and letter a, the adjacency list item contains a pointer to an object representing the letter a, which the machine can use to output in constant time pushLpaq or pushRpaq and a pointer to the target state of the transition (or an indication that the transition is undefined).", "mentionContextAttributes": {"used": {"value": false, "score": 0.15286773443222046}, "created": {"value": false, "score": 5.14984130859375e-05}, "shared": {"value": false, "score": 7.152557373046875e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9780278205871582}, "created": {"value": true, "score": 0.9959970712661743}, "shared": {"value": false, "score": 1.9073486328125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "pushRpaq", "normalizedForm": "pushRpaq", "offsetStart": 168, "offsetEnd": 176}, "context": "The word represented by a directed path from the root to a node n is defined inductively: the word represented by the empty path is , the word represented by a path P, pushRpaq is wa where w is the word represented by P , the word represented by a path P, pushLpaq is aw where w is the word represented by P .", "mentionContextAttributes": {"used": {"value": true, "score": 0.8957552313804626}, "created": {"value": false, "score": 2.2649765014648438e-06}, "shared": {"value": false, "score": 1.6689300537109375e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9998284578323364}, "created": {"value": false, "score": 0.0005980730056762695}, "shared": {"value": false, "score": 1.9073486328125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "pushRpaq", "normalizedForm": "pushRpaq", "offsetStart": 168, "offsetEnd": 176}, "context": "Note that, in the case where n 1  1 \" n (which can only happen when m \" 0 and b 1 \" a by Claim D.1), we handle two labels at once, i.e., we set n 1 as the pushLpaq-and pushRpaq-child of n as illustrated in Figure 6c.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9780278205871582}, "created": {"value": false, "score": 3.5762786865234375e-06}, "shared": {"value": false, "score": 7.152557373046875e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9998284578323364}, "created": {"value": false, "score": 0.0005980730056762695}, "shared": {"value": false, "score": 1.9073486328125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "pushLpaq", "normalizedForm": "pushLpaq", "offsetStart": 178, "offsetEnd": 186}, "context": "While our lower bounds hold for the Levenshtein distance, our positive results already hold with a restricted set of 2|\u03a3| `2 edit operations called the push-pop edit operations: pushLpaq and pushRpaq for a P \u03a3, which respectively insert a at the beginning and at the end of the word, and popLpq and popRpq, which respectively remove the first and last character of the word (and cannot be applied if the word is empty).", "mentionContextAttributes": {"used": {"value": true, "score": 0.9560297131538391}, "created": {"value": false, "score": 2.5033950805664062e-06}, "shared": {"value": false, "score": 1.9073486328125e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9780278205871582}, "created": {"value": true, "score": 0.9959970712661743}, "shared": {"value": false, "score": 1.9073486328125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "pushRpaq", "normalizedForm": "pushRpaq", "offsetStart": 178, "offsetEnd": 186}, "context": "be the words that are discovered during the i-th phase of the algorithm, considering that, e.g., when we expand a node n for some missing pushRpaq-label, we first \"discover\" its pushRpaq-child, and then discover the pillar nodes (if any) in descending order.", "mentionContextAttributes": {"used": {"value": false, "score": 0.07902061939239502}, "created": {"value": false, "score": 0.0005980730056762695}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9998284578323364}, "created": {"value": false, "score": 0.0005980730056762695}, "shared": {"value": false, "score": 1.9073486328125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "pushRpaq", "normalizedForm": "pushRpaq", "offsetStart": 179, "offsetEnd": 187}, "context": "For each state q and letter a, the adjacency list item contains a pointer to an object representing the letter a, which the machine can use to output in constant time pushLpaq or pushRpaq and a pointer to the target state of the transition (or an indication that the transition is undefined).", "mentionContextAttributes": {"used": {"value": false, "score": 0.15286773443222046}, "created": {"value": false, "score": 5.14984130859375e-05}, "shared": {"value": false, "score": 7.152557373046875e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9998284578323364}, "created": {"value": false, "score": 0.0005980730056762695}, "shared": {"value": false, "score": 1.9073486328125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "pushRpaq", "normalizedForm": "pushRpaq", "offsetStart": 191, "offsetEnd": 199}, "context": "While our lower bounds hold for the Levenshtein distance, our positive results already hold with a restricted set of 2|\u03a3| `2 edit operations called the push-pop edit operations: pushLpaq and pushRpaq for a P \u03a3, which respectively insert a at the beginning and at the end of the word, and popLpq and popRpq, which respectively remove the first and last character of the word (and cannot be applied if the word is empty).", "mentionContextAttributes": {"used": {"value": true, "score": 0.9560297131538391}, "created": {"value": false, "score": 2.5033950805664062e-06}, "shared": {"value": false, "score": 1.9073486328125e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9998284578323364}, "created": {"value": false, "score": 0.0005980730056762695}, "shared": {"value": false, "score": 1.9073486328125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "pushLpaq", "normalizedForm": "pushLpaq", "offsetStart": 256, "offsetEnd": 264}, "context": "The word represented by a directed path from the root to a node n is defined inductively: the word represented by the empty path is , the word represented by a path P, pushRpaq is wa where w is the word represented by P , the word represented by a path P, pushLpaq is aw where w is the word represented by P .", "mentionContextAttributes": {"used": {"value": true, "score": 0.8957552313804626}, "created": {"value": false, "score": 2.2649765014648438e-06}, "shared": {"value": false, "score": 1.6689300537109375e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9780278205871582}, "created": {"value": true, "score": 0.9959970712661743}, "shared": {"value": false, "score": 1.9073486328125e-06}}}], "references": [], "runtime": 13483, "id": "80fd2cd87685a9f4e328ca593f56d95983fb2a99", "metadata": {"id": "80fd2cd87685a9f4e328ca593f56d95983fb2a99"}, "original_file_path": "../../datalake/Samuel/SOFTware-Sync/downloads/xml/hal-03940590.grobid.tei.xml", "file_name": "hal-03940590.grobid.tei.xml"}