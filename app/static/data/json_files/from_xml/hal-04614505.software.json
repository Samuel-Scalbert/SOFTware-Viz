{"application": "software-mentions", "version": "0.8.0", "date": "2024-10-07T11:36+0000", "md5": "E3D51D6CF7C23DEB6E3D9419597519AE", "mentions": [{"type": "software", "software-type": "software", "software-name": {"rawForm": "ClipWeights", "normalizedForm": "ClipWeights", "offsetStart": 0, "offsetEnd": 11}, "context": "ClipWeights. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.00029462575912475586}, "created": {"value": false, "score": 9.775161743164062e-05}, "shared": {"value": false, "score": 2.1457672119140625e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.997281551361084}, "created": {"value": false, "score": 0.002598404884338379}, "shared": {"value": false, "score": 2.1457672119140625e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ClipWeights", "normalizedForm": "ClipWeights", "offsetStart": 4, "offsetEnd": 15}, "context": "The ClipWeights function is essential to the algorithm, ensuring Lipschitzness, which facilitates model sensitivity estimation.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0008429288864135742}, "created": {"value": false, "score": 0.002598404884338379}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.997281551361084}, "created": {"value": false, "score": 0.002598404884338379}, "shared": {"value": false, "score": 2.1457672119140625e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ClipWeights", "normalizedForm": "ClipWeights", "offsetStart": 13, "offsetEnd": 24}, "context": "20: function ClipWeights( \u03b8, C)  Requirements. ", "mentionContextAttributes": {"used": {"value": true, "score": 0.9914703965187073}, "created": {"value": false, "score": 1.5497207641601562e-06}, "shared": {"value": false, "score": 7.152557373046875e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.997281551361084}, "created": {"value": false, "score": 0.002598404884338379}, "shared": {"value": false, "score": 2.1457672119140625e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ClipWeights", "normalizedForm": "ClipWeights", "offsetStart": 14, "offsetEnd": 25}, "context": "(u (\u03b8) , \u03b8) \u2190 ClipWeights( \u03b8,C) 18: end for 19: Output: \u03b8 and compute ( , \u03b4) with privacy accountant. ", "mentionContextAttributes": {"used": {"value": true, "score": 0.997281551361084}, "created": {"value": false, "score": 1.0728836059570312e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.997281551361084}, "created": {"value": false, "score": 0.002598404884338379}, "shared": {"value": false, "score": 2.1457672119140625e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Opacus", "normalizedForm": "Opacus", "offsetStart": 25, "offsetEnd": 31}, "context": "Drawing inspiration from Opacus, our library is based on two main components: the 'DataLoader', which utilizes Poisson sampling to harness the   advantages of privacy amplification Kasiviswanathan et al. (2011), and the 'Optimizer', responsible for sensitivity calculation, differential privacy noise addition, and parameter normalization during each iteration.", "mentionContextAttributes": {"used": {"value": false, "score": 0.008326113224029541}, "created": {"value": true, "score": 0.6756475567817688}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.008326113224029541}, "created": {"value": true, "score": 0.6756475567817688}, "shared": {"value": false, "score": 5.960464477539062e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ClipWeights", "normalizedForm": "ClipWeights", "offsetStart": 25, "offsetEnd": 36}, "context": "For both Algorithm 1 and ClipWeights it's crucial to compute the greatest singular matrix values efficiently. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.05261009931564331}, "created": {"value": false, "score": 1.1324882507324219e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.997281551361084}, "created": {"value": false, "score": 0.002598404884338379}, "shared": {"value": false, "score": 2.1457672119140625e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Opacus", "normalizedForm": "Opacus", "offsetStart": 27, "offsetEnd": 33}, "context": "This toolkit builds on the Opacus and PyTorch libraries. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0001367330551147461}, "created": {"value": false, "score": 0.008310854434967041}, "shared": {"value": false, "score": 5.960464477539062e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.008326113224029541}, "created": {"value": true, "score": 0.6756475567817688}, "shared": {"value": false, "score": 5.960464477539062e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "PyTorch", "normalizedForm": "PyTorch", "offsetStart": 38, "offsetEnd": 45}, "context": "This toolkit builds on the Opacus and PyTorch libraries. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0001367330551147461}, "created": {"value": false, "score": 0.008310854434967041}, "shared": {"value": false, "score": 5.960464477539062e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9880973696708679}, "created": {"value": false, "score": 0.008310854434967041}, "shared": {"value": false, "score": 5.960464477539062e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "PyTorch", "normalizedForm": "PyTorch", "offsetStart": 56, "offsetEnd": 63}, "context": "The staircase shape of the plot seems to be a result of PyTorch and Python memory management strategies.", "mentionContextAttributes": {"used": {"value": true, "score": 0.6900695562362671}, "created": {"value": false, "score": 0.006160438060760498}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9880973696708679}, "created": {"value": false, "score": 0.008310854434967041}, "shared": {"value": false, "score": 5.960464477539062e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "AutoGrad", "normalizedForm": "AutoGrad", "offsetStart": 72, "offsetEnd": 105}, "context": "If this isn't sufficiently fast, the power method can be enhanced using AutoGrad Scaman and Virmaux (2019). ", "mentionContextAttributes": {"used": {"value": false, "score": 0.00013363361358642578}, "created": {"value": false, "score": 0.0001308917999267578}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.00013363361358642578}, "created": {"value": false, "score": 0.0001308917999267578}, "shared": {"value": false, "score": 2.384185791015625e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "DataLoader", "normalizedForm": "DataLoader", "offsetStart": 83, "offsetEnd": 93}, "context": "Drawing inspiration from Opacus, our library is based on two main components: the 'DataLoader', which utilizes Poisson sampling to harness the   advantages of privacy amplification Kasiviswanathan et al. (2011), and the 'Optimizer', responsible for sensitivity calculation, differential privacy noise addition, and parameter normalization during each iteration.", "mentionContextAttributes": {"used": {"value": false, "score": 0.008326113224029541}, "created": {"value": true, "score": 0.6756475567817688}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.008326113224029541}, "created": {"value": true, "score": 0.6756475567817688}, "shared": {"value": false, "score": 3.5762786865234375e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "librairy BoTorch", "normalizedForm": "librairy BoTorch", "offsetStart": 95, "offsetEnd": 133}, "context": "To get to finally reported values, we select the point on the pareto front given by the Python librairy BoTorch Balandat et al. (2020).", "mentionContextAttributes": {"used": {"value": true, "score": 0.9996607303619385}, "created": {"value": false, "score": 0.00018483400344848633}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9996607303619385}, "created": {"value": false, "score": 0.00018483400344848633}, "shared": {"value": false, "score": 1.1920928955078125e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Opacus", "normalizedForm": "Opacus", "offsetStart": 120, "offsetEnd": 126}, "context": "It may be possible to further improve Lip-DP-SGD runtime as it currently heavily relies on the data sampler provided by Opacus, which processes data per instance, while applying batch processing techniques inspired on PyTorch would be more efficient. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.00012958049774169922}, "created": {"value": false, "score": 0.001308143138885498}, "shared": {"value": false, "score": 5.960464477539062e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.008326113224029541}, "created": {"value": true, "score": 0.6756475567817688}, "shared": {"value": false, "score": 5.960464477539062e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "PyTorch", "normalizedForm": "PyTorch", "offsetStart": 131, "offsetEnd": 138}, "context": "We measure runtime against the logical batch size, limiting the physical batch size to prevent memory errors as recommended by the PyTorch documentation Paszke et al. (2019). ", "mentionContextAttributes": {"used": {"value": true, "score": 0.9880973696708679}, "created": {"value": false, "score": 0.004067361354827881}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9880973696708679}, "created": {"value": false, "score": 0.008310854434967041}, "shared": {"value": false, "score": 5.960464477539062e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "PyTorch", "normalizedForm": "PyTorch", "offsetStart": 218, "offsetEnd": 225}, "context": "It may be possible to further improve Lip-DP-SGD runtime as it currently heavily relies on the data sampler provided by Opacus, which processes data per instance, while applying batch processing techniques inspired on PyTorch would be more efficient. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.00012958049774169922}, "created": {"value": false, "score": 0.001308143138885498}, "shared": {"value": false, "score": 5.960464477539062e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9880973696708679}, "created": {"value": false, "score": 0.008310854434967041}, "shared": {"value": false, "score": 5.960464477539062e-07}}}], "references": [], "runtime": 10502, "id": "5cffda6877531e9eaa2a1da3a66e0f6c14354ae8", "metadata": {"id": "5cffda6877531e9eaa2a1da3a66e0f6c14354ae8"}, "original_file_path": "../../datalake/Samuel/SOFTware-Sync/downloads/xml/hal-04614505.grobid.tei.xml", "file_name": "hal-04614505.grobid.tei.xml"}