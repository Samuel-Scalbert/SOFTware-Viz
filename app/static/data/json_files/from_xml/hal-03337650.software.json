{"application": "software-mentions", "version": "0.8.0", "date": "2024-04-12T17:25+0000", "md5": "BB0BE0E099E37C0D248E8B0B305EAB99", "mentions": [{"type": "software", "software-type": "software", "software-name": {"rawForm": "P-GAM", "normalizedForm": "P-GAM", "offsetStart": 0, "offsetEnd": 5}, "context": "P-GAM probes the keywordIndex when a query arrives to find the references to the Node table that match the query keywords and start the search from there. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0008034110069274902}, "created": {"value": false, "score": 2.7835369110107422e-05}, "shared": {"value": false, "score": 4.172325134277344e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.008555114269256592}, "created": {"value": false, "score": 0.027847766876220703}, "shared": {"value": false, "score": 4.172325134277344e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ConnectionLens", "normalizedForm": "ConnectionLens", "offsetStart": 0, "offsetEnd": 14}, "context": "ConnectionLens integrates JSON, XML, RDF, HTML, relational or text data into a graph, as illustrated in Figure 1. ", "mentionContextAttributes": {"used": {"value": false, "score": 6.324052810668945e-05}, "created": {"value": false, "score": 3.546476364135742e-05}, "shared": {"value": false, "score": 5.364418029785156e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9994881749153137}, "created": {"value": true, "score": 0.9998939633369446}, "shared": {"value": false, "score": 1.4007091522216797e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ConnectionLens", "normalizedForm": "ConnectionLens", "offsetStart": 0, "offsetEnd": 14}, "context": "ConnectionLens includes a disambiguation module which avoids mistakenly unifying entities with the same labels but different meanings. ", "mentionContextAttributes": {"used": {"value": false, "score": 3.045797348022461e-05}, "created": {"value": false, "score": 7.706880569458008e-05}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9994881749153137}, "created": {"value": true, "score": 0.9998939633369446}, "shared": {"value": false, "score": 1.4007091522216797e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ConnectionLens", "normalizedForm": "ConnectionLens", "offsetStart": 0, "offsetEnd": 14}, "context": "ConnectionLens' first iteration [26] lifted (iii) by introducing keyword search, but it still kept part of the graph virtual, and split keyword queries into subqueries sent to sources.", "mentionContextAttributes": {"used": {"value": false, "score": 0.32452714443206787}, "created": {"value": false, "score": 2.0205974578857422e-05}, "shared": {"value": false, "score": 1.7881393432617188e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9994881749153137}, "created": {"value": true, "score": 0.9998939633369446}, "shared": {"value": false, "score": 1.4007091522216797e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ConnectionLens", "normalizedForm": "ConnectionLens", "offsetStart": 3, "offsetEnd": 17}, "context": "If ConnectionLens is aware of this, it can skip the NER call on such text nodes.", "mentionContextAttributes": {"used": {"value": false, "score": 0.006386697292327881}, "created": {"value": false, "score": 2.9861927032470703e-05}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9994881749153137}, "created": {"value": true, "score": 0.9998939633369446}, "shared": {"value": false, "score": 1.4007091522216797e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "treesByRoot", "normalizedForm": "treesByRoot", "offsetStart": 9, "offsetEnd": 20}, "context": "Similar, treesByRoot is updated only when a tree changes its root or if there is a Merge of two trees; however, it is probed several times for Merge candidates. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.00022220611572265625}, "created": {"value": false, "score": 1.7821788787841797e-05}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.09724366664886475}, "created": {"value": false, "score": 0.0006385445594787598}, "shared": {"value": false, "score": 1.3709068298339844e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ConnectionLens", "normalizedForm": "ConnectionLens", "offsetStart": 12, "offsetEnd": 26}, "context": "Formally, a ConnectionLens graph is denoted G = (N, E), where nodes can be of different types (URIs, XML elements, JSON nodes etc., but also extracted entities) and edges encode: data source structure, entities extracted from text, and node label similarity.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0005954504013061523}, "created": {"value": false, "score": 0.0002002716064453125}, "shared": {"value": false, "score": 7.748603820800781e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9994881749153137}, "created": {"value": true, "score": 0.9998939633369446}, "shared": {"value": false, "score": 1.4007091522216797e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ConnectionLens", "normalizedForm": "ConnectionLens", "offsetStart": 24, "offsetEnd": 38}, "context": "The others are added by ConnectionLens as we discuss in Section 3.1.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9779602885246277}, "created": {"value": false, "score": 0.0003228187561035156}, "shared": {"value": false, "score": 1.4901161193847656e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9994881749153137}, "created": {"value": true, "score": 0.9998939633369446}, "shared": {"value": false, "score": 1.4007091522216797e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "-GAM", "normalizedForm": "-GAM", "offsetStart": 28, "offsetEnd": 32}, "context": "Among all the Algorithm 1: P-GAM Input: G = (N, E), query Q={w 1 , . . ", "mentionContextAttributes": {"used": {"value": true, "score": 0.9956192970275879}, "created": {"value": false, "score": 4.827976226806641e-06}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9956192970275879}, "created": {"value": true, "score": 0.9994605779647827}, "shared": {"value": false, "score": 2.980232238769531e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ConnectionLens", "normalizedForm": "ConnectionLens", "offsetStart": 29, "offsetEnd": 43}, "context": "As shown in Figure 2, we use ConnectionLens (90% Java, 10% Python) to construct a graph out of our data sources, and store it in PostgreSQL. ", "mentionContextAttributes": {"used": {"value": true, "score": 0.9994881749153137}, "created": {"value": false, "score": 1.1265277862548828e-05}, "shared": {"value": false, "score": 8.940696716308594e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9994881749153137}, "created": {"value": true, "score": 0.9998939633369446}, "shared": {"value": false, "score": 1.4007091522216797e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ConnectionLens", "normalizedForm": "ConnectionLens", "offsetStart": 32, "offsetEnd": 46}, "context": "If this information is given to ConnectionLens, it can create a Person entity node, like the Alice node in Figure 1, without calling the expensive NER procedure.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00137251615524292}, "created": {"value": false, "score": 0.00011497735977172852}, "shared": {"value": false, "score": 1.7881393432617188e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9994881749153137}, "created": {"value": true, "score": 0.9998939633369446}, "shared": {"value": false, "score": 1.4007091522216797e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ConnectionLens", "normalizedForm": "ConnectionLens", "offsetStart": 33, "offsetEnd": 47}, "context": "In prior work, we have developed ConnectionLens, a system capable of integrating such sources into a single heterogeneous graph, leveraging Information Extraction (IE) techniques; users can then query the graph by means of keywords, and explore query results and their neighborhood using an interactive GUI.", "mentionContextAttributes": {"used": {"value": false, "score": 5.358457565307617e-05}, "created": {"value": true, "score": 0.9997737407684326}, "shared": {"value": false, "score": 1.4007091522216797e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9994881749153137}, "created": {"value": true, "score": 0.9998939633369446}, "shared": {"value": false, "score": 1.4007091522216797e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "treesByRoot", "normalizedForm": "treesByRoot", "offsetStart": 41, "offsetEnd": 52}, "context": "As the search space is huge, history and treesByRoot grow very much. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.00015354156494140625}, "created": {"value": false, "score": 0.0006385445594787598}, "shared": {"value": false, "score": 1.3709068298339844e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.09724366664886475}, "created": {"value": false, "score": 0.0006385445594787598}, "shared": {"value": false, "score": 1.3709068298339844e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "treesByRoot", "normalizedForm": "treesByRoot", "offsetStart": 79, "offsetEnd": 90}, "context": "The history data structure holds all trees built during the exploration, while treesByRoot gives access to all trees rooted in a certain node. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.004824936389923096}, "created": {"value": false, "score": 1.7821788787841797e-05}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.09724366664886475}, "created": {"value": false, "score": 0.0006385445594787598}, "shared": {"value": false, "score": 1.3709068298339844e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ConnectionLens", "normalizedForm": "ConnectionLens", "offsetStart": 85, "offsetEnd": 99}, "context": "In the experiments we ran, Named Entity Recognition (NER) took up to 90% of the time ConnectionLens needs to integrate data sources into a graph.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9978882670402527}, "created": {"value": true, "score": 0.9814151525497437}, "shared": {"value": false, "score": 1.7881393432617188e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9994881749153137}, "created": {"value": true, "score": 0.9998939633369446}, "shared": {"value": false, "score": 1.4007091522216797e-05}}}, {"type": "software", "software-type": "software", "wikidataId": "Q192490", "wikipediaExternalRef": 23824, "lang": "en", "confidence": 0.9154, "software-name": {"rawForm": "PostgreSQL", "normalizedForm": "PostgreSQL", "wikidataId": "Q192490", "wikipediaExternalRef": 23824, "lang": "en", "confidence": 0.9154, "offsetStart": 97, "offsetEnd": 107}, "context": "As a point of reference, we also noted the time to load (and index) the graph nodes and edges in PostgreSQL; extraction strongly dominates the total time, confirming the practical interest of application-driven policies.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9998459815979004}, "created": {"value": false, "score": 4.559755325317383e-05}, "shared": {"value": false, "score": 1.7881393432617188e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9998459815979004}, "created": {"value": true, "score": 0.9746226072311401}, "shared": {"value": false, "score": 8.940696716308594e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "P-GAM", "normalizedForm": "P-GAM", "offsetStart": 99, "offsetEnd": 104}, "context": "This way, we can allocate a fixed size to each Node, efficiently supporting the memory accesses of P-GAM. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.008555114269256592}, "created": {"value": false, "score": 0.027847766876220703}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.008555114269256592}, "created": {"value": false, "score": 0.027847766876220703}, "shared": {"value": false, "score": 4.172325134277344e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "-GAM", "normalizedForm": "-GAM", "offsetStart": 111, "offsetEnd": 115}, "context": "Following the processing pipeline, we migrate the graph to our novel in-memory graph engine, which implements P-GAM. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.04464268684387207}, "created": {"value": true, "score": 0.9994605779647827}, "shared": {"value": false, "score": 1.7881393432617188e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9956192970275879}, "created": {"value": true, "score": 0.9994605779647827}, "shared": {"value": false, "score": 2.980232238769531e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "P-GAM Worker", "normalizedForm": "P-GAM Worker", "offsetStart": 115, "offsetEnd": 127}, "context": "i ); 3 for n \u2208 N Q , e edge adjacent to n do 4 push (n, e) on some pQueue j (distribute equally) 5 end 6 launch nt P-GAM Worker (Algorithm 2) threads; 7 return solutions structures, only Node connections (singled out by a dark background in Figure 4) is in a dynamically allocated area; all the others are statically allocated.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9146102070808411}, "created": {"value": false, "score": 2.4437904357910156e-06}, "shared": {"value": false, "score": 5.364418029785156e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9146102070808411}, "created": {"value": false, "score": 2.4437904357910156e-06}, "shared": {"value": false, "score": 5.364418029785156e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ConnectionLens", "normalizedForm": "ConnectionLens", "offsetStart": 117, "offsetEnd": 131}, "context": "Finally, an RDF property p used as context designates all the values o such that a triple (s, p, o) is ingested in a ConnectionLens graph.", "mentionContextAttributes": {"used": {"value": false, "score": 0.16950678825378418}, "created": {"value": false, "score": 2.1398067474365234e-05}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9994881749153137}, "created": {"value": true, "score": 0.9998939633369446}, "shared": {"value": false, "score": 1.4007091522216797e-05}}}, {"type": "software", "software-type": "software", "wikidataId": "Q192490", "wikipediaExternalRef": 23824, "lang": "en", "confidence": 0.9154, "software-name": {"rawForm": "PostgreSQL", "normalizedForm": "PostgreSQL", "wikidataId": "Q192490", "wikipediaExternalRef": 23824, "lang": "en", "confidence": 0.9154, "offsetStart": 122, "offsetEnd": 132}, "context": "We start by comparing P-GAM, using only 1 thread, with the (single-threaded) Java-based GAM, accessing graph edges from a PostgreSQL database. ", "mentionContextAttributes": {"used": {"value": true, "score": 0.994666337966919}, "created": {"value": false, "score": 0.0005549192428588867}, "shared": {"value": false, "score": 1.7881393432617188e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9998459815979004}, "created": {"value": true, "score": 0.9746226072311401}, "shared": {"value": false, "score": 8.940696716308594e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ConnectionLens", "normalizedForm": "ConnectionLens", "offsetStart": 124, "offsetEnd": 138}, "context": "In this work, we describe an actual IJ application studying conflicts of interest in the biomedical domain, and we show how ConnectionLens supports it.", "mentionContextAttributes": {"used": {"value": false, "score": 0.000642240047454834}, "created": {"value": true, "score": 0.9998939633369446}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9994881749153137}, "created": {"value": true, "score": 0.9998939633369446}, "shared": {"value": false, "score": 1.4007091522216797e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ConnectionLens", "normalizedForm": "ConnectionLens", "offsetStart": 124, "offsetEnd": 138}, "context": "In a relational data source containing table R with attribute a, a context of the form R.a designates all text nodes in the ConnectionLens graph obtained from a value of the attribute a in relation R.", "mentionContextAttributes": {"used": {"value": false, "score": 0.05579477548599243}, "created": {"value": false, "score": 1.1622905731201172e-05}, "shared": {"value": false, "score": 4.172325134277344e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9994881749153137}, "created": {"value": true, "score": 0.9998939633369446}, "shared": {"value": false, "score": 1.4007091522216797e-05}}}, {"type": "software", "software-type": "software", "wikidataId": "Q192490", "wikipediaExternalRef": 23824, "lang": "en", "confidence": 0.9154, "software-name": {"rawForm": "PostgreSQL", "normalizedForm": "PostgreSQL", "wikidataId": "Q192490", "wikipediaExternalRef": 23824, "lang": "en", "confidence": 0.9154, "offsetStart": 129, "offsetEnd": 139}, "context": "As shown in Figure 2, we use ConnectionLens (90% Java, 10% Python) to construct a graph out of our data sources, and store it in PostgreSQL. ", "mentionContextAttributes": {"used": {"value": true, "score": 0.9994881749153137}, "created": {"value": false, "score": 1.1265277862548828e-05}, "shared": {"value": false, "score": 8.940696716308594e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9998459815979004}, "created": {"value": true, "score": 0.9746226072311401}, "shared": {"value": false, "score": 8.940696716308594e-07}}}, {"type": "software", "software-type": "software", "wikidataId": "Q951374", "wikipediaExternalRef": 40383082, "lang": "en", "confidence": 0.4947, "software-name": {"rawForm": "HANA", "normalizedForm": "HANA", "wikidataId": "Q951374", "wikipediaExternalRef": 40383082, "lang": "en", "confidence": 0.4947, "offsetStart": 134, "offsetEnd": 138}, "publisher": {"rawForm": "SAP", "normalizedForm": "SAP", "offsetStart": 130, "offsetEnd": 133}, "context": "Data management research has by now led to several DB engines running entirely in main memory, such as Oracle Database In-Memory, SAP HANA, and Microsoft SQL Server with Hekaton. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.00011563301086425781}, "created": {"value": false, "score": 0.003927826881408691}, "shared": {"value": false, "score": 1.0728836059570312e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.00011563301086425781}, "created": {"value": false, "score": 0.003927826881408691}, "shared": {"value": false, "score": 1.0728836059570312e-06}}}, {"type": "software", "software-type": "software", "wikidataId": "Q192490", "wikipediaExternalRef": 23824, "lang": "en", "confidence": 0.9154, "software-name": {"rawForm": "PostgreSQL", "normalizedForm": "PostgreSQL", "wikidataId": "Q192490", "wikipediaExternalRef": 23824, "lang": "en", "confidence": 0.9154, "offsetStart": 139, "offsetEnd": 149}, "context": "First, we recall Con-nectionLens graph construction (Section 3.1), which integrates heterogeneous data into a graph, stored and indexed in PostgreSQL. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.09991836547851562}, "created": {"value": true, "score": 0.8826358318328857}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9998459815979004}, "created": {"value": true, "score": 0.9746226072311401}, "shared": {"value": false, "score": 8.940696716308594e-07}}}, {"type": "software", "software-type": "software", "wikidataId": "Q192490", "wikipediaExternalRef": 23824, "lang": "en", "confidence": 0.9154, "software-name": {"rawForm": "PostgreSQL", "normalizedForm": "PostgreSQL", "wikidataId": "Q192490", "wikipediaExternalRef": 23824, "lang": "en", "confidence": 0.9154, "offsetStart": 140, "offsetEnd": 150}, "context": "Our work falls into the data integration area [4]; our IJ pipeline starts by ingesting data into an integrated data repository, deployed in PostgreSQL. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.00024574995040893555}, "created": {"value": true, "score": 0.9746226072311401}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9998459815979004}, "created": {"value": true, "score": 0.9746226072311401}, "shared": {"value": false, "score": 8.940696716308594e-07}}}, {"type": "software", "software-type": "software", "wikidataId": "Q47607", "wikipediaExternalRef": 29004, "lang": "en", "confidence": 0.7029, "software-name": {"rawForm": "SQL Server", "normalizedForm": "SQL Server", "wikidataId": "Q47607", "wikipediaExternalRef": 29004, "lang": "en", "confidence": 0.7029, "offsetStart": 154, "offsetEnd": 164}, "publisher": {"rawForm": "Microsoft", "normalizedForm": "Microsoft", "offsetStart": 144, "offsetEnd": 153}, "context": "Data management research has by now led to several DB engines running entirely in main memory, such as Oracle Database In-Memory, SAP HANA, and Microsoft SQL Server with Hekaton. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.00011563301086425781}, "created": {"value": false, "score": 0.003927826881408691}, "shared": {"value": false, "score": 1.0728836059570312e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.00011563301086425781}, "created": {"value": false, "score": 0.003927826881408691}, "shared": {"value": false, "score": 1.0728836059570312e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "treesByRoot", "normalizedForm": "treesByRoot", "offsetStart": 158, "offsetEnd": 169}, "context": "If the Grow result tree had not been found before (this is determined from the history), the worker tries to Merge it with all compatible trees, found within treesByRoot (line 6).", "mentionContextAttributes": {"used": {"value": false, "score": 0.09724366664886475}, "created": {"value": false, "score": 3.886222839355469e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.09724366664886475}, "created": {"value": false, "score": 0.0006385445594787598}, "shared": {"value": false, "score": 1.3709068298339844e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Connection-Lens", "normalizedForm": "Connection-Lens", "offsetStart": 194, "offsetEnd": 209}, "context": "Each source is mapped to the graph as close to its data model as possible, e.g., XML edges have no labels while internal nodes all have names, while in JSON conventions are different etc. Next, Connection-Lens extracts named entities from all text nodes, regardless the data source they come from, using trained language models. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.022710084915161133}, "created": {"value": false, "score": 5.0067901611328125e-05}, "shared": {"value": false, "score": 8.344650268554688e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.022710084915161133}, "created": {"value": false, "score": 5.0067901611328125e-05}, "shared": {"value": false, "score": 8.344650268554688e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Postgres", "normalizedForm": "Postgres", "offsetStart": 327, "offsetEnd": 335}, "context": "(ms) until the internal data structures have been cleaned and properly prepared for queried, the time T 1-query P GAM (ms) until the first solution is found by P-GAM and its total running time T P GAM (s) that includes both cleaning and querying for all solutions, as well as the corresponding times T 1 and T for GAM (Java on Postgres). ", "mentionContextAttributes": {"used": {"value": true, "score": 0.995103120803833}, "created": {"value": false, "score": 2.1457672119140625e-06}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.995103120803833}, "created": {"value": false, "score": 2.1457672119140625e-06}, "shared": {"value": false, "score": 4.76837158203125e-07}}}], "references": [], "runtime": 141625, "id": "4bdfe0f5648722c25375380acdf35f6bd83e79e4", "metadata": {"id": "4bdfe0f5648722c25375380acdf35f6bd83e79e4"}, "original_file_path": "../../datalake/Samuel/SOFTware-Sync/data/xml_not_sofctied/hal-03337650.grobid.tei.xml", "file_name": "hal-03337650.grobid.tei.xml"}