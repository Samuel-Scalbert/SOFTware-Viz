{"application": "software-mentions", "version": "0.8.0", "date": "2024-10-07T11:50+0000", "md5": "82B7AA5612F30B41BAD368C26CF02150", "mentions": [{"type": "software", "software-type": "software", "software-name": {"rawForm": "AStream", "normalizedForm": "AStream", "offsetStart": 4, "offsetEnd": 11}, "context": "For AStream's EQA algorithm, this query is not a problem since having low concurrency. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.002149820327758789}, "created": {"value": false, "score": 6.687641143798828e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9997528195381165}, "created": {"value": true, "score": 0.9992006421089172}, "shared": {"value": false, "score": 1.1920928955078125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Saxon", "normalizedForm": "Saxon", "offsetStart": 5, "offsetEnd": 10}, "context": "With Saxon in-memory evaluation it required 0:45 minutes. ", "mentionContextAttributes": {"used": {"value": true, "score": 0.9999759197235107}, "created": {"value": false, "score": 9.417533874511719e-06}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999947547912598}, "created": {"value": false, "score": 2.110004425048828e-05}, "shared": {"value": false, "score": 5.960464477539062e-07}}, "references": [{"label": "[8]", "normalizedForm": "[8]", "refKey": 8}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "AStream", "normalizedForm": "AStream", "offsetStart": 7, "offsetEnd": 14}, "context": "We run AStream on XML documents of increasing size up to 1.2GB, but can also stream much larger documents >100GB.", "mentionContextAttributes": {"used": {"value": false, "score": 0.07407033443450928}, "created": {"value": false, "score": 0.05379766225814819}, "shared": {"value": false, "score": 1.1920928955078125e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9997528195381165}, "created": {"value": true, "score": 0.9992006421089172}, "shared": {"value": false, "score": 1.1920928955078125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "dShas", "normalizedForm": "dShas", "offsetStart": 12, "offsetEnd": 17}, "context": "We used the dShas for these XPath queries from [1] as inputs (so the time for the automaton construction is ignored here).", "mentionContextAttributes": {"used": {"value": true, "score": 0.999931812286377}, "created": {"value": false, "score": 2.9802322387695312e-06}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999931812286377}, "created": {"value": true, "score": 0.9998708963394165}, "shared": {"value": false, "score": 3.4570693969726562e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "dShas", "normalizedForm": "dShas", "offsetStart": 13, "offsetEnd": 18}, "context": "In contrast, dShas cannot pass any information top-down.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00013768672943115234}, "created": {"value": false, "score": 2.110004425048828e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999931812286377}, "created": {"value": true, "score": 0.9998708963394165}, "shared": {"value": false, "score": 3.4570693969726562e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "QuiXPath", "normalizedForm": "QuiXPath", "offsetStart": 13, "offsetEnd": 21}, "context": "We note that QuiXPath is not always earliest, but still earliest in most cases. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.00013136863708496094}, "created": {"value": false, "score": 0.001041412353515625}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.21704977750778198}, "created": {"value": true, "score": 0.7175047993659973}, "shared": {"value": false, "score": 2.384185791015625e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "QuiXPath", "normalizedForm": "QuiXPath", "offsetStart": 13, "offsetEnd": 21}, "context": "In contrast, QuiXPath uses streaming projection for queries defined by dNwas with selection states [18]. ", "mentionContextAttributes": {"used": {"value": false, "score": 6.186962127685547e-05}, "created": {"value": false, "score": 2.7418136596679688e-06}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.21704977750778198}, "created": {"value": true, "score": 0.7175047993659973}, "shared": {"value": false, "score": 2.384185791015625e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "dShas", "normalizedForm": "dShas", "offsetStart": 15, "offsetEnd": 20}, "context": "The drawing of dShas are similar as for usual finite state automata, except that now, edges may also be labeled by states and not only by letters.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0012867450714111328}, "created": {"value": false, "score": 2.7060508728027344e-05}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999931812286377}, "created": {"value": true, "score": 0.9998708963394165}, "shared": {"value": false, "score": 3.4570693969726562e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "QuiXPath", "normalizedForm": "QuiXPath", "offsetStart": 15, "offsetEnd": 23}, "context": "This is due to QuiXPath's state sharing, i.e. the sharing of the computations of all concurrent candidates in the same state. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.18022173643112183}, "created": {"value": false, "score": 6.151199340820312e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.21704977750778198}, "created": {"value": true, "score": 0.7175047993659973}, "shared": {"value": false, "score": 2.384185791015625e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "AStream", "normalizedForm": "AStream", "offsetStart": 18, "offsetEnd": 25}, "context": "It turns out that AStream runs efficiently on huge XML documents (>100GB) for all queries with low concurrency. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.11849278211593628}, "created": {"value": false, "score": 4.410743713378906e-06}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9997528195381165}, "created": {"value": true, "score": 0.9992006421089172}, "shared": {"value": false, "score": 1.1920928955078125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "AStream", "normalizedForm": "AStream", "offsetStart": 19, "offsetEnd": 26}, "context": "Second, we compare AStream to existing streaming tools for regular XPath queries with large coverage.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9997528195381165}, "created": {"value": false, "score": 9.393692016601562e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9997528195381165}, "created": {"value": true, "score": 0.9992006421089172}, "shared": {"value": false, "score": 1.1920928955078125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "QuiXPath", "normalizedForm": "QuiXPath", "offsetStart": 19, "offsetEnd": 27}, "context": "On the other hand, QuiXPath can stream queries with high concurrency such as O1, where AStream 3.36 runs out of time for documents of 1MB. ", "mentionContextAttributes": {"used": {"value": false, "score": 4.100799560546875e-05}, "created": {"value": false, "score": 2.9802322387695312e-06}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.21704977750778198}, "created": {"value": true, "score": 0.7175047993659973}, "shared": {"value": false, "score": 2.384185791015625e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Saxon", "normalizedForm": "Saxon", "offsetStart": 20, "offsetEnd": 25}, "context": "Or else, as done by Saxon [8], only very restricted regular XPath queries were permitted.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9863714575767517}, "created": {"value": false, "score": 2.2649765014648438e-06}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999947547912598}, "created": {"value": false, "score": 2.110004425048828e-05}, "shared": {"value": false, "score": 5.960464477539062e-07}}, "references": [{"label": "[8]", "normalizedForm": "[8]", "refKey": 8, "offsetStart": 2820, "offsetEnd": 2823}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "dShas", "normalizedForm": "dShas", "offsetStart": 20, "offsetEnd": 25}, "context": "The availability of dShas for regular path queries gave new hope for the feasibility of EQA in practice.", "mentionContextAttributes": {"used": {"value": false, "score": 0.002162754535675049}, "created": {"value": false, "score": 0.0028784871101379395}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999931812286377}, "created": {"value": true, "score": 0.9998708963394165}, "shared": {"value": false, "score": 3.4570693969726562e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "dShas", "normalizedForm": "dShas", "offsetStart": 20, "offsetEnd": 25}, "context": "This complexity for dShas improves on Gauwin et al. [6] for dNwas, which required time O(c n 2 ) per event after O(n 3 ) preprocessing time.", "mentionContextAttributes": {"used": {"value": true, "score": 0.854654848575592}, "created": {"value": false, "score": 5.841255187988281e-06}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999931812286377}, "created": {"value": true, "score": 0.9998708963394165}, "shared": {"value": false, "score": 3.4570693969726562e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "QuiXPath", "normalizedForm": "QuiXPath", "offsetStart": 22, "offsetEnd": 30}, "context": "On the one hand side, QuiXPath cannot stream query O2 on large documents, since not being earliest. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0003472566604614258}, "created": {"value": false, "score": 4.410743713378906e-06}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.21704977750778198}, "created": {"value": true, "score": 0.7175047993659973}, "shared": {"value": false, "score": 2.384185791015625e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "AStream", "normalizedForm": "AStream", "offsetStart": 24, "offsetEnd": 31}, "context": "The low running time of AStream reflects the low concurrency of all the queries on all these documents according to Theorem 1.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9980423450469971}, "created": {"value": false, "score": 8.821487426757812e-06}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9997528195381165}, "created": {"value": true, "score": 0.9992006421089172}, "shared": {"value": false, "score": 1.1920928955078125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "AStream", "normalizedForm": "AStream", "offsetStart": 26, "offsetEnd": 33}, "context": "Its implementation in the AStream tool has demonstrated its efficiency on queries in practical scenarios with low concurrency.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0007035732269287109}, "created": {"value": false, "score": 0.06766825914382935}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9997528195381165}, "created": {"value": true, "score": 0.9992006421089172}, "shared": {"value": false, "score": 1.1920928955078125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "AStream", "normalizedForm": "AStream", "offsetStart": 28, "offsetEnd": 35}, "context": "We note that we implemented AStream in Scala while using Java's abc-datalog for safety computation.", "mentionContextAttributes": {"used": {"value": false, "score": 0.006265819072723389}, "created": {"value": true, "score": 0.9980624318122864}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9997528195381165}, "created": {"value": true, "score": 0.9992006421089172}, "shared": {"value": false, "score": 1.1920928955078125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "dShas", "normalizedForm": "dShas", "offsetStart": 32, "offsetEnd": 37}, "context": "We present an EQA algorithm for dShas that requires time O(c m) per event, where m is the size of the automata and c the concurrency of the query.", "mentionContextAttributes": {"used": {"value": false, "score": 3.8623809814453125e-05}, "created": {"value": true, "score": 0.9998708963394165}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999931812286377}, "created": {"value": true, "score": 0.9998708963394165}, "shared": {"value": false, "score": 3.4570693969726562e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "dShas", "normalizedForm": "dShas", "offsetStart": 34, "offsetEnd": 39}, "context": "An earliest membership tester for dShas is presented in Section 5 and a late streaming algorithm for answering monadic queries in Section 6.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00010180473327636719}, "created": {"value": false, "score": 0.0012664198875427246}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999931812286377}, "created": {"value": true, "score": 0.9998708963394165}, "shared": {"value": false, "score": 3.4570693969726562e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "dShas", "normalizedForm": "dShas", "offsetStart": 35, "offsetEnd": 40}, "context": "We define streaming algorithms for dShas by infinitary nested word automata (dNWAs \u221e ).", "mentionContextAttributes": {"used": {"value": false, "score": 0.03496593236923218}, "created": {"value": true, "score": 0.7696998715400696}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999931812286377}, "created": {"value": true, "score": 0.9998708963394165}, "shared": {"value": false, "score": 3.4570693969726562e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Scala", "normalizedForm": "Scala", "offsetStart": 39, "offsetEnd": 44}, "context": "We note that we implemented AStream in Scala while using Java's abc-datalog for safety computation.", "mentionContextAttributes": {"used": {"value": false, "score": 0.006265819072723389}, "created": {"value": true, "score": 0.9980624318122864}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.006265819072723389}, "created": {"value": true, "score": 0.9980624318122864}, "shared": {"value": false, "score": 1.1920928955078125e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "AStream", "normalizedForm": "AStream", "offsetStart": 43, "offsetEnd": 50}, "context": "In average on the XPathMark queries A1-A8, AStream 3.36 is by a factor of 60 slower than QuiXPath, so requiring minutes instead of seconds.", "mentionContextAttributes": {"used": {"value": false, "score": 0.21704983711242676}, "created": {"value": false, "score": 6.9141387939453125e-06}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9997528195381165}, "created": {"value": true, "score": 0.9992006421089172}, "shared": {"value": false, "score": 1.1920928955078125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "AStream", "normalizedForm": "AStream", "offsetStart": 44, "offsetEnd": 51}, "context": "We implemented our new EQA algorithm in the AStream tool and applied it the regular XPath queries from the XPathMark collection [5] scaling to huge documents, and to the regular XPath queries extracted from practical XSLT programs by Lick and Schmitz [10] but on smaller documents. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.24327701330184937}, "created": {"value": false, "score": 0.12271928787231445}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9997528195381165}, "created": {"value": true, "score": 0.9992006421089172}, "shared": {"value": false, "score": 1.1920928955078125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "QuiXPath", "normalizedForm": "QuiXPath", "offsetStart": 58, "offsetEnd": 69}, "context": "We focus on the most efficient streaming evaluator called QuiXPath [4]. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.00015342235565185547}, "created": {"value": true, "score": 0.7175047993659973}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.21704977750778198}, "created": {"value": true, "score": 0.7175047993659973}, "shared": {"value": false, "score": 2.384185791015625e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "dNwas", "normalizedForm": "dNwas", "offsetStart": 59, "offsetEnd": 64}, "context": "Our approach is to adapt the general idea's of Gauwin from dNwas to dShas.", "mentionContextAttributes": {"used": {"value": false, "score": 6.878376007080078e-05}, "created": {"value": true, "score": 0.9891168475151062}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.8628659844398499}, "created": {"value": true, "score": 0.9891168475151062}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "references": [{"label": "15]", "normalizedForm": "15]", "refKey": 15}, {"label": "[2,", "normalizedForm": "[2", "refKey": 2}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "dNwas", "normalizedForm": "dNwas", "offsetStart": 60, "offsetEnd": 65}, "context": "This complexity for dShas improves on Gauwin et al. [6] for dNwas, which required time O(c n 2 ) per event after O(n 3 ) preprocessing time.", "mentionContextAttributes": {"used": {"value": true, "score": 0.854654848575592}, "created": {"value": false, "score": 5.841255187988281e-06}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.8628659844398499}, "created": {"value": true, "score": 0.9891168475151062}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "references": [{"label": "15]", "normalizedForm": "15]", "refKey": 15}, {"label": "[2,", "normalizedForm": "[2", "refKey": 2}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "dShas", "normalizedForm": "dShas", "offsetStart": 62, "offsetEnd": 67}, "context": "We define regular hedge languages by stepwise hedge automata (dShas).", "mentionContextAttributes": {"used": {"value": false, "score": 0.012993454933166504}, "created": {"value": false, "score": 5.829334259033203e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999931812286377}, "created": {"value": true, "score": 0.9998708963394165}, "shared": {"value": false, "score": 3.4570693969726562e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "dShas", "normalizedForm": "dShas", "offsetStart": 68, "offsetEnd": 73}, "context": "Our approach is to adapt the general idea's of Gauwin from dNwas to dShas.", "mentionContextAttributes": {"used": {"value": false, "score": 6.878376007080078e-05}, "created": {"value": true, "score": 0.9891168475151062}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999931812286377}, "created": {"value": true, "score": 0.9998708963394165}, "shared": {"value": false, "score": 3.4570693969726562e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "dNwas", "normalizedForm": "dNwas", "offsetStart": 71, "offsetEnd": 76}, "context": "In contrast, QuiXPath uses streaming projection for queries defined by dNwas with selection states [18]. ", "mentionContextAttributes": {"used": {"value": false, "score": 6.186962127685547e-05}, "created": {"value": false, "score": 2.7418136596679688e-06}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.8628659844398499}, "created": {"value": true, "score": 0.9891168475151062}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "references": [{"label": "15]", "normalizedForm": "15]", "refKey": 15}, {"label": "[2,", "normalizedForm": "[2", "refKey": 2}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Saxon", "normalizedForm": "Saxon", "offsetStart": 74, "offsetEnd": 79}, "context": "Up to 1GB we verified the correctness of the answer sets by comparison to Saxon's inmemory evaluator (which is limited to 1GB).", "mentionContextAttributes": {"used": {"value": true, "score": 0.9999947547912598}, "created": {"value": false, "score": 5.125999450683594e-06}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999947547912598}, "created": {"value": false, "score": 2.110004425048828e-05}, "shared": {"value": false, "score": 5.960464477539062e-07}}, "references": [{"label": "[8]", "normalizedForm": "[8]", "refKey": 8}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "dShas", "normalizedForm": "dShas", "offsetStart": 74, "offsetEnd": 79}, "context": "We introduced an EQA algorithm for regular monadic queries represented by dShas with a time complexity of O(c m) per event. ", "mentionContextAttributes": {"used": {"value": false, "score": 4.780292510986328e-05}, "created": {"value": true, "score": 0.9997745156288147}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999931812286377}, "created": {"value": true, "score": 0.9998708963394165}, "shared": {"value": false, "score": 3.4570693969726562e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "QuiXPath", "normalizedForm": "QuiXPath", "offsetStart": 75, "offsetEnd": 83}, "context": "While the concurrency of O2 is 1, linearly many candidates are buffered by QuiXPath, until the buffer overflows for documents larger than 5GB. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.018482863903045654}, "created": {"value": false, "score": 2.86102294921875e-06}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.21704977750778198}, "created": {"value": true, "score": 0.7175047993659973}, "shared": {"value": false, "score": 2.384185791015625e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "dShas", "normalizedForm": "dShas", "offsetStart": 76, "offsetEnd": 81}, "context": "The main reason for this is the lack of streaming projection algorithms for dShas.", "mentionContextAttributes": {"used": {"value": false, "score": 0.004601895809173584}, "created": {"value": false, "score": 0.00030493736267089844}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999931812286377}, "created": {"value": true, "score": 0.9998708963394165}, "shared": {"value": false, "score": 3.4570693969726562e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "AStream", "normalizedForm": "AStream", "offsetStart": 80, "offsetEnd": 87}, "context": "We present experimental results of our EQA algorithm that we implemented in the AStream tool, with current version 3.36.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0011090636253356934}, "created": {"value": true, "score": 0.9992006421089172}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9997528195381165}, "created": {"value": true, "score": 0.9992006421089172}, "shared": {"value": false, "score": 1.1920928955078125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Saxon", "normalizedForm": "Saxon", "offsetStart": 83, "offsetEnd": 88}, "context": "We could correctly answer all the 77 queries, yielding the same answer set as with Saxon. ", "mentionContextAttributes": {"used": {"value": true, "score": 0.9999268054962158}, "created": {"value": false, "score": 2.110004425048828e-05}, "shared": {"value": false, "score": 5.960464477539062e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999947547912598}, "created": {"value": false, "score": 2.110004425048828e-05}, "shared": {"value": false, "score": 5.960464477539062e-07}}, "references": [{"label": "[8]", "normalizedForm": "[8]", "refKey": 8}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "dShas", "normalizedForm": "dShas", "offsetStart": 86, "offsetEnd": 91}, "context": "Note that the earliest automaton is a dNwa passing safety information top-down (while dShas cannot pass any information top-down).", "mentionContextAttributes": {"used": {"value": false, "score": 0.003695368766784668}, "created": {"value": false, "score": 6.008148193359375e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999931812286377}, "created": {"value": true, "score": 0.9998708963394165}, "shared": {"value": false, "score": 3.4570693969726562e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "AStream", "normalizedForm": "AStream", "offsetStart": 87, "offsetEnd": 94}, "context": "On the other hand, QuiXPath can stream queries with high concurrency such as O1, where AStream 3.36 runs out of time for documents of 1MB.", "mentionContextAttributes": {"used": {"value": false, "score": 4.100799560546875e-05}, "created": {"value": false, "score": 2.9802322387695312e-06}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9997528195381165}, "created": {"value": true, "score": 0.9992006421089172}, "shared": {"value": false, "score": 1.1920928955078125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "AStream", "normalizedForm": "AStream", "offsetStart": 89, "offsetEnd": 96}, "context": "We then present our new EQA algorithm in Section 7 and discuss experimental results with AStream in Section 8. Complete proofs and supplementary material are given in the appendix.", "mentionContextAttributes": {"used": {"value": true, "score": 0.8613215088844299}, "created": {"value": true, "score": 0.9974149465560913}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9997528195381165}, "created": {"value": true, "score": 0.9992006421089172}, "shared": {"value": false, "score": 1.1920928955078125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "QuiXPath", "normalizedForm": "QuiXPath", "offsetStart": 89, "offsetEnd": 97}, "context": "In average on the XPathMark queries A1-A8, AStream 3.36 is by a factor of 60 slower than QuiXPath, so requiring minutes instead of seconds. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.21704977750778198}, "created": {"value": false, "score": 6.9141387939453125e-06}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.21704977750778198}, "created": {"value": true, "score": 0.7175047993659973}, "shared": {"value": false, "score": 2.384185791015625e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "dShas", "normalizedForm": "dShas", "offsetStart": 101, "offsetEnd": 106}, "context": "Note also that EQA for monadic queries can also be used to detect certain membership for language of dShas.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0003466606140136719}, "created": {"value": false, "score": 1.537799835205078e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999931812286377}, "created": {"value": true, "score": 0.9998708963394165}, "shared": {"value": false, "score": 3.4570693969726562e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "dNwas", "normalizedForm": "dNwas", "offsetStart": 119, "offsetEnd": 124}, "context": "This improvement relies on the fact, that the set of accessible states of an dSha can be computed time O(m), while for dNwas it requires time O(n 2 ) after O(n 3 ) preprocessing, where n the number of the states of the automaton.", "mentionContextAttributes": {"used": {"value": false, "score": 0.01504528522491455}, "created": {"value": false, "score": 4.0411949157714844e-05}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.8628659844398499}, "created": {"value": true, "score": 0.9891168475151062}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "references": [{"label": "15]", "normalizedForm": "15]", "refKey": 15}, {"label": "[2,", "normalizedForm": "[2", "refKey": 2}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "dShas", "normalizedForm": "dShas", "offsetStart": 120, "offsetEnd": 125}, "context": "We consider EQA for regular monadic queries on hedges or nested words defined by deterministic stepwise hedge automata (dShas).", "mentionContextAttributes": {"used": {"value": false, "score": 0.0016226768493652344}, "created": {"value": false, "score": 0.036086440086364746}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999931812286377}, "created": {"value": true, "score": 0.9998708963394165}, "shared": {"value": false, "score": 3.4570693969726562e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "dShas", "normalizedForm": "dShas", "offsetStart": 130, "offsetEnd": 135}, "context": "However, in order to compete with the current best non-earliest streaming algorithms, we need to develop streaming projection for dShas (as done previously for NWAs [18]), and to add some kind of factorization for candidates in the same state [4]. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.00014770030975341797}, "created": {"value": false, "score": 0.0035353899002075195}, "shared": {"value": false, "score": 3.4570693969726562e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999931812286377}, "created": {"value": true, "score": 0.9998708963394165}, "shared": {"value": false, "score": 3.4570693969726562e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "dNwas", "normalizedForm": "dNwas", "offsetStart": 132, "offsetEnd": 137}, "context": "Gauwin et al. [6] showed that EQA can be done in polynomial time for monadic queries defined by deterministic nested word automata (dNwas) [2,15].", "mentionContextAttributes": {"used": {"value": false, "score": 0.23108577728271484}, "created": {"value": false, "score": 5.602836608886719e-06}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.8628659844398499}, "created": {"value": true, "score": 0.9891168475151062}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "references": [{"label": "15]", "normalizedForm": "15]", "refKey": 15, "offsetStart": 1873, "offsetEnd": 1876}, {"label": "[2,", "normalizedForm": "[2", "refKey": 2, "offsetStart": 1870, "offsetEnd": 1873}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "dShas", "normalizedForm": "dShas", "offsetStart": 139, "offsetEnd": 144}, "context": "The algorithm obtained is more efficient than the best previous EQA algorithm, based on a reduction to Gauwin's EQA algorithm by compiling dShas to dNwas in linear time.", "mentionContextAttributes": {"used": {"value": true, "score": 0.8628659844398499}, "created": {"value": false, "score": 0.00011479854583740234}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999931812286377}, "created": {"value": true, "score": 0.9998708963394165}, "shared": {"value": false, "score": 3.4570693969726562e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "AStream", "normalizedForm": "AStream", "offsetStart": 140, "offsetEnd": 147}, "context": "There are 12 queries with concurrency 1, 47 with concurrency 2, 6 with concurrency 3, and 12 with concurrency 4. Our efficiency results for AStream thus show for the first time, that EQA is indeed feasible in practical scenarios with queries of low concurrency.", "mentionContextAttributes": {"used": {"value": false, "score": 0.4748349189758301}, "created": {"value": false, "score": 3.075599670410156e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9997528195381165}, "created": {"value": true, "score": 0.9992006421089172}, "shared": {"value": false, "score": 1.1920928955078125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "dNwas", "normalizedForm": "dNwas", "offsetStart": 148, "offsetEnd": 153}, "context": "The algorithm obtained is more efficient than the best previous EQA algorithm, based on a reduction to Gauwin's EQA algorithm by compiling dShas to dNwas in linear time.", "mentionContextAttributes": {"used": {"value": true, "score": 0.8628659844398499}, "created": {"value": false, "score": 0.00011479854583740234}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.8628659844398499}, "created": {"value": true, "score": 0.9891168475151062}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "references": [{"label": "15]", "normalizedForm": "15]", "refKey": 15}, {"label": "[2,", "normalizedForm": "[2", "refKey": 2}]}], "references": [{"refKey": 8, "tei": "<biblStruct xml:id=\"b8\">\n\t<analytic>\n\t\t<title level=\"a\" type=\"main\">A Streaming XSLT Processor</title>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Michael</forename><surname>Kay</surname></persName>\n\t\t</author>\n\t\t<idno type=\"DOI\">10.4242/balisagevol5.kay01</idno>\n\t</analytic>\n\t<monogr>\n\t\t<title level=\"m\">Balisage Series on Markup Technologies</title>\n\t\t<imprint>\n\t\t\t<publisher>Mulberry Technologies, Inc.</publisher>\n\t\t\t<date>2014</date>\n\t\t\t<biblScope unit=\"volume\">5</biblScope>\n\t\t\t<biblScope unit=\"page\">101</biblScope>\n\t\t</imprint>\n\t</monogr>\n</biblStruct>\n"}, {"refKey": 15, "tei": "<biblStruct xml:id=\"b15\">\n\t<analytic>\n\t\t<title level=\"a\" type=\"main\">Complexity of input-driven pushdown automata</title>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Alexander</forename><surname>Okhotin</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Kai</forename><surname>Salomaa</surname></persName>\n\t\t</author>\n\t\t<idno type=\"DOI\">10.1145/2636805.2636821</idno>\n\t</analytic>\n\t<monogr>\n\t\t<title level=\"j\">ACM SIGACT News</title>\n\t\t<title level=\"j\" type=\"abbrev\">SIGACT News</title>\n\t\t<idno type=\"ISSN\">0163-5700</idno>\n\t\t<imprint>\n\t\t\t<biblScope unit=\"volume\">45</biblScope>\n\t\t\t<biblScope unit=\"issue\">2</biblScope>\n\t\t\t<biblScope unit=\"page\" from=\"47\" to=\"67\" />\n\t\t\t<date type=\"published\" when=\"2014-06-09\">2014</date>\n\t\t\t<publisher>Association for Computing Machinery (ACM)</publisher>\n\t\t</imprint>\n\t</monogr>\n</biblStruct>\n"}, {"refKey": 2, "tei": "<biblStruct xml:id=\"b2\">\n\t<analytic>\n\t\t<title level=\"a\" type=\"main\">Marrying words and trees</title>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Rajeev</forename><surname>Alur</surname></persName>\n\t\t</author>\n\t\t<idno type=\"DOI\">10.1145/1265530.1265564</idno>\n\t</analytic>\n\t<monogr>\n\t\t<title level=\"m\">Proceedings of the twenty-sixth ACM SIGMOD-SIGACT-SIGART symposium on Principles of database systems</title>\n\t\t<meeting>the twenty-sixth ACM SIGMOD-SIGACT-SIGART symposium on Principles of database systems</meeting>\n\t\t<imprint>\n\t\t\t<publisher>ACM</publisher>\n\t\t\t<date type=\"published\" when=\"2007-06-11\">2007</date>\n\t\t</imprint>\n\t</monogr>\n</biblStruct>\n"}], "runtime": 17152, "id": "9d17d4efc1ae49175f9398e18aca6411bda65fac", "metadata": {"id": "9d17d4efc1ae49175f9398e18aca6411bda65fac"}, "original_file_path": "../../datalake/Samuel/SOFTware-Sync/downloads/xml/hal-04106420.grobid.tei.xml", "file_name": "hal-04106420.grobid.tei.xml"}