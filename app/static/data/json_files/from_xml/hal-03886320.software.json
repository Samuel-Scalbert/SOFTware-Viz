{"application": "software-mentions", "version": "0.8.0", "date": "2024-10-07T11:52+0000", "md5": "A337B38EF5A0C5BB7ACD74DBC16DFC8E", "mentions": [{"type": "software", "software-type": "software", "software-name": {"rawForm": "MoESP", "normalizedForm": "MoESP", "offsetStart": 0, "offsetEnd": 5}, "context": "MoESP works like ESP, but it creates more trees.", "mentionContextAttributes": {"used": {"value": false, "score": 3.933906555175781e-05}, "created": {"value": true, "score": 0.5881211757659912}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9963507652282715}, "created": {"value": true, "score": 0.9999179840087891}, "shared": {"value": false, "score": 7.152557373046875e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MoLESP", "normalizedForm": "MoLESP", "offsetStart": 0, "offsetEnd": 6}, "context": "MoLESP is guaranteed to find all the 3-piecewise simple results.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0003364086151123047}, "created": {"value": false, "score": 0.00015842914581298828}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999793767929077}, "created": {"value": true, "score": 0.9998799562454224}, "shared": {"value": false, "score": 1.1920928955078125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MoLESP", "normalizedForm": "MoLESP", "offsetStart": 0, "offsetEnd": 6}, "context": "MoLESP algorithm Algorithms 1 to 5, together, implement MoLESP. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.03941994905471802}, "created": {"value": false, "score": 0.04587745666503906}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999793767929077}, "created": {"value": true, "score": 0.9998799562454224}, "shared": {"value": false, "score": 1.1920928955078125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LANCET", "normalizedForm": "LANCET", "offsetStart": 0, "offsetEnd": 6}, "context": "LANCET relies on DPBF [16] to find an initial result, which it then improves. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0025783777236938477}, "created": {"value": false, "score": 2.9802322387695312e-06}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0025783777236938477}, "created": {"value": false, "score": 5.9604644775390625e-06}, "shared": {"value": false, "score": 1.1920928955078125e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MoLESP", "normalizedForm": "MoLESP", "offsetStart": 0, "offsetEnd": 6}, "context": "MoLESP is about 6-7\u00d7 faster than QGSTP for all \ud835\udc5a values, and scales well as \ud835\udc5a increases. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0018956661224365234}, "created": {"value": false, "score": 3.6954879760742188e-06}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999793767929077}, "created": {"value": true, "score": 0.9998799562454224}, "shared": {"value": false, "score": 1.1920928955078125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MoLESP", "normalizedForm": "MoLESP", "offsetStart": 0, "offsetEnd": 6}, "context": "MoLESP is the only feasible bidirectional algorithm; it runs in under 2 minutes on the largest graph with 2.4M edges.", "mentionContextAttributes": {"used": {"value": false, "score": 5.543231964111328e-05}, "created": {"value": false, "score": 0.00026744604110717773}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999793767929077}, "created": {"value": true, "score": 0.9998799562454224}, "shared": {"value": false, "score": 1.1920928955078125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MoLESP", "normalizedForm": "MoLESP", "offsetStart": 0, "offsetEnd": 6}, "context": "MoLESP took around 30% of the total time, the rest being spent by Postgres in the BGP evaluation and final joins. ", "mentionContextAttributes": {"used": {"value": true, "score": 0.9994267225265503}, "created": {"value": false, "score": 2.6226043701171875e-06}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999793767929077}, "created": {"value": true, "score": 0.9998799562454224}, "shared": {"value": false, "score": 1.1920928955078125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MoLESP", "normalizedForm": "MoLESP", "offsetStart": 0, "offsetEnd": 6}, "context": "MoLESP brings new, orthogonal, optimizations, and novel guarantees.", "mentionContextAttributes": {"used": {"value": false, "score": 6.592273712158203e-05}, "created": {"value": true, "score": 0.8823497891426086}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999793767929077}, "created": {"value": true, "score": 0.9998799562454224}, "shared": {"value": false, "score": 1.1920928955078125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "mergeAll", "normalizedForm": "mergeAll", "offsetStart": 0, "offsetEnd": 8}, "context": "mergeAll implements aggressive merging; by calling processTree on each new Merge result, through recordForMerging, the result is available in the future iterations of mergeAll, thus ensuring all the desired Merge.", "mentionContextAttributes": {"used": {"value": false, "score": 8.153915405273438e-05}, "created": {"value": false, "score": 0.0001856684684753418}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 8.153915405273438e-05}, "created": {"value": false, "score": 0.0001856684684753418}, "shared": {"value": false, "score": 4.76837158203125e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Postgres", "normalizedForm": "Postgres", "offsetStart": 0, "offsetEnd": 8}, "version": {"rawForm": "12.4", "normalizedForm": "12.4"}, "context": "Postgres timed-out in all cases. ", "mentionContextAttributes": {"used": {"value": true, "score": 0.9992772936820984}, "created": {"value": false, "score": 5.364418029785156e-06}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999957084655762}, "created": {"value": false, "score": 0.0001214742660522461}, "shared": {"value": false, "score": 3.5762786865234375e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Virtuoso", "normalizedForm": "Virtuoso", "offsetStart": 0, "offsetEnd": 8}, "context": "Virtuoso-SPARQL is the fastest, closely followed by Virtuoso-SQL; they are both unidirectional, require the edge labels, and do not return paths.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0008799433708190918}, "created": {"value": false, "score": 1.5616416931152344e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999171495437622}, "created": {"value": false, "score": 6.556510925292969e-05}, "shared": {"value": false, "score": 3.5762786865234375e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Postgres", "normalizedForm": "Postgres", "offsetStart": 0, "offsetEnd": 8}, "version": {"rawForm": "12.4", "normalizedForm": "12.4"}, "context": "Postgres is faster than JEDI, yet at least 10\u00d7 slower than MoLESP.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0005243420600891113}, "created": {"value": false, "score": 1.1205673217773438e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999957084655762}, "created": {"value": false, "score": 0.0001214742660522461}, "shared": {"value": false, "score": 3.5762786865234375e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Virtuoso", "normalizedForm": "Virtuoso", "offsetStart": 0, "offsetEnd": 8}, "context": "Virtuoso-SPARQL completed query \ud835\udc3d 1 , then ran out of memory.", "mentionContextAttributes": {"used": {"value": true, "score": 0.999885082244873}, "created": {"value": false, "score": 3.0994415283203125e-06}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999171495437622}, "created": {"value": false, "score": 6.556510925292969e-05}, "shared": {"value": false, "score": 3.5762786865234375e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "processTree", "normalizedForm": "processTree", "offsetStart": 0, "offsetEnd": 11}, "context": "processTree feeds the priority queue with (tree, edge) pairs at line 10. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0016303658485412598}, "created": {"value": false, "score": 1.5497207641601562e-06}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.008053600788116455}, "created": {"value": false, "score": 0.0001856684684753418}, "shared": {"value": false, "score": 4.76837158203125e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "RPQProv", "normalizedForm": "RPQProv", "offsetStart": 0, "offsetEnd": 12}, "version": {"rawForm": ".1", "normalizedForm": ".1", "offsetStart": 86, "offsetEnd": 88}, "context": "RPQProv [15] uses recursive SQL to return path labels; JEDI [2,3] builds over SPARQL 1.1 by returning all unidirectional paths. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.05326884984970093}, "created": {"value": false, "score": 1.5497207641601562e-06}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.05326884984970093}, "created": {"value": false, "score": 1.5497207641601562e-06}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "references": [{"label": "3]", "normalizedForm": "3]", "refKey": 3, "offsetStart": 57928, "offsetEnd": 57930}, {"label": "[2,", "normalizedForm": "[2", "refKey": 2, "offsetStart": 57925, "offsetEnd": 57928}, {"label": "3]", "normalizedForm": "3]", "refKey": 3, "offsetStart": 57928, "offsetEnd": 57930}, {"label": "[2,", "normalizedForm": "[2", "refKey": 2, "offsetStart": 57925, "offsetEnd": 57928}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Virtuoso-SPARQL", "normalizedForm": "Virtuoso-SPARQL", "offsetStart": 0, "offsetEnd": 15}, "context": "Virtuoso-SPARQL is 7\u00d7 faster than Virtuoso-SQL; both return non-minimal, duplicate results. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0008981227874755859}, "created": {"value": false, "score": 8.702278137207031e-06}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0008981227874755859}, "created": {"value": false, "score": 8.702278137207031e-06}, "shared": {"value": false, "score": 2.384185791015625e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "recordForMerging", "normalizedForm": "recordForMerging", "offsetStart": 0, "offsetEnd": 16}, "context": "recordForMerging injects the extra MoESP trees (Section 4.5) at lines 2 to 4. isNew implements limited edge-set pruning based on the history, and the two conditions that can \"spare\" a tree from pruning (Section 4.6). ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0874444842338562}, "created": {"value": false, "score": 5.602836608886719e-06}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0874444842338562}, "created": {"value": false, "score": 0.0001856684684753418}, "shared": {"value": false, "score": 4.76837158203125e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MoLESP", "normalizedForm": "MoLESP", "offsetStart": 4, "offsetEnd": 10}, "context": "UNI-MoLESP outperforms every system, while also returning connecting trees.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00013506412506103516}, "created": {"value": false, "score": 5.245208740234375e-06}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999793767929077}, "created": {"value": true, "score": 0.9998799562454224}, "shared": {"value": false, "score": 1.1920928955078125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MoLESP", "normalizedForm": "MoLESP", "offsetStart": 6, "offsetEnd": 12}, "context": "Thus, MoLESP is competitive also on large real-world graphs and queries.", "mentionContextAttributes": {"used": {"value": false, "score": 7.045269012451172e-05}, "created": {"value": false, "score": 9.131431579589844e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999793767929077}, "created": {"value": true, "score": 0.9998799562454224}, "shared": {"value": false, "score": 1.1920928955078125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MoESP", "normalizedForm": "MoESP", "offsetStart": 7, "offsetEnd": 12}, "context": "Within MoESP, Merge is allowed on MoESP trees, but not Grow.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0035630464553833008}, "created": {"value": false, "score": 7.534027099609375e-05}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9963507652282715}, "created": {"value": true, "score": 0.9999179840087891}, "shared": {"value": false, "score": 7.152557373046875e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MoESP", "normalizedForm": "MoESP", "offsetStart": 9, "offsetEnd": 14}, "context": "Clearly, MoESP builds a strict superset of the rooted trees created by ESP (thus, it finds all results of ESP). ", "mentionContextAttributes": {"used": {"value": false, "score": 0.00021272897720336914}, "created": {"value": false, "score": 0.00034868717193603516}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9963507652282715}, "created": {"value": true, "score": 0.9999179840087891}, "shared": {"value": false, "score": 7.152557373046875e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MoLESP", "normalizedForm": "MoLESP", "offsetStart": 9, "offsetEnd": 15}, "context": "Clearly, MoLESP finds all the trees found by MoESP and LESP. ", "mentionContextAttributes": {"used": {"value": true, "score": 0.6921941041946411}, "created": {"value": false, "score": 9.775161743164062e-06}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999793767929077}, "created": {"value": true, "score": 0.9998799562454224}, "shared": {"value": false, "score": 1.1920928955078125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "SPARQL", "normalizedForm": "SPARQL", "offsetStart": 9, "offsetEnd": 15}, "version": {"rawForm": "1.1", "normalizedForm": "1.1"}, "context": "Virtuoso-SPARQL is the fastest, closely followed by Virtuoso-SQL; they are both unidirectional, require the edge labels, and do not return paths.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0008799433708190918}, "created": {"value": false, "score": 1.5616416931152344e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999755620956421}, "created": {"value": true, "score": 0.9998884201049805}, "shared": {"value": false, "score": 8.344650268554688e-07}}, "references": [{"label": "[35]", "normalizedForm": "[35]", "refKey": 35}, {"label": "[35]", "normalizedForm": "[35]", "refKey": 35}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "SPARQL", "normalizedForm": "SPARQL", "offsetStart": 9, "offsetEnd": 15}, "version": {"rawForm": "1.1", "normalizedForm": "1.1"}, "context": "Virtuoso-SPARQL completed query \ud835\udc3d 1 , then ran out of memory.", "mentionContextAttributes": {"used": {"value": true, "score": 0.999885082244873}, "created": {"value": false, "score": 3.0994415283203125e-06}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999755620956421}, "created": {"value": true, "score": 0.9998884201049805}, "shared": {"value": false, "score": 8.344650268554688e-07}}, "references": [{"label": "[35]", "normalizedForm": "[35]", "refKey": 35}, {"label": "[35]", "normalizedForm": "[35]", "refKey": 35}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Virtuoso", "normalizedForm": "Virtuoso", "offsetStart": 9, "offsetEnd": 17}, "context": "However, Virtuoso's SQL dialect prevented us from returning the nodes and edge labels along the found paths (whereas standard recursive SQL allows it).", "mentionContextAttributes": {"used": {"value": true, "score": 0.9953749775886536}, "created": {"value": false, "score": 3.838539123535156e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999171495437622}, "created": {"value": false, "score": 6.556510925292969e-05}, "shared": {"value": false, "score": 3.5762786865234375e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MoESP", "normalizedForm": "MoESP", "offsetStart": 11, "offsetEnd": 16}, "context": "A possible MoESP execution order is:", "mentionContextAttributes": {"used": {"value": false, "score": 0.019874930381774902}, "created": {"value": false, "score": 6.246566772460938e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9963507652282715}, "created": {"value": true, "score": 0.9999179840087891}, "shared": {"value": false, "score": 7.152557373046875e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Virtuoso", "normalizedForm": "Virtuoso", "offsetStart": 11, "offsetEnd": 19}, "context": "with JEDI, Virtuoso and Neo4j (Postgres timed-out on all).", "mentionContextAttributes": {"used": {"value": true, "score": 0.9999171495437622}, "created": {"value": false, "score": 6.556510925292969e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999171495437622}, "created": {"value": false, "score": 6.556510925292969e-05}, "shared": {"value": false, "score": 3.5762786865234375e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MoESP", "normalizedForm": "MoESP", "offsetStart": 12, "offsetEnd": 17}, "context": "Property 5 (MoESP finds all path results).", "mentionContextAttributes": {"used": {"value": true, "score": 0.7135177850723267}, "created": {"value": false, "score": 8.702278137207031e-06}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9963507652282715}, "created": {"value": true, "score": 0.9999179840087891}, "shared": {"value": false, "score": 7.152557373046875e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MoLESP", "normalizedForm": "MoLESP", "offsetStart": 12, "offsetEnd": 18}, "context": "Property 7 (MoLESP finds all 3ps results). ", "mentionContextAttributes": {"used": {"value": true, "score": 0.7591575980186462}, "created": {"value": false, "score": 5.245208740234375e-06}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999793767929077}, "created": {"value": true, "score": 0.9998799562454224}, "shared": {"value": false, "score": 1.1920928955078125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MoLESP", "normalizedForm": "MoLESP", "offsetStart": 12, "offsetEnd": 18}, "context": "Property 8. MoLESP is complete for \ud835\udc5a \u2264 3 seed sets. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.001515209674835205}, "created": {"value": false, "score": 5.9604644775390625e-06}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999793767929077}, "created": {"value": true, "score": 0.9998799562454224}, "shared": {"value": false, "score": 1.1920928955078125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Virtuoso", "normalizedForm": "Virtuoso", "offsetStart": 12, "offsetEnd": 20}, "context": "Internally, Virtuoso translates an incoming SPARQL query into an SQL dialect1  before executing it. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.006396353244781494}, "created": {"value": false, "score": 1.5735626220703125e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999171495437622}, "created": {"value": false, "score": 6.556510925292969e-05}, "shared": {"value": false, "score": 3.5762786865234375e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MoESP", "normalizedForm": "MoESP", "offsetStart": 13, "offsetEnd": 18}, "context": "For any CTP, MoESP finds all the path results.", "mentionContextAttributes": {"used": {"value": false, "score": 0.007813334465026855}, "created": {"value": false, "score": 5.125999450683594e-06}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9963507652282715}, "created": {"value": true, "score": 0.9999179840087891}, "shared": {"value": false, "score": 7.152557373046875e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "SPARQL", "normalizedForm": "SPARQL", "offsetStart": 14, "offsetEnd": 20}, "version": {"rawForm": "1.1", "normalizedForm": "1.1", "offsetStart": 21, "offsetEnd": 24}, "context": "Specifically, SPARQL 1.1 property paths (\ud835\udc56) allow to check that some paths connect two nodes, not to return the path(s); (\ud835\udc56\ud835\udc56) do not allow searching for arbitrary paths (users have to specify a regular expression); (\ud835\udc56\ud835\udc56\ud835\udc56) are restricted to unidirectional paths only. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.000865638256072998}, "created": {"value": false, "score": 2.3484230041503906e-05}, "shared": {"value": false, "score": 8.344650268554688e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999755620956421}, "created": {"value": true, "score": 0.9998884201049805}, "shared": {"value": false, "score": 8.344650268554688e-07}}, "references": [{"label": "[35]", "normalizedForm": "[35]", "refKey": 35}, {"label": "[35]", "normalizedForm": "[35]", "refKey": 35}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MoESP", "normalizedForm": "MoESP", "offsetStart": 15, "offsetEnd": 20}, "context": "If \ud835\udc61 was 2ps, MoESP finds it (Property 4), thus MoLESP also does.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9963507652282715}, "created": {"value": false, "score": 7.510185241699219e-06}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9963507652282715}, "created": {"value": true, "score": 0.9999179840087891}, "shared": {"value": false, "score": 7.152557373046875e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Cypher", "normalizedForm": "Cypher", "offsetStart": 15, "offsetEnd": 21}, "context": "In contrast, a Cypher query may also return the paths between two given sets of nodes.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0002810359001159668}, "created": {"value": false, "score": 1.7523765563964844e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0017344355583190918}, "created": {"value": true, "score": 0.9998884201049805}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "references": [{"label": "[35]", "normalizedForm": "[35]", "refKey": 35}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Cypher", "normalizedForm": "Cypher", "offsetStart": 15, "offsetEnd": 21}, "context": "Neo4j supports Cypher queries asking for all directed or undirected paths between two sets of nodes.", "mentionContextAttributes": {"used": {"value": false, "score": 9.465217590332031e-05}, "created": {"value": false, "score": 2.765655517578125e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0017344355583190918}, "created": {"value": true, "score": 0.9998884201049805}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "references": [{"label": "[35]", "normalizedForm": "[35]", "refKey": 35}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MoLESP", "normalizedForm": "MoLESP", "offsetStart": 15, "offsetEnd": 21}, "context": "Unidirectional MoLESP, which we included to compare with unidirectional baselines, is slower by approximately 3\u00d7 only.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9714728593826294}, "created": {"value": false, "score": 5.125999450683594e-06}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999793767929077}, "created": {"value": true, "score": 0.9998799562454224}, "shared": {"value": false, "score": 1.1920928955078125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LANCET", "normalizedForm": "LANCET", "offsetStart": 15, "offsetEnd": 26}, "context": "QGSTP [39] and LANCET [40] are the most recent GSTP approximation algorithms, for specific cost functions based on node and edge (LANCET) weights. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0007040500640869141}, "created": {"value": false, "score": 5.9604644775390625e-06}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0025783777236938477}, "created": {"value": false, "score": 5.9604644775390625e-06}, "shared": {"value": false, "score": 1.1920928955078125e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MoLESP", "normalizedForm": "MoLESP", "offsetStart": 20, "offsetEnd": 26}, "context": "JEDI is slower than MoLESP by 10 2 \u00d7 on the smallest graph, and timed-out on the others.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0008081793785095215}, "created": {"value": false, "score": 3.4570693969726562e-06}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999793767929077}, "created": {"value": true, "score": 0.9998799562454224}, "shared": {"value": false, "score": 1.1920928955078125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MoLESP", "normalizedForm": "MoLESP", "offsetStart": 21, "offsetEnd": 27}, "context": "Thus, by Property 9, MoLESP is guaranteed to find them.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0010496973991394043}, "created": {"value": false, "score": 0.00010788440704345703}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999793767929077}, "created": {"value": true, "score": 0.9998799562454224}, "shared": {"value": false, "score": 1.1920928955078125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Virtuoso OpenSource", "normalizedForm": "Virtuoso OpenSource", "offsetStart": 21, "offsetEnd": 40}, "version": {"rawForm": "7.2.6", "normalizedForm": "7.2.6", "offsetStart": 42, "offsetEnd": 47}, "context": "Specifically, we use Virtuoso OpenSource v7.2.6 to evaluate SPARQL 1.1 queries that come as close as possible to the semantics of our language. ", "mentionContextAttributes": {"used": {"value": true, "score": 0.9999755620956421}, "created": {"value": false, "score": 1.990795135498047e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999755620956421}, "created": {"value": false, "score": 1.990795135498047e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MoESP", "normalizedForm": "MoESP", "offsetStart": 24, "offsetEnd": 29}, "context": "The following important MoESP property guarantees it is found: Property 4 (MoESP finds 2-piecewise simple solutions).", "mentionContextAttributes": {"used": {"value": false, "score": 0.002921581268310547}, "created": {"value": false, "score": 2.562999725341797e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9963507652282715}, "created": {"value": true, "score": 0.9999179840087891}, "shared": {"value": false, "score": 7.152557373046875e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MoESP", "normalizedForm": "MoESP", "offsetStart": 25, "offsetEnd": 30}, "context": "In Comb and Line graphs, MoESP trees (Section 4.5) are part of results.", "mentionContextAttributes": {"used": {"value": false, "score": 0.14467889070510864}, "created": {"value": false, "score": 2.5033950805664062e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9963507652282715}, "created": {"value": true, "score": 0.9999179840087891}, "shared": {"value": false, "score": 7.152557373046875e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MoLESP", "normalizedForm": "MoLESP", "offsetStart": 27, "offsetEnd": 33}, "context": "Our last algorithm, called MoLESP, is a GAM variant with ESP and both the modifications of MoESP (which injects more trees) and LESP (which avoids ESP pruning for some Merge trees). ", "mentionContextAttributes": {"used": {"value": false, "score": 9.28640365600586e-05}, "created": {"value": true, "score": 0.9905462265014648}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999793767929077}, "created": {"value": true, "score": 0.9998799562454224}, "shared": {"value": false, "score": 1.1920928955078125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MoLESP", "normalizedForm": "MoLESP", "offsetStart": 27, "offsetEnd": 33}, "context": "On queries \ud835\udc3d 2 and \ud835\udc3d 3 , MoLESP timed out. ", "mentionContextAttributes": {"used": {"value": true, "score": 0.999562680721283}, "created": {"value": false, "score": 1.239776611328125e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999793767929077}, "created": {"value": true, "score": 0.9998799562454224}, "shared": {"value": false, "score": 1.1920928955078125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Virtuoso-SQL", "normalizedForm": "Virtuoso-SQL", "offsetStart": 27, "offsetEnd": 39}, "context": "Our second baseline, named Virtuoso-SQL, consists of editing these SQL-like queries to remove label constraints and thus query the graph for connectivity between nodes. ", "mentionContextAttributes": {"used": {"value": false, "score": 4.303455352783203e-05}, "created": {"value": true, "score": 0.9967899918556213}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0008981227874755859}, "created": {"value": true, "score": 0.9967899918556213}, "shared": {"value": false, "score": 2.384185791015625e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MoLESP", "normalizedForm": "MoLESP", "offsetStart": 28, "offsetEnd": 34}, "context": "Note that the bidirectional MoLESP found about 7\u00d7 more results than the \ud835\udc41 \ud835\udc3f expected ones, by also connecting bottom leaves without a common parent through their grandparent node; these results are filtered by the join between the BGPs and the CTP (Section 3). ", "mentionContextAttributes": {"used": {"value": true, "score": 0.9999793767929077}, "created": {"value": false, "score": 2.0265579223632812e-06}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999793767929077}, "created": {"value": true, "score": 0.9998799562454224}, "shared": {"value": false, "score": 1.1920928955078125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MoLESP", "normalizedForm": "MoLESP", "offsetStart": 29, "offsetEnd": 35}, "context": "For any CTP of \ud835\udc5a \u2265 1 seeds, MoLESP finds any result \ud835\udc61, such that: each edge set \ud835\udc52\ud835\udc60 \u2208 \ud835\udf03 (\ud835\udc61) is a (\ud835\udc62, \ud835\udc5b)-rooted merge (Def. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.16196364164352417}, "created": {"value": false, "score": 4.5299530029296875e-06}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999793767929077}, "created": {"value": true, "score": 0.9998799562454224}, "shared": {"value": false, "score": 1.1920928955078125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MoESP", "normalizedForm": "MoESP", "offsetStart": 30, "offsetEnd": 35}, "context": "However, outside 2ps results, MoESP may still fail.", "mentionContextAttributes": {"used": {"value": false, "score": 0.006255209445953369}, "created": {"value": false, "score": 1.621246337890625e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9963507652282715}, "created": {"value": true, "score": 0.9999179840087891}, "shared": {"value": false, "score": 7.152557373046875e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Postgres", "normalizedForm": "Postgres", "offsetStart": 31, "offsetEnd": 39}, "version": {"rawForm": "12.4", "normalizedForm": "12.4"}, "context": "with JEDI, Virtuoso and Neo4j (Postgres timed-out on all).", "mentionContextAttributes": {"used": {"value": true, "score": 0.9999171495437622}, "created": {"value": false, "score": 6.556510925292969e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999957084655762}, "created": {"value": false, "score": 0.0001214742660522461}, "shared": {"value": false, "score": 3.5762786865234375e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MoESP", "normalizedForm": "MoESP", "offsetStart": 32, "offsetEnd": 37}, "context": "For any number of seed sets \ud835\udc5a, MoESP is guaranteed to find any 2-piecewise simple result.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0008117556571960449}, "created": {"value": false, "score": 4.863739013671875e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9963507652282715}, "created": {"value": true, "score": 0.9999179840087891}, "shared": {"value": false, "score": 7.152557373046875e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MoESP", "normalizedForm": "MoESP", "offsetStart": 33, "offsetEnd": 38}, "context": "Lemma 4.1, which still holds for MoESP, guarantees that rooted paths are built starting from both \ud835\udc5b \ud835\udc56 1 and \ud835\udc5b \ud835\udc56 \ud835\udc5a .", "mentionContextAttributes": {"used": {"value": false, "score": 0.0010544657707214355}, "created": {"value": false, "score": 8.83340835571289e-05}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9963507652282715}, "created": {"value": true, "score": 0.9999179840087891}, "shared": {"value": false, "score": 7.152557373046875e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MoESP", "normalizedForm": "MoESP", "offsetStart": 34, "offsetEnd": 39}, "context": "Within MoESP, Merge is allowed on MoESP trees, but not Grow.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0035630464553833008}, "created": {"value": false, "score": 7.534027099609375e-05}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9963507652282715}, "created": {"value": true, "score": 0.9999179840087891}, "shared": {"value": false, "score": 7.152557373046875e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Virtuoso-SQL", "normalizedForm": "Virtuoso-SQL", "offsetStart": 34, "offsetEnd": 46}, "context": "Virtuoso-SPARQL is 7\u00d7 faster than Virtuoso-SQL; both return non-minimal, duplicate results. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0008981227874755859}, "created": {"value": false, "score": 8.702278137207031e-06}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0008981227874755859}, "created": {"value": true, "score": 0.9967899918556213}, "shared": {"value": false, "score": 2.384185791015625e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MoESP", "normalizedForm": "MoESP", "offsetStart": 35, "offsetEnd": 40}, "context": "The end of our proof leverages the MoESP aspect of the algorithm: for each such edge set in \ud835\udf03 (\ud835\udc61), one tree rooted in each seed is built and not pruned; eventually, aggressive Merge of these trees builds a provenance for \ud835\udc61.", "mentionContextAttributes": {"used": {"value": false, "score": 0.18045443296432495}, "created": {"value": false, "score": 0.022676706314086914}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9963507652282715}, "created": {"value": true, "score": 0.9999179840087891}, "shared": {"value": false, "score": 7.152557373046875e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MoESP", "normalizedForm": "MoESP", "offsetStart": 35, "offsetEnd": 40}, "context": "recordForMerging injects the extra MoESP trees (Section 4.5) at lines 2 to 4. isNew implements limited edge-set pruning based on the history, and the two conditions that can \"spare\" a tree from pruning (Section 4.6).", "mentionContextAttributes": {"used": {"value": false, "score": 0.0874444842338562}, "created": {"value": false, "score": 5.602836608886719e-06}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9963507652282715}, "created": {"value": true, "score": 0.9999179840087891}, "shared": {"value": false, "score": 7.152557373046875e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MoLESP", "normalizedForm": "MoLESP", "offsetStart": 35, "offsetEnd": 41}, "context": "If \ud835\udc63 \u2208 {2, 3}, Property 7 ensures MoLESP finds it.", "mentionContextAttributes": {"used": {"value": false, "score": 0.15745151042938232}, "created": {"value": false, "score": 2.1457672119140625e-06}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999793767929077}, "created": {"value": true, "score": 0.9998799562454224}, "shared": {"value": false, "score": 1.1920928955078125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MoESP", "normalizedForm": "MoESP", "offsetStart": 36, "offsetEnd": 41}, "context": "Depending on the exploration order, MoESP and LESP may not find it.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0010638833045959473}, "created": {"value": false, "score": 3.409385681152344e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9963507652282715}, "created": {"value": true, "score": 0.9999179840087891}, "shared": {"value": false, "score": 7.152557373046875e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MoLESP", "normalizedForm": "MoLESP", "offsetStart": 36, "offsetEnd": 42}, "context": "Property 6, which also holds during MoLESP, guarantees that one provenance for \ud835\udc61 4 is built.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00711137056350708}, "created": {"value": false, "score": 8.153915405273438e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999793767929077}, "created": {"value": true, "score": 0.9998799562454224}, "shared": {"value": false, "score": 1.1920928955078125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Postgres", "normalizedForm": "Postgres", "offsetStart": 38, "offsetEnd": 46}, "version": {"rawForm": "12.4", "normalizedForm": "12.4", "offsetStart": 48, "offsetEnd": 52}, "context": "Finally, we used recursive queries in Postgres v12.4 to return the label on paths between node pairs.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9999957084655762}, "created": {"value": false, "score": 4.172325134277344e-06}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999957084655762}, "created": {"value": false, "score": 0.0001214742660522461}, "shared": {"value": false, "score": 3.5762786865234375e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Cypher", "normalizedForm": "Cypher", "offsetStart": 40, "offsetEnd": 46}, "context": "Some PG query languages such as Neo4j's Cypher lift these restrictions, however, its implementation does not scale (Section 5.5.1)", "mentionContextAttributes": {"used": {"value": false, "score": 0.0006150007247924805}, "created": {"value": false, "score": 6.771087646484375e-05}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0017344355583190918}, "created": {"value": true, "score": 0.9998884201049805}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "references": [{"label": "[35]", "normalizedForm": "[35]", "refKey": 35}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MoLESP", "normalizedForm": "MoLESP", "offsetStart": 44, "offsetEnd": 50}, "context": "Any order can be chosen in conjunction with MoLESP, since its completeness guarantees are independent of the exploration order.", "mentionContextAttributes": {"used": {"value": false, "score": 0.091330885887146}, "created": {"value": false, "score": 0.00025075674057006836}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999793767929077}, "created": {"value": true, "score": 0.9998799562454224}, "shared": {"value": false, "score": 1.1920928955078125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "SPARQL", "normalizedForm": "SPARQL", "offsetStart": 44, "offsetEnd": 50}, "version": {"rawForm": "1.1", "normalizedForm": "1.1"}, "context": "Internally, Virtuoso translates an incoming SPARQL query into an SQL dialect1  before executing it.", "mentionContextAttributes": {"used": {"value": false, "score": 0.006396353244781494}, "created": {"value": false, "score": 1.5735626220703125e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999755620956421}, "created": {"value": true, "score": 0.9998884201049805}, "shared": {"value": false, "score": 8.344650268554688e-07}}, "references": [{"label": "[35]", "normalizedForm": "[35]", "refKey": 35}, {"label": "[35]", "normalizedForm": "[35]", "refKey": 35}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MoESP", "normalizedForm": "MoESP", "offsetStart": 45, "offsetEnd": 50}, "context": "Clearly, MoLESP finds all the trees found by MoESP and LESP.", "mentionContextAttributes": {"used": {"value": true, "score": 0.6921941041946411}, "created": {"value": false, "score": 9.775161743164062e-06}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9963507652282715}, "created": {"value": true, "score": 0.9999179840087891}, "shared": {"value": false, "score": 7.152557373046875e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "SPARQL", "normalizedForm": "SPARQL", "offsetStart": 47, "offsetEnd": 53}, "version": {"rawForm": "1.1", "normalizedForm": "1.1"}, "context": "JEDI [2] returns all the data paths matching a SPARQL property path; we use the authors' code.", "mentionContextAttributes": {"used": {"value": true, "score": 0.8408821821212769}, "created": {"value": false, "score": 3.2186508178710938e-06}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999755620956421}, "created": {"value": true, "score": 0.9998884201049805}, "shared": {"value": false, "score": 8.344650268554688e-07}}, "references": [{"label": "[35]", "normalizedForm": "[35]", "refKey": 35}, {"label": "[35]", "normalizedForm": "[35]", "refKey": 35}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MoLESP", "normalizedForm": "MoLESP", "offsetStart": 49, "offsetEnd": 55}, "context": "If \ud835\udc61 was 2ps, MoESP finds it (Property 4), thus MoLESP also does.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9963507652282715}, "created": {"value": false, "score": 7.510185241699219e-06}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999793767929077}, "created": {"value": true, "score": 0.9998799562454224}, "shared": {"value": false, "score": 1.1920928955078125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "processTree", "normalizedForm": "processTree", "offsetStart": 51, "offsetEnd": 62}, "context": "mergeAll implements aggressive merging; by calling processTree on each new Merge result, through recordForMerging, the result is available in the future iterations of mergeAll, thus ensuring all the desired Merge.", "mentionContextAttributes": {"used": {"value": false, "score": 8.153915405273438e-05}, "created": {"value": false, "score": 0.0001856684684753418}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.008053600788116455}, "created": {"value": false, "score": 0.0001856684684753418}, "shared": {"value": false, "score": 4.76837158203125e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MoLESP", "normalizedForm": "MoLESP", "offsetStart": 52, "offsetEnd": 58}, "context": "This shows that the extra cost incurred by LESP and MoLESP, which limit or compensate for edgeset pruning (by injecting more trees), is worth paying for the completeness guarantees of MoLESP. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.07097828388214111}, "created": {"value": false, "score": 4.410743713378906e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999793767929077}, "created": {"value": true, "score": 0.9998799562454224}, "shared": {"value": false, "score": 1.1920928955078125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "SPARQL", "normalizedForm": "SPARQL", "offsetStart": 52, "offsetEnd": 58}, "version": {"rawForm": "1.1", "normalizedForm": "1.1"}, "context": "To query RDF graphs, one can use the W3C's standard SPARQL [13] query language; for property graphs, Cypher [35] is among the best known.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0017344355583190918}, "created": {"value": false, "score": 1.0967254638671875e-05}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999755620956421}, "created": {"value": true, "score": 0.9998884201049805}, "shared": {"value": false, "score": 8.344650268554688e-07}}, "references": [{"label": "[13]", "normalizedForm": "[13]", "refKey": 13, "offsetStart": 1581, "offsetEnd": 1585}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Virtuoso", "normalizedForm": "Virtuoso", "offsetStart": 52, "offsetEnd": 60}, "context": "Virtuoso-SPARQL is the fastest, closely followed by Virtuoso-SQL; they are both unidirectional, require the edge labels, and do not return paths.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0008799433708190918}, "created": {"value": false, "score": 1.5616416931152344e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999171495437622}, "created": {"value": false, "score": 6.556510925292969e-05}, "shared": {"value": false, "score": 3.5762786865234375e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MoLESP", "normalizedForm": "MoLESP", "offsetStart": 56, "offsetEnd": 62}, "context": "MoLESP algorithm Algorithms 1 to 5, together, implement MoLESP. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.03941994905471802}, "created": {"value": false, "score": 0.04587745666503906}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999793767929077}, "created": {"value": true, "score": 0.9998799562454224}, "shared": {"value": false, "score": 1.1920928955078125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "SPARQL", "normalizedForm": "SPARQL", "offsetStart": 56, "offsetEnd": 66}, "version": {"rawForm": "1.1", "normalizedForm": "1.1"}, "context": "We focused on extending a graph query language, such as SPARQL [13], Cypher [35] or GraphQL [18], with connecting tree patterns (CTPs) that they currently do not support (our requirement (R1) from Section 1). ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0009889602661132812}, "created": {"value": false, "score": 0.36215895414352417}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999755620956421}, "created": {"value": true, "score": 0.9998884201049805}, "shared": {"value": false, "score": 8.344650268554688e-07}}, "references": [{"label": "[35]", "normalizedForm": "[35]", "refKey": 35, "offsetStart": 57323, "offsetEnd": 57327}, {"label": "[35]", "normalizedForm": "[35]", "refKey": 35, "offsetStart": 57323, "offsetEnd": 57327}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MoLESP", "normalizedForm": "MoLESP", "offsetStart": 59, "offsetEnd": 65}, "context": "We now compare the winner of the above comparisons, namely MoLESP, with QGSTP [39] on the 18M edges DBPedia dataset and 312 CTPs used in their evaluation. ", "mentionContextAttributes": {"used": {"value": true, "score": 0.9991353154182434}, "created": {"value": false, "score": 1.9073486328125e-06}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999793767929077}, "created": {"value": true, "score": 0.9998799562454224}, "shared": {"value": false, "score": 1.1920928955078125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MoLESP", "normalizedForm": "MoLESP", "offsetStart": 59, "offsetEnd": 65}, "context": "Each QGSTP returned result is such that Property 9 ensures MoLESP finds it. ", "mentionContextAttributes": {"used": {"value": true, "score": 0.9911920428276062}, "created": {"value": false, "score": 9.059906005859375e-06}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999793767929077}, "created": {"value": true, "score": 0.9998799562454224}, "shared": {"value": false, "score": 1.1920928955078125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MoLESP", "normalizedForm": "MoLESP", "offsetStart": 59, "offsetEnd": 65}, "context": "Postgres is faster than JEDI, yet at least 10\u00d7 slower than MoLESP.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0005243420600891113}, "created": {"value": false, "score": 1.1205673217773438e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999793767929077}, "created": {"value": true, "score": 0.9998799562454224}, "shared": {"value": false, "score": 1.1920928955078125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "SPARQL", "normalizedForm": "SPARQL", "offsetStart": 59, "offsetEnd": 65}, "version": {"rawForm": "1.1", "normalizedForm": "1.1"}, "context": "JEDI [2] used a set of (unidirectional, label-constrained) SPARQL 1.1 queries over YAGO3.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9998524188995361}, "created": {"value": false, "score": 1.9073486328125e-06}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999755620956421}, "created": {"value": true, "score": 0.9998884201049805}, "shared": {"value": false, "score": 8.344650268554688e-07}}, "references": [{"label": "[35]", "normalizedForm": "[35]", "refKey": 35}, {"label": "[35]", "normalizedForm": "[35]", "refKey": 35}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "SPARQL", "normalizedForm": "SPARQL", "offsetStart": 60, "offsetEnd": 66}, "version": {"rawForm": "1.1", "normalizedForm": "1.1", "offsetStart": 67, "offsetEnd": 70}, "context": "Specifically, we use Virtuoso OpenSource v7.2.6 to evaluate SPARQL 1.1 queries that come as close as possible to the semantics of our language. ", "mentionContextAttributes": {"used": {"value": true, "score": 0.9999755620956421}, "created": {"value": false, "score": 1.990795135498047e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999755620956421}, "created": {"value": true, "score": 0.9998884201049805}, "shared": {"value": false, "score": 8.344650268554688e-07}}, "references": [{"label": "[35]", "normalizedForm": "[35]", "refKey": 35}, {"label": "[35]", "normalizedForm": "[35]", "refKey": 35}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MoLESP", "normalizedForm": "MoLESP", "offsetStart": 62, "offsetEnd": 68}, "context": "Despite the much larger search space due to bidirectionality, MoLESP scales well with the size of the graph.", "mentionContextAttributes": {"used": {"value": false, "score": 0.005044400691986084}, "created": {"value": false, "score": 5.841255187988281e-06}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999793767929077}, "created": {"value": true, "score": 0.9998799562454224}, "shared": {"value": false, "score": 1.1920928955078125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MoLESP", "normalizedForm": "MoLESP", "offsetStart": 63, "offsetEnd": 69}, "context": "\u25a1 Our strongest completeness result is: Property 9 (Restricted MoLESP completeness).", "mentionContextAttributes": {"used": {"value": true, "score": 0.6317574977874756}, "created": {"value": false, "score": 0.00023812055587768555}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999793767929077}, "created": {"value": true, "score": 0.9998799562454224}, "shared": {"value": false, "score": 1.1920928955078125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MoLESP", "normalizedForm": "MoLESP", "offsetStart": 64, "offsetEnd": 70}, "context": "This shows that the optimizations described in Section 4.9 make MoLESP robust also to large seed sets.", "mentionContextAttributes": {"used": {"value": false, "score": 0.025358498096466064}, "created": {"value": false, "score": 2.9206275939941406e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999793767929077}, "created": {"value": true, "score": 0.9998799562454224}, "shared": {"value": false, "score": 1.1920928955078125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Postgres", "normalizedForm": "Postgres", "offsetStart": 66, "offsetEnd": 74}, "version": {"rawForm": "12.4", "normalizedForm": "12.4"}, "context": "MoLESP took around 30% of the total time, the rest being spent by Postgres in the BGP evaluation and final joins. ", "mentionContextAttributes": {"used": {"value": true, "score": 0.9994267225265503}, "created": {"value": false, "score": 2.6226043701171875e-06}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999957084655762}, "created": {"value": false, "score": 0.0001214742660522461}, "shared": {"value": false, "score": 3.5762786865234375e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MoESP", "normalizedForm": "MoESP", "offsetStart": 69, "offsetEnd": 74}, "context": "On the same graphs, we compare GAM (Section 4.2), ESP (Section 4.4), MoESP (Section 4.5), LESP (Section 4.6) and MoLESP (Section 4.7) with the same timeout. ", "mentionContextAttributes": {"used": {"value": true, "score": 0.9954792261123657}, "created": {"value": false, "score": 4.5299530029296875e-06}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9963507652282715}, "created": {"value": true, "score": 0.9999179840087891}, "shared": {"value": false, "score": 7.152557373046875e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Cypher", "normalizedForm": "Cypher", "offsetStart": 69, "offsetEnd": 75}, "context": "We focused on extending a graph query language, such as SPARQL [13], Cypher [35] or GraphQL [18], with connecting tree patterns (CTPs) that they currently do not support (our requirement (R1) from Section 1).", "mentionContextAttributes": {"used": {"value": false, "score": 0.0009889602661132812}, "created": {"value": false, "score": 0.36215895414352417}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0017344355583190918}, "created": {"value": true, "score": 0.9998884201049805}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "references": [{"label": "[35]", "normalizedForm": "[35]", "refKey": 35, "offsetStart": 57323, "offsetEnd": 57327}, {"label": "[35]", "normalizedForm": "[35]", "refKey": 35, "offsetStart": 57323, "offsetEnd": 57327}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MoESP", "normalizedForm": "MoESP", "offsetStart": 70, "offsetEnd": 75}, "context": "We now introduce an algorithmic variant called Merge-oriented ESP, or MoESP, which finds many (but not all) CTP results for arbitrary numbers of seed sets.", "mentionContextAttributes": {"used": {"value": false, "score": 2.574920654296875e-05}, "created": {"value": true, "score": 0.9999179840087891}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9963507652282715}, "created": {"value": true, "score": 0.9999179840087891}, "shared": {"value": false, "score": 7.152557373046875e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MoESP", "normalizedForm": "MoESP", "offsetStart": 71, "offsetEnd": 76}, "context": "The rest of the proof follows the idea in the proof of Property 4. The MoESP aspect of MoLESP guarantees that for each edge set in \ud835\udf03 (\ud835\udc61), one tree rooted in each seed is built and not pruned; eventually, aggressive Merge of these trees builds a provenance for \ud835\udc61.", "mentionContextAttributes": {"used": {"value": false, "score": 0.16801738739013672}, "created": {"value": false, "score": 6.628036499023438e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9963507652282715}, "created": {"value": true, "score": 0.9999179840087891}, "shared": {"value": false, "score": 7.152557373046875e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MoLESP", "normalizedForm": "MoLESP", "offsetStart": 72, "offsetEnd": 78}, "context": "We then bring two orthogonal modifications which, combined, lead to our MoLESP algorithm, for which we formally establish completeness for \ud835\udc5a \u2208 {2, 3}, which are most frequent, as well as for a large class of results for arbitrarily large \ud835\udc5a.", "mentionContextAttributes": {"used": {"value": false, "score": 0.013829946517944336}, "created": {"value": true, "score": 0.7186622619628906}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999793767929077}, "created": {"value": true, "score": 0.9998799562454224}, "shared": {"value": false, "score": 1.1920928955078125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "SPARQL", "normalizedForm": "SPARQL", "offsetStart": 73, "offsetEnd": 79}, "version": {"rawForm": "1.1", "normalizedForm": "1.1"}, "context": "An interesting but challenging query language feature is reachability: a SPARQL 1.1 query can check, e.g., if there are some paths along which Mr. Shady deposits funds into a given bank ABC.", "mentionContextAttributes": {"used": {"value": false, "score": 9.97781753540039e-05}, "created": {"value": false, "score": 0.0004253983497619629}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999755620956421}, "created": {"value": true, "score": 0.9998884201049805}, "shared": {"value": false, "score": 8.344650268554688e-07}}, "references": [{"label": "[35]", "normalizedForm": "[35]", "refKey": 35}, {"label": "[35]", "normalizedForm": "[35]", "refKey": 35}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MoESP", "normalizedForm": "MoESP", "offsetStart": 75, "offsetEnd": 80}, "context": "The following important MoESP property guarantees it is found: Property 4 (MoESP finds 2-piecewise simple solutions).", "mentionContextAttributes": {"used": {"value": false, "score": 0.002921581268310547}, "created": {"value": false, "score": 2.562999725341797e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9963507652282715}, "created": {"value": true, "score": 0.9999179840087891}, "shared": {"value": false, "score": 7.152557373046875e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "isNew", "normalizedForm": "isNew", "offsetStart": 78, "offsetEnd": 83}, "context": "recordForMerging injects the extra MoESP trees (Section 4.5) at lines 2 to 4. isNew implements limited edge-set pruning based on the history, and the two conditions that can \"spare\" a tree from pruning (Section 4.6). ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0874444842338562}, "created": {"value": false, "score": 5.602836608886719e-06}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0874444842338562}, "created": {"value": false, "score": 5.602836608886719e-06}, "shared": {"value": false, "score": 1.1920928955078125e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "SPARQL", "normalizedForm": "SPARQL", "offsetStart": 78, "offsetEnd": 84}, "version": {"rawForm": "1.1", "normalizedForm": "1.1"}, "context": "RPQProv [15] uses recursive SQL to return path labels; JEDI [2,3] builds over SPARQL 1.1 by returning all unidirectional paths.", "mentionContextAttributes": {"used": {"value": false, "score": 0.05326884984970093}, "created": {"value": false, "score": 1.5497207641601562e-06}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999755620956421}, "created": {"value": true, "score": 0.9998884201049805}, "shared": {"value": false, "score": 8.344650268554688e-07}}, "references": [{"label": "[35]", "normalizedForm": "[35]", "refKey": 35}, {"label": "[35]", "normalizedForm": "[35]", "refKey": 35}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "PostgreSQL", "normalizedForm": "PostgreSQL", "offsetStart": 83, "offsetEnd": 93}, "version": {"rawForm": "12.4", "normalizedForm": "12.4", "offsetStart": 94, "offsetEnd": 98}, "language": {"rawForm": "Java", "normalizedForm": "Java", "wikidataId": "Q251", "offsetStart": 158, "offsetEnd": 162}, "context": "Our graphs are stored in a simple table graph(id,source, edgeLabel, target) within PostgreSQL 12.4; unless otherwise specified, we delegate to Postgres the BGP evaluation, and joining their results with CTP ones (Section 3). ", "mentionContextAttributes": {"used": {"value": true, "score": 0.9242451786994934}, "created": {"value": false, "score": 0.0001214742660522461}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9242451786994934}, "created": {"value": false, "score": 0.0001214742660522461}, "shared": {"value": false, "score": 3.5762786865234375e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "GraphQL", "normalizedForm": "GraphQL", "offsetStart": 84, "offsetEnd": 95}, "context": "We focused on extending a graph query language, such as SPARQL [13], Cypher [35] or GraphQL [18], with connecting tree patterns (CTPs) that they currently do not support (our requirement (R1) from Section 1). ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0009889602661132812}, "created": {"value": false, "score": 0.36215895414352417}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0009889602661132812}, "created": {"value": false, "score": 0.36215895414352417}, "shared": {"value": false, "score": 2.384185791015625e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MoESP", "normalizedForm": "MoESP", "offsetStart": 87, "offsetEnd": 92}, "context": "As soon as these paths meet, a tree over the edges of \ud835\udc61 \ud835\udc56 is created, then thanks to MoESP, one tree rooted in \ud835\udc5b \ud835\udc56 1 and another rooted in \ud835\udc5b \ud835\udc56 \ud835\udc5a , over the edge set of \ud835\udc61 \ud835\udc56 , are created.", "mentionContextAttributes": {"used": {"value": false, "score": 0.007987916469573975}, "created": {"value": false, "score": 0.0001285076141357422}, "shared": {"value": false, "score": 7.152557373046875e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9963507652282715}, "created": {"value": true, "score": 0.9999179840087891}, "shared": {"value": false, "score": 7.152557373046875e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MoLESP", "normalizedForm": "MoLESP", "offsetStart": 87, "offsetEnd": 93}, "context": "The rest of the proof follows the idea in the proof of Property 4. The MoESP aspect of MoLESP guarantees that for each edge set in \ud835\udf03 (\ud835\udc61), one tree rooted in each seed is built and not pruned; eventually, aggressive Merge of these trees builds a provenance for \ud835\udc61.", "mentionContextAttributes": {"used": {"value": false, "score": 0.16801738739013672}, "created": {"value": false, "score": 6.628036499023438e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999793767929077}, "created": {"value": true, "score": 0.9998799562454224}, "shared": {"value": false, "score": 1.1920928955078125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MoESP", "normalizedForm": "MoESP", "offsetStart": 91, "offsetEnd": 96}, "context": "Our last algorithm, called MoLESP, is a GAM variant with ESP and both the modifications of MoESP (which injects more trees) and LESP (which avoids ESP pruning for some Merge trees).", "mentionContextAttributes": {"used": {"value": false, "score": 9.28640365600586e-05}, "created": {"value": true, "score": 0.9905462265014648}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9963507652282715}, "created": {"value": true, "score": 0.9999179840087891}, "shared": {"value": false, "score": 7.152557373046875e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "SPARQL", "normalizedForm": "SPARQL", "offsetStart": 93, "offsetEnd": 99}, "version": {"rawForm": "1.1", "normalizedForm": "1.1"}, "context": "We implemented a parser and a query compiler for our language (Section 2) as an extension of SPARQL, and all the CTP evaluation algorithms from Section 4, in Java 11. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.00018805265426635742}, "created": {"value": true, "score": 0.9207028150558472}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999755620956421}, "created": {"value": true, "score": 0.9998884201049805}, "shared": {"value": false, "score": 8.344650268554688e-07}}, "references": [{"label": "[35]", "normalizedForm": "[35]", "refKey": 35}, {"label": "[35]", "normalizedForm": "[35]", "refKey": 35}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "recordForMerging", "normalizedForm": "recordForMerging", "offsetStart": 97, "offsetEnd": 113}, "context": "mergeAll implements aggressive merging; by calling processTree on each new Merge result, through recordForMerging, the result is available in the future iterations of mergeAll, thus ensuring all the desired Merge.", "mentionContextAttributes": {"used": {"value": false, "score": 8.153915405273438e-05}, "created": {"value": false, "score": 0.0001856684684753418}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0874444842338562}, "created": {"value": false, "score": 0.0001856684684753418}, "shared": {"value": false, "score": 4.76837158203125e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MoLESP", "normalizedForm": "MoLESP", "offsetStart": 98, "offsetEnd": 104}, "context": "\u25a1 For example, in Figure 7, with the six seeds \ud835\udc34 to \ud835\udc39 , the result is guaranteed to be found by MoLESP.", "mentionContextAttributes": {"used": {"value": true, "score": 0.6607114672660828}, "created": {"value": false, "score": 1.811981201171875e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999793767929077}, "created": {"value": true, "score": 0.9998799562454224}, "shared": {"value": false, "score": 1.1920928955078125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Cypher", "normalizedForm": "Cypher", "offsetStart": 101, "offsetEnd": 107}, "context": "To query RDF graphs, one can use the W3C's standard SPARQL [13] query language; for property graphs, Cypher [35] is among the best known.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0017344355583190918}, "created": {"value": false, "score": 1.0967254638671875e-05}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0017344355583190918}, "created": {"value": true, "score": 0.9998884201049805}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "references": [{"label": "[35]", "normalizedForm": "[35]", "refKey": 35, "offsetStart": 1630, "offsetEnd": 1634}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MoLESP", "normalizedForm": "MoLESP", "offsetStart": 113, "offsetEnd": 119}, "context": "On the same graphs, we compare GAM (Section 4.2), ESP (Section 4.4), MoESP (Section 4.5), LESP (Section 4.6) and MoLESP (Section 4.7) with the same timeout. ", "mentionContextAttributes": {"used": {"value": true, "score": 0.9954792261123657}, "created": {"value": false, "score": 4.5299530029296875e-06}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999793767929077}, "created": {"value": true, "score": 0.9998799562454224}, "shared": {"value": false, "score": 1.1920928955078125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "SPARQL", "normalizedForm": "SPARQL", "offsetStart": 117, "offsetEnd": 123}, "version": {"rawForm": "1.1", "normalizedForm": "1.1"}, "context": "Such queries are important in investigative journalism applications [5], in the fight against money laundering, etc. SPARQL allows checking for the existence of a path, but does not return the matching paths to users.", "mentionContextAttributes": {"used": {"value": false, "score": 5.6743621826171875e-05}, "created": {"value": false, "score": 2.7298927307128906e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999755620956421}, "created": {"value": true, "score": 0.9998884201049805}, "shared": {"value": false, "score": 8.344650268554688e-07}}, "references": [{"label": "[35]", "normalizedForm": "[35]", "refKey": 35}, {"label": "[35]", "normalizedForm": "[35]", "refKey": 35}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MoESP", "normalizedForm": "MoESP", "offsetStart": 121, "offsetEnd": 126}, "context": "Second, on the Star graphs, where the limited edge-set pruning (Section 4.6) applies, the performance difference between MoESP and MoLESP is small. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.47151029109954834}, "created": {"value": false, "score": 6.9141387939453125e-06}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9963507652282715}, "created": {"value": true, "score": 0.9999179840087891}, "shared": {"value": false, "score": 7.152557373046875e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "TreesRootedIn", "normalizedForm": "TreesRootedIn", "offsetStart": 124, "offsetEnd": 137}, "context": "They share a set of global variables whose names start with an uppercase letter: Res, PrioQ, Hist (the search history), and TreesRootedIn (to store the trees by their roots); the latter is needed to find Merge candidates fast. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.010031819343566895}, "created": {"value": false, "score": 8.606910705566406e-05}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.010031819343566895}, "created": {"value": false, "score": 8.606910705566406e-05}, "shared": {"value": false, "score": 3.5762786865234375e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "SPARQL", "normalizedForm": "SPARQL", "offsetStart": 128, "offsetEnd": 134}, "version": {"rawForm": "1.1", "normalizedForm": "1.1"}, "context": "In this work, we formally show how to integrate connecting tree patterns (CTPs, in short) within a graph query language such as SPARQL or Cypher, leading to an Extended Query Language (or EQL, in short).", "mentionContextAttributes": {"used": {"value": false, "score": 9.906291961669922e-05}, "created": {"value": true, "score": 0.9998884201049805}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999755620956421}, "created": {"value": true, "score": 0.9998884201049805}, "shared": {"value": false, "score": 8.344650268554688e-07}}, "references": [{"label": "[35]", "normalizedForm": "[35]", "refKey": 35}, {"label": "[35]", "normalizedForm": "[35]", "refKey": 35}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LANCET", "normalizedForm": "LANCET", "offsetStart": 130, "offsetEnd": 136}, "context": "QGSTP [39] and LANCET [40] are the most recent GSTP approximation algorithms, for specific cost functions based on node and edge (LANCET) weights. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0007040500640869141}, "created": {"value": false, "score": 5.9604644775390625e-06}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0025783777236938477}, "created": {"value": false, "score": 5.9604644775390625e-06}, "shared": {"value": false, "score": 1.1920928955078125e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MoLESP", "normalizedForm": "MoLESP", "offsetStart": 131, "offsetEnd": 137}, "context": "Second, on the Star graphs, where the limited edge-set pruning (Section 4.6) applies, the performance difference between MoESP and MoLESP is small. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.47151029109954834}, "created": {"value": false, "score": 6.9141387939453125e-06}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999793767929077}, "created": {"value": true, "score": 0.9998799562454224}, "shared": {"value": false, "score": 1.1920928955078125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Cypher", "normalizedForm": "Cypher", "offsetStart": 138, "offsetEnd": 144}, "context": "In this work, we formally show how to integrate connecting tree patterns (CTPs, in short) within a graph query language such as SPARQL or Cypher, leading to an Extended Query Language (or EQL, in short). ", "mentionContextAttributes": {"used": {"value": false, "score": 9.906291961669922e-05}, "created": {"value": true, "score": 0.9998884201049805}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0017344355583190918}, "created": {"value": true, "score": 0.9998884201049805}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "references": [{"label": "[35]", "normalizedForm": "[35]", "refKey": 35}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Postgres", "normalizedForm": "Postgres", "offsetStart": 143, "offsetEnd": 151}, "version": {"rawForm": "12.4", "normalizedForm": "12.4"}, "context": "Our graphs are stored in a simple table graph(id,source, edgeLabel, target) within PostgreSQL 12.4; unless otherwise specified, we delegate to Postgres the BGP evaluation, and joining their results with CTP ones (Section 3). ", "mentionContextAttributes": {"used": {"value": true, "score": 0.9242451786994934}, "created": {"value": false, "score": 0.0001214742660522461}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999957084655762}, "created": {"value": false, "score": 0.0001214742660522461}, "shared": {"value": false, "score": 3.5762786865234375e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MoLESP", "normalizedForm": "MoLESP", "offsetStart": 146, "offsetEnd": 152}, "context": "To cope with very large search spaces, we propose an efficient pruning technique and formally establish a large set of cases where our algorithm, MoLESP, is complete even with pruning. ", "mentionContextAttributes": {"used": {"value": false, "score": 8.606910705566406e-05}, "created": {"value": true, "score": 0.9998799562454224}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999793767929077}, "created": {"value": true, "score": 0.9998799562454224}, "shared": {"value": false, "score": 1.1920928955078125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "SPARQL", "normalizedForm": "SPARQL", "offsetStart": 156, "offsetEnd": 162}, "version": {"rawForm": "1.1", "normalizedForm": "1.1"}, "context": "(1) We formally define an Extended Query Language (EQL, in short), which combines together Basic Graph Pattern (or conjunctive) queries at the core of both SPARQL and Cypher, and Connecting Tree Patterns (CTPs, in short).", "mentionContextAttributes": {"used": {"value": false, "score": 0.00013518333435058594}, "created": {"value": false, "score": 0.024433791637420654}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999755620956421}, "created": {"value": true, "score": 0.9998884201049805}, "shared": {"value": false, "score": 8.344650268554688e-07}}, "references": [{"label": "[35]", "normalizedForm": "[35]", "refKey": 35}, {"label": "[35]", "normalizedForm": "[35]", "refKey": 35}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "processTree", "normalizedForm": "processTree", "offsetStart": 158, "offsetEnd": 169}, "context": ", \ud835\udc59 \ud835\udc58 } is enforced by restricting the Grow edges to only those carrying one of these labels; in GAM and its variants, we only add in the queue (line 10 in processTree), (tree, edge) pairs where the edge has an allowed label.", "mentionContextAttributes": {"used": {"value": false, "score": 0.008053600788116455}, "created": {"value": false, "score": 9.5367431640625e-06}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.008053600788116455}, "created": {"value": false, "score": 0.0001856684684753418}, "shared": {"value": false, "score": 4.76837158203125e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MoLESP", "normalizedForm": "MoLESP", "offsetStart": 162, "offsetEnd": 168}, "context": "In all graphs but Figure 11a, the \ud835\udc66 axis is Distance between the seeds, sL  The plots show, first, that edge set pruning significantly reduces the running time: MoLESP is faster than GAM by a factor ranging from 1.3\u00d7 (Line graphs) to 15\u00d7 (Comb graphs, \ud835\udc5b\ud835\udc34=6, \ud835\udc5a=18). ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0545116662979126}, "created": {"value": false, "score": 3.0994415283203125e-06}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999793767929077}, "created": {"value": true, "score": 0.9998799562454224}, "shared": {"value": false, "score": 1.1920928955078125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Cypher", "normalizedForm": "Cypher", "offsetStart": 167, "offsetEnd": 173}, "context": "(1) We formally define an Extended Query Language (EQL, in short), which combines together Basic Graph Pattern (or conjunctive) queries at the core of both SPARQL and Cypher, and Connecting Tree Patterns (CTPs, in short). ", "mentionContextAttributes": {"used": {"value": false, "score": 0.00013518333435058594}, "created": {"value": false, "score": 0.024433791637420654}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0017344355583190918}, "created": {"value": true, "score": 0.9998884201049805}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "references": [{"label": "[35]", "normalizedForm": "[35]", "refKey": 35}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "mergeAll", "normalizedForm": "mergeAll", "offsetStart": 167, "offsetEnd": 175}, "context": "mergeAll implements aggressive merging; by calling processTree on each new Merge result, through recordForMerging, the result is available in the future iterations of mergeAll, thus ensuring all the desired Merge.", "mentionContextAttributes": {"used": {"value": false, "score": 8.153915405273438e-05}, "created": {"value": false, "score": 0.0001856684684753418}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 8.153915405273438e-05}, "created": {"value": false, "score": 0.0001856684684753418}, "shared": {"value": false, "score": 4.76837158203125e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MoESP", "normalizedForm": "MoESP", "offsetStart": 175, "offsetEnd": 180}, "context": "Specifically, whenever Grow or Merge produces a provenance \ud835\udc61 having strictly more seeds than any of its (one or two) children, the algorithm builds from \ud835\udc61 all the so-called MoESP trees \ud835\udc61 \u2032 such that:", "mentionContextAttributes": {"used": {"value": false, "score": 0.00528109073638916}, "created": {"value": false, "score": 0.0001672506332397461}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9963507652282715}, "created": {"value": true, "score": 0.9999179840087891}, "shared": {"value": false, "score": 7.152557373046875e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MoLESP", "normalizedForm": "MoLESP", "offsetStart": 184, "offsetEnd": 190}, "context": "This shows that the extra cost incurred by LESP and MoLESP, which limit or compensate for edgeset pruning (by injecting more trees), is worth paying for the completeness guarantees of MoLESP. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.07097828388214111}, "created": {"value": false, "score": 4.410743713378906e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999793767929077}, "created": {"value": true, "score": 0.9998799562454224}, "shared": {"value": false, "score": 1.1920928955078125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MoLESP", "normalizedForm": "MoLESP", "offsetStart": 255, "offsetEnd": 261}, "context": "(4) We experimentally show that: (\ud835\udc56) baseline algorithms inspired from breadth-first search are unfeasible even for small graphs; (\ud835\udc56\ud835\udc56) the optimizations we bring here over the GAM algorithm [6] strongly reduce the search time; (\ud835\udc56\ud835\udc56\ud835\udc56) integrating our MoLESP algorithm with a simple conjunctive graph query engine allows to efficiently evaluate queries in our extended language (Section 5).", "mentionContextAttributes": {"used": {"value": false, "score": 0.00272446870803833}, "created": {"value": false, "score": 0.08664393424987793}, "shared": {"value": false, "score": 1.1920928955078125e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999793767929077}, "created": {"value": true, "score": 0.9998799562454224}, "shared": {"value": false, "score": 1.1920928955078125e-06}}}], "references": [{"refKey": 3, "tei": "<biblStruct xml:id=\"b3\">\n\t<analytic>\n\t\t<title level=\"a\" type=\"main\">Optimizing SPARQL queries over decentralized knowledge graphs</title>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Christian</forename><surname>Aebeloe</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Gabriela</forename><surname>Montoya</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Katja</forename><surname>Hose</surname></persName>\n\t\t</author>\n\t\t<idno type=\"DOI\">10.3233/sw-233438</idno>\n\t</analytic>\n\t<monogr>\n\t\t<title level=\"j\">Semantic Web</title>\n\t\t<title level=\"j\" type=\"abbrev\">SW</title>\n\t\t<editor>\n\t\t\t<persName><forename type=\"first\">Medha</forename><surname>Marieke Van Erp</surname></persName>\n\t\t</editor>\n\t\t<editor>\n\t\t\t<persName><forename type=\"first\">Vanessa</forename><surname>Atre</surname></persName>\n\t\t</editor>\n\t\t<editor>\n\t\t\t<persName><forename type=\"first\">Kavitha</forename><surname>L\u00f3pez</surname></persName>\n\t\t</editor>\n\t\t<editor>\n\t\t\t<persName><forename type=\"first\">Carolina</forename><surname>Srinivas</surname></persName>\n\t\t</editor>\n\t\t<editor>\n\t\t\t<persName><surname>Fortuna</surname></persName>\n\t\t</editor>\n\t\t<idno type=\"ISSN\">1570-0844</idno>\n\t\t<idno type=\"ISSNe\">2210-4968</idno>\n\t\t<imprint>\n\t\t\t<biblScope unit=\"volume\">14</biblScope>\n\t\t\t<biblScope unit=\"issue\">6</biblScope>\n\t\t\t<biblScope unit=\"page\" from=\"1121\" to=\"1165\" />\n\t\t\t<date type=\"published\" when=\"2023-12-13\">2018. October 8th -to -12th, 2018</date>\n\t\t\t<publisher>IOS Press</publisher>\n\t\t</imprint>\n\t</monogr>\n</biblStruct>\n"}, {"refKey": 2, "tei": "<biblStruct xml:id=\"b2\">\n\t<analytic>\n\t\t<title level=\"a\" type=\"main\">Discovering diversified paths in knowledge bases</title>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Christian</forename><surname>Aebeloe</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Gabriela</forename><surname>Montoya</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Vinay</forename><surname>Setty</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Katja</forename><surname>Hose</surname></persName>\n\t\t</author>\n\t\t<idno type=\"DOI\">10.14778/3229863.3236245</idno>\n\t</analytic>\n\t<monogr>\n\t\t<title level=\"j\">Proceedings of the VLDB Endowment</title>\n\t\t<title level=\"j\" type=\"abbrev\">Proc. VLDB Endow.</title>\n\t\t<idno type=\"ISSN\">2150-8097</idno>\n\t\t<imprint>\n\t\t\t<biblScope unit=\"volume\">11</biblScope>\n\t\t\t<biblScope unit=\"issue\">12</biblScope>\n\t\t\t<biblScope unit=\"page\" from=\"2002\" to=\"2005\" />\n\t\t\t<date type=\"published\" when=\"2018-08\">2018. 2018</date>\n\t\t\t<publisher>Association for Computing Machinery (ACM)</publisher>\n\t\t</imprint>\n\t</monogr>\n</biblStruct>\n"}, {"refKey": 35, "tei": "<biblStruct xml:id=\"b35\">\n\t<monogr>\n\t\t<author>\n\t\t\t<persName><surname>Inc</surname></persName>\n\t\t</author>\n\t\t<idno>. Neo4j</idno>\n\t\t<title level=\"m\">Cypher Query Language</title>\n\t\t<imprint>\n\t\t\t<date>2022. 2022</date>\n\t\t</imprint>\n\t</monogr>\n</biblStruct>\n"}, {"refKey": 13, "tei": "<biblStruct xml:id=\"b13\">\n\t<monogr>\n\t\t<title level=\"m\">SPARQL 1</title>\n\t\t<imprint>\n\t\t\t<date>2013. 2013</date>\n\t\t</imprint>\n\t</monogr>\n</biblStruct>\n"}], "runtime": 13083, "id": "f21988f3219861cac2a892b489b44020f7e0c3b3", "metadata": {"id": "f21988f3219861cac2a892b489b44020f7e0c3b3"}, "original_file_path": "../../datalake/Samuel/SOFTware-Sync/downloads/xml/hal-03886320.grobid.tei.xml", "file_name": "hal-03886320.grobid.tei.xml"}