{"application": "software-mentions", "version": "0.8.0", "date": "2024-10-07T12:01+0000", "md5": "0884FCFB34A957A1BCAE865D6BDECEBC", "mentions": [{"type": "software", "software-type": "software", "software-name": {"rawForm": "metric-learn", "normalizedForm": "metric-learn", "offsetStart": 0, "offsetEnd": 12}, "version": {"rawForm": "0.6.2", "normalizedForm": "0.6.2"}, "context": "metric-learn is an open source package for metric learning in Python, which implements many popular metric-learning algorithms with different levels of supervision through a unified interface. ", "mentionContextAttributes": {"used": {"value": false, "score": 5.698204040527344e-05}, "created": {"value": false, "score": 0.08536189794540405}, "shared": {"value": false, "score": 1.5735626220703125e-05}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0027683377265930176}, "created": {"value": false, "score": 0.08536189794540405}, "shared": {"value": false, "score": 0.0029484033584594727}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "metric-learn", "normalizedForm": "metric-learn", "offsetStart": 0, "offsetEnd": 12}, "version": {"rawForm": "0.6.2", "normalizedForm": "0.6.2"}, "context": "metric-learn depends on core libraries from the SciPy ecosystem: numpy, scipy, and scikit-learn. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0025467276573181152}, "created": {"value": false, "score": 3.4570693969726562e-06}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0027683377265930176}, "created": {"value": false, "score": 0.08536189794540405}, "shared": {"value": false, "score": 0.0029484033584594727}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "sklearn", "normalizedForm": "sklearn", "offsetStart": 5, "offsetEnd": 12}, "publisher": {"rawForm": "-learn", "normalizedForm": "-learn"}, "context": "from sklearn.datasets import load_wine from sklearn.neighbors import KNeighborsClassifier from sklearn.model_selection import train_test_split, GridSearchCV from sklearn.pipeline import Pipeline from metric_learn import LMNN X_train, X_test, y_train, y_test = train_test_split(*load_wine(return_X_y=True)) lmnn_knn = Pipeline(steps=[('lmnn', LMNN()), ('knn', KNeighborsClassifier())]) parameters = {'lmnn__k':[1, 2], 'knn__n_neighbors':[1, 2]} grid_lmnn_knn = GridSearchCV(lmnn_knn, parameters, cv=3, n_jobs=-1, verbose=True) grid_lmnn_knn.fit(X_train, ", "mentionContextAttributes": {"used": {"value": false, "score": 0.18600505590438843}, "created": {"value": false, "score": 2.1457672119140625e-06}, "shared": {"value": false, "score": 3.5762786865234375e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9921844601631165}, "created": {"value": false, "score": 3.2186508178710938e-06}, "shared": {"value": false, "score": 3.5762786865234375e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "sklearn", "normalizedForm": "sklearn", "offsetStart": 5, "offsetEnd": 12}, "publisher": {"rawForm": "-learn", "normalizedForm": "-learn"}, "context": "from sklearn.datasets import fetch_lfw_pairs from sklearn.model_selection import cross_validate, train_test_split from metric_learn import MMC ds = fetch_lfw_pairs() pairs = ds.pairs.reshape(*ds.pairs.shape[:2], ", "mentionContextAttributes": {"used": {"value": false, "score": 0.03323078155517578}, "created": {"value": false, "score": 3.2186508178710938e-06}, "shared": {"value": false, "score": 2.1457672119140625e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9921844601631165}, "created": {"value": false, "score": 3.2186508178710938e-06}, "shared": {"value": false, "score": 3.5762786865234375e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "scikit", "normalizedForm": "scikit", "offsetStart": 11, "offsetEnd": 17}, "context": "As part of scikit-learn-contrib, it provides a unified interface compatible with scikit-learn which allows to easily perform cross-validation, model selection, and pipelining with other machine learning estimators.", "mentionContextAttributes": {"used": {"value": false, "score": 4.673004150390625e-05}, "created": {"value": false, "score": 0.008675932884216309}, "shared": {"value": false, "score": 2.5033950805664062e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.289478600025177}, "created": {"value": false, "score": 0.48174601793289185}, "shared": {"value": true, "score": 0.9890882968902588}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "pyDML", "normalizedForm": "pyDML", "offsetStart": 11, "offsetEnd": 38}, "context": "In Python, pyDML (Su\u00e1rez et al., 2020) contains mainly fully supervised and unsupervised algorithms, while pytorch-metric-learning 2 focuses on deep metric learning using the pytorch framework (Paszke et al., 2019).", "mentionContextAttributes": {"used": {"value": false, "score": 5.805492401123047e-05}, "created": {"value": false, "score": 0.0004652738571166992}, "shared": {"value": false, "score": 5.960464477539062e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 5.805492401123047e-05}, "created": {"value": false, "score": 0.0004652738571166992}, "shared": {"value": false, "score": 5.960464477539062e-07}}}, {"type": "software", "software-type": "implicit", "software-name": {"rawForm": "code", "normalizedForm": "code", "offsetStart": 13, "offsetEnd": 17}, "context": "3 The source code is available on GitHub at http://github.com/scikit-learn-contrib/metric-learn and is free to use, provided under the MIT license. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.008940279483795166}, "created": {"value": false, "score": 0.00024002790451049805}, "shared": {"value": true, "score": 0.9890882968902588}}, "documentContextAttributes": {"used": {"value": false, "score": 0.008940279483795166}, "created": {"value": false, "score": 0.00024002790451049805}, "shared": {"value": true, "score": 0.9890882968902588}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "package", "normalizedForm": "package", "offsetStart": 13, "offsetEnd": 20}, "context": "Finally, the package implements one triplet learner and one quadruplet learner: Sparse Compositional Metric Learning (SCML, Shi et al., 2014) and Metric Learning from Relative Comparisons by Minimizing Squared Residual (LSML, Liu et al., 2012).", "mentionContextAttributes": {"used": {"value": false, "score": 0.00020295381546020508}, "created": {"value": false, "score": 7.236003875732422e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.001948714256286621}, "created": {"value": true, "score": 0.9886736273765564}, "shared": {"value": false, "score": 0.007076263427734375}}, "references": [{"label": "(Tang et al., 2018)", "normalizedForm": "Tang et al., 2018", "refKey": 15}, {"label": "(Tang et al., 2018)", "normalizedForm": "Tang et al., 2018", "refKey": 15}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "scikit", "normalizedForm": "scikit", "offsetStart": 14, "offsetEnd": 20}, "context": "We also thank scikit-learn developers from the Inria Parietal team (in particular Ga\u00ebl Varoquaux, Alexandre Gramfort and Olivier Grisel) for fruitful discussions on the design of the API and funding to attend SciPy 2019, as well as scikit-learn-contrib reviewers for their valuable feedback.", "mentionContextAttributes": {"used": {"value": false, "score": 0.008467257022857666}, "created": {"value": false, "score": 0.48174601793289185}, "shared": {"value": false, "score": 1.1324882507324219e-05}}, "documentContextAttributes": {"used": {"value": false, "score": 0.289478600025177}, "created": {"value": false, "score": 0.48174601793289185}, "shared": {"value": true, "score": 0.9890882968902588}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "metric-learn", "normalizedForm": "metric-learn", "offsetStart": 23, "offsetEnd": 35}, "version": {"rawForm": "0.6.2", "normalizedForm": "0.6.2", "offsetStart": 38, "offsetEnd": 43}, "context": "The current release of metric-learn (v0.6.2) can be installed from the Python Package Index (PyPI) and conda-forge, for Python 3.6 or later. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0027683377265930176}, "created": {"value": false, "score": 0.0007497668266296387}, "shared": {"value": false, "score": 0.0029484033584594727}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0027683377265930176}, "created": {"value": false, "score": 0.08536189794540405}, "shared": {"value": false, "score": 0.0029484033584594727}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "package", "normalizedForm": "package", "offsetStart": 27, "offsetEnd": 34}, "context": "Community interest for the package has been demonstrated by its recent inclusion in the scikit-learn-contrib organization which hosts high-quality scikit-learncompatible projects, 4 and by its more than 1000 stars and 200 forks on GitHub at the time of writing.", "mentionContextAttributes": {"used": {"value": false, "score": 0.001948714256286621}, "created": {"value": false, "score": 0.04543745517730713}, "shared": {"value": false, "score": 0.007076263427734375}}, "documentContextAttributes": {"used": {"value": false, "score": 0.001948714256286621}, "created": {"value": true, "score": 0.9886736273765564}, "shared": {"value": false, "score": 0.007076263427734375}}, "references": [{"label": "(Tang et al., 2018)", "normalizedForm": "Tang et al., 2018", "refKey": 15}, {"label": "(Tang et al., 2018)", "normalizedForm": "Tang et al., 2018", "refKey": 15}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "scikit-learn", "normalizedForm": "scikit-learn", "offsetStart": 27, "offsetEnd": 63}, "context": "Its API is compatible with scikit-learn (Pedregosa et al., 2011), a prominent machine learning library in Python. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.00023609399795532227}, "created": {"value": false, "score": 0.0008701682090759277}, "shared": {"value": false, "score": 7.152557373046875e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0025467276573181152}, "created": {"value": true, "score": 0.7841787338256836}, "shared": {"value": false, "score": 7.152557373046875e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "BaseMetricLearner", "normalizedForm": "BaseMetricLearner", "offsetStart": 28, "offsetEnd": 45}, "context": "All classes inheriting from BaseMetricLearner should implement two methods: get metric (returning a function that computes the distance, which can be plugged into scikit-learn estimators like KMeansClustering) and score pairs (returning the distances between a set of pairs of points passed as a 3D array). ", "mentionContextAttributes": {"used": {"value": false, "score": 0.00015926361083984375}, "created": {"value": false, "score": 0.0019223690032958984}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.28947871923446655}, "created": {"value": false, "score": 0.0019223690032958984}, "shared": {"value": false, "score": 3.5762786865234375e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "package", "normalizedForm": "package", "offsetStart": 31, "offsetEnd": 38}, "context": "metric-learn is an open source package for metric learning in Python, which implements many popular metric-learning algorithms with different levels of supervision through a unified interface.", "mentionContextAttributes": {"used": {"value": false, "score": 5.698204040527344e-05}, "created": {"value": false, "score": 0.08536189794540405}, "shared": {"value": false, "score": 1.5735626220703125e-05}}, "documentContextAttributes": {"used": {"value": false, "score": 0.001948714256286621}, "created": {"value": true, "score": 0.9886736273765564}, "shared": {"value": false, "score": 0.007076263427734375}}, "references": [{"label": "(Tang et al., 2018)", "normalizedForm": "Tang et al., 2018", "refKey": 15}, {"label": "(Tang et al., 2018)", "normalizedForm": "Tang et al., 2018", "refKey": 15}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "package", "normalizedForm": "package", "offsetStart": 38, "offsetEnd": 45}, "context": "metric-learn is an open source Python package implementing supervised and weaklysupervised distance metric learning algorithms. ", "mentionContextAttributes": {"used": {"value": false, "score": 7.605552673339844e-05}, "created": {"value": true, "score": 0.8810585737228394}, "shared": {"value": false, "score": 8.821487426757812e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.001948714256286621}, "created": {"value": true, "score": 0.9886736273765564}, "shared": {"value": false, "score": 0.007076263427734375}}, "references": [{"label": "(Tang et al., 2018)", "normalizedForm": "Tang et al., 2018", "refKey": 15}, {"label": "(Tang et al., 2018)", "normalizedForm": "Tang et al., 2018", "refKey": 15}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "sklearn", "normalizedForm": "sklearn", "offsetStart": 44, "offsetEnd": 51}, "publisher": {"rawForm": "-learn", "normalizedForm": "-learn"}, "context": "from sklearn.datasets import load_wine from sklearn.neighbors import KNeighborsClassifier from sklearn.model_selection import train_test_split, GridSearchCV from sklearn.pipeline import Pipeline from metric_learn import LMNN X_train, X_test, y_train, y_test = train_test_split(*load_wine(return_X_y=True)) lmnn_knn = Pipeline(steps=[('lmnn', LMNN()), ('knn', KNeighborsClassifier())]) parameters = {'lmnn__k':[1, 2], 'knn__n_neighbors':[1, 2]} grid_lmnn_knn = GridSearchCV(lmnn_knn, parameters, cv=3, n_jobs=-1, verbose=True) grid_lmnn_knn.fit(X_train, ", "mentionContextAttributes": {"used": {"value": false, "score": 0.18600505590438843}, "created": {"value": false, "score": 2.1457672119140625e-06}, "shared": {"value": false, "score": 3.5762786865234375e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9921844601631165}, "created": {"value": false, "score": 3.2186508178710938e-06}, "shared": {"value": false, "score": 3.5762786865234375e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "BaseMetricLearner", "normalizedForm": "BaseMetricLearner", "offsetStart": 45, "offsetEnd": 62}, "context": "All metric learners inherit from an abstract BaseMetricLearner class, which itself inherits from scikit-learn's BaseEstimator. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.28947871923446655}, "created": {"value": false, "score": 5.4836273193359375e-06}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.28947871923446655}, "created": {"value": false, "score": 0.0019223690032958984}, "shared": {"value": false, "score": 3.5762786865234375e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "SciPy", "normalizedForm": "SciPy", "offsetStart": 48, "offsetEnd": 53}, "context": "metric-learn depends on core libraries from the SciPy ecosystem: numpy, scipy, and scikit-learn. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0025467276573181152}, "created": {"value": false, "score": 3.4570693969726562e-06}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.008467257022857666}, "created": {"value": false, "score": 0.48174577951431274}, "shared": {"value": false, "score": 1.1324882507324219e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "sklearn", "normalizedForm": "sklearn", "offsetStart": 50, "offsetEnd": 57}, "publisher": {"rawForm": "-learn", "normalizedForm": "-learn"}, "context": "from sklearn.datasets import fetch_lfw_pairs from sklearn.model_selection import cross_validate, train_test_split from metric_learn import MMC ds = fetch_lfw_pairs() pairs = ds.pairs.reshape(*ds.pairs.shape[:2], ", "mentionContextAttributes": {"used": {"value": false, "score": 0.03323078155517578}, "created": {"value": false, "score": 3.2186508178710938e-06}, "shared": {"value": false, "score": 2.1457672119140625e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9921844601631165}, "created": {"value": false, "score": 3.2186508178710938e-06}, "shared": {"value": false, "score": 3.5762786865234375e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "PyPi", "normalizedForm": "PyPi", "offsetStart": 51, "offsetEnd": 55}, "context": "metric-learn is thoroughly tested and available on PyPi under the MIT license.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0047296881675720215}, "created": {"value": false, "score": 0.0039057135581970215}, "shared": {"value": true, "score": 0.9228927493095398}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0047296881675720215}, "created": {"value": false, "score": 0.0039057135581970215}, "shared": {"value": true, "score": 0.9228927493095398}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "scikit", "normalizedForm": "scikit", "offsetStart": 62, "offsetEnd": 68}, "context": "3 The source code is available on GitHub at http://github.com/scikit-learn-contrib/metric-learn and is free to use, provided under the MIT license.", "mentionContextAttributes": {"used": {"value": false, "score": 0.008940279483795166}, "created": {"value": false, "score": 0.00024002790451049805}, "shared": {"value": true, "score": 0.9890882968902588}}, "documentContextAttributes": {"used": {"value": false, "score": 0.289478600025177}, "created": {"value": false, "score": 0.48174601793289185}, "shared": {"value": true, "score": 0.9890882968902588}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "package", "normalizedForm": "package", "offsetStart": 62, "offsetEnd": 69}, "context": "Detailed descriptions of these algorithms can be found in the package documentation.", "mentionContextAttributes": {"used": {"value": false, "score": 9.5367431640625e-05}, "created": {"value": false, "score": 0.005659818649291992}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.001948714256286621}, "created": {"value": true, "score": 0.9886736273765564}, "shared": {"value": false, "score": 0.007076263427734375}}, "references": [{"label": "(Tang et al., 2018)", "normalizedForm": "Tang et al., 2018", "refKey": 15}, {"label": "(Tang et al., 2018)", "normalizedForm": "Tang et al., 2018", "refKey": 15}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "package", "normalizedForm": "package", "offsetStart": 62, "offsetEnd": 69}, "context": "We list here some promising directions to further improve the package.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00045102834701538086}, "created": {"value": true, "score": 0.9886736273765564}, "shared": {"value": false, "score": 5.960464477539062e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.001948714256286621}, "created": {"value": true, "score": 0.9886736273765564}, "shared": {"value": false, "score": 0.007076263427734375}}, "references": [{"label": "(Tang et al., 2018)", "normalizedForm": "Tang et al., 2018", "refKey": 15}, {"label": "(Tang et al., 2018)", "normalizedForm": "Tang et al., 2018", "refKey": 15}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "scikit-learn", "normalizedForm": "scikit-learn", "offsetStart": 64, "offsetEnd": 76}, "context": "It is designed to be fully compatible with the functionality of scikit-learn. ", "mentionContextAttributes": {"used": {"value": false, "score": 3.314018249511719e-05}, "created": {"value": true, "score": 0.7841787338256836}, "shared": {"value": false, "score": 2.2649765014648438e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0025467276573181152}, "created": {"value": true, "score": 0.7841787338256836}, "shared": {"value": false, "score": 7.152557373046875e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "numpy", "normalizedForm": "numpy", "offsetStart": 65, "offsetEnd": 70}, "context": "metric-learn depends on core libraries from the SciPy ecosystem: numpy, scipy, and scikit-learn. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0025467276573181152}, "created": {"value": false, "score": 3.4570693969726562e-06}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0025467276573181152}, "created": {"value": false, "score": 3.4570693969726562e-06}, "shared": {"value": false, "score": 3.5762786865234375e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KNeighborsClassifier", "normalizedForm": "KNeighborsClassifier", "offsetStart": 69, "offsetEnd": 89}, "context": "from sklearn.datasets import load_wine from sklearn.neighbors import KNeighborsClassifier from sklearn.model_selection import train_test_split, GridSearchCV from sklearn.pipeline import Pipeline from metric_learn import LMNN X_train, X_test, y_train, y_test = train_test_split(*load_wine(return_X_y=True)) lmnn_knn = Pipeline(steps=[('lmnn', LMNN()), ('knn', KNeighborsClassifier())]) parameters = {'lmnn__k':[1, 2], 'knn__n_neighbors':[1, 2]} grid_lmnn_knn = GridSearchCV(lmnn_knn, parameters, cv=3, n_jobs=-1, verbose=True) grid_lmnn_knn.fit(X_train,", "mentionContextAttributes": {"used": {"value": false, "score": 0.18600505590438843}, "created": {"value": false, "score": 2.1457672119140625e-06}, "shared": {"value": false, "score": 3.5762786865234375e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.18600505590438843}, "created": {"value": false, "score": 2.1457672119140625e-06}, "shared": {"value": false, "score": 3.5762786865234375e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "sklearn.pipeline", "normalizedForm": "sklearn.pipeline", "offsetStart": 70, "offsetEnd": 86}, "context": "As such, they are compatible for pipelining with other estimators via sklearn.pipeline.Pipeline. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.007545113563537598}, "created": {"value": false, "score": 2.1338462829589844e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.007545113563537598}, "created": {"value": false, "score": 2.1338462829589844e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Python Package Index (PyPI)", "normalizedForm": "Python Package Index (PyPI)", "offsetStart": 71, "offsetEnd": 98}, "context": "The current release of metric-learn (v0.6.2) can be installed from the Python Package Index (PyPI) and conda-forge, for Python 3.6 or later. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0027683377265930176}, "created": {"value": false, "score": 0.0007497668266296387}, "shared": {"value": false, "score": 0.0029484033584594727}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0027683377265930176}, "created": {"value": false, "score": 0.0007497668266296387}, "shared": {"value": false, "score": 0.0029484033584594727}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "scipy", "normalizedForm": "scipy", "offsetStart": 72, "offsetEnd": 77}, "context": "metric-learn depends on core libraries from the SciPy ecosystem: numpy, scipy, and scikit-learn. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0025467276573181152}, "created": {"value": false, "score": 3.4570693969726562e-06}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0025467276573181152}, "created": {"value": false, "score": 3.4570693969726562e-06}, "shared": {"value": false, "score": 3.5762786865234375e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "package", "normalizedForm": "package", "offsetStart": 78, "offsetEnd": 85}, "context": "We also plan to incorporate recent algorithms that provide added value to the package, such as those that can deal with multi-label (Liu and Tsang, 2015) and high-dimensional problems (Liu and Bellet, 2019), or learn other forms of metrics like bilinear similarities, nonlinear and local metrics (see Bellet et al., 2015, for a survey).", "mentionContextAttributes": {"used": {"value": false, "score": 0.0003428459167480469}, "created": {"value": true, "score": 0.9671491980552673}, "shared": {"value": false, "score": 2.0265579223632812e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.001948714256286621}, "created": {"value": true, "score": 0.9886736273765564}, "shared": {"value": false, "score": 0.007076263427734375}}, "references": [{"label": "(Tang et al., 2018)", "normalizedForm": "Tang et al., 2018", "refKey": 15}, {"label": "(Tang et al., 2018)", "normalizedForm": "Tang et al., 2018", "refKey": 15}]}, {"type": "software", "software-type": "environment", "software-name": {"rawForm": "Matlab", "normalizedForm": "Matlab", "offsetStart": 80, "offsetEnd": 86}, "context": "Many metric learning algorithms were originally implemented by their authors in Matlab without a common API convention. 1 In R, the package dml (Tang et al., 2018) implements several metric learning algorithms with a unified interface but is not tightly integrated with any general-purpose machine learning library. ", "mentionContextAttributes": {"used": {"value": false, "score": 9.47713851928711e-05}, "created": {"value": false, "score": 0.041029274463653564}, "shared": {"value": false, "score": 4.291534423828125e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 9.47713851928711e-05}, "created": {"value": false, "score": 0.041029274463653564}, "shared": {"value": false, "score": 4.291534423828125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "scikit-learn", "normalizedForm": "scikit-learn", "offsetStart": 81, "offsetEnd": 93}, "context": "As part of scikit-learn-contrib, it provides a unified interface compatible with scikit-learn which allows to easily perform cross-validation, model selection, and pipelining with other machine learning estimators. ", "mentionContextAttributes": {"used": {"value": false, "score": 4.673004150390625e-05}, "created": {"value": false, "score": 0.008675932884216309}, "shared": {"value": false, "score": 2.5033950805664062e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0025467276573181152}, "created": {"value": true, "score": 0.7841787338256836}, "shared": {"value": false, "score": 7.152557373046875e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "scikit-learn", "normalizedForm": "scikit-learn", "offsetStart": 83, "offsetEnd": 95}, "context": "metric-learn depends on core libraries from the SciPy ecosystem: numpy, scipy, and scikit-learn. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0025467276573181152}, "created": {"value": false, "score": 3.4570693969726562e-06}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0025467276573181152}, "created": {"value": true, "score": 0.7841787338256836}, "shared": {"value": false, "score": 7.152557373046875e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "scikit", "normalizedForm": "scikit", "offsetStart": 88, "offsetEnd": 94}, "context": "Community interest for the package has been demonstrated by its recent inclusion in the scikit-learn-contrib organization which hosts high-quality scikit-learncompatible projects, 4 and by its more than 1000 stars and 200 forks on GitHub at the time of writing.", "mentionContextAttributes": {"used": {"value": false, "score": 0.001948714256286621}, "created": {"value": false, "score": 0.04543745517730713}, "shared": {"value": false, "score": 0.007076263427734375}}, "documentContextAttributes": {"used": {"value": false, "score": 0.289478600025177}, "created": {"value": false, "score": 0.48174601793289185}, "shared": {"value": true, "score": 0.9890882968902588}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "sklearn", "normalizedForm": "sklearn", "offsetStart": 95, "offsetEnd": 102}, "publisher": {"rawForm": "-learn", "normalizedForm": "-learn"}, "context": "from sklearn.datasets import load_wine from sklearn.neighbors import KNeighborsClassifier from sklearn.model_selection import train_test_split, GridSearchCV from sklearn.pipeline import Pipeline from metric_learn import LMNN X_train, X_test, y_train, y_test = train_test_split(*load_wine(return_X_y=True)) lmnn_knn = Pipeline(steps=[('lmnn', LMNN()), ('knn', KNeighborsClassifier())]) parameters = {'lmnn__k':[1, 2], 'knn__n_neighbors':[1, 2]} grid_lmnn_knn = GridSearchCV(lmnn_knn, parameters, cv=3, n_jobs=-1, verbose=True) grid_lmnn_knn.fit(X_train, ", "mentionContextAttributes": {"used": {"value": false, "score": 0.18600493669509888}, "created": {"value": false, "score": 2.1457672119140625e-06}, "shared": {"value": false, "score": 3.5762786865234375e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9921844601631165}, "created": {"value": false, "score": 3.2186508178710938e-06}, "shared": {"value": false, "score": 3.5762786865234375e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "scikit", "normalizedForm": "scikit", "offsetStart": 97, "offsetEnd": 103}, "context": "All metric learners inherit from an abstract BaseMetricLearner class, which itself inherits from scikit-learn's BaseEstimator.", "mentionContextAttributes": {"used": {"value": false, "score": 0.289478600025177}, "created": {"value": false, "score": 5.4836273193359375e-06}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.289478600025177}, "created": {"value": false, "score": 0.48174601793289185}, "shared": {"value": true, "score": 0.9890882968902588}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "conda-forge", "normalizedForm": "conda-forge", "offsetStart": 103, "offsetEnd": 114}, "version": {"rawForm": "3.6", "normalizedForm": "3.6", "offsetStart": 127, "offsetEnd": 130}, "context": "The current release of metric-learn (v0.6.2) can be installed from the Python Package Index (PyPI) and conda-forge, for Python 3.6 or later. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0027683377265930176}, "created": {"value": false, "score": 0.0007497668266296387}, "shared": {"value": false, "score": 0.0029484033584594727}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0027683377265930176}, "created": {"value": false, "score": 0.0007497668266296387}, "shared": {"value": false, "score": 0.0029484033584594727}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "sklearn", "normalizedForm": "sklearn", "offsetStart": 112, "offsetEnd": 119}, "publisher": {"rawForm": "-learn", "normalizedForm": "-learn", "offsetStart": 46, "offsetEnd": 52}, "context": "Supervised metric learners inherit from scikit-learn's base class TransformerMixin, the same base class used by sklearn.LinearDiscriminantAnalysis and others. ", "mentionContextAttributes": {"used": {"value": true, "score": 0.9921844601631165}, "created": {"value": false, "score": 2.5033950805664062e-06}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9921844601631165}, "created": {"value": false, "score": 3.2186508178710938e-06}, "shared": {"value": false, "score": 3.5762786865234375e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "BaseEstimator", "normalizedForm": "BaseEstimator", "offsetStart": 112, "offsetEnd": 125}, "context": "All metric learners inherit from an abstract BaseMetricLearner class, which itself inherits from scikit-learn's BaseEstimator. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.289478600025177}, "created": {"value": false, "score": 5.4836273193359375e-06}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.289478600025177}, "created": {"value": false, "score": 5.4836273193359375e-06}, "shared": {"value": false, "score": 2.384185791015625e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "package", "normalizedForm": "package", "offsetStart": 132, "offsetEnd": 139}, "context": "Many metric learning algorithms were originally implemented by their authors in Matlab without a common API convention. 1 In R, the package dml (Tang et al., 2018) implements several metric learning algorithms with a unified interface but is not tightly integrated with any general-purpose machine learning library.", "mentionContextAttributes": {"used": {"value": false, "score": 9.47713851928711e-05}, "created": {"value": false, "score": 0.041029274463653564}, "shared": {"value": false, "score": 4.291534423828125e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.001948714256286621}, "created": {"value": true, "score": 0.9886736273765564}, "shared": {"value": false, "score": 0.007076263427734375}}, "references": [{"label": "(Tang et al., 2018)", "normalizedForm": "Tang et al., 2018", "refKey": 15, "offsetStart": 2456, "offsetEnd": 2475}, {"label": "(Tang et al., 2018)", "normalizedForm": "Tang et al., 2018", "refKey": 15, "offsetStart": 2456, "offsetEnd": 2475}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "dml", "normalizedForm": "dml", "offsetStart": 140, "offsetEnd": 163}, "context": "Many metric learning algorithms were originally implemented by their authors in Matlab without a common API convention. 1 In R, the package dml (Tang et al., 2018) implements several metric learning algorithms with a unified interface but is not tightly integrated with any general-purpose machine learning library. ", "mentionContextAttributes": {"used": {"value": false, "score": 9.47713851928711e-05}, "created": {"value": false, "score": 0.041029274463653564}, "shared": {"value": false, "score": 4.291534423828125e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 9.47713851928711e-05}, "created": {"value": false, "score": 0.041029274463653564}, "shared": {"value": false, "score": 4.291534423828125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "GridSearchCV", "normalizedForm": "GridSearchCV", "offsetStart": 144, "offsetEnd": 156}, "context": "from sklearn.datasets import load_wine from sklearn.neighbors import KNeighborsClassifier from sklearn.model_selection import train_test_split, GridSearchCV from sklearn.pipeline import Pipeline from metric_learn import LMNN X_train, X_test, y_train, y_test = train_test_split(*load_wine(return_X_y=True)) lmnn_knn = Pipeline(steps=[('lmnn', LMNN()), ('knn', KNeighborsClassifier())]) parameters = {'lmnn__k':[1, 2], 'knn__n_neighbors':[1, 2]} grid_lmnn_knn = GridSearchCV(lmnn_knn, parameters, cv=3, n_jobs=-1, verbose=True) grid_lmnn_knn.fit(X_train, ", "mentionContextAttributes": {"used": {"value": false, "score": 0.18600493669509888}, "created": {"value": false, "score": 2.1457672119140625e-06}, "shared": {"value": false, "score": 3.5762786865234375e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.18600493669509888}, "created": {"value": false, "score": 2.1457672119140625e-06}, "shared": {"value": false, "score": 3.5762786865234375e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "scikit", "normalizedForm": "scikit", "offsetStart": 147, "offsetEnd": 153}, "context": "Community interest for the package has been demonstrated by its recent inclusion in the scikit-learn-contrib organization which hosts high-quality scikit-learncompatible projects, 4 and by its more than 1000 stars and 200 forks on GitHub at the time of writing.", "mentionContextAttributes": {"used": {"value": false, "score": 0.001948714256286621}, "created": {"value": false, "score": 0.04543745517730713}, "shared": {"value": false, "score": 0.007076263427734375}}, "documentContextAttributes": {"used": {"value": false, "score": 0.289478600025177}, "created": {"value": false, "score": 0.48174601793289185}, "shared": {"value": true, "score": 0.9890882968902588}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "sklearn", "normalizedForm": "sklearn", "offsetStart": 162, "offsetEnd": 169}, "publisher": {"rawForm": "-learn", "normalizedForm": "-learn"}, "context": "from sklearn.datasets import load_wine from sklearn.neighbors import KNeighborsClassifier from sklearn.model_selection import train_test_split, GridSearchCV from sklearn.pipeline import Pipeline from metric_learn import LMNN X_train, X_test, y_train, y_test = train_test_split(*load_wine(return_X_y=True)) lmnn_knn = Pipeline(steps=[('lmnn', LMNN()), ('knn', KNeighborsClassifier())]) parameters = {'lmnn__k':[1, 2], 'knn__n_neighbors':[1, 2]} grid_lmnn_knn = GridSearchCV(lmnn_knn, parameters, cv=3, n_jobs=-1, verbose=True) grid_lmnn_knn.fit(X_train, ", "mentionContextAttributes": {"used": {"value": false, "score": 0.18600493669509888}, "created": {"value": false, "score": 2.1457672119140625e-06}, "shared": {"value": false, "score": 3.5762786865234375e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9921844601631165}, "created": {"value": false, "score": 3.2186508178710938e-06}, "shared": {"value": false, "score": 3.5762786865234375e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "scikit", "normalizedForm": "scikit", "offsetStart": 163, "offsetEnd": 169}, "context": "All classes inheriting from BaseMetricLearner should implement two methods: get metric (returning a function that computes the distance, which can be plugged into scikit-learn estimators like KMeansClustering) and score pairs (returning the distances between a set of pairs of points passed as a 3D array). ", "mentionContextAttributes": {"used": {"value": false, "score": 0.00015926361083984375}, "created": {"value": false, "score": 0.0019223690032958984}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.289478600025177}, "created": {"value": false, "score": 0.48174601793289185}, "shared": {"value": true, "score": 0.9890882968902588}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KMeansClustering", "normalizedForm": "KMeansClustering", "offsetStart": 192, "offsetEnd": 208}, "context": "All classes inheriting from BaseMetricLearner should implement two methods: get metric (returning a function that computes the distance, which can be plugged into scikit-learn estimators like KMeansClustering) and score pairs (returning the distances between a set of pairs of points passed as a 3D array). ", "mentionContextAttributes": {"used": {"value": false, "score": 0.00015926361083984375}, "created": {"value": false, "score": 0.0019223690032958984}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.00015926361083984375}, "created": {"value": false, "score": 0.0019223690032958984}, "shared": {"value": false, "score": 3.5762786865234375e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "SciPy", "normalizedForm": "SciPy", "offsetStart": 209, "offsetEnd": 214}, "context": "We also thank scikit-learn developers from the Inria Parietal team (in particular Ga\u00ebl Varoquaux, Alexandre Gramfort and Olivier Grisel) for fruitful discussions on the design of the API and funding to attend SciPy 2019, as well as scikit-learn-contrib reviewers for their valuable feedback.", "mentionContextAttributes": {"used": {"value": false, "score": 0.008467257022857666}, "created": {"value": false, "score": 0.48174577951431274}, "shared": {"value": false, "score": 1.1324882507324219e-05}}, "documentContextAttributes": {"used": {"value": false, "score": 0.008467257022857666}, "created": {"value": false, "score": 0.48174577951431274}, "shared": {"value": false, "score": 1.1324882507324219e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "scikit", "normalizedForm": "scikit", "offsetStart": 232, "offsetEnd": 238}, "context": "We also thank scikit-learn developers from the Inria Parietal team (in particular Ga\u00ebl Varoquaux, Alexandre Gramfort and Olivier Grisel) for fruitful discussions on the design of the API and funding to attend SciPy 2019, as well as scikit-learn-contrib reviewers for their valuable feedback.", "mentionContextAttributes": {"used": {"value": false, "score": 0.008467257022857666}, "created": {"value": false, "score": 0.48174577951431274}, "shared": {"value": false, "score": 1.1324882507324219e-05}}, "documentContextAttributes": {"used": {"value": false, "score": 0.289478600025177}, "created": {"value": false, "score": 0.48174601793289185}, "shared": {"value": true, "score": 0.9890882968902588}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "scikit", "normalizedForm": "scikit", "offsetStart": 261, "offsetEnd": 267}, "context": "Pair learners include Mahalanobis Metric for Clustering (MMC, Xing et al., 2002), Information Theoretic Metric Learning (ITML, Davis et al., 2007) and Sparse High-Dimensional Metric 3. Support for Python 2.7 and 3.5 was dropped in v0.6.0. 4. https://github.com/scikit-learn-contrib/scikit-learn-contrib 5. RCA takes as input slightly weaker supervision in the form of chunklets (groups of points of same class).", "mentionContextAttributes": {"used": {"value": false, "score": 0.014195799827575684}, "created": {"value": false, "score": 6.556510925292969e-06}, "shared": {"value": false, "score": 1.1324882507324219e-05}}, "documentContextAttributes": {"used": {"value": false, "score": 0.289478600025177}, "created": {"value": false, "score": 0.48174601793289185}, "shared": {"value": true, "score": 0.9890882968902588}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "scikit", "normalizedForm": "scikit", "offsetStart": 282, "offsetEnd": 288}, "context": "Pair learners include Mahalanobis Metric for Clustering (MMC, Xing et al., 2002), Information Theoretic Metric Learning (ITML, Davis et al., 2007) and Sparse High-Dimensional Metric 3. Support for Python 2.7 and 3.5 was dropped in v0.6.0. 4. https://github.com/scikit-learn-contrib/scikit-learn-contrib 5. RCA takes as input slightly weaker supervision in the form of chunklets (groups of points of same class).", "mentionContextAttributes": {"used": {"value": false, "score": 0.014195799827575684}, "created": {"value": false, "score": 6.556510925292969e-06}, "shared": {"value": false, "score": 1.1324882507324219e-05}}, "documentContextAttributes": {"used": {"value": false, "score": 0.289478600025177}, "created": {"value": false, "score": 0.48174601793289185}, "shared": {"value": true, "score": 0.9890882968902588}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KNeighborsClassifier", "normalizedForm": "KNeighborsClassifier", "offsetStart": 359, "offsetEnd": 379}, "context": "from sklearn.datasets import load_wine from sklearn.neighbors import KNeighborsClassifier from sklearn.model_selection import train_test_split, GridSearchCV from sklearn.pipeline import Pipeline from metric_learn import LMNN X_train, X_test, y_train, y_test = train_test_split(*load_wine(return_X_y=True)) lmnn_knn = Pipeline(steps=[('lmnn', LMNN()), ('knn', KNeighborsClassifier())]) parameters = {'lmnn__k':[1, 2], 'knn__n_neighbors':[1, 2]} grid_lmnn_knn = GridSearchCV(lmnn_knn, parameters, cv=3, n_jobs=-1, verbose=True) grid_lmnn_knn.fit(X_train, ", "mentionContextAttributes": {"used": {"value": false, "score": 0.18600493669509888}, "created": {"value": false, "score": 2.1457672119140625e-06}, "shared": {"value": false, "score": 3.5762786865234375e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.18600505590438843}, "created": {"value": false, "score": 2.1457672119140625e-06}, "shared": {"value": false, "score": 3.5762786865234375e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "GridSearchCV", "normalizedForm": "GridSearchCV", "offsetStart": 460, "offsetEnd": 472}, "context": "from sklearn.datasets import load_wine from sklearn.neighbors import KNeighborsClassifier from sklearn.model_selection import train_test_split, GridSearchCV from sklearn.pipeline import Pipeline from metric_learn import LMNN X_train, X_test, y_train, y_test = train_test_split(*load_wine(return_X_y=True)) lmnn_knn = Pipeline(steps=[('lmnn', LMNN()), ('knn', KNeighborsClassifier())]) parameters = {'lmnn__k':[1, 2], 'knn__n_neighbors':[1, 2]} grid_lmnn_knn = GridSearchCV(lmnn_knn, parameters, cv=3, n_jobs=-1, verbose=True) grid_lmnn_knn.fit(X_train, ", "mentionContextAttributes": {"used": {"value": false, "score": 0.18600493669509888}, "created": {"value": false, "score": 2.1457672119140625e-06}, "shared": {"value": false, "score": 3.5762786865234375e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.18600493669509888}, "created": {"value": false, "score": 2.1457672119140625e-06}, "shared": {"value": false, "score": 3.5762786865234375e-06}}}], "references": [{"refKey": 15, "tei": "<biblStruct xml:id=\"b15\">\n\t<analytic>\n\t\t<title level=\"a\" type=\"main\">dml: Distance Metric Learning in R</title>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Yuan</forename><surname>Tang</surname></persName>\n\t\t\t<idno type=\"ORCID\">0000-0001-5243-233X</idno>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Tao</forename><surname>Gao</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Nan</forename><surname>Xiao</surname></persName>\n\t\t\t<idno type=\"ORCID\">0000-0002-0250-5673</idno>\n\t\t</author>\n\t\t<idno type=\"DOI\">10.21105/joss.01036</idno>\n\t</analytic>\n\t<monogr>\n\t\t<title level=\"j\">Journal of Open Source Software</title>\n\t\t<title level=\"j\" type=\"abbrev\">JOSS</title>\n\t\t<idno type=\"ISSNe\">2475-9066</idno>\n\t\t<imprint>\n\t\t\t<biblScope unit=\"volume\">3</biblScope>\n\t\t\t<biblScope unit=\"issue\">30</biblScope>\n\t\t\t<biblScope unit=\"page\">1036</biblScope>\n\t\t\t<date type=\"published\" when=\"2018-10-23\">2018</date>\n\t\t\t<publisher>The Open Journal</publisher>\n\t\t</imprint>\n\t</monogr>\n</biblStruct>\n"}], "runtime": 13184, "id": "2c68de0123081345335ef9c5ae012b493e430658", "metadata": {"id": "2c68de0123081345335ef9c5ae012b493e430658"}, "original_file_path": "../../datalake/Samuel/SOFTware-Sync/downloads/xml/hal-03100076.grobid.tei.xml", "file_name": "hal-03100076.grobid.tei.xml"}