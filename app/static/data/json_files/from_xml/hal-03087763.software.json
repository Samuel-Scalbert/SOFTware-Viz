{"application": "software-mentions", "version": "0.8.0", "date": "2024-10-07T12:00+0000", "md5": "C0D9A62F4B0FF0102ABCA2EC0332D638", "mentions": [{"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 0, "offsetEnd": 5}, "context": "FAUST [10] is a functional, synchronous, domain specific programming language working at the sample level, designed for real time audio signal processing and synthesis.", "mentionContextAttributes": {"used": {"value": false, "score": 3.4928321838378906e-05}, "created": {"value": false, "score": 0.007751107215881348}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 0, "offsetEnd": 5}, "context": "FAUST programs can be efficiently compiled to a variety of target programming languages, from C++ to WebAssembly.", "mentionContextAttributes": {"used": {"value": false, "score": 6.985664367675781e-05}, "created": {"value": false, "score": 0.00037419795989990234}, "shared": {"value": false, "score": 1.0967254638671875e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 0, "offsetEnd": 5}, "context": "FAUST also allows us to circumvent many important limitations of the WebAudio standard, like the buffer size issues, as loops appearing in the graph of connected WebAudio nodes always introduce a delay of at least one buffer (128 samples), and thus one sample delay recursive algorithms cannot be expressed.", "mentionContextAttributes": {"used": {"value": false, "score": 7.56978988647461e-05}, "created": {"value": false, "score": 0.00046694278717041016}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 0, "offsetEnd": 5}, "context": "FAUST code can include abstract definitions of GUI controllers, such as in this source code extract: Here, the code describes the definition of two parameters named \"Fuzz\" and \"Level\" along with some data defining the default value, min, max, step, unit type, etc.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0006371140480041504}, "created": {"value": false, "score": 8.618831634521484e-05}, "shared": {"value": false, "score": 2.1457672119140625e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Android", "normalizedForm": "Android", "offsetStart": 1, "offsetEnd": 8}, "context": "(Android Package) folder that can be directly installed on Android phones.", "mentionContextAttributes": {"used": {"value": false, "score": 7.641315460205078e-05}, "created": {"value": false, "score": 0.0014774203300476074}, "shared": {"value": false, "score": 0.03335314989089966}}, "documentContextAttributes": {"used": {"value": false, "score": 7.641315460205078e-05}, "created": {"value": false, "score": 0.0014774203300476074}, "shared": {"value": false, "score": 0.03335314989089966}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "AudioWorklet", "normalizedForm": "AudioWorklet", "offsetStart": 3, "offsetEnd": 15}, "context": "An AudioWorklet is composed of a JavaScript wrapper called the AudioWorkletProcessor that communicates with the AudioWorkletNode [15].", "mentionContextAttributes": {"used": {"value": false, "score": 0.004525244235992432}, "created": {"value": false, "score": 0.00015079975128173828}, "shared": {"value": false, "score": 1.5497207641601562e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.025378406047821045}, "created": {"value": true, "score": 0.7540121078491211}, "shared": {"value": false, "score": 7.927417755126953e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "code", "normalizedForm": "code", "offsetStart": 4, "offsetEnd": 8}, "context": "C++ code using the libsndfile library can be directly compiled to WebAssembly and ported to JavaScript.", "mentionContextAttributes": {"used": {"value": false, "score": 0.038890063762664795}, "created": {"value": false, "score": 8.976459503173828e-05}, "shared": {"value": false, "score": 0.04958963394165039}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999884366989136}, "created": {"value": true, "score": 0.9957776069641113}, "shared": {"value": false, "score": 0.04958963394165039}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "code", "normalizedForm": "code", "offsetStart": 4, "offsetEnd": 8}, "context": "The code included the implementation of a simple transfer function whose curve could be adjusted (i.e., leading to more subtle/less aggressive curves).", "mentionContextAttributes": {"used": {"value": false, "score": 0.00467371940612793}, "created": {"value": false, "score": 0.07321012020111084}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999884366989136}, "created": {"value": true, "score": 0.9957776069641113}, "shared": {"value": false, "score": 0.04958963394165039}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 4, "offsetEnd": 9}, "context": "The FAUST compiler is organized in successive stages, from the DSP block diagram to signals, and finally to the FIR (FAUST Imperative Representation) which is then translated into several target languages.", "mentionContextAttributes": {"used": {"value": false, "score": 0.15099084377288818}, "created": {"value": false, "score": 0.0002219080924987793}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 4, "offsetEnd": 9}, "context": "The FAUST IDE allowed also for the creation of a bona-fide WebAudio plugin from the FAUST implementation of the PowerAmp (see Fig. 15).", "mentionContextAttributes": {"used": {"value": false, "score": 0.02437114715576172}, "created": {"value": false, "score": 0.0014548301696777344}, "shared": {"value": false, "score": 9.5367431640625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 4, "offsetEnd": 9}, "context": "The FAUST IDE itself needs to be extended to include sound file management, so that plugins using audio samples/wavetables, for instance could be implemented.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00032579898834228516}, "created": {"value": false, "score": 0.0004050135612487793}, "shared": {"value": false, "score": 8.344650268554688e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "implicit", "software-name": {"rawForm": "server", "normalizedForm": "server", "offsetStart": 4, "offsetEnd": 10}, "context": "The server is written in C++ and based on libmicrohttpd, 16 a C library from the GNU Foundation allowing us to easily write a simple HTTP server.", "mentionContextAttributes": {"used": {"value": true, "score": 0.745858907699585}, "created": {"value": false, "score": 0.2007603645324707}, "shared": {"value": false, "score": 0.002213597297668457}}, "documentContextAttributes": {"used": {"value": true, "score": 0.745858907699585}, "created": {"value": false, "score": 0.2007603645324707}, "shared": {"value": false, "score": 0.002213597297668457}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "AudioWorklet", "normalizedForm": "AudioWorklet", "offsetStart": 4, "offsetEnd": 16}, "context": "The AudioWorklet currently becomes a standard in the WebAudio API as it allows the computation of audio buffers in a dedicated audio thread (different from the \"main thread\" where the GUI is being executed). ", "mentionContextAttributes": {"used": {"value": false, "score": 4.756450653076172e-05}, "created": {"value": false, "score": 0.0006300806999206543}, "shared": {"value": false, "score": 7.927417755126953e-05}}, "documentContextAttributes": {"used": {"value": false, "score": 0.025378406047821045}, "created": {"value": true, "score": 0.7540121078491211}, "shared": {"value": false, "score": 7.927417755126953e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 5, "offsetEnd": 10}, "context": "This FAUST poweramp proved to be fully functional and adjustable, so we could proceed to the evaluation part.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9931530952453613}, "created": {"value": false, "score": 0.016541481018066406}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "code", "normalizedForm": "code", "offsetStart": 6, "offsetEnd": 10}, "context": "FAUST code can include abstract definitions of GUI controllers, such as in this source code extract: Here, the code describes the definition of two parameters named \"Fuzz\" and \"Level\" along with some data defining the default value, min, max, step, unit type, etc.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0006371140480041504}, "created": {"value": false, "score": 8.618831634521484e-05}, "shared": {"value": false, "score": 2.1457672119140625e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999884366989136}, "created": {"value": true, "score": 0.9957776069641113}, "shared": {"value": false, "score": 0.04958963394165039}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "code", "normalizedForm": "code", "offsetStart": 7, "offsetEnd": 11}, "context": "Source code for the FAUST and IDE projects is located at:", "mentionContextAttributes": {"used": {"value": false, "score": 0.30118292570114136}, "created": {"value": false, "score": 0.00011301040649414062}, "shared": {"value": false, "score": 3.6954879760742188e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999884366989136}, "created": {"value": true, "score": 0.9957776069641113}, "shared": {"value": false, "score": 0.04958963394165039}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 7, "offsetEnd": 12}, "context": "In the FAUST implementation, the measurement tools (Fig. 17) proved the sample-wise nature of the processing with a delay of just one-sample for the NFB/Presence loop.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": false, "score": 2.4318695068359375e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAssembly", "normalizedForm": "WebAssembly", "offsetStart": 7, "offsetEnd": 18}, "language": {"rawForm": "JavaScript", "normalizedForm": "JavaScript"}, "context": "\u2022 Load WebAssembly version of the FAUST compiler and import its C functions into JavaScript \u2022 Compile the code: the input is the FAUST source code, the output is the compiled WebAssembly binary version with some related data \u2022 Load and wrap the module as a DSP processing function inside an AudioWorkletProcessor or a ScriptProcessor AudioNode", "mentionContextAttributes": {"used": {"value": true, "score": 0.8635293245315552}, "created": {"value": false, "score": 3.933906555175781e-06}, "shared": {"value": false, "score": 4.172325134277344e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9997132420539856}, "created": {"value": false, "score": 0.0465703010559082}, "shared": {"value": false, "score": 0.04958963394165039}}, "references": [{"label": "15", "normalizedForm": "15", "refKey": 15}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio API", "normalizedForm": "WebAudio API", "offsetStart": 7, "offsetEnd": 19}, "context": "In the WebAudio API specs, the loops in a graph are required to include at least one delay node. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.11445295810699463}, "created": {"value": false, "score": 2.2649765014648438e-05}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.988264799118042}, "created": {"value": false, "score": 0.3308643102645874}, "shared": {"value": false, "score": 7.927417755126953e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Web", "normalizedForm": "Web", "offsetStart": 8, "offsetEnd": 11}, "context": "For the Web platform, two backends have been developed to generate WebAssembly text (so-called \"wast\" or \"wat\") and binary formats (so-called \"wasm\") [14].", "mentionContextAttributes": {"used": {"value": false, "score": 0.00010037422180175781}, "created": {"value": false, "score": 0.0465703010559082}, "shared": {"value": false, "score": 3.6954879760742188e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.5932685136795044}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "DSP", "normalizedForm": "DSP", "offsetStart": 8, "offsetEnd": 11}, "context": "While a DSP developer needs to hear the sound produced by the algorithm, he should also be able to test it with other audio inputs, precisely display its time and frequency domain representation, etc.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00015282630920410156}, "created": {"value": false, "score": 0.0005011558532714844}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9861841797828674}, "created": {"value": true, "score": 0.9997044205665588}, "shared": {"value": false, "score": 0.0060179829597473145}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 8, "offsetEnd": 13}, "context": "After a FAUST DSP is tested in the editor, users can export the DSP to different architectures including WebAudio Plugins (WAPs) which is compiled by an online compiling service (see Fig. 4).", "mentionContextAttributes": {"used": {"value": false, "score": 0.00841522216796875}, "created": {"value": false, "score": 0.0001239776611328125}, "shared": {"value": false, "score": 0.002655923366546631}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 10, "offsetEnd": 15}, "context": "real-time FAUST block diagram, signal visualizations).", "mentionContextAttributes": {"used": {"value": false, "score": 0.45469480752944946}, "created": {"value": false, "score": 1.3709068298339844e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 11, "offsetEnd": 16}, "context": "\u2022 Offline: FAUST WebAudio wrapper offers an \"offline processor\" which is useful to allow a DSP to calculate the first samples at any sample rate independently of the actual audio context one.", "mentionContextAttributes": {"used": {"value": false, "score": 3.528594970703125e-05}, "created": {"value": false, "score": 4.124641418457031e-05}, "shared": {"value": false, "score": 7.152557373046875e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 11, "offsetEnd": 16}, "context": "As for the FAUST compilation itself, it relies on a series of Makefiles, with precise naming conventions to perform all compilation tasks.", "mentionContextAttributes": {"used": {"value": false, "score": 0.08363097906112671}, "created": {"value": false, "score": 0.00011229515075683594}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "AnalyserNode", "normalizedForm": "AnalyserNode", "offsetStart": 11, "offsetEnd": 23}, "context": "First, the AnalyserNode has only one input, which means that it needs an additional ChannelSplitterNode to retrieve the correct channel from the FAUST DSP node. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.06559216976165771}, "created": {"value": false, "score": 1.1920928955078125e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.29112762212753296}, "created": {"value": false, "score": 2.8967857360839844e-05}, "shared": {"value": false, "score": 3.5762786865234375e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 12, "offsetEnd": 20}, "context": "Our initial WebAudio implementations were based on high level nodes provided by the API: a bank of biquad filters in series (for the Presence in the NFB loop), a waveshaper node (for simulating tubes), gain nodes (master volume, negative gain in the NFB loop and for fine tuning), and a delay node (in the NFB loop). ", "mentionContextAttributes": {"used": {"value": true, "score": 0.8406308889389038}, "created": {"value": false, "score": 0.020796656608581543}, "shared": {"value": false, "score": 7.152557373046875e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999572038650513}, "created": {"value": true, "score": 0.9997044205665588}, "shared": {"value": true, "score": 0.975178599357605}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "DSP", "normalizedForm": "DSP", "offsetStart": 14, "offsetEnd": 17}, "context": "After a FAUST DSP is tested in the editor, users can export the DSP to different architectures including WebAudio Plugins (WAPs) which is compiled by an online compiling service (see Fig. 4).", "mentionContextAttributes": {"used": {"value": false, "score": 0.00841522216796875}, "created": {"value": false, "score": 0.0001239776611328125}, "shared": {"value": false, "score": 0.002655923366546631}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9861841797828674}, "created": {"value": true, "score": 0.9997044205665588}, "shared": {"value": false, "score": 0.0060179829597473145}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 14, "offsetEnd": 19}, "context": "For instance, FAUST block diagrams in SVG 13 format generated as additional files in the compilation process, are simply written on the fly in the VFS, then loaded, decoded, and displayed.", "mentionContextAttributes": {"used": {"value": false, "score": 0.015501320362091064}, "created": {"value": false, "score": 2.288818359375e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST IDE", "normalizedForm": "FAUST IDE", "offsetStart": 14, "offsetEnd": 23}, "language": {"rawForm": "JavaScript", "normalizedForm": "JavaScript"}, "context": "Figure 1: the FAUST IDE provides many embedded tools: oscilloscopes, spectroscope and spectrogram analyzer, functional default GUI, schema preview, etc.", "mentionContextAttributes": {"used": {"value": false, "score": 2.6226043701171875e-05}, "created": {"value": false, "score": 3.2067298889160156e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999884366989136}, "created": {"value": false, "score": 0.004605889320373535}, "shared": {"value": false, "score": 0.0060179829597473145}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "DSP", "normalizedForm": "DSP", "offsetStart": 15, "offsetEnd": 18}, "context": "Once complete (DSP + GUI), the plugins are packaged in the form of standard W3C WebComponents and published on remote WAP plugin servers.", "mentionContextAttributes": {"used": {"value": true, "score": 0.5952492952346802}, "created": {"value": false, "score": 0.00010669231414794922}, "shared": {"value": false, "score": 0.0003399848937988281}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9861841797828674}, "created": {"value": true, "score": 0.9997044205665588}, "shared": {"value": false, "score": 0.0060179829597473145}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "code", "normalizedForm": "code", "offsetStart": 16, "offsetEnd": 20}, "context": "3 C/C++ written code can be transpiled to WebAssembly using Emscripten [4] and wrapped by additional JavaScript code to become ready-to-use audio nodes.", "mentionContextAttributes": {"used": {"value": false, "score": 0.008561909198760986}, "created": {"value": false, "score": 1.5616416931152344e-05}, "shared": {"value": false, "score": 0.0001531839370727539}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999884366989136}, "created": {"value": true, "score": 0.9957776069641113}, "shared": {"value": false, "score": 0.04958963394165039}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 17, "offsetEnd": 25}, "context": "\u2022 Offline: FAUST WebAudio wrapper offers an \"offline processor\" which is useful to allow a DSP to calculate the first samples at any sample rate independently of the actual audio context one. ", "mentionContextAttributes": {"used": {"value": false, "score": 3.528594970703125e-05}, "created": {"value": false, "score": 4.124641418457031e-05}, "shared": {"value": false, "score": 7.152557373046875e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999572038650513}, "created": {"value": true, "score": 0.9997044205665588}, "shared": {"value": true, "score": 0.975178599357605}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "code", "normalizedForm": "code", "offsetStart": 19, "offsetEnd": 23}, "context": "Additional generic code is added to connect the DSP computation itself with audio inputs/outputs, and with parameter controllers, which could be buttons, sliders, numerical entries, etc. Architectures files can also possibly implement polyphonic support for MIDI-controllable instruments, by automatically dealing with dynamic voice allocation, and decoding and mapping of incoming MIDI events [11].", "mentionContextAttributes": {"used": {"value": false, "score": 0.0006245970726013184}, "created": {"value": false, "score": 0.014672636985778809}, "shared": {"value": false, "score": 2.384185791015625e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999884366989136}, "created": {"value": true, "score": 0.9957776069641113}, "shared": {"value": false, "score": 0.04958963394165039}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 19, "offsetEnd": 24}, "context": "\u2022 On Event: as the FAUST DSP usually comes with a GUI to control its parameters, it is important to visualize the part of signals while parameters change.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0004912614822387695}, "created": {"value": false, "score": 2.384185791015625e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST IDE", "normalizedForm": "FAUST IDE", "offsetStart": 19, "offsetEnd": 28}, "language": {"rawForm": "JavaScript", "normalizedForm": "JavaScript"}, "context": "As measured in the FAUST IDE, using process = button(\"gate\") <: ((poweramp), _); style code and the embedded visualisation tools.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9999884366989136}, "created": {"value": false, "score": 9.298324584960938e-06}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999884366989136}, "created": {"value": false, "score": 0.004605889320373535}, "shared": {"value": false, "score": 0.0060179829597473145}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "libsndfile", "normalizedForm": "libsndfile", "offsetStart": 19, "offsetEnd": 29}, "context": "C++ code using the libsndfile library can be directly compiled to WebAssembly and ported to JavaScript.", "mentionContextAttributes": {"used": {"value": false, "score": 0.038890063762664795}, "created": {"value": false, "score": 8.976459503173828e-05}, "shared": {"value": false, "score": 0.04958963394165039}}, "documentContextAttributes": {"used": {"value": false, "score": 0.038890063762664795}, "created": {"value": false, "score": 8.976459503173828e-05}, "shared": {"value": false, "score": 0.04958963394165039}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 20, "offsetEnd": 25}, "context": "Source code for the FAUST and IDE projects is located at:", "mentionContextAttributes": {"used": {"value": false, "score": 0.30118292570114136}, "created": {"value": false, "score": 0.00011301040649414062}, "shared": {"value": false, "score": 3.6954879760742188e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio API", "normalizedForm": "WebAudio API", "offsetStart": 21, "offsetEnd": 33}, "context": "With pure JavaScript WebAudio API, major issues arise when dealing with loops, firstly due to the limitations imposed by its blockprocessing paradigm and also because of some divergences/bugs in how different browsers parse WebAudio graphs with loops. ", "mentionContextAttributes": {"used": {"value": false, "score": 9.810924530029297e-05}, "created": {"value": false, "score": 0.0008604526519775391}, "shared": {"value": false, "score": 1.2874603271484375e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.988264799118042}, "created": {"value": false, "score": 0.3308643102645874}, "shared": {"value": false, "score": 7.927417755126953e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST compiler", "normalizedForm": "FAUST compiler", "offsetStart": 21, "offsetEnd": 35}, "context": "When embedded in the FAUST compiler running on the Web, they allow us to dynamically compile FAUST DSP programs as pure Web applications. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.004154384136199951}, "created": {"value": false, "score": 0.015300333499908447}, "shared": {"value": false, "score": 2.1696090698242188e-05}}, "documentContextAttributes": {"used": {"value": false, "score": 0.004154384136199951}, "created": {"value": false, "score": 0.015300333499908447}, "shared": {"value": false, "score": 2.1696090698242188e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Web", "normalizedForm": "Web", "offsetStart": 22, "offsetEnd": 25}, "context": "With the emergence of Web-based audio software such as digital audio workstations (DAWs) developed by companies like SoundTrap, BandLab, or AmpedStudio, it became desirable to have a standard to make WebAudio instruments and effects interoperable as plugins compatible with these DAWs, and more generally with any compatible host software.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0008279085159301758}, "created": {"value": false, "score": 0.2612989544868469}, "shared": {"value": false, "score": 7.104873657226562e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.5932685136795044}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 22, "offsetEnd": 27}, "context": "(available now in the FAUST distribution).", "mentionContextAttributes": {"used": {"value": false, "score": 0.0002060532569885254}, "created": {"value": false, "score": 0.0002314448356628418}, "shared": {"value": false, "score": 8.225440979003906e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Emscripten", "normalizedForm": "Emscripten", "offsetStart": 22, "offsetEnd": 32}, "context": "To do that, thanks to Emscripten, we plan to expose more of the already written C++ architecture files used to access sound resources on the JavaScript side.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00035178661346435547}, "created": {"value": true, "score": 0.8182610273361206}, "shared": {"value": false, "score": 1.7881393432617188e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.8382949233055115}, "created": {"value": true, "score": 0.8182610273361206}, "shared": {"value": false, "score": 0.001791834831237793}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "DSP", "normalizedForm": "DSP", "offsetStart": 25, "offsetEnd": 28}, "context": "\u2022 On Event: as the FAUST DSP usually comes with a GUI to control its parameters, it is important to visualize the part of signals while parameters change.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0004912614822387695}, "created": {"value": false, "score": 2.384185791015625e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9861841797828674}, "created": {"value": true, "score": 0.9997044205665588}, "shared": {"value": false, "score": 0.0060179829597473145}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "DSP", "normalizedForm": "DSP", "offsetStart": 25, "offsetEnd": 28}, "context": "At any time, the plugin (DSP + GUI) can be tested from within the IDE, without having to download it on a local disk.", "mentionContextAttributes": {"used": {"value": false, "score": 0.01299506425857544}, "created": {"value": false, "score": 7.128715515136719e-05}, "shared": {"value": false, "score": 2.6226043701171875e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9861841797828674}, "created": {"value": true, "score": 0.9997044205665588}, "shared": {"value": false, "score": 0.0060179829597473145}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 25, "offsetEnd": 30}, "context": "\u2022 All options related to FAUST code compilation are located using controllers from the left sidebar; \u2022 All options and displays related to DSP runtime, such as MIDI, audio inputs, and quick signal probing are placed in the right sidebar; \u2022 The remaining central zone of the page is divided into two parts with configurable heights: a source code editor on the top and a multi-tab display panel which can display the logs from the compiler, a FAUST block diagram corresponding to the DSP code, a larger signal scope, a running GUI of the plugin being developed, and finally, a GUI builder/exporter for designing the user interface of the WAP plugin version of the code, usable in external host applications.", "mentionContextAttributes": {"used": {"value": false, "score": 0.053231000900268555}, "created": {"value": false, "score": 4.0531158447265625e-06}, "shared": {"value": false, "score": 4.887580871582031e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Firefox", "normalizedForm": "Firefox", "offsetStart": 25, "offsetEnd": 32}, "context": "Without this delay node, Firefox browser stops rendering the graph, while Chrome browser does not complain but adds, behind the scenes, a 3ms delay (the minimum size of an audio buffer being 128 frames, hence the minimal delay of 128/sampling rate: roughly 3ms at 44.1kHz). ", "mentionContextAttributes": {"used": {"value": false, "score": 0.002291083335876465}, "created": {"value": false, "score": 4.470348358154297e-05}, "shared": {"value": false, "score": 1.6689300537109375e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.014267981052398682}, "created": {"value": false, "score": 4.470348358154297e-05}, "shared": {"value": false, "score": 1.6689300537109375e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Emscripten", "normalizedForm": "Emscripten", "offsetStart": 25, "offsetEnd": 35}, "context": "recent technologies like Emscripten as well as recognized Web standards (like WebComponents) to achieve the porting of native source components to higher performance versions using WebAudio and WebAssembly API.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00016319751739501953}, "created": {"value": false, "score": 0.00238645076751709}, "shared": {"value": false, "score": 8.118152618408203e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.8382949233055115}, "created": {"value": true, "score": 0.8182610273361206}, "shared": {"value": false, "score": 0.001791834831237793}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 26, "offsetEnd": 31}, "context": "The node generated by the FAUST compiler can be an AudioWorklet or a ScriptProcessor. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.008063077926635742}, "created": {"value": false, "score": 0.0003553628921508789}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 26, "offsetEnd": 34}, "context": "Tutorial \"Create your own WebAudio Plugins\": https://tinyurl.com/wnw2yl7", "mentionContextAttributes": {"used": {"value": false, "score": 0.00011897087097167969}, "created": {"value": false, "score": 0.00016987323760986328}, "shared": {"value": true, "score": 0.975178599357605}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999572038650513}, "created": {"value": true, "score": 0.9997044205665588}, "shared": {"value": true, "score": 0.975178599357605}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "code", "normalizedForm": "code", "offsetStart": 27, "offsetEnd": 31}, "context": "Additional JavaScript glue code is added to transform DSP modules in fully functional WebAudio nodes.", "mentionContextAttributes": {"used": {"value": false, "score": 0.004198968410491943}, "created": {"value": false, "score": 0.0005717873573303223}, "shared": {"value": false, "score": 2.86102294921875e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999884366989136}, "created": {"value": true, "score": 0.9957776069641113}, "shared": {"value": false, "score": 0.04958963394165039}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 27, "offsetEnd": 32}, "context": "In order to export and run FAUST programs outside the Web browser, a Compiler as a Service (CaaS) located at https://faustservicecloud.grame.fr/", "mentionContextAttributes": {"used": {"value": false, "score": 0.0036797523498535156}, "created": {"value": false, "score": 0.000391542911529541}, "shared": {"value": true, "score": 0.969192385673523}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 27, "offsetEnd": 32}, "context": "This porting done with the FAUST team ended up in a so-called webaudio.lib", "mentionContextAttributes": {"used": {"value": true, "score": 0.9676588177680969}, "created": {"value": false, "score": 0.0014025568962097168}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "DSP", "normalizedForm": "DSP", "offsetStart": 28, "offsetEnd": 31}, "context": "This allows us to debug the DSP code running with a different sample rate.", "mentionContextAttributes": {"used": {"value": false, "score": 0.002271115779876709}, "created": {"value": false, "score": 0.0001685619354248047}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9861841797828674}, "created": {"value": true, "score": 0.9997044205665588}, "shared": {"value": false, "score": 0.0060179829597473145}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MIDI", "normalizedForm": "MIDI", "offsetStart": 28, "offsetEnd": 32}, "context": "When audio effects or audio/MIDI instruments have to be shared between several DAWs or audio environments, a plugin model is usually preferred.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0002759099006652832}, "created": {"value": false, "score": 8.475780487060547e-05}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.053231000900268555}, "created": {"value": true, "score": 0.9927679300308228}, "shared": {"value": false, "score": 8.702278137207031e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 29, "offsetEnd": 34}, "context": "As previously explained, the FAUST DSP code is compiled to a JavaScript wrapper and a WebAssembly module. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.1597970724105835}, "created": {"value": false, "score": 0.00026220083236694336}, "shared": {"value": false, "score": 2.181529998779297e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 29, "offsetEnd": 34}, "context": "saver, full sync between the FAUST code and GUI is planned as future enhancements.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00036716461181640625}, "created": {"value": false, "score": 0.0017748475074768066}, "shared": {"value": false, "score": 2.9802322387695312e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 29, "offsetEnd": 34}, "context": "However, we noticed that the FAUST implementation was much more stable and versatile when pushing the internal parameters of the feedback loop.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9776012897491455}, "created": {"value": false, "score": 0.018513500690460205}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 30, "offsetEnd": 35}, "context": "So as to fully illustrate the FAUST online framework, a case study is detailed with complete workflow, from the FAUST DSP source code written and tested in a fully functional online editor, to a self-contained plugin running in a separate host application.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0007249712944030762}, "created": {"value": false, "score": 0.008119642734527588}, "shared": {"value": false, "score": 2.181529998779297e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "code", "normalizedForm": "code", "offsetStart": 31, "offsetEnd": 35}, "context": "\u2022 All options related to FAUST code compilation are located using controllers from the left sidebar; \u2022 All options and displays related to DSP runtime, such as MIDI, audio inputs, and quick signal probing are placed in the right sidebar; \u2022 The remaining central zone of the page is divided into two parts with configurable heights: a source code editor on the top and a multi-tab display panel which can display the logs from the compiler, a FAUST block diagram corresponding to the DSP code, a larger signal scope, a running GUI of the plugin being developed, and finally, a GUI builder/exporter for designing the user interface of the WAP plugin version of the code, usable in external host applications.", "mentionContextAttributes": {"used": {"value": false, "score": 0.053231000900268555}, "created": {"value": false, "score": 4.0531158447265625e-06}, "shared": {"value": false, "score": 4.887580871582031e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999884366989136}, "created": {"value": true, "score": 0.9957776069641113}, "shared": {"value": false, "score": 0.04958963394165039}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Emscripten", "normalizedForm": "Emscripten", "offsetStart": 31, "offsetEnd": 41}, "context": "\u2022 A virtual file system (VFS): Emscripten supports a virtual file system (in memory) compatible with the C++ I/O standard library, but also usable from the JavaScript wrapper. ", "mentionContextAttributes": {"used": {"value": false, "score": 6.377696990966797e-05}, "created": {"value": false, "score": 0.0002657771110534668}, "shared": {"value": false, "score": 0.001791834831237793}}, "documentContextAttributes": {"used": {"value": true, "score": 0.8382949233055115}, "created": {"value": true, "score": 0.8182610273361206}, "shared": {"value": false, "score": 0.001791834831237793}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "code", "normalizedForm": "code", "offsetStart": 32, "offsetEnd": 36}, "context": "This allows us to debug the DSP code running with a different sample rate.", "mentionContextAttributes": {"used": {"value": false, "score": 0.002271115779876709}, "created": {"value": false, "score": 0.0001685619354248047}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999884366989136}, "created": {"value": true, "score": 0.9957776069641113}, "shared": {"value": false, "score": 0.04958963394165039}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "libmicrohttpd", "normalizedForm": "libmicrohttpd", "offsetStart": 32, "offsetEnd": 45}, "publisher": {"rawForm": "GNU Foundation", "normalizedForm": "GNU Foundation"}, "language": {"rawForm": "C++", "normalizedForm": "C++"}, "context": "16 https://www.gnu.org/software/libmicrohttpd/", "mentionContextAttributes": {"used": {"value": false, "score": 0.0001169443130493164}, "created": {"value": false, "score": 1.52587890625e-05}, "shared": {"value": true, "score": 0.9700002670288086}}, "documentContextAttributes": {"used": {"value": true, "score": 0.745858907699585}, "created": {"value": false, "score": 0.2007603645324707}, "shared": {"value": true, "score": 0.9700002670288086}}, "references": [{"label": "16", "normalizedForm": "16", "refKey": 16}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 33, "offsetEnd": 38}, "context": "As a specification language, the FAUST code only describes the DSP part, and an abstract version of the control interface.", "mentionContextAttributes": {"used": {"value": false, "score": 0.01121973991394043}, "created": {"value": false, "score": 0.00020891427993774414}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Emscripten", "normalizedForm": "Emscripten", "offsetStart": 33, "offsetEnd": 43}, "context": "The compiler module generated by Emscripten was previously implemented in the FAUST IDE 11 using a JavaScript wrapper which allowed the application to compile and transform FAUST source code into a WebAudio node. ", "mentionContextAttributes": {"used": {"value": true, "score": 0.8382949233055115}, "created": {"value": false, "score": 0.004605889320373535}, "shared": {"value": false, "score": 2.6702880859375e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.8382949233055115}, "created": {"value": true, "score": 0.8182610273361206}, "shared": {"value": false, "score": 0.001791834831237793}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 34, "offsetEnd": 39}, "context": "\u2022 Load WebAssembly version of the FAUST compiler and import its C functions into JavaScript \u2022 Compile the code: the input is the FAUST source code, the output is the compiled WebAssembly binary version with some related data \u2022 Load and wrap the module as a DSP processing function inside an AudioWorkletProcessor or a ScriptProcessor AudioNode", "mentionContextAttributes": {"used": {"value": true, "score": 0.8635293245315552}, "created": {"value": false, "score": 3.933906555175781e-06}, "shared": {"value": false, "score": 4.172325134277344e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "DSP", "normalizedForm": "DSP", "offsetStart": 35, "offsetEnd": 38}, "context": "As previously explained, the FAUST DSP code is compiled to a JavaScript wrapper and a WebAssembly module.", "mentionContextAttributes": {"used": {"value": false, "score": 0.1597970724105835}, "created": {"value": false, "score": 0.00026220083236694336}, "shared": {"value": false, "score": 2.181529998779297e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9861841797828674}, "created": {"value": true, "score": 0.9997044205665588}, "shared": {"value": false, "score": 0.0060179829597473145}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "code", "normalizedForm": "code", "offsetStart": 35, "offsetEnd": 39}, "context": "saver, full sync between the FAUST code and GUI is planned as future enhancements.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00036716461181640625}, "created": {"value": false, "score": 0.0017748475074768066}, "shared": {"value": false, "score": 2.9802322387695312e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999884366989136}, "created": {"value": true, "score": 0.9957776069641113}, "shared": {"value": false, "score": 0.04958963394165039}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KissFFT", "normalizedForm": "KissFFT", "offsetStart": 35, "offsetEnd": 42}, "context": "We chose the JavaScript version of KissFFT 14 for its high performance when compiled to WebAssembly. ", "mentionContextAttributes": {"used": {"value": true, "score": 0.9997132420539856}, "created": {"value": false, "score": 6.61611557006836e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9997132420539856}, "created": {"value": false, "score": 6.61611557006836e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "code", "normalizedForm": "code", "offsetStart": 37, "offsetEnd": 41}, "context": "Besides UI improvements facilitating code editing and compilation, audio probes are an important addition to the new editor.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00010752677917480469}, "created": {"value": false, "score": 0.02839738130569458}, "shared": {"value": false, "score": 2.7418136596679688e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999884366989136}, "created": {"value": true, "score": 0.9957776069641113}, "shared": {"value": false, "score": 0.04958963394165039}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "AnalyserNode", "normalizedForm": "AnalyserNode", "offsetStart": 37, "offsetEnd": 49}, "context": "Secondly, as we cannot tell when the AnalyserNode does the analysis, the audio data is provided only on demand. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.29112762212753296}, "created": {"value": false, "score": 2.8967857360839844e-05}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.29112762212753296}, "created": {"value": false, "score": 2.8967857360839844e-05}, "shared": {"value": false, "score": 3.5762786865234375e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio AnalyserNode", "normalizedForm": "WebAudio AnalyserNode", "offsetStart": 37, "offsetEnd": 58}, "context": "The first approach consists of using WebAudio AnalyserNode with its integrated functions to get the realtime audio data in frequency and time domain: This approach provides both sample values and the spectrum given by the FFT of the current audio buffer. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0005743503570556641}, "created": {"value": false, "score": 0.00011742115020751953}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0005743503570556641}, "created": {"value": false, "score": 0.00011742115020751953}, "shared": {"value": false, "score": 3.5762786865234375e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "code", "normalizedForm": "code", "offsetStart": 38, "offsetEnd": 42}, "context": "Most of them aim at adapting existing code bases (usually developed in native languages like C/C++) as well as facilitating the use of existing audio Digital Signal Processing (DSP) languages and platforms.", "mentionContextAttributes": {"used": {"value": false, "score": 8.618831634521484e-05}, "created": {"value": false, "score": 0.020071744918823242}, "shared": {"value": false, "score": 6.556510925292969e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999884366989136}, "created": {"value": true, "score": 0.9957776069641113}, "shared": {"value": false, "score": 0.04958963394165039}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 38, "offsetEnd": 46}, "context": "In the first years after the birth of WebAudio (2011), there was no standard format for high-level audio plugins. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.00017279386520385742}, "created": {"value": false, "score": 0.0015928149223327637}, "shared": {"value": false, "score": 8.702278137207031e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999572038650513}, "created": {"value": true, "score": 0.9997044205665588}, "shared": {"value": true, "score": 0.975178599357605}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "DSP", "normalizedForm": "DSP", "offsetStart": 39, "offsetEnd": 42}, "context": "The complete workflow from the initial DSP source code, testing and running it in an integrated editor, polishing its user interface in another specialized GUI editor, to the finalized plugin running in an external host has been presented.", "mentionContextAttributes": {"used": {"value": false, "score": 0.003858506679534912}, "created": {"value": false, "score": 0.008101105690002441}, "shared": {"value": false, "score": 0.0001277923583984375}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9861841797828674}, "created": {"value": true, "score": 0.9997044205665588}, "shared": {"value": false, "score": 0.0060179829597473145}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "code", "normalizedForm": "code", "offsetStart": 39, "offsetEnd": 43}, "context": "As previously explained, the FAUST DSP code is compiled to a JavaScript wrapper and a WebAssembly module.", "mentionContextAttributes": {"used": {"value": false, "score": 0.1597970724105835}, "created": {"value": false, "score": 0.00026220083236694336}, "shared": {"value": false, "score": 2.181529998779297e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999884366989136}, "created": {"value": true, "score": 0.9957776069641113}, "shared": {"value": false, "score": 0.04958963394165039}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 39, "offsetEnd": 47}, "context": "These nodes are connectable with other WebAudio nodes to create an audio processing graph, and are designed to allow the development of custom low-level DSP algorithms. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.00022393465042114258}, "created": {"value": false, "score": 0.09872555732727051}, "shared": {"value": false, "score": 2.0265579223632812e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999572038650513}, "created": {"value": true, "score": 0.9997044205665588}, "shared": {"value": true, "score": 0.975178599357605}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 40, "offsetEnd": 45}, "context": "33 This will also require to extend the FAUST remote compilation service.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0012340545654296875}, "created": {"value": false, "score": 0.002143681049346924}, "shared": {"value": false, "score": 2.384185791015625e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAssembly", "normalizedForm": "WebAssembly", "offsetStart": 40, "offsetEnd": 51}, "language": {"rawForm": "JavaScript", "normalizedForm": "JavaScript"}, "context": "C/C++ written code can be transpiled to WebAssembly using Emscripten [4] and wrapped by additional JavaScript code to become ready-to-use audio nodes. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.007905542850494385}, "created": {"value": false, "score": 2.300739288330078e-05}, "shared": {"value": false, "score": 0.00020188093185424805}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9997132420539856}, "created": {"value": false, "score": 0.0465703010559082}, "shared": {"value": false, "score": 0.04958963394165039}}, "references": [{"label": "15", "normalizedForm": "15", "refKey": 15}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 41, "offsetEnd": 46}, "context": "This file system became important as the FAUST compiler searches for libraries and imported source code locally, or generates DSP code for other targets/architectures. ", "mentionContextAttributes": {"used": {"value": false, "score": 9.739398956298828e-05}, "created": {"value": false, "score": 0.0002779364585876465}, "shared": {"value": false, "score": 1.2755393981933594e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "libmicrohttpd", "normalizedForm": "libmicrohttpd", "offsetStart": 42, "offsetEnd": 55}, "publisher": {"rawForm": "GNU Foundation", "normalizedForm": "GNU Foundation", "offsetStart": 81, "offsetEnd": 95}, "language": {"rawForm": "C++", "normalizedForm": "C++", "wikidataId": "Q2407", "offsetStart": 25, "offsetEnd": 28}, "context": "The server is written in C++ and based on libmicrohttpd, 16 a C library from the GNU Foundation allowing us to easily write a simple HTTP server.", "mentionContextAttributes": {"used": {"value": true, "score": 0.745858907699585}, "created": {"value": false, "score": 0.2007603645324707}, "shared": {"value": false, "score": 0.002213597297668457}}, "documentContextAttributes": {"used": {"value": true, "score": 0.745858907699585}, "created": {"value": false, "score": 0.2007603645324707}, "shared": {"value": true, "score": 0.9700002670288086}}, "references": [{"label": "16", "normalizedForm": "16", "refKey": 16, "offsetStart": 18946, "offsetEnd": 18948}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 43, "offsetEnd": 48}, "context": "Figure 5: a default GUI is proposed from a FAUST code in the editor.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0004233717918395996}, "created": {"value": false, "score": 0.014447271823883057}, "shared": {"value": false, "score": 1.3113021850585938e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 44, "offsetEnd": 52}, "context": "So far, we implemented only a generator for WebAudio plugins, using HTML/CSS/JavaScript code that complies with the W3C WebComponents specifications.1", "mentionContextAttributes": {"used": {"value": false, "score": 9.465217590332031e-05}, "created": {"value": true, "score": 0.9957776069641113}, "shared": {"value": false, "score": 1.8835067749023438e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999572038650513}, "created": {"value": true, "score": 0.9997044205665588}, "shared": {"value": true, "score": 0.975178599357605}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 46, "offsetEnd": 51}, "context": "The editor is not yet 100% bijective with the FAUST definition of GUI controllers (that serve as a \"hint\" to bootstrap the GUI design process).", "mentionContextAttributes": {"used": {"value": false, "score": 0.0002624392509460449}, "created": {"value": false, "score": 0.00010979175567626953}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Ubuntu", "normalizedForm": "Ubuntu", "offsetStart": 46, "offsetEnd": 52}, "version": {"rawForm": "16.04", "normalizedForm": "16.04", "offsetStart": 53, "offsetEnd": 58}, "context": "It runs in a docker container built on top of Ubuntu 16.04 to which are added all the packages needed to compile and use FAUST, the FAUST distribution itself, all the needed SDKs, and several cross-compilers.", "mentionContextAttributes": {"used": {"value": false, "score": 0.47160959243774414}, "created": {"value": false, "score": 0.00011801719665527344}, "shared": {"value": false, "score": 1.7881393432617188e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.47160959243774414}, "created": {"value": false, "score": 0.00011801719665527344}, "shared": {"value": false, "score": 1.7881393432617188e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 47, "offsetEnd": 52}, "context": "15 Thus, we perform the FFT computation in the FAUST online editor with two overlaps using a Blackman window function.", "mentionContextAttributes": {"used": {"value": true, "score": 0.982269823551178}, "created": {"value": false, "score": 5.364418029785156e-06}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "DSP", "normalizedForm": "DSP", "offsetStart": 48, "offsetEnd": 51}, "context": "Domain Specific Languages (DSL) for programming DSP algorithms that also compile to WebAssembly, like the mature Csound [5] with its set of WebAudio examples, 4 or the recently announced SOUL DSP language with its playground5 can be used.", "mentionContextAttributes": {"used": {"value": false, "score": 7.128715515136719e-05}, "created": {"value": false, "score": 0.0007395148277282715}, "shared": {"value": false, "score": 2.7060508728027344e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9861841797828674}, "created": {"value": true, "score": 0.9997044205665588}, "shared": {"value": false, "score": 0.0060179829597473145}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "DSP", "normalizedForm": "DSP", "offsetStart": 48, "offsetEnd": 51}, "context": "Additional generic code is added to connect the DSP computation itself with audio inputs/outputs, and with parameter controllers, which could be buttons, sliders, numerical entries, etc. Architectures files can also possibly implement polyphonic support for MIDI-controllable instruments, by automatically dealing with dynamic voice allocation, and decoding and mapping of incoming MIDI events [11].", "mentionContextAttributes": {"used": {"value": false, "score": 0.0006245970726013184}, "created": {"value": false, "score": 0.014672636985778809}, "shared": {"value": false, "score": 2.384185791015625e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9861841797828674}, "created": {"value": true, "score": 0.9997044205665588}, "shared": {"value": false, "score": 0.0060179829597473145}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "code", "normalizedForm": "code", "offsetStart": 48, "offsetEnd": 52}, "context": "For example, the compilation chain of the Faust code on remote servers will be fully characterized and the GUI Builder will have a full section detailing a \"practical case\" of design with the full recreation of a novel tube guitar amplifiers PowerAmp stage simulation using a Faust approach.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0006129741668701172}, "created": {"value": false, "score": 0.0002257227897644043}, "shared": {"value": false, "score": 8.344650268554688e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999884366989136}, "created": {"value": true, "score": 0.9957776069641113}, "shared": {"value": false, "score": 0.04958963394165039}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST IDE", "normalizedForm": "FAUST IDE", "offsetStart": 48, "offsetEnd": 57}, "language": {"rawForm": "JavaScript", "normalizedForm": "JavaScript"}, "context": "From this dialog, a WAP plugin generated by the FAUST IDE can also be downloaded as a zipped archive file that contains the DSP WebAssembly module, the standard JSON 18 WAP descriptor and the GUI code (HTML/CSS/JavaScript) wrapped as a WebComponent. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.01877814531326294}, "created": {"value": false, "score": 6.318092346191406e-06}, "shared": {"value": false, "score": 0.0060179829597473145}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999884366989136}, "created": {"value": false, "score": 0.004605889320373535}, "shared": {"value": false, "score": 0.0060179829597473145}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "code", "normalizedForm": "code", "offsetStart": 49, "offsetEnd": 53}, "context": "Figure 5: a default GUI is proposed from a FAUST code in the editor.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0004233717918395996}, "created": {"value": false, "score": 0.014447271823883057}, "shared": {"value": false, "score": 1.3113021850585938e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999884366989136}, "created": {"value": true, "score": 0.9957776069641113}, "shared": {"value": false, "score": 0.04958963394165039}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 49, "offsetEnd": 54}, "context": "Consequently, the first step was recreating with FAUST our signal chain as faithfully as possible -i.e. using the same filters with the same parameters, the same transfer function, the same gain values, etc. Adapting FAUST filters to behave like WebAudio ones was not straightforward but after some interactions with the FAUST and WebAudio implementers, it proved to be easier to restart from the original C++ implementation of the WebAudio filter API (Chromium browser's source code).", "mentionContextAttributes": {"used": {"value": true, "score": 0.9951423406600952}, "created": {"value": false, "score": 1.811981201171875e-05}, "shared": {"value": false, "score": 1.5497207641601562e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 49, "offsetEnd": 54}, "context": "When pushed towards positive feedback loops, the FAUST poweramp produced cleaner oscillations with less intermodulation distortion suggesting a smaller latency from the NFB loop.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9976211190223694}, "created": {"value": false, "score": 3.62396240234375e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 49, "offsetEnd": 57}, "context": "There are many ways to develop software with the WebAudio API today. ", "mentionContextAttributes": {"used": {"value": false, "score": 3.0279159545898438e-05}, "created": {"value": false, "score": 0.38767462968826294}, "shared": {"value": false, "score": 0.010249078273773193}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999572038650513}, "created": {"value": true, "score": 0.9997044205665588}, "shared": {"value": true, "score": 0.975178599357605}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "code", "normalizedForm": "code", "offsetStart": 50, "offsetEnd": 54}, "context": "The complete workflow from the initial DSP source code, testing and running it in an integrated editor, polishing its user interface in another specialized GUI editor, to the finalized plugin running in an external host has been presented.", "mentionContextAttributes": {"used": {"value": false, "score": 0.003858506679534912}, "created": {"value": false, "score": 0.008101105690002441}, "shared": {"value": false, "score": 0.0001277923583984375}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999884366989136}, "created": {"value": true, "score": 0.9957776069641113}, "shared": {"value": false, "score": 0.04958963394165039}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 50, "offsetEnd": 55}, "context": "In this paper, we present a solution based around FAUST DSL, its Web-based editor, and the integration of a plugin GUI editor allowing to directly test, generate and deploy WAP plugins.", "mentionContextAttributes": {"used": {"value": false, "score": 4.112720489501953e-05}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": false, "score": 3.5762786865234375e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "AudioWorklet", "normalizedForm": "AudioWorklet", "offsetStart": 50, "offsetEnd": 62}, "context": "\u2022 Data output: a callback has been added into the AudioWorklet node to support additional processing or analysis after the buffer has been fully calculated. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.025378406047821045}, "created": {"value": false, "score": 8.380413055419922e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.025378406047821045}, "created": {"value": true, "score": 0.7540121078491211}, "shared": {"value": false, "score": 7.927417755126953e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Web", "normalizedForm": "Web", "offsetStart": 51, "offsetEnd": 54}, "context": "When embedded in the FAUST compiler running on the Web, they allow us to dynamically compile FAUST DSP programs as pure Web applications.", "mentionContextAttributes": {"used": {"value": false, "score": 0.004154384136199951}, "created": {"value": false, "score": 0.015300333499908447}, "shared": {"value": false, "score": 2.1696090698242188e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.5932685136795044}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 51, "offsetEnd": 56}, "context": "They rely directly on the compilation tools of the FAUST distribution.", "mentionContextAttributes": {"used": {"value": true, "score": 0.6222221255302429}, "created": {"value": false, "score": 0.0005909204483032227}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "AudioWorklet", "normalizedForm": "AudioWorklet", "offsetStart": 51, "offsetEnd": 63}, "context": "The node generated by the FAUST compiler can be an AudioWorklet or a ScriptProcessor. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.008063077926635742}, "created": {"value": false, "score": 0.0003553628921508789}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.025378406047821045}, "created": {"value": true, "score": 0.7540121078491211}, "shared": {"value": false, "score": 7.927417755126953e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Web", "normalizedForm": "Web", "offsetStart": 53, "offsetEnd": 56}, "context": "New features made possible by the very nature of the Web platform (e.g., plugins can be remote or local and identified by URIs) should also be available for plugins written in different ways.", "mentionContextAttributes": {"used": {"value": false, "score": 4.4465065002441406e-05}, "created": {"value": false, "score": 0.0053977370262146}, "shared": {"value": false, "score": 0.025285005569458008}}, "documentContextAttributes": {"used": {"value": true, "score": 0.5932685136795044}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MIDI", "normalizedForm": "MIDI", "offsetStart": 53, "offsetEnd": 57}, "context": "7 As of last year, WAP now includes support for pure MIDI plugins (a GM midi synthesizer, virtual midi keyboards, a MIDI event monitoring plugin, etc 8 ).", "mentionContextAttributes": {"used": {"value": false, "score": 7.390975952148438e-05}, "created": {"value": false, "score": 0.0003929734230041504}, "shared": {"value": false, "score": 2.0265579223632812e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.053231000900268555}, "created": {"value": true, "score": 0.9927679300308228}, "shared": {"value": false, "score": 8.702278137207031e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio API", "normalizedForm": "WebAudio API", "offsetStart": 53, "offsetEnd": 65}, "context": "The AudioWorklet currently becomes a standard in the WebAudio API as it allows the computation of audio buffers in a dedicated audio thread (different from the \"main thread\" where the GUI is being executed). ", "mentionContextAttributes": {"used": {"value": false, "score": 4.756450653076172e-05}, "created": {"value": false, "score": 0.0006300806999206543}, "shared": {"value": false, "score": 7.927417755126953e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.988264799118042}, "created": {"value": false, "score": 0.3308643102645874}, "shared": {"value": false, "score": 7.927417755126953e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAssembly", "normalizedForm": "WebAssembly", "offsetStart": 53, "offsetEnd": 66}, "language": {"rawForm": "JavaScript", "normalizedForm": "JavaScript"}, "context": "With the rise of the more stable and better designed WebAssembly10 format in 2017 (a portable binary-code format for executable programs, firstly to be used on the Web, but also on native environments) as a replacement of asm.js, the previous work done with asm.js was adapted. ", "mentionContextAttributes": {"used": {"value": false, "score": 9.751319885253906e-05}, "created": {"value": false, "score": 0.006427764892578125}, "shared": {"value": false, "score": 0.0005249381065368652}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9997132420539856}, "created": {"value": false, "score": 0.0465703010559082}, "shared": {"value": false, "score": 0.04958963394165039}}, "references": [{"label": "15", "normalizedForm": "15", "refKey": 15}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "DSP", "normalizedForm": "DSP", "offsetStart": 54, "offsetEnd": 57}, "context": "Additional JavaScript glue code is added to transform DSP modules in fully functional WebAudio nodes.", "mentionContextAttributes": {"used": {"value": false, "score": 0.004198968410491943}, "created": {"value": false, "score": 0.0005717873573303223}, "shared": {"value": false, "score": 2.86102294921875e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9861841797828674}, "created": {"value": true, "score": 0.9997044205665588}, "shared": {"value": false, "score": 0.0060179829597473145}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Web", "normalizedForm": "Web", "offsetStart": 54, "offsetEnd": 57}, "context": "In order to export and run FAUST programs outside the Web browser, a Compiler as a Service (CaaS) located at https://faustservicecloud.grame.fr/", "mentionContextAttributes": {"used": {"value": false, "score": 0.0036797523498535156}, "created": {"value": false, "score": 0.000391542911529541}, "shared": {"value": true, "score": 0.969192385673523}}, "documentContextAttributes": {"used": {"value": true, "score": 0.5932685136795044}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 54, "offsetEnd": 59}, "context": "To conclude, we have been able, using only the online FAUST IDE, to completely redesign our Power Amp stage, to fine tune it using the embedded measurement tools, to build its GUI and to thoroughly test the final version before publishing it as a plugin for Web-based host applications.", "mentionContextAttributes": {"used": {"value": false, "score": 0.17170876264572144}, "created": {"value": true, "score": 0.9925139546394348}, "shared": {"value": false, "score": 2.002716064453125e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio Plugins", "normalizedForm": "WebAudio Plugins", "offsetStart": 54, "offsetEnd": 70}, "context": "Our two teams previously presented an open format for WebAudio Plugins coined WAP [2]. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.06438595056533813}, "created": {"value": true, "score": 0.5341297388076782}, "shared": {"value": false, "score": 7.510185241699219e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.06438595056533813}, "created": {"value": true, "score": 0.9763948917388916}, "shared": {"value": false, "score": 0.002655923366546631}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio API", "normalizedForm": "WebAudio API", "offsetStart": 55, "offsetEnd": 67}, "context": "In our previous implementations in JavaScript with the WebAudio API, the first stages were quite faithfully recreated (incl. ", "mentionContextAttributes": {"used": {"value": true, "score": 0.5364212393760681}, "created": {"value": false, "score": 0.3308643102645874}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.988264799118042}, "created": {"value": false, "score": 0.3308643102645874}, "shared": {"value": false, "score": 7.927417755126953e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MIDI", "normalizedForm": "MIDI", "offsetStart": 56, "offsetEnd": 60}, "context": "It aims at: (i) improving the interoperability of audio/MIDI plugins developed using pure Web APIs, (ii) porting existing native code bases, or (iii) using Domain Specific Languages (DSL). ", "mentionContextAttributes": {"used": {"value": false, "score": 0.000102996826171875}, "created": {"value": false, "score": 0.018567919731140137}, "shared": {"value": false, "score": 7.271766662597656e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.053231000900268555}, "created": {"value": true, "score": 0.9927679300308228}, "shared": {"value": false, "score": 8.702278137207031e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 56, "offsetEnd": 61}, "context": "We designed four modes of signal visualizations to help FAUST users to debug their DSPs: data table, oscilloscope (stacked and interleaved by channels), spectroscope, and spectrogram analyzer (see Fig. 3).", "mentionContextAttributes": {"used": {"value": false, "score": 0.00020462274551391602}, "created": {"value": true, "score": 0.9967978596687317}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 57, "offsetEnd": 62}, "context": "When the user requests an export for the first time, the FAUST code is sent to the compilation service which will check it, and if it is correct returns an SHA key which will represent the source code for all the following operations.", "mentionContextAttributes": {"used": {"value": false, "score": 0.033199846744537354}, "created": {"value": false, "score": 1.71661376953125e-05}, "shared": {"value": false, "score": 9.059906005859375e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Web", "normalizedForm": "Web", "offsetStart": 58, "offsetEnd": 61}, "context": "recent technologies like Emscripten as well as recognized Web standards (like WebComponents) to achieve the porting of native source components to higher performance versions using WebAudio and WebAssembly API.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00016319751739501953}, "created": {"value": false, "score": 0.00238645076751709}, "shared": {"value": false, "score": 8.118152618408203e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.5932685136795044}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "code", "normalizedForm": "code", "offsetStart": 59, "offsetEnd": 63}, "context": "To trigger the compilation itself, and retrieve the binary code, a URL is dynamically forged by the editor from this SHA key, the platform, and the architecture.", "mentionContextAttributes": {"used": {"value": true, "score": 0.6260905861854553}, "created": {"value": false, "score": 0.0010582804679870605}, "shared": {"value": false, "score": 4.887580871582031e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999884366989136}, "created": {"value": true, "score": 0.9957776069641113}, "shared": {"value": false, "score": 0.04958963394165039}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 59, "offsetEnd": 64}, "context": "He is also one of the main developer and maintainer of the FAUST compiler.", "mentionContextAttributes": {"used": {"value": false, "score": 0.000551760196685791}, "created": {"value": true, "score": 0.549001157283783}, "shared": {"value": false, "score": 1.1920928955078125e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Android", "normalizedForm": "Android", "offsetStart": 59, "offsetEnd": 66}, "context": "(Android Package) folder that can be directly installed on Android phones.", "mentionContextAttributes": {"used": {"value": false, "score": 7.641315460205078e-05}, "created": {"value": false, "score": 0.0014774203300476074}, "shared": {"value": false, "score": 0.03335314989089966}}, "documentContextAttributes": {"used": {"value": false, "score": 7.641315460205078e-05}, "created": {"value": false, "score": 0.0014774203300476074}, "shared": {"value": false, "score": 0.03335314989089966}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 59, "offsetEnd": 67}, "context": "The FAUST IDE allowed also for the creation of a bona-fide WebAudio plugin from the FAUST implementation of the PowerAmp (see Fig. 15).", "mentionContextAttributes": {"used": {"value": false, "score": 0.02437114715576172}, "created": {"value": false, "score": 0.0014548301696777344}, "shared": {"value": false, "score": 9.5367431640625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999572038650513}, "created": {"value": true, "score": 0.9997044205665588}, "shared": {"value": true, "score": 0.975178599357605}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "code", "normalizedForm": "code", "offsetStart": 60, "offsetEnd": 64}, "context": "The transfer function from the Temper Distortion waveshaper code26 is based on a parameterized tanh function : This is very close to the one we used in our JavaScript implementation (see Fig. 11 for comparison) with parameter k driving the S-shape of the curve.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9422044157981873}, "created": {"value": false, "score": 0.00020903348922729492}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999884366989136}, "created": {"value": true, "score": 0.9957776069641113}, "shared": {"value": false, "score": 0.04958963394165039}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 60, "offsetEnd": 65}, "context": "Luckily, the \"Temper Distortion\" simulation included a 100% FAUST-based implementation of a simple but efficient waveshaper that produced a warm, adjustable, controllable distortion that would easily fit our needs.", "mentionContextAttributes": {"used": {"value": true, "score": 0.7993509769439697}, "created": {"value": false, "score": 0.002345740795135498}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Emscripten", "normalizedForm": "Emscripten", "offsetStart": 60, "offsetEnd": 70}, "context": "3 C/C++ written code can be transpiled to WebAssembly using Emscripten [4] and wrapped by additional JavaScript code to become ready-to-use audio nodes.", "mentionContextAttributes": {"used": {"value": false, "score": 0.008561909198760986}, "created": {"value": false, "score": 1.5616416931152344e-05}, "shared": {"value": false, "score": 0.0001531839370727539}}, "documentContextAttributes": {"used": {"value": true, "score": 0.8382949233055115}, "created": {"value": true, "score": 0.8182610273361206}, "shared": {"value": false, "score": 0.001791834831237793}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 61, "offsetEnd": 66}, "context": "In addition, to be able to calculate audio separately with a FAUST DSP independent from the browser audio context, we created an \"offline processor\" which will be used exclusively for getting the very first samples calculated by a DSP.", "mentionContextAttributes": {"used": {"value": false, "score": 0.022619903087615967}, "created": {"value": true, "score": 0.8531707525253296}, "shared": {"value": false, "score": 5.960464477539062e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 62, "offsetEnd": 67}, "context": "Yann Orlarey and his colleagues at Grame are the designers of FAUST, a functional programming language for sound synthesis and audio processing with a strong focus on the design of synthesizers, musical instruments, audio effects, etc.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0001361370086669922}, "created": {"value": true, "score": 0.822076678276062}, "shared": {"value": false, "score": 9.5367431640625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "webaudio.lib", "normalizedForm": "webaudio.lib", "offsetStart": 62, "offsetEnd": 74}, "context": "This porting done with the FAUST team ended up in a so-called webaudio.lib ", "mentionContextAttributes": {"used": {"value": true, "score": 0.9676588177680969}, "created": {"value": false, "score": 0.0014025568962097168}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9676588177680969}, "created": {"value": false, "score": 0.0014025568962097168}, "shared": {"value": false, "score": 2.384185791015625e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "W3C", "normalizedForm": "W3C", "offsetStart": 63, "offsetEnd": 66}, "context": "Our first versions were developed in pure JavaScript using the W3C WebAudio API and are available to play with. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.027162671089172363}, "created": {"value": true, "score": 0.9684360027313232}, "shared": {"value": false, "score": 0.009909391403198242}}, "documentContextAttributes": {"used": {"value": true, "score": 0.5952492952346802}, "created": {"value": true, "score": 0.9684360027313232}, "shared": {"value": false, "score": 0.009909391403198242}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "DSP", "normalizedForm": "DSP", "offsetStart": 63, "offsetEnd": 66}, "context": "The FAUST compiler is organized in successive stages, from the DSP block diagram to signals, and finally to the FIR (FAUST Imperative Representation) which is then translated into several target languages.", "mentionContextAttributes": {"used": {"value": false, "score": 0.15099084377288818}, "created": {"value": false, "score": 0.0002219080924987793}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9861841797828674}, "created": {"value": true, "score": 0.9997044205665588}, "shared": {"value": false, "score": 0.0060179829597473145}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "DSP", "normalizedForm": "DSP", "offsetStart": 63, "offsetEnd": 66}, "context": "As a specification language, the FAUST code only describes the DSP part, and an abstract version of the control interface.", "mentionContextAttributes": {"used": {"value": false, "score": 0.01121973991394043}, "created": {"value": false, "score": 0.00020891427993774414}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9861841797828674}, "created": {"value": true, "score": 0.9997044205665588}, "shared": {"value": false, "score": 0.0060179829597473145}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "code", "normalizedForm": "code", "offsetStart": 63, "offsetEnd": 67}, "context": "When the user requests an export for the first time, the FAUST code is sent to the compilation service which will check it, and if it is correct returns an SHA key which will represent the source code for all the following operations.", "mentionContextAttributes": {"used": {"value": false, "score": 0.033199846744537354}, "created": {"value": false, "score": 1.71661376953125e-05}, "shared": {"value": false, "score": 9.059906005859375e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999884366989136}, "created": {"value": true, "score": 0.9957776069641113}, "shared": {"value": false, "score": 0.04958963394165039}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 63, "offsetEnd": 68}, "context": "A dedicated GUI builder is integrated in the IDE that receives FAUST DSP's GUI definitions while it is compiled.", "mentionContextAttributes": {"used": {"value": false, "score": 0.015061259269714355}, "created": {"value": false, "score": 0.0001266002655029297}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "AudioWorkletProcessor", "normalizedForm": "AudioWorkletProcessor", "offsetStart": 63, "offsetEnd": 84}, "context": "An AudioWorklet is composed of a JavaScript wrapper called the AudioWorkletProcessor that communicates with the AudioWorkletNode [15].", "mentionContextAttributes": {"used": {"value": false, "score": 0.004525244235992432}, "created": {"value": false, "score": 0.00015079975128173828}, "shared": {"value": false, "score": 1.5497207641601562e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.8635294437408447}, "created": {"value": false, "score": 0.00015079975128173828}, "shared": {"value": false, "score": 4.172325134277344e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "DSP", "normalizedForm": "DSP", "offsetStart": 64, "offsetEnd": 67}, "context": "After a FAUST DSP is tested in the editor, users can export the DSP to different architectures including WebAudio Plugins (WAPs) which is compiled by an online compiling service (see Fig. 4).", "mentionContextAttributes": {"used": {"value": false, "score": 0.00841522216796875}, "created": {"value": false, "score": 0.0001239776611328125}, "shared": {"value": false, "score": 0.002655923366546631}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9861841797828674}, "created": {"value": true, "score": 0.9997044205665588}, "shared": {"value": false, "score": 0.0060179829597473145}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Web", "normalizedForm": "Web", "offsetStart": 65, "offsetEnd": 68}, "context": "In this paper, we present a solution based around FAUST DSL, its Web-based editor, and the integration of a plugin GUI editor allowing to directly test, generate and deploy WAP plugins.", "mentionContextAttributes": {"used": {"value": false, "score": 4.112720489501953e-05}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": false, "score": 3.5762786865234375e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.5932685136795044}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "code", "normalizedForm": "code", "offsetStart": 65, "offsetEnd": 69}, "context": "If the compilation goes well, a zip folder containing the binary code is downloaded from the server.", "mentionContextAttributes": {"used": {"value": false, "score": 0.20019429922103882}, "created": {"value": false, "score": 0.0005463957786560059}, "shared": {"value": false, "score": 0.0037469863891601562}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999884366989136}, "created": {"value": true, "score": 0.9957776069641113}, "shared": {"value": false, "score": 0.04958963394165039}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 65, "offsetEnd": 70}, "context": "We did that in the past by replacing the tonestack stage by some FAUST implementations[17].", "mentionContextAttributes": {"used": {"value": false, "score": 0.040117621421813965}, "created": {"value": false, "score": 0.0006005764007568359}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAssembly", "normalizedForm": "WebAssembly", "offsetStart": 66, "offsetEnd": 77}, "language": {"rawForm": "JavaScript", "normalizedForm": "JavaScript"}, "context": "C++ code using the libsndfile library can be directly compiled to WebAssembly and ported to JavaScript.", "mentionContextAttributes": {"used": {"value": false, "score": 0.038890063762664795}, "created": {"value": false, "score": 8.976459503173828e-05}, "shared": {"value": false, "score": 0.04958963394165039}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9997132420539856}, "created": {"value": false, "score": 0.0465703010559082}, "shared": {"value": false, "score": 0.04958963394165039}}, "references": [{"label": "15", "normalizedForm": "15", "refKey": 15}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "DSP", "normalizedForm": "DSP", "offsetStart": 67, "offsetEnd": 70}, "context": "In addition, to be able to calculate audio separately with a FAUST DSP independent from the browser audio context, we created an \"offline processor\" which will be used exclusively for getting the very first samples calculated by a DSP.", "mentionContextAttributes": {"used": {"value": false, "score": 0.022619903087615967}, "created": {"value": true, "score": 0.8531707525253296}, "shared": {"value": false, "score": 5.960464477539062e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9861841797828674}, "created": {"value": true, "score": 0.9997044205665588}, "shared": {"value": false, "score": 0.0060179829597473145}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MIDI", "normalizedForm": "MIDI", "offsetStart": 67, "offsetEnd": 71}, "context": "So, we emerged visualization, testing, and debugging tools such as MIDI/audio input simulation and output recording around the FAUST code editor to provide an integrated environment for DSP designing.", "mentionContextAttributes": {"used": {"value": false, "score": 8.14199447631836e-05}, "created": {"value": true, "score": 0.9927679300308228}, "shared": {"value": false, "score": 7.152557373046875e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.053231000900268555}, "created": {"value": true, "score": 0.9927679300308228}, "shared": {"value": false, "score": 8.702278137207031e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "code", "normalizedForm": "code", "offsetStart": 67, "offsetEnd": 71}, "context": "All these things are possible but they require changing the source code.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0006605982780456543}, "created": {"value": false, "score": 0.0034595131874084473}, "shared": {"value": false, "score": 0.0012747645378112793}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999884366989136}, "created": {"value": true, "score": 0.9957776069641113}, "shared": {"value": false, "score": 0.04958963394165039}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 67, "offsetEnd": 75}, "context": "Our first versions were developed in pure JavaScript using the W3C WebAudio API and are available to play with. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.027162671089172363}, "created": {"value": true, "score": 0.9684360027313232}, "shared": {"value": false, "score": 0.009909391403198242}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999572038650513}, "created": {"value": true, "score": 0.9997044205665588}, "shared": {"value": true, "score": 0.975178599357605}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAssembly", "normalizedForm": "WebAssembly", "offsetStart": 67, "offsetEnd": 78}, "language": {"rawForm": "JavaScript", "normalizedForm": "JavaScript"}, "context": "For the Web platform, two backends have been developed to generate WebAssembly text (so-called \"wast\" or \"wat\") and binary formats (so-called \"wasm\") [14]. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.00010037422180175781}, "created": {"value": false, "score": 0.0465703010559082}, "shared": {"value": false, "score": 3.6954879760742188e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9997132420539856}, "created": {"value": false, "score": 0.0465703010559082}, "shared": {"value": false, "score": 0.04958963394165039}}, "references": [{"label": "15", "normalizedForm": "15", "refKey": 15}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Web", "normalizedForm": "Web", "offsetStart": 69, "offsetEnd": 72}, "context": "Several prior developments have been done to use the language on the Web platform.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0004557967185974121}, "created": {"value": false, "score": 0.06971633434295654}, "shared": {"value": false, "score": 0.00011157989501953125}}, "documentContextAttributes": {"used": {"value": true, "score": 0.5932685136795044}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "DSP", "normalizedForm": "DSP", "offsetStart": 69, "offsetEnd": 72}, "context": "A dedicated GUI builder is integrated in the IDE that receives FAUST DSP's GUI definitions while it is compiled.", "mentionContextAttributes": {"used": {"value": false, "score": 0.015061259269714355}, "created": {"value": false, "score": 0.0001266002655029297}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9861841797828674}, "created": {"value": true, "score": 0.9997044205665588}, "shared": {"value": false, "score": 0.0060179829597473145}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 69, "offsetEnd": 77}, "context": "FAUST also allows us to circumvent many important limitations of the WebAudio standard, like the buffer size issues, as loops appearing in the graph of connected WebAudio nodes always introduce a delay of at least one buffer (128 samples), and thus one sample delay recursive algorithms cannot be expressed.", "mentionContextAttributes": {"used": {"value": false, "score": 7.56978988647461e-05}, "created": {"value": false, "score": 0.00046694278717041016}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999572038650513}, "created": {"value": true, "score": 0.9997044205665588}, "shared": {"value": true, "score": 0.975178599357605}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ScriptProcessor", "normalizedForm": "ScriptProcessor", "offsetStart": 69, "offsetEnd": 84}, "context": "The node generated by the FAUST compiler can be an AudioWorklet or a ScriptProcessor. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.008063077926635742}, "created": {"value": false, "score": 0.0003553628921508789}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.8635294437408447}, "created": {"value": false, "score": 0.0003553628921508789}, "shared": {"value": false, "score": 4.172325134277344e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 70, "offsetEnd": 75}, "context": "We also evoke our collaborative work: one team hatching and improving FAUST, the other working on the recreation of tube guitar amplifiers and pedalboards within Web browsers.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0016286969184875488}, "created": {"value": true, "score": 0.9996786117553711}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "AmpedStudio DAW", "normalizedForm": "AmpedStudio DAW", "offsetStart": 72, "offsetEnd": 87}, "context": "For example, some concluding tests have already been conducted with the AmpedStudio DAW. ", "mentionContextAttributes": {"used": {"value": true, "score": 0.9983356595039368}, "created": {"value": false, "score": 9.620189666748047e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9983356595039368}, "created": {"value": false, "score": 9.620189666748047e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "references": [{"label": "34", "normalizedForm": "34", "refKey": 0, "offsetStart": 35046, "offsetEnd": 35048}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Chrome", "normalizedForm": "Chrome", "offsetStart": 74, "offsetEnd": 80}, "context": "Without this delay node, Firefox browser stops rendering the graph, while Chrome browser does not complain but adds, behind the scenes, a 3ms delay (the minimum size of an audio buffer being 128 frames, hence the minimal delay of 128/sampling rate: roughly 3ms at 44.1kHz). ", "mentionContextAttributes": {"used": {"value": false, "score": 0.002291083335876465}, "created": {"value": false, "score": 4.470348358154297e-05}, "shared": {"value": false, "score": 1.6689300537109375e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.014267981052398682}, "created": {"value": false, "score": 4.470348358154297e-05}, "shared": {"value": false, "score": 1.6689300537109375e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Web", "normalizedForm": "Web", "offsetStart": 75, "offsetEnd": 78}, "context": "The development and porting of virtual instruments or audio effects on the Web is a hot topic.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00019305944442749023}, "created": {"value": true, "score": 0.9984492063522339}, "shared": {"value": false, "score": 6.318092346191406e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.5932685136795044}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Web", "normalizedForm": "Web", "offsetStart": 75, "offsetEnd": 78}, "context": "The plugin can also be published on a remote plugin server, using standard Web services; this is shown in the life cycle workflow from Fig. 8.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0024494528770446777}, "created": {"value": false, "score": 0.0002085566520690918}, "shared": {"value": false, "score": 0.004446208477020264}}, "documentContextAttributes": {"used": {"value": true, "score": 0.5932685136795044}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "W3C", "normalizedForm": "W3C", "offsetStart": 76, "offsetEnd": 79}, "context": "Once complete (DSP + GUI), the plugins are packaged in the form of standard W3C WebComponents and published on remote WAP plugin servers. ", "mentionContextAttributes": {"used": {"value": true, "score": 0.5952492952346802}, "created": {"value": false, "score": 0.00010669231414794922}, "shared": {"value": false, "score": 0.0003399848937988281}}, "documentContextAttributes": {"used": {"value": true, "score": 0.5952492952346802}, "created": {"value": true, "score": 0.9684360027313232}, "shared": {"value": false, "score": 0.009909391403198242}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST IDE", "normalizedForm": "FAUST IDE", "offsetStart": 78, "offsetEnd": 90}, "language": {"rawForm": "JavaScript", "normalizedForm": "JavaScript", "wikidataId": "Q2005", "offsetStart": 99, "offsetEnd": 109}, "context": "The compiler module generated by Emscripten was previously implemented in the FAUST IDE 11 using a JavaScript wrapper which allowed the application to compile and transform FAUST source code into a WebAudio node. ", "mentionContextAttributes": {"used": {"value": true, "score": 0.8382949233055115}, "created": {"value": false, "score": 0.004605889320373535}, "shared": {"value": false, "score": 2.6702880859375e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999884366989136}, "created": {"value": false, "score": 0.004605889320373535}, "shared": {"value": false, "score": 0.0060179829597473145}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 79, "offsetEnd": 84}, "context": "To properly simulate the tube stages, we looked for any prior art available in FAUST (e.g., in guitarix.lib", "mentionContextAttributes": {"used": {"value": true, "score": 0.9986825585365295}, "created": {"value": false, "score": 0.0009785890579223633}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 81, "offsetEnd": 86}, "context": "Thus it is impossible to get precise data in a specific buffer calculated by the FAUST DSP.", "mentionContextAttributes": {"used": {"value": false, "score": 0.18787062168121338}, "created": {"value": false, "score": 1.621246337890625e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "code", "normalizedForm": "code", "offsetStart": 83, "offsetEnd": 87}, "context": "It can be filled during the GUI edition process and used to generate the final GUI code (see Fig. 6).", "mentionContextAttributes": {"used": {"value": false, "score": 0.03367757797241211}, "created": {"value": false, "score": 0.00014793872833251953}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999884366989136}, "created": {"value": true, "score": 0.9957776069641113}, "shared": {"value": false, "score": 0.04958963394165039}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "code", "normalizedForm": "code", "offsetStart": 83, "offsetEnd": 87}, "context": "Most tube simulations, like the Guitarix tube simulations, relied heavily on C/C++ code, making it quite difficult to run them in Web browsers as the FAUST toolchain does not support yet hybrid FAUST/C source code with compilation target set to WebAudio/WebAssembly.", "mentionContextAttributes": {"used": {"value": true, "score": 0.5932685136795044}, "created": {"value": false, "score": 0.00018221139907836914}, "shared": {"value": false, "score": 9.059906005859375e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999884366989136}, "created": {"value": true, "score": 0.9957776069641113}, "shared": {"value": false, "score": 0.04958963394165039}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 84, "offsetEnd": 89}, "context": "The FAUST IDE allowed also for the creation of a bona-fide WebAudio plugin from the FAUST implementation of the PowerAmp (see Fig. 15).", "mentionContextAttributes": {"used": {"value": false, "score": 0.02437114715576172}, "created": {"value": false, "score": 0.0014548301696777344}, "shared": {"value": false, "score": 9.5367431640625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAssembly", "normalizedForm": "WebAssembly", "offsetStart": 84, "offsetEnd": 95}, "language": {"rawForm": "JavaScript", "normalizedForm": "JavaScript"}, "context": "Domain Specific Languages (DSL) for programming DSP algorithms that also compile to WebAssembly, like the mature Csound [5] with its set of WebAudio examples, 4 or the recently announced SOUL DSP language with its playground5 can be used. ", "mentionContextAttributes": {"used": {"value": false, "score": 7.128715515136719e-05}, "created": {"value": false, "score": 0.0007395148277282715}, "shared": {"value": false, "score": 2.7060508728027344e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9997132420539856}, "created": {"value": false, "score": 0.0465703010559082}, "shared": {"value": false, "score": 0.04958963394165039}}, "references": [{"label": "15", "normalizedForm": "15", "refKey": 15}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ChannelSplitterNode", "normalizedForm": "ChannelSplitterNode", "offsetStart": 84, "offsetEnd": 103}, "context": "First, the AnalyserNode has only one input, which means that it needs an additional ChannelSplitterNode to retrieve the correct channel from the FAUST DSP node. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.06559216976165771}, "created": {"value": false, "score": 1.1920928955078125e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.06559216976165771}, "created": {"value": false, "score": 1.1920928955078125e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 86, "offsetEnd": 94}, "context": "Additional JavaScript glue code is added to transform DSP modules in fully functional WebAudio nodes.", "mentionContextAttributes": {"used": {"value": false, "score": 0.004198968410491943}, "created": {"value": false, "score": 0.0005717873573303223}, "shared": {"value": false, "score": 2.86102294921875e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999572038650513}, "created": {"value": true, "score": 0.9997044205665588}, "shared": {"value": true, "score": 0.975178599357605}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAssembly", "normalizedForm": "WebAssembly", "offsetStart": 86, "offsetEnd": 97}, "language": {"rawForm": "JavaScript", "normalizedForm": "JavaScript", "wikidataId": "Q2005", "offsetStart": 61, "offsetEnd": 71}, "context": "As previously explained, the FAUST DSP code is compiled to a JavaScript wrapper and a WebAssembly module. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.1597970724105835}, "created": {"value": false, "score": 0.00026220083236694336}, "shared": {"value": false, "score": 2.181529998779297e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9997132420539856}, "created": {"value": false, "score": 0.0465703010559082}, "shared": {"value": false, "score": 0.04958963394165039}}, "references": [{"label": "15", "normalizedForm": "15", "refKey": 15}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "DSP", "normalizedForm": "DSP", "offsetStart": 87, "offsetEnd": 90}, "context": "Thus it is impossible to get precise data in a specific buffer calculated by the FAUST DSP.", "mentionContextAttributes": {"used": {"value": false, "score": 0.18787062168121338}, "created": {"value": false, "score": 1.621246337890625e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9861841797828674}, "created": {"value": true, "score": 0.9997044205665588}, "shared": {"value": false, "score": 0.0060179829597473145}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "code", "normalizedForm": "code", "offsetStart": 87, "offsetEnd": 91}, "context": "FAUST code can include abstract definitions of GUI controllers, such as in this source code extract: Here, the code describes the definition of two parameters named \"Fuzz\" and \"Level\" along with some data defining the default value, min, max, step, unit type, etc.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0006371140480041504}, "created": {"value": false, "score": 8.618831634521484e-05}, "shared": {"value": false, "score": 2.1457672119140625e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999884366989136}, "created": {"value": true, "score": 0.9957776069641113}, "shared": {"value": false, "score": 0.04958963394165039}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "code", "normalizedForm": "code", "offsetStart": 87, "offsetEnd": 91}, "context": "As measured in the FAUST IDE, using process = button(\"gate\") <: ((poweramp), _); style code and the embedded visualisation tools.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9999884366989136}, "created": {"value": false, "score": 9.298324584960938e-06}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999884366989136}, "created": {"value": true, "score": 0.9957776069641113}, "shared": {"value": false, "score": 0.04958963394165039}}}, {"type": "software", "software-type": "implicit", "software-name": {"rawForm": "code", "normalizedForm": "code", "offsetStart": 88, "offsetEnd": 92}, "context": "So far, we implemented only a generator for WebAudio plugins, using HTML/CSS/JavaScript code that complies with the W3C WebComponents specifications.1", "mentionContextAttributes": {"used": {"value": false, "score": 9.465217590332031e-05}, "created": {"value": true, "score": 0.9957776069641113}, "shared": {"value": false, "score": 1.8835067749023438e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999884366989136}, "created": {"value": true, "score": 0.9957776069641113}, "shared": {"value": false, "score": 0.04958963394165039}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 88, "offsetEnd": 93}, "context": "The second approach consists of getting the sample values directly with a callback in a FAUST DSP node.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0016224384307861328}, "created": {"value": false, "score": 3.421306610107422e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Windows", "normalizedForm": "Windows", "offsetStart": 88, "offsetEnd": 95}, "context": "The first thing the editor does is to ask the server for a list of supported platforms (Windows, macOS, Web, ...) and architectures (VST, Max, ...). ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0013607144355773926}, "created": {"value": false, "score": 0.000276029109954834}, "shared": {"value": false, "score": 0.00203019380569458}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0013607144355773926}, "created": {"value": false, "score": 0.000276029109954834}, "shared": {"value": false, "score": 0.00203019380569458}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAssembly", "normalizedForm": "WebAssembly", "offsetStart": 88, "offsetEnd": 99}, "language": {"rawForm": "JavaScript", "normalizedForm": "JavaScript"}, "context": "We chose the JavaScript version of KissFFT 14 for its high performance when compiled to WebAssembly. ", "mentionContextAttributes": {"used": {"value": true, "score": 0.9997132420539856}, "created": {"value": false, "score": 6.61611557006836e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9997132420539856}, "created": {"value": false, "score": 0.0465703010559082}, "shared": {"value": false, "score": 0.04958963394165039}}, "references": [{"label": "15", "normalizedForm": "15", "refKey": 15, "offsetStart": 15415, "offsetEnd": 15417}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Web Audio Modules", "normalizedForm": "Web Audio Modules", "offsetStart": 88, "offsetEnd": 105}, "context": "For more details about the WAP proposal, and how it is related to other approaches like Web Audio Modules (WAMs), WebAudio API eXtension (WAAX) [8], or JavaScript Audio Plugin (JSAP), see [2].", "mentionContextAttributes": {"used": {"value": false, "score": 0.0002002120018005371}, "created": {"value": false, "score": 0.002167642116546631}, "shared": {"value": false, "score": 2.5033950805664062e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0002002120018005371}, "created": {"value": false, "score": 0.002167642116546631}, "shared": {"value": false, "score": 2.5033950805664062e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Web", "normalizedForm": "Web", "offsetStart": 90, "offsetEnd": 93}, "context": "It aims at: (i) improving the interoperability of audio/MIDI plugins developed using pure Web APIs, (ii) porting existing native code bases, or (iii) using Domain Specific Languages (DSL).", "mentionContextAttributes": {"used": {"value": false, "score": 0.000102996826171875}, "created": {"value": false, "score": 0.018567919731140137}, "shared": {"value": false, "score": 7.271766662597656e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.5932685136795044}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "DSP", "normalizedForm": "DSP", "offsetStart": 91, "offsetEnd": 94}, "context": "\u2022 Offline: FAUST WebAudio wrapper offers an \"offline processor\" which is useful to allow a DSP to calculate the first samples at any sample rate independently of the actual audio context one.", "mentionContextAttributes": {"used": {"value": false, "score": 3.528594970703125e-05}, "created": {"value": false, "score": 4.124641418457031e-05}, "shared": {"value": false, "score": 7.152557373046875e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9861841797828674}, "created": {"value": true, "score": 0.9997044205665588}, "shared": {"value": false, "score": 0.0060179829597473145}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 91, "offsetEnd": 99}, "context": "In this way, our current JavaScript poweramp implementation (made of a dozen of high level WebAudio nodes) was replaced by a simple FAUST generated AudioWorklet node. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.003502190113067627}, "created": {"value": true, "score": 0.7540121078491211}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999572038650513}, "created": {"value": true, "score": 0.9997044205665588}, "shared": {"value": true, "score": 0.975178599357605}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Web", "normalizedForm": "Web", "offsetStart": 93, "offsetEnd": 96}, "context": "These examples serve as proof of concept for developers and also illustrate the power of the Web platform: plugins can be discovered from remote repositories, dynamically uploaded to a host WebApp and instantiated, connected together, etc.", "mentionContextAttributes": {"used": {"value": false, "score": 4.267692565917969e-05}, "created": {"value": false, "score": 0.003490269184112549}, "shared": {"value": false, "score": 0.0005362629890441895}}, "documentContextAttributes": {"used": {"value": true, "score": 0.5932685136795044}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 93, "offsetEnd": 98}, "context": "When embedded in the FAUST compiler running on the Web, they allow us to dynamically compile FAUST DSP programs as pure Web applications. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.004154384136199951}, "created": {"value": false, "score": 0.015300333499908447}, "shared": {"value": false, "score": 2.1696090698242188e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "DSP", "normalizedForm": "DSP", "offsetStart": 94, "offsetEnd": 97}, "context": "The second approach consists of getting the sample values directly with a callback in a FAUST DSP node.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0016224384307861328}, "created": {"value": false, "score": 3.421306610107422e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9861841797828674}, "created": {"value": true, "score": 0.9997044205665588}, "shared": {"value": false, "score": 0.0060179829597473145}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 94, "offsetEnd": 102}, "context": "These results can be seen/heard in a video we published online,30 using the online pedalboard WebAudio application. ", "mentionContextAttributes": {"used": {"value": true, "score": 0.9999572038650513}, "created": {"value": false, "score": 0.0007420182228088379}, "shared": {"value": false, "score": 0.05219435691833496}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999572038650513}, "created": {"value": true, "score": 0.9997044205665588}, "shared": {"value": true, "score": 0.975178599357605}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "DSP", "normalizedForm": "DSP", "offsetStart": 95, "offsetEnd": 98}, "context": "Architecture files are written (typically in C++ or JavaScript) to describe how to connect the DSP code to the external world.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0035167932510375977}, "created": {"value": true, "score": 0.7295897006988525}, "shared": {"value": false, "score": 1.430511474609375e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9861841797828674}, "created": {"value": true, "score": 0.9997044205665588}, "shared": {"value": false, "score": 0.0060179829597473145}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 95, "offsetEnd": 100}, "context": "This confirms a saving of 3ms in accordance with the difference of processing of loops between FAUST (sample-wise) and WebAudio API/JavaScript (block based).", "mentionContextAttributes": {"used": {"value": true, "score": 0.988264799118042}, "created": {"value": false, "score": 1.6689300537109375e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "code", "normalizedForm": "code", "offsetStart": 97, "offsetEnd": 101}, "context": "Many examples of audio effects have been ported to WAPs directly by copying and pasting existing code from the Guitarix 37 and the OWL pedal project, 38 or from various open-source projects, into the new FAUST online IDE.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0012140870094299316}, "created": {"value": false, "score": 0.00023299455642700195}, "shared": {"value": false, "score": 0.000102996826171875}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999884366989136}, "created": {"value": true, "score": 0.9957776069641113}, "shared": {"value": false, "score": 0.04958963394165039}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "macOS", "normalizedForm": "macOS", "offsetStart": 97, "offsetEnd": 102}, "context": "The first thing the editor does is to ask the server for a list of supported platforms (Windows, macOS, Web, ...) and architectures (VST, Max, ...). ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0013607144355773926}, "created": {"value": false, "score": 0.000276029109954834}, "shared": {"value": false, "score": 0.00203019380569458}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0013607144355773926}, "created": {"value": false, "score": 0.000276029109954834}, "shared": {"value": false, "score": 0.00203019380569458}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 97, "offsetEnd": 102}, "context": "For example, if you change the type of controller (i.e., slider to knob), it does not change the FAUST code back.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0010946989059448242}, "created": {"value": false, "score": 9.989738464355469e-05}, "shared": {"value": false, "score": 8.344650268554688e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "DSP", "normalizedForm": "DSP", "offsetStart": 99, "offsetEnd": 102}, "context": "When embedded in the FAUST compiler running on the Web, they allow us to dynamically compile FAUST DSP programs as pure Web applications.", "mentionContextAttributes": {"used": {"value": false, "score": 0.004154384136199951}, "created": {"value": false, "score": 0.015300333499908447}, "shared": {"value": false, "score": 2.1696090698242188e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9861841797828674}, "created": {"value": true, "score": 0.9997044205665588}, "shared": {"value": false, "score": 0.0060179829597473145}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "code", "normalizedForm": "code", "offsetStart": 99, "offsetEnd": 103}, "context": "Architecture files are written (typically in C++ or JavaScript) to describe how to connect the DSP code to the external world.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0035167932510375977}, "created": {"value": true, "score": 0.7295897006988525}, "shared": {"value": false, "score": 1.430511474609375e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999884366989136}, "created": {"value": true, "score": 0.9957776069641113}, "shared": {"value": false, "score": 0.04958963394165039}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "code", "normalizedForm": "code", "offsetStart": 99, "offsetEnd": 103}, "context": "This file system became important as the FAUST compiler searches for libraries and imported source code locally, or generates DSP code for other targets/architectures.", "mentionContextAttributes": {"used": {"value": false, "score": 9.739398956298828e-05}, "created": {"value": false, "score": 0.0002779364585876465}, "shared": {"value": false, "score": 1.2755393981933594e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999884366989136}, "created": {"value": true, "score": 0.9957776069641113}, "shared": {"value": false, "score": 0.04958963394165039}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "DSP", "normalizedForm": "DSP", "offsetStart": 100, "offsetEnd": 103}, "context": "We also think that the presented toolchain could be easily adapted to other plugin formats or audio DSP production tools.", "mentionContextAttributes": {"used": {"value": false, "score": 0.000586390495300293}, "created": {"value": true, "score": 0.9397081136703491}, "shared": {"value": false, "score": 4.4465065002441406e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9861841797828674}, "created": {"value": true, "score": 0.9997044205665588}, "shared": {"value": false, "score": 0.0060179829597473145}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Web", "normalizedForm": "Web", "offsetStart": 101, "offsetEnd": 104}, "context": "Deploying the resulting plugins in other host applications (like more traditional DAW running on the Web) should be straightforward if they comply with the WAP specification.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00012445449829101562}, "created": {"value": false, "score": 0.0003829002380371094}, "shared": {"value": false, "score": 5.960464477539062e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.5932685136795044}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "code", "normalizedForm": "code", "offsetStart": 101, "offsetEnd": 105}, "context": "With the rise of the more stable and better designed WebAssembly10 format in 2017 (a portable binary-code format for executable programs, firstly to be used on the Web, but also on native environments) as a replacement of asm.js, the previous work done with asm.js was adapted.", "mentionContextAttributes": {"used": {"value": false, "score": 9.751319885253906e-05}, "created": {"value": false, "score": 0.006427764892578125}, "shared": {"value": false, "score": 0.0005249381065368652}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999884366989136}, "created": {"value": true, "score": 0.9957776069641113}, "shared": {"value": false, "score": 0.04958963394165039}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAssembly", "normalizedForm": "WebAssembly", "offsetStart": 101, "offsetEnd": 112}, "language": {"rawForm": "JavaScript", "normalizedForm": "JavaScript"}, "context": "FAUST programs can be efficiently compiled to a variety of target programming languages, from C++ to WebAssembly.", "mentionContextAttributes": {"used": {"value": false, "score": 6.985664367675781e-05}, "created": {"value": false, "score": 0.00037419795989990234}, "shared": {"value": false, "score": 1.0967254638671875e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9997132420539856}, "created": {"value": false, "score": 0.0465703010559082}, "shared": {"value": false, "score": 0.04958963394165039}}, "references": [{"label": "15", "normalizedForm": "15", "refKey": 15}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "code", "normalizedForm": "code", "offsetStart": 103, "offsetEnd": 107}, "context": "The server maintains a cache, with a limited lifetime, to avoid unnecessary recompilations of the same code.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00046324729919433594}, "created": {"value": false, "score": 0.0006485581398010254}, "shared": {"value": false, "score": 5.960464477539062e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999884366989136}, "created": {"value": true, "score": 0.9957776069641113}, "shared": {"value": false, "score": 0.04958963394165039}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "code", "normalizedForm": "code", "offsetStart": 103, "offsetEnd": 107}, "context": "For example, if you change the type of controller (i.e., slider to knob), it does not change the FAUST code back.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0010946989059448242}, "created": {"value": false, "score": 9.989738464355469e-05}, "shared": {"value": false, "score": 8.344650268554688e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999884366989136}, "created": {"value": true, "score": 0.9957776069641113}, "shared": {"value": false, "score": 0.04958963394165039}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 103, "offsetEnd": 108}, "context": "has been designed, which can cross-compile executables binaries for most of the platforms supported by FAUST.", "mentionContextAttributes": {"used": {"value": false, "score": 2.6941299438476562e-05}, "created": {"value": true, "score": 0.9968701004981995}, "shared": {"value": false, "score": 1.1205673217773438e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Web", "normalizedForm": "Web", "offsetStart": 104, "offsetEnd": 107}, "context": "The first thing the editor does is to ask the server for a list of supported platforms (Windows, macOS, Web, ...) and architectures (VST, Max, ...). ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0013607144355773926}, "created": {"value": false, "score": 0.000276029109954834}, "shared": {"value": false, "score": 0.00203019380569458}}, "documentContextAttributes": {"used": {"value": true, "score": 0.5932685136795044}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio Plugins", "normalizedForm": "WebAudio Plugins", "offsetStart": 105, "offsetEnd": 121}, "context": "After a FAUST DSP is tested in the editor, users can export the DSP to different architectures including WebAudio Plugins (WAPs) which is compiled by an online compiling service (see Fig. 4). ", "mentionContextAttributes": {"used": {"value": false, "score": 0.00841522216796875}, "created": {"value": false, "score": 0.0001239776611328125}, "shared": {"value": false, "score": 0.002655923366546631}}, "documentContextAttributes": {"used": {"value": false, "score": 0.06438595056533813}, "created": {"value": true, "score": 0.9763948917388916}, "shared": {"value": false, "score": 0.002655923366546631}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "DSP", "normalizedForm": "DSP", "offsetStart": 106, "offsetEnd": 109}, "context": "In this paper, we presented the combined work of two teams deeply involved in the development of an audio DSP programming language and its complete ecosystem on the one hand, and the definition of a WebAudio plugin standard (WAP) and its complete surrounding environment on the other.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0007905960083007812}, "created": {"value": true, "score": 0.9997044205665588}, "shared": {"value": false, "score": 2.1457672119140625e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9861841797828674}, "created": {"value": true, "score": 0.9997044205665588}, "shared": {"value": false, "score": 0.0060179829597473145}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "code", "normalizedForm": "code", "offsetStart": 106, "offsetEnd": 110}, "context": "\u2022 Load WebAssembly version of the FAUST compiler and import its C functions into JavaScript \u2022 Compile the code: the input is the FAUST source code, the output is the compiled WebAssembly binary version with some related data \u2022 Load and wrap the module as a DSP processing function inside an AudioWorkletProcessor or a ScriptProcessor AudioNode", "mentionContextAttributes": {"used": {"value": true, "score": 0.8635293245315552}, "created": {"value": false, "score": 3.933906555175781e-06}, "shared": {"value": false, "score": 4.172325134277344e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999884366989136}, "created": {"value": true, "score": 0.9957776069641113}, "shared": {"value": false, "score": 0.04958963394165039}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "code", "normalizedForm": "code", "offsetStart": 106, "offsetEnd": 110}, "context": "However, having a way to build and customize a GUI this way is a great time encapsulated HTML/CSS/JS/WASM code without namespace conflicts.", "mentionContextAttributes": {"used": {"value": false, "score": 3.647804260253906e-05}, "created": {"value": false, "score": 0.000280916690826416}, "shared": {"value": false, "score": 1.3947486877441406e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999884366989136}, "created": {"value": true, "score": 0.9957776069641113}, "shared": {"value": false, "score": 0.04958963394165039}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "GUI Builder", "normalizedForm": "GUI Builder", "offsetStart": 107, "offsetEnd": 118}, "context": "For example, the compilation chain of the Faust code on remote servers will be fully characterized and the GUI Builder will have a full section detailing a \"practical case\" of design with the full recreation of a novel tube guitar amplifiers PowerAmp stage simulation using a Faust approach. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0006129741668701172}, "created": {"value": false, "score": 0.0002257227897644043}, "shared": {"value": false, "score": 8.344650268554688e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0006129741668701172}, "created": {"value": false, "score": 0.0002257227897644043}, "shared": {"value": false, "score": 8.344650268554688e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 108, "offsetEnd": 113}, "context": "34 In addition, we asked a group of six audio plugin developers, with different level of expertise with the FAUST language, to follow a tutorial 35 that guided them through the creation and publication of a phaser effect only using the IDE.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9968382120132446}, "created": {"value": false, "score": 0.030676186084747314}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "implicit", "software-name": {"rawForm": "code", "normalizedForm": "code", "offsetStart": 110, "offsetEnd": 114}, "context": "C/C++ written code can be transpiled to WebAssembly using Emscripten [4] and wrapped by additional JavaScript code to become ready-to-use audio nodes. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.007905542850494385}, "created": {"value": false, "score": 2.300739288330078e-05}, "shared": {"value": false, "score": 0.00020188093185424805}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999884366989136}, "created": {"value": true, "score": 0.9957776069641113}, "shared": {"value": false, "score": 0.04958963394165039}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 110, "offsetEnd": 118}, "context": "This paper is a further extended, fully revamped version of an awarded presentation that was given during the WebAudio Conference 2019 [9].", "mentionContextAttributes": {"used": {"value": false, "score": 0.020421147346496582}, "created": {"value": false, "score": 0.32666724920272827}, "shared": {"value": false, "score": 7.152557373046875e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999572038650513}, "created": {"value": true, "score": 0.9997044205665588}, "shared": {"value": true, "score": 0.975178599357605}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Web", "normalizedForm": "Web", "offsetStart": 111, "offsetEnd": 114}, "context": "Several initiatives are emerging, from industry-driven ones (e.g., Propellerhead Rack Extension running on the Web 2 ), to more community based open-source projects [1].", "mentionContextAttributes": {"used": {"value": false, "score": 0.0005037784576416016}, "created": {"value": false, "score": 0.02792292833328247}, "shared": {"value": false, "score": 0.0005590319633483887}}, "documentContextAttributes": {"used": {"value": true, "score": 0.5932685136795044}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "code", "normalizedForm": "code", "offsetStart": 111, "offsetEnd": 115}, "context": "FAUST code can include abstract definitions of GUI controllers, such as in this source code extract: Here, the code describes the definition of two parameters named \"Fuzz\" and \"Level\" along with some data defining the default value, min, max, step, unit type, etc.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0006371140480041504}, "created": {"value": false, "score": 8.618831634521484e-05}, "shared": {"value": false, "score": 2.1457672119140625e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999884366989136}, "created": {"value": true, "score": 0.9957776069641113}, "shared": {"value": false, "score": 0.04958963394165039}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Emscripten", "normalizedForm": "Emscripten", "offsetStart": 111, "offsetEnd": 121}, "context": "By adding an asm.js9 backend in the compiler, and compiling the compiler itself in asm.js/JavaScript using the Emscripten transpiler, the dynamic generation of WebAudio nodes from FAUST code has been demonstrated [12,13].", "mentionContextAttributes": {"used": {"value": false, "score": 0.06702923774719238}, "created": {"value": false, "score": 0.00029921531677246094}, "shared": {"value": false, "score": 3.2186508178710938e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.8382949233055115}, "created": {"value": true, "score": 0.8182610273361206}, "shared": {"value": false, "score": 0.001791834831237793}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 112, "offsetEnd": 117}, "context": "So as to fully illustrate the FAUST online framework, a case study is detailed with complete workflow, from the FAUST DSP source code written and tested in a fully functional online editor, to a self-contained plugin running in a separate host application.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0007249712944030762}, "created": {"value": false, "score": 0.008119642734527588}, "shared": {"value": false, "score": 2.181529998779297e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "AudioWorkletNode", "normalizedForm": "AudioWorkletNode", "offsetStart": 112, "offsetEnd": 128}, "context": "An AudioWorklet is composed of a JavaScript wrapper called the AudioWorkletProcessor that communicates with the AudioWorkletNode [15].", "mentionContextAttributes": {"used": {"value": false, "score": 0.004525244235992432}, "created": {"value": false, "score": 0.00015079975128173828}, "shared": {"value": false, "score": 1.5497207641601562e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.004525244235992432}, "created": {"value": false, "score": 0.00015079975128173828}, "shared": {"value": false, "score": 1.5497207641601562e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio API eXtension (", "normalizedForm": "WebAudio API eXtension (", "offsetStart": 114, "offsetEnd": 138}, "context": "For more details about the WAP proposal, and how it is related to other approaches like Web Audio Modules (WAMs), WebAudio API eXtension (WAAX) [8], or JavaScript Audio Plugin (JSAP), see [2].", "mentionContextAttributes": {"used": {"value": false, "score": 0.0002002120018005371}, "created": {"value": false, "score": 0.002167642116546631}, "shared": {"value": false, "score": 2.5033950805664062e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0002002120018005371}, "created": {"value": false, "score": 0.002167642116546631}, "shared": {"value": false, "score": 2.5033950805664062e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MIDI", "normalizedForm": "MIDI", "offsetStart": 116, "offsetEnd": 120}, "context": "7 As of last year, WAP now includes support for pure MIDI plugins (a GM midi synthesizer, virtual midi keyboards, a MIDI event monitoring plugin, etc 8 ).", "mentionContextAttributes": {"used": {"value": false, "score": 7.390975952148438e-05}, "created": {"value": false, "score": 0.0003929734230041504}, "shared": {"value": false, "score": 2.0265579223632812e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.053231000900268555}, "created": {"value": true, "score": 0.9927679300308228}, "shared": {"value": false, "score": 8.702278137207031e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 116, "offsetEnd": 121}, "context": "\u2022 Continuous: similar to normal audio scopes, this mode draws in real time the most recent samples processed by the FAUST DSP.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0005384087562561035}, "created": {"value": false, "score": 1.1801719665527344e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 117, "offsetEnd": 122}, "context": "The FAUST compiler is organized in successive stages, from the DSP block diagram to signals, and finally to the FIR (FAUST Imperative Representation) which is then translated into several target languages.", "mentionContextAttributes": {"used": {"value": false, "score": 0.15099084377288818}, "created": {"value": false, "score": 0.0002219080924987793}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "SoundTrap", "normalizedForm": "SoundTrap", "offsetStart": 117, "offsetEnd": 126}, "context": "With the emergence of Web-based audio software such as digital audio workstations (DAWs) developed by companies like SoundTrap, BandLab, or AmpedStudio, it became desirable to have a standard to make WebAudio instruments and effects interoperable as plugins compatible with these DAWs, and more generally with any compatible host software.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0008279085159301758}, "created": {"value": false, "score": 0.2612989544868469}, "shared": {"value": false, "score": 7.104873657226562e-05}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0008279085159301758}, "created": {"value": false, "score": 0.2612989544868469}, "shared": {"value": false, "score": 7.104873657226562e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "DSP", "normalizedForm": "DSP", "offsetStart": 118, "offsetEnd": 121}, "context": "So as to fully illustrate the FAUST online framework, a case study is detailed with complete workflow, from the FAUST DSP source code written and tested in a fully functional online editor, to a self-contained plugin running in a separate host application.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0007249712944030762}, "created": {"value": false, "score": 0.008119642734527588}, "shared": {"value": false, "score": 2.181529998779297e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9861841797828674}, "created": {"value": true, "score": 0.9997044205665588}, "shared": {"value": false, "score": 0.0060179829597473145}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio API", "normalizedForm": "WebAudio API", "offsetStart": 119, "offsetEnd": 131}, "context": "This confirms a saving of 3ms in accordance with the difference of processing of loops between FAUST (sample-wise) and WebAudio API/JavaScript (block based).", "mentionContextAttributes": {"used": {"value": true, "score": 0.988264799118042}, "created": {"value": false, "score": 1.6689300537109375e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.988264799118042}, "created": {"value": false, "score": 0.3308643102645874}, "shared": {"value": false, "score": 7.927417755126953e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Web", "normalizedForm": "Web", "offsetStart": 120, "offsetEnd": 123}, "context": "When embedded in the FAUST compiler running on the Web, they allow us to dynamically compile FAUST DSP programs as pure Web applications.", "mentionContextAttributes": {"used": {"value": false, "score": 0.004154384136199951}, "created": {"value": false, "score": 0.015300333499908447}, "shared": {"value": false, "score": 2.1696090698242188e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.5932685136795044}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 121, "offsetEnd": 126}, "context": "It runs in a docker container built on top of Ubuntu 16.04 to which are added all the packages needed to compile and use FAUST, the FAUST distribution itself, all the needed SDKs, and several cross-compilers.", "mentionContextAttributes": {"used": {"value": false, "score": 0.47160959243774414}, "created": {"value": false, "score": 0.00011801719665527344}, "shared": {"value": false, "score": 1.7881393432617188e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "DSP", "normalizedForm": "DSP", "offsetStart": 122, "offsetEnd": 125}, "context": "This is the reason why we built a new online IDE (see Fig. 1) that provides more information and details on the generated DSP through graphical representation in a Web page (e.g.", "mentionContextAttributes": {"used": {"value": false, "score": 4.887580871582031e-05}, "created": {"value": true, "score": 0.9842685461044312}, "shared": {"value": false, "score": 0.005809426307678223}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9861841797828674}, "created": {"value": true, "score": 0.9997044205665588}, "shared": {"value": false, "score": 0.0060179829597473145}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "DSP", "normalizedForm": "DSP", "offsetStart": 122, "offsetEnd": 125}, "context": "\u2022 Continuous: similar to normal audio scopes, this mode draws in real time the most recent samples processed by the FAUST DSP.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0005384087562561035}, "created": {"value": false, "score": 1.1801719665527344e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9861841797828674}, "created": {"value": true, "score": 0.9997044205665588}, "shared": {"value": false, "score": 0.0060179829597473145}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "DSP", "normalizedForm": "DSP", "offsetStart": 124, "offsetEnd": 127}, "context": "From this dialog, a WAP plugin generated by the FAUST IDE can also be downloaded as a zipped archive file that contains the DSP WebAssembly module, the standard JSON 18 WAP descriptor and the GUI code (HTML/CSS/JavaScript) wrapped as a WebComponent. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.01877814531326294}, "created": {"value": false, "score": 6.318092346191406e-06}, "shared": {"value": false, "score": 0.0060179829597473145}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9861841797828674}, "created": {"value": true, "score": 0.9997044205665588}, "shared": {"value": false, "score": 0.0060179829597473145}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MIDI", "normalizedForm": "MIDI", "offsetStart": 125, "offsetEnd": 129}, "context": "Now, the short term goals of the authors are to complete and stabilize the presented workflow, to add support for polyphonic MIDI controllable instrument plugins, and to develop more features within the WAP GUI Builder that currently provides basic editing tools.", "mentionContextAttributes": {"used": {"value": false, "score": 6.377696990966797e-05}, "created": {"value": true, "score": 0.7246595025062561}, "shared": {"value": false, "score": 8.702278137207031e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.053231000900268555}, "created": {"value": true, "score": 0.9927679300308228}, "shared": {"value": false, "score": 8.702278137207031e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "DSP", "normalizedForm": "DSP", "offsetStart": 126, "offsetEnd": 129}, "context": "This file system became important as the FAUST compiler searches for libraries and imported source code locally, or generates DSP code for other targets/architectures.", "mentionContextAttributes": {"used": {"value": false, "score": 9.739398956298828e-05}, "created": {"value": false, "score": 0.0002779364585876465}, "shared": {"value": false, "score": 1.2755393981933594e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9861841797828674}, "created": {"value": true, "score": 0.9997044205665588}, "shared": {"value": false, "score": 0.0060179829597473145}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 127, "offsetEnd": 132}, "context": "So, we emerged visualization, testing, and debugging tools such as MIDI/audio input simulation and output recording around the FAUST code editor to provide an integrated environment for DSP designing.", "mentionContextAttributes": {"used": {"value": false, "score": 8.14199447631836e-05}, "created": {"value": true, "score": 0.9927679300308228}, "shared": {"value": false, "score": 7.152557373046875e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "BandLab", "normalizedForm": "BandLab", "offsetStart": 128, "offsetEnd": 135}, "context": "With the emergence of Web-based audio software such as digital audio workstations (DAWs) developed by companies like SoundTrap, BandLab, or AmpedStudio, it became desirable to have a standard to make WebAudio instruments and effects interoperable as plugins compatible with these DAWs, and more generally with any compatible host software.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0008279085159301758}, "created": {"value": false, "score": 0.2612989544868469}, "shared": {"value": false, "score": 7.104873657226562e-05}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0008279085159301758}, "created": {"value": false, "score": 0.2612989544868469}, "shared": {"value": false, "score": 7.104873657226562e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAssembly", "normalizedForm": "WebAssembly", "offsetStart": 128, "offsetEnd": 139}, "language": {"rawForm": "JavaScript", "normalizedForm": "JavaScript"}, "context": "From this dialog, a WAP plugin generated by the FAUST IDE can also be downloaded as a zipped archive file that contains the DSP WebAssembly module, the standard JSON 18 WAP descriptor and the GUI code (HTML/CSS/JavaScript) wrapped as a WebComponent. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.01877814531326294}, "created": {"value": false, "score": 6.318092346191406e-06}, "shared": {"value": false, "score": 0.0060179829597473145}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9997132420539856}, "created": {"value": false, "score": 0.0465703010559082}, "shared": {"value": false, "score": 0.04958963394165039}}, "references": [{"label": "15", "normalizedForm": "15", "refKey": 15}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "code", "normalizedForm": "code", "offsetStart": 129, "offsetEnd": 133}, "context": "It aims at: (i) improving the interoperability of audio/MIDI plugins developed using pure Web APIs, (ii) porting existing native code bases, or (iii) using Domain Specific Languages (DSL).", "mentionContextAttributes": {"used": {"value": false, "score": 0.000102996826171875}, "created": {"value": false, "score": 0.018567919731140137}, "shared": {"value": false, "score": 7.271766662597656e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999884366989136}, "created": {"value": true, "score": 0.9957776069641113}, "shared": {"value": false, "score": 0.04958963394165039}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "code", "normalizedForm": "code", "offsetStart": 129, "offsetEnd": 133}, "context": "So as to fully illustrate the FAUST online framework, a case study is detailed with complete workflow, from the FAUST DSP source code written and tested in a fully functional online editor, to a self-contained plugin running in a separate host application.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0007249712944030762}, "created": {"value": false, "score": 0.008119642734527588}, "shared": {"value": false, "score": 2.181529998779297e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999884366989136}, "created": {"value": true, "score": 0.9957776069641113}, "shared": {"value": false, "score": 0.04958963394165039}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 129, "offsetEnd": 134}, "context": "\u2022 Load WebAssembly version of the FAUST compiler and import its C functions into JavaScript \u2022 Compile the code: the input is the FAUST source code, the output is the compiled WebAssembly binary version with some related data \u2022 Load and wrap the module as a DSP processing function inside an AudioWorkletProcessor or a ScriptProcessor AudioNode", "mentionContextAttributes": {"used": {"value": true, "score": 0.8635293245315552}, "created": {"value": false, "score": 3.933906555175781e-06}, "shared": {"value": false, "score": 4.172325134277344e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Web", "normalizedForm": "Web", "offsetStart": 130, "offsetEnd": 133}, "context": "Most tube simulations, like the Guitarix tube simulations, relied heavily on C/C++ code, making it quite difficult to run them in Web browsers as the FAUST toolchain does not support yet hybrid FAUST/C source code with compilation target set to WebAudio/WebAssembly.", "mentionContextAttributes": {"used": {"value": true, "score": 0.5932685136795044}, "created": {"value": false, "score": 0.00018221139907836914}, "shared": {"value": false, "score": 9.059906005859375e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.5932685136795044}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "code", "normalizedForm": "code", "offsetStart": 130, "offsetEnd": 134}, "context": "This file system became important as the FAUST compiler searches for libraries and imported source code locally, or generates DSP code for other targets/architectures.", "mentionContextAttributes": {"used": {"value": false, "score": 9.739398956298828e-05}, "created": {"value": false, "score": 0.0002779364585876465}, "shared": {"value": false, "score": 1.2755393981933594e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999884366989136}, "created": {"value": true, "score": 0.9957776069641113}, "shared": {"value": false, "score": 0.04958963394165039}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 132, "offsetEnd": 137}, "context": "It runs in a docker container built on top of Ubuntu 16.04 to which are added all the packages needed to compile and use FAUST, the FAUST distribution itself, all the needed SDKs, and several cross-compilers.", "mentionContextAttributes": {"used": {"value": false, "score": 0.47160959243774414}, "created": {"value": false, "score": 0.00011801719665527344}, "shared": {"value": false, "score": 1.7881393432617188e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 132, "offsetEnd": 137}, "context": "In this way, our current JavaScript poweramp implementation (made of a dozen of high level WebAudio nodes) was replaced by a simple FAUST generated AudioWorklet node.", "mentionContextAttributes": {"used": {"value": false, "score": 0.003502190113067627}, "created": {"value": true, "score": 0.7540121078491211}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "code", "normalizedForm": "code", "offsetStart": 133, "offsetEnd": 137}, "context": "So, we emerged visualization, testing, and debugging tools such as MIDI/audio input simulation and output recording around the FAUST code editor to provide an integrated environment for DSP designing.", "mentionContextAttributes": {"used": {"value": false, "score": 8.14199447631836e-05}, "created": {"value": true, "score": 0.9927679300308228}, "shared": {"value": false, "score": 7.152557373046875e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999884366989136}, "created": {"value": true, "score": 0.9957776069641113}, "shared": {"value": false, "score": 0.04958963394165039}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Web", "normalizedForm": "Web", "offsetStart": 136, "offsetEnd": 139}, "context": "save/restore its state, etc.), or discovered by host web applications (e.g., DAWs, etc.) One of these hosts is our \"virtual pedalboard\" Web application [16], a host for WAP plugins we developed to showcase the WAP standard (see Fig. 10), that targets guitar and keyboard players.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0004343390464782715}, "created": {"value": false, "score": 0.08619177341461182}, "shared": {"value": false, "score": 1.8477439880371094e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.5932685136795044}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "DSP", "normalizedForm": "DSP", "offsetStart": 139, "offsetEnd": 142}, "context": "\u2022 All options related to FAUST code compilation are located using controllers from the left sidebar; \u2022 All options and displays related to DSP runtime, such as MIDI, audio inputs, and quick signal probing are placed in the right sidebar; \u2022 The remaining central zone of the page is divided into two parts with configurable heights: a source code editor on the top and a multi-tab display panel which can display the logs from the compiler, a FAUST block diagram corresponding to the DSP code, a larger signal scope, a running GUI of the plugin being developed, and finally, a GUI builder/exporter for designing the user interface of the WAP plugin version of the code, usable in external host applications.", "mentionContextAttributes": {"used": {"value": false, "score": 0.053231000900268555}, "created": {"value": false, "score": 4.0531158447265625e-06}, "shared": {"value": false, "score": 4.887580871582031e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9861841797828674}, "created": {"value": true, "score": 0.9997044205665588}, "shared": {"value": false, "score": 0.0060179829597473145}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 140, "offsetEnd": 148}, "context": "Domain Specific Languages (DSL) for programming DSP algorithms that also compile to WebAssembly, like the mature Csound [5] with its set of WebAudio examples, 4 or the recently announced SOUL DSP language with its playground5 can be used. ", "mentionContextAttributes": {"used": {"value": false, "score": 7.128715515136719e-05}, "created": {"value": false, "score": 0.0007395148277282715}, "shared": {"value": false, "score": 2.7060508728027344e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999572038650513}, "created": {"value": true, "score": 0.9997044205665588}, "shared": {"value": true, "score": 0.975178599357605}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 140, "offsetEnd": 148}, "context": "To this end, some initiatives have been proposed [6,7] and with other groups of researchers and developers we made in 2018 a proposal for a WebAudio plugin standard called WAP (WebAudio Plugins), which includes an API specification, an SDK, online plugin validation tools, and a series of plugin examples written in JavaScript but also with other languages 6 .", "mentionContextAttributes": {"used": {"value": false, "score": 0.00025027990341186523}, "created": {"value": true, "score": 0.9763948917388916}, "shared": {"value": false, "score": 0.0006591677665710449}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999572038650513}, "created": {"value": true, "score": 0.9997044205665588}, "shared": {"value": true, "score": 0.975178599357605}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "AmpedStudio", "normalizedForm": "AmpedStudio", "offsetStart": 140, "offsetEnd": 151}, "context": "With the emergence of Web-based audio software such as digital audio workstations (DAWs) developed by companies like SoundTrap, BandLab, or AmpedStudio, it became desirable to have a standard to make WebAudio instruments and effects interoperable as plugins compatible with these DAWs, and more generally with any compatible host software.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0008279085159301758}, "created": {"value": false, "score": 0.2612989544868469}, "shared": {"value": false, "score": 7.104873657226562e-05}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0008279085159301758}, "created": {"value": false, "score": 0.2612989544868469}, "shared": {"value": false, "score": 7.104873657226562e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "code", "normalizedForm": "code", "offsetStart": 142, "offsetEnd": 146}, "context": "\u2022 Load WebAssembly version of the FAUST compiler and import its C functions into JavaScript \u2022 Compile the code: the input is the FAUST source code, the output is the compiled WebAssembly binary version with some related data \u2022 Load and wrap the module as a DSP processing function inside an AudioWorkletProcessor or a ScriptProcessor AudioNode", "mentionContextAttributes": {"used": {"value": true, "score": 0.8635293245315552}, "created": {"value": false, "score": 3.933906555175781e-06}, "shared": {"value": false, "score": 4.172325134277344e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999884366989136}, "created": {"value": true, "score": 0.9957776069641113}, "shared": {"value": false, "score": 0.04958963394165039}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 142, "offsetEnd": 147}, "context": "In this example, all virtual pedal effects at the bottom of the screen have been coded and compiled with their GUI designed and tested in the FAUST IDE.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9997839331626892}, "created": {"value": false, "score": 0.0008006691932678223}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 145, "offsetEnd": 150}, "context": "First, the AnalyserNode has only one input, which means that it needs an additional ChannelSplitterNode to retrieve the correct channel from the FAUST DSP node.", "mentionContextAttributes": {"used": {"value": false, "score": 0.06559216976165771}, "created": {"value": false, "score": 1.1920928955078125e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Web", "normalizedForm": "Web", "offsetStart": 146, "offsetEnd": 149}, "context": "You can picture the WAP plugins as images in an HTML document, their URL is sufficient, and can be dynamically retrieved using APIs from a remote Web Service.", "mentionContextAttributes": {"used": {"value": false, "score": 0.028300046920776367}, "created": {"value": false, "score": 7.712841033935547e-05}, "shared": {"value": false, "score": 0.0012578368186950684}}, "documentContextAttributes": {"used": {"value": true, "score": 0.5932685136795044}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 147, "offsetEnd": 155}, "context": "This limitation was encountered in our previous works on the implementation of feedback loops in the signal chain using pure JavaScript high-level WebAudio nodes.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0014076828956604004}, "created": {"value": true, "score": 0.9950207471847534}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999572038650513}, "created": {"value": true, "score": 0.9997044205665588}, "shared": {"value": true, "score": 0.975178599357605}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "AudioWorklet", "normalizedForm": "AudioWorklet", "offsetStart": 148, "offsetEnd": 160}, "context": "In this way, our current JavaScript poweramp implementation (made of a dozen of high level WebAudio nodes) was replaced by a simple FAUST generated AudioWorklet node. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.003502190113067627}, "created": {"value": true, "score": 0.7540121078491211}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.025378406047821045}, "created": {"value": true, "score": 0.7540121078491211}, "shared": {"value": false, "score": 7.927417755126953e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 149, "offsetEnd": 154}, "context": "The first step of the evaluation were careful measurements and critical listening to assess the dynamical and harmonic possible shortcomings of this FAUST implementation in standalone mode, tweaking the different parameters (i.e., master volume, presence, NFB gain, presence, transfer function parameters), and also comparing its behavior with our WebAudio/JavaScript implementation.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9990653395652771}, "created": {"value": false, "score": 0.003443479537963867}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 150, "offsetEnd": 155}, "context": "Most tube simulations, like the Guitarix tube simulations, relied heavily on C/C++ code, making it quite difficult to run them in Web browsers as the FAUST toolchain does not support yet hybrid FAUST/C source code with compilation target set to WebAudio/WebAssembly.", "mentionContextAttributes": {"used": {"value": true, "score": 0.5932685136795044}, "created": {"value": false, "score": 0.00018221139907836914}, "shared": {"value": false, "score": 9.059906005859375e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "DSP", "normalizedForm": "DSP", "offsetStart": 151, "offsetEnd": 154}, "context": "First, the AnalyserNode has only one input, which means that it needs an additional ChannelSplitterNode to retrieve the correct channel from the FAUST DSP node.", "mentionContextAttributes": {"used": {"value": false, "score": 0.06559216976165771}, "created": {"value": false, "score": 1.1920928955078125e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9861841797828674}, "created": {"value": true, "score": 0.9997044205665588}, "shared": {"value": false, "score": 0.0060179829597473145}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 151, "offsetEnd": 156}, "context": "In the next sections, we will focus on the new online IDE we developed, that is well suited for coding, testing, and publishing WAP plugins written in FAUST, directly in a Web browser. ", "mentionContextAttributes": {"used": {"value": false, "score": 8.96453857421875e-05}, "created": {"value": true, "score": 0.9994072914123535}, "shared": {"value": false, "score": 0.002149343490600586}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "DSP", "normalizedForm": "DSP", "offsetStart": 153, "offsetEnd": 156}, "context": "These nodes are connectable with other WebAudio nodes to create an audio processing graph, and are designed to allow the development of custom low-level DSP algorithms.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00022393465042114258}, "created": {"value": false, "score": 0.09872555732727051}, "shared": {"value": false, "score": 2.0265579223632812e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9861841797828674}, "created": {"value": true, "score": 0.9997044205665588}, "shared": {"value": false, "score": 0.0060179829597473145}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MIDI", "normalizedForm": "MIDI", "offsetStart": 160, "offsetEnd": 164}, "context": "\u2022 All options related to FAUST code compilation are located using controllers from the left sidebar; \u2022 All options and displays related to DSP runtime, such as MIDI, audio inputs, and quick signal probing are placed in the right sidebar; \u2022 The remaining central zone of the page is divided into two parts with configurable heights: a source code editor on the top and a multi-tab display panel which can display the logs from the compiler, a FAUST block diagram corresponding to the DSP code, a larger signal scope, a running GUI of the plugin being developed, and finally, a GUI builder/exporter for designing the user interface of the WAP plugin version of the code, usable in external host applications.", "mentionContextAttributes": {"used": {"value": false, "score": 0.053231000900268555}, "created": {"value": false, "score": 4.0531158447265625e-06}, "shared": {"value": false, "score": 4.887580871582031e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.053231000900268555}, "created": {"value": true, "score": 0.9927679300308228}, "shared": {"value": false, "score": 8.702278137207031e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 160, "offsetEnd": 168}, "context": "By adding an asm.js9 backend in the compiler, and compiling the compiler itself in asm.js/JavaScript using the Emscripten transpiler, the dynamic generation of WebAudio nodes from FAUST code has been demonstrated [12,13].", "mentionContextAttributes": {"used": {"value": false, "score": 0.06702923774719238}, "created": {"value": false, "score": 0.00029921531677246094}, "shared": {"value": false, "score": 3.2186508178710938e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999572038650513}, "created": {"value": true, "score": 0.9997044205665588}, "shared": {"value": true, "score": 0.975178599357605}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Web", "normalizedForm": "Web", "offsetStart": 162, "offsetEnd": 165}, "context": "We also evoke our collaborative work: one team hatching and improving FAUST, the other working on the recreation of tube guitar amplifiers and pedalboards within Web browsers.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0016286969184875488}, "created": {"value": true, "score": 0.9996786117553711}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.5932685136795044}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 162, "offsetEnd": 170}, "context": "FAUST also allows us to circumvent many important limitations of the WebAudio standard, like the buffer size issues, as loops appearing in the graph of connected WebAudio nodes always introduce a delay of at least one buffer (128 samples), and thus one sample delay recursive algorithms cannot be expressed.", "mentionContextAttributes": {"used": {"value": false, "score": 7.56978988647461e-05}, "created": {"value": false, "score": 0.00046694278717041016}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999572038650513}, "created": {"value": true, "score": 0.9997044205665588}, "shared": {"value": true, "score": 0.975178599357605}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "code", "normalizedForm": "code", "offsetStart": 163, "offsetEnd": 167}, "context": "This first version however, has been considered as \"very useful\" for prototyping rapidly an audio plugin, prior to polishing its GUI by hand, editing the HTML/CSS code.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00021380186080932617}, "created": {"value": false, "score": 0.0006505846977233887}, "shared": {"value": false, "score": 8.106231689453125e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999884366989136}, "created": {"value": true, "score": 0.9957776069641113}, "shared": {"value": false, "score": 0.04958963394165039}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Audio Plugin (", "normalizedForm": "Audio Plugin (", "offsetStart": 163, "offsetEnd": 177}, "context": "For more details about the WAP proposal, and how it is related to other approaches like Web Audio Modules (WAMs), WebAudio API eXtension (WAAX) [8], or JavaScript Audio Plugin (JSAP), see [2].", "mentionContextAttributes": {"used": {"value": false, "score": 0.0002002120018005371}, "created": {"value": false, "score": 0.002167642116546631}, "shared": {"value": false, "score": 2.5033950805664062e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0002002120018005371}, "created": {"value": false, "score": 0.002167642116546631}, "shared": {"value": false, "score": 2.5033950805664062e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Web", "normalizedForm": "Web", "offsetStart": 164, "offsetEnd": 167}, "context": "With the rise of the more stable and better designed WebAssembly10 format in 2017 (a portable binary-code format for executable programs, firstly to be used on the Web, but also on native environments) as a replacement of asm.js, the previous work done with asm.js was adapted.", "mentionContextAttributes": {"used": {"value": false, "score": 9.751319885253906e-05}, "created": {"value": false, "score": 0.006427764892578125}, "shared": {"value": false, "score": 0.0005249381065368652}}, "documentContextAttributes": {"used": {"value": true, "score": 0.5932685136795044}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Web", "normalizedForm": "Web", "offsetStart": 164, "offsetEnd": 167}, "context": "This is the reason why we built a new online IDE (see Fig. 1) that provides more information and details on the generated DSP through graphical representation in a Web page (e.g.", "mentionContextAttributes": {"used": {"value": false, "score": 4.887580871582031e-05}, "created": {"value": true, "score": 0.9842685461044312}, "shared": {"value": false, "score": 0.005809426307678223}}, "documentContextAttributes": {"used": {"value": true, "score": 0.5932685136795044}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Web", "normalizedForm": "Web", "offsetStart": 172, "offsetEnd": 175}, "context": "In the next sections, we will focus on the new online IDE we developed, that is well suited for coding, testing, and publishing WAP plugins written in FAUST, directly in a Web browser.", "mentionContextAttributes": {"used": {"value": false, "score": 8.96453857421875e-05}, "created": {"value": true, "score": 0.9994072914123535}, "shared": {"value": false, "score": 0.002149343490600586}}, "documentContextAttributes": {"used": {"value": true, "score": 0.5932685136795044}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Firefox", "normalizedForm": "Firefox", "offsetStart": 172, "offsetEnd": 179}, "context": "With the current limitations, and quite un-consistently, this 3ms delay in the loopso as to conform to the specsbrings also slightly different coloring of the amps between Firefox and Chrome.", "mentionContextAttributes": {"used": {"value": false, "score": 0.014267981052398682}, "created": {"value": false, "score": 2.110004425048828e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.014267981052398682}, "created": {"value": false, "score": 4.470348358154297e-05}, "shared": {"value": false, "score": 1.6689300537109375e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 173, "offsetEnd": 178}, "context": "The compiler module generated by Emscripten was previously implemented in the FAUST IDE 11 using a JavaScript wrapper which allowed the application to compile and transform FAUST source code into a WebAudio node.", "mentionContextAttributes": {"used": {"value": true, "score": 0.8382949233055115}, "created": {"value": false, "score": 0.004605889320373535}, "shared": {"value": false, "score": 2.6702880859375e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAssembly", "normalizedForm": "WebAssembly", "offsetStart": 175, "offsetEnd": 186}, "language": {"rawForm": "JavaScript", "normalizedForm": "JavaScript"}, "context": "\u2022 Load WebAssembly version of the FAUST compiler and import its C functions into JavaScript \u2022 Compile the code: the input is the FAUST source code, the output is the compiled WebAssembly binary version with some related data \u2022 Load and wrap the module as a DSP processing function inside an AudioWorkletProcessor or a ScriptProcessor AudioNode", "mentionContextAttributes": {"used": {"value": true, "score": 0.8635293245315552}, "created": {"value": false, "score": 3.933906555175781e-06}, "shared": {"value": false, "score": 4.172325134277344e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9997132420539856}, "created": {"value": false, "score": 0.0465703010559082}, "shared": {"value": false, "score": 0.04958963394165039}}, "references": [{"label": "15", "normalizedForm": "15", "refKey": 15}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 176, "offsetEnd": 181}, "context": "Again, the typical oscillatory effects (Larsen) we got when going towards positive feedback within our JavaScript implementation were similar, slightly more controlled, in the FAUST version when pushing some parameters (Presence and NFB gain) close to their limit values.", "mentionContextAttributes": {"used": {"value": true, "score": 0.999086856842041}, "created": {"value": false, "score": 6.4373016357421875e-06}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "DSP", "normalizedForm": "DSP", "offsetStart": 177, "offsetEnd": 180}, "context": "Most of them aim at adapting existing code bases (usually developed in native languages like C/C++) as well as facilitating the use of existing audio Digital Signal Processing (DSP) languages and platforms.", "mentionContextAttributes": {"used": {"value": false, "score": 8.618831634521484e-05}, "created": {"value": false, "score": 0.020071744918823242}, "shared": {"value": false, "score": 6.556510925292969e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9861841797828674}, "created": {"value": true, "score": 0.9997044205665588}, "shared": {"value": false, "score": 0.0060179829597473145}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio Plugins", "normalizedForm": "WebAudio Plugins", "offsetStart": 177, "offsetEnd": 193}, "context": "To this end, some initiatives have been proposed [6,7] and with other groups of researchers and developers we made in 2018 a proposal for a WebAudio plugin standard called WAP (WebAudio Plugins), which includes an API specification, an SDK, online plugin validation tools, and a series of plugin examples written in JavaScript but also with other languages 6 .", "mentionContextAttributes": {"used": {"value": false, "score": 0.00025027990341186523}, "created": {"value": true, "score": 0.9763948917388916}, "shared": {"value": false, "score": 0.0006591677665710449}}, "documentContextAttributes": {"used": {"value": false, "score": 0.06438595056533813}, "created": {"value": true, "score": 0.9763948917388916}, "shared": {"value": false, "score": 0.002655923366546631}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 180, "offsetEnd": 185}, "context": "By adding an asm.js9 backend in the compiler, and compiling the compiler itself in asm.js/JavaScript using the Emscripten transpiler, the dynamic generation of WebAudio nodes from FAUST code has been demonstrated [12,13].", "mentionContextAttributes": {"used": {"value": false, "score": 0.06702923774719238}, "created": {"value": false, "score": 0.00029921531677246094}, "shared": {"value": false, "score": 3.2186508178710938e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 181, "offsetEnd": 189}, "context": "recent technologies like Emscripten as well as recognized Web standards (like WebComponents) to achieve the porting of native source components to higher performance versions using WebAudio and WebAssembly API. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.00016319751739501953}, "created": {"value": false, "score": 0.00238645076751709}, "shared": {"value": false, "score": 8.118152618408203e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999572038650513}, "created": {"value": true, "score": 0.9997044205665588}, "shared": {"value": true, "score": 0.975178599357605}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Chrome", "normalizedForm": "Chrome", "offsetStart": 184, "offsetEnd": 190}, "context": "With the current limitations, and quite un-consistently, this 3ms delay in the loopso as to conform to the specsbrings also slightly different coloring of the amps between Firefox and Chrome.", "mentionContextAttributes": {"used": {"value": false, "score": 0.014267981052398682}, "created": {"value": false, "score": 2.110004425048828e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.014267981052398682}, "created": {"value": false, "score": 4.470348358154297e-05}, "shared": {"value": false, "score": 1.6689300537109375e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "DSP", "normalizedForm": "DSP", "offsetStart": 186, "offsetEnd": 189}, "context": "So, we emerged visualization, testing, and debugging tools such as MIDI/audio input simulation and output recording around the FAUST code editor to provide an integrated environment for DSP designing.", "mentionContextAttributes": {"used": {"value": false, "score": 8.14199447631836e-05}, "created": {"value": true, "score": 0.9927679300308228}, "shared": {"value": false, "score": 7.152557373046875e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9861841797828674}, "created": {"value": true, "score": 0.9997044205665588}, "shared": {"value": false, "score": 0.0060179829597473145}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "code", "normalizedForm": "code", "offsetStart": 186, "offsetEnd": 190}, "context": "By adding an asm.js9 backend in the compiler, and compiling the compiler itself in asm.js/JavaScript using the Emscripten transpiler, the dynamic generation of WebAudio nodes from FAUST code has been demonstrated [12,13].", "mentionContextAttributes": {"used": {"value": false, "score": 0.06702923774719238}, "created": {"value": false, "score": 0.00029921531677246094}, "shared": {"value": false, "score": 3.2186508178710938e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999884366989136}, "created": {"value": true, "score": 0.9957776069641113}, "shared": {"value": false, "score": 0.04958963394165039}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "code", "normalizedForm": "code", "offsetStart": 186, "offsetEnd": 190}, "context": "The compiler module generated by Emscripten was previously implemented in the FAUST IDE 11 using a JavaScript wrapper which allowed the application to compile and transform FAUST source code into a WebAudio node.", "mentionContextAttributes": {"used": {"value": true, "score": 0.8382949233055115}, "created": {"value": false, "score": 0.004605889320373535}, "shared": {"value": false, "score": 2.6702880859375e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999884366989136}, "created": {"value": true, "score": 0.9957776069641113}, "shared": {"value": false, "score": 0.04958963394165039}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebApp", "normalizedForm": "WebApp", "offsetStart": 190, "offsetEnd": 196}, "context": "These examples serve as proof of concept for developers and also illustrate the power of the Web platform: plugins can be discovered from remote repositories, dynamically uploaded to a host WebApp and instantiated, connected together, etc. ", "mentionContextAttributes": {"used": {"value": false, "score": 4.267692565917969e-05}, "created": {"value": false, "score": 0.003490269184112549}, "shared": {"value": false, "score": 0.0005362629890441895}}, "documentContextAttributes": {"used": {"value": false, "score": 4.267692565917969e-05}, "created": {"value": false, "score": 0.003490269184112549}, "shared": {"value": false, "score": 0.0005362629890441895}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "DSP", "normalizedForm": "DSP", "offsetStart": 192, "offsetEnd": 195}, "context": "Domain Specific Languages (DSL) for programming DSP algorithms that also compile to WebAssembly, like the mature Csound [5] with its set of WebAudio examples, 4 or the recently announced SOUL DSP language with its playground5 can be used.", "mentionContextAttributes": {"used": {"value": false, "score": 7.128715515136719e-05}, "created": {"value": false, "score": 0.0007395148277282715}, "shared": {"value": false, "score": 2.7060508728027344e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9861841797828674}, "created": {"value": true, "score": 0.9997044205665588}, "shared": {"value": false, "score": 0.0060179829597473145}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 192, "offsetEnd": 197}, "context": "Now, in terms of aggregated latency for the Power Amp, we did measurements of the \"end-to-end\" latency, from guitar to cabinet and obtained consistently better values for latency with the new FAUST implementation: around 20-21 ms compared to the 23-24 ms latency of our previous finelytuned JavaScript implementation (both using a Firefox Nightly 75.0a1 browser with an external Focusrite Scarlett and a Macbook Pro 16 under 10.14).", "mentionContextAttributes": {"used": {"value": true, "score": 0.9996803998947144}, "created": {"value": false, "score": 7.987022399902344e-06}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 194, "offsetEnd": 199}, "context": "Most tube simulations, like the Guitarix tube simulations, relied heavily on C/C++ code, making it quite difficult to run them in Web browsers as the FAUST toolchain does not support yet hybrid FAUST/C source code with compilation target set to WebAudio/WebAssembly.", "mentionContextAttributes": {"used": {"value": true, "score": 0.5932685136795044}, "created": {"value": false, "score": 0.00018221139907836914}, "shared": {"value": false, "score": 9.059906005859375e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAssembly API", "normalizedForm": "WebAssembly API", "offsetStart": 194, "offsetEnd": 209}, "context": "recent technologies like Emscripten as well as recognized Web standards (like WebComponents) to achieve the porting of native source components to higher performance versions using WebAudio and WebAssembly API. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.00016319751739501953}, "created": {"value": false, "score": 0.00238645076751709}, "shared": {"value": false, "score": 8.118152618408203e-05}}, "documentContextAttributes": {"used": {"value": false, "score": 0.00016319751739501953}, "created": {"value": false, "score": 0.00238645076751709}, "shared": {"value": false, "score": 8.118152618408203e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Web", "normalizedForm": "Web", "offsetStart": 195, "offsetEnd": 198}, "context": "They can now be tested online in host web applications such as our Virtual Pedalboard host presented in Figs 2,10 and 17. 39 Having the authoring tools as well as the deployment platform as pure Web applications facilitates the workflow and interoperability of these components [20].", "mentionContextAttributes": {"used": {"value": false, "score": 0.00026720762252807617}, "created": {"value": false, "score": 0.017612457275390625}, "shared": {"value": false, "score": 0.00032067298889160156}}, "documentContextAttributes": {"used": {"value": true, "score": 0.5932685136795044}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "code", "normalizedForm": "code", "offsetStart": 196, "offsetEnd": 200}, "context": "When the user requests an export for the first time, the FAUST code is sent to the compilation service which will check it, and if it is correct returns an SHA key which will represent the source code for all the following operations.", "mentionContextAttributes": {"used": {"value": false, "score": 0.033199846744537354}, "created": {"value": false, "score": 1.71661376953125e-05}, "shared": {"value": false, "score": 9.059906005859375e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999884366989136}, "created": {"value": true, "score": 0.9957776069641113}, "shared": {"value": false, "score": 0.04958963394165039}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "code", "normalizedForm": "code", "offsetStart": 196, "offsetEnd": 200}, "context": "From this dialog, a WAP plugin generated by the FAUST IDE can also be downloaded as a zipped archive file that contains the DSP WebAssembly module, the standard JSON 18 WAP descriptor and the GUI code (HTML/CSS/JavaScript) wrapped as a WebComponent.", "mentionContextAttributes": {"used": {"value": false, "score": 0.01877814531326294}, "created": {"value": false, "score": 6.318092346191406e-06}, "shared": {"value": false, "score": 0.0060179829597473145}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999884366989136}, "created": {"value": true, "score": 0.9957776069641113}, "shared": {"value": false, "score": 0.04958963394165039}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 198, "offsetEnd": 206}, "context": "The compiler module generated by Emscripten was previously implemented in the FAUST IDE 11 using a JavaScript wrapper which allowed the application to compile and transform FAUST source code into a WebAudio node.", "mentionContextAttributes": {"used": {"value": true, "score": 0.8382949233055115}, "created": {"value": false, "score": 0.004605889320373535}, "shared": {"value": false, "score": 2.6702880859375e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999572038650513}, "created": {"value": true, "score": 0.9997044205665588}, "shared": {"value": true, "score": 0.975178599357605}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 199, "offsetEnd": 207}, "context": "In this paper, we presented the combined work of two teams deeply involved in the development of an audio DSP programming language and its complete ecosystem on the one hand, and the definition of a WebAudio plugin standard (WAP) and its complete surrounding environment on the other. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0007905960083007812}, "created": {"value": true, "score": 0.9997044205665588}, "shared": {"value": false, "score": 2.1457672119140625e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999572038650513}, "created": {"value": true, "score": 0.9997044205665588}, "shared": {"value": true, "score": 0.975178599357605}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 200, "offsetEnd": 208}, "context": "With the emergence of Web-based audio software such as digital audio workstations (DAWs) developed by companies like SoundTrap, BandLab, or AmpedStudio, it became desirable to have a standard to make WebAudio instruments and effects interoperable as plugins compatible with these DAWs, and more generally with any compatible host software.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0008279085159301758}, "created": {"value": false, "score": 0.2612989544868469}, "shared": {"value": false, "score": 7.104873657226562e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999572038650513}, "created": {"value": true, "score": 0.9997044205665588}, "shared": {"value": true, "score": 0.975178599357605}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "code", "normalizedForm": "code", "offsetStart": 202, "offsetEnd": 206}, "context": "Actions like changing a slider into a knob or changing the default parameter values from the GUI builder are also missing and have been asked by all users (while this can be done by changing the source code of the plugin parameter declarations).", "mentionContextAttributes": {"used": {"value": false, "score": 0.05014932155609131}, "created": {"value": false, "score": 0.00013339519500732422}, "shared": {"value": false, "score": 6.031990051269531e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999884366989136}, "created": {"value": true, "score": 0.9957776069641113}, "shared": {"value": false, "score": 0.04958963394165039}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WAP GUI Builder", "normalizedForm": "WAP GUI Builder", "offsetStart": 203, "offsetEnd": 218}, "context": "Now, the short term goals of the authors are to complete and stabilize the presented workflow, to add support for polyphonic MIDI controllable instrument plugins, and to develop more features within the WAP GUI Builder that currently provides basic editing tools. ", "mentionContextAttributes": {"used": {"value": false, "score": 6.377696990966797e-05}, "created": {"value": true, "score": 0.7246595025062561}, "shared": {"value": false, "score": 8.702278137207031e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 6.377696990966797e-05}, "created": {"value": true, "score": 0.7246595025062561}, "shared": {"value": false, "score": 8.702278137207031e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 204, "offsetEnd": 209}, "context": "Many examples of audio effects have been ported to WAPs directly by copying and pasting existing code from the Guitarix 37 and the OWL pedal project, 38 or from various open-source projects, into the new FAUST online IDE.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0012140870094299316}, "created": {"value": false, "score": 0.00023299455642700195}, "shared": {"value": false, "score": 0.000102996826171875}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "code", "normalizedForm": "code", "offsetStart": 209, "offsetEnd": 213}, "context": "Most tube simulations, like the Guitarix tube simulations, relied heavily on C/C++ code, making it quite difficult to run them in Web browsers as the FAUST toolchain does not support yet hybrid FAUST/C source code with compilation target set to WebAudio/WebAssembly.", "mentionContextAttributes": {"used": {"value": true, "score": 0.5932685136795044}, "created": {"value": false, "score": 0.00018221139907836914}, "shared": {"value": false, "score": 9.059906005859375e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999884366989136}, "created": {"value": true, "score": 0.9957776069641113}, "shared": {"value": false, "score": 0.04958963394165039}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 209, "offsetEnd": 214}, "context": "Inside our virtual pedalboard, we chained a special version of our JavaScript tube guitar amplifier simulation with bypassed power amp and cabinet simulation stages, and replaced the last stage with our novel FAUST-based poweramp stage (see Fig. 16), and finally we compared it with the full featured, JavaScript based simulations.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9986501336097717}, "created": {"value": false, "score": 0.005636453628540039}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "DSP", "normalizedForm": "DSP", "offsetStart": 215, "offsetEnd": 218}, "context": "It is then possible to refine the GUI, adjust the layout, appearance of the controllers among a rich set of knobs, sliders, switches (Figs 6, 7 and 9 show different looks and feels that can be created from the same DSP code).", "mentionContextAttributes": {"used": {"value": false, "score": 0.00043064355850219727}, "created": {"value": false, "score": 0.00035703182220458984}, "shared": {"value": false, "score": 1.1920928955078125e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9861841797828674}, "created": {"value": true, "score": 0.9997044205665588}, "shared": {"value": false, "score": 0.0060179829597473145}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 217, "offsetEnd": 222}, "context": "Consequently, the first step was recreating with FAUST our signal chain as faithfully as possible -i.e. using the same filters with the same parameters, the same transfer function, the same gain values, etc. Adapting FAUST filters to behave like WebAudio ones was not straightforward but after some interactions with the FAUST and WebAudio implementers, it proved to be easier to restart from the original C++ implementation of the WebAudio filter API (Chromium browser's source code).", "mentionContextAttributes": {"used": {"value": true, "score": 0.9951423406600952}, "created": {"value": false, "score": 1.811981201171875e-05}, "shared": {"value": false, "score": 1.5497207641601562e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "code", "normalizedForm": "code", "offsetStart": 219, "offsetEnd": 223}, "context": "It is then possible to refine the GUI, adjust the layout, appearance of the controllers among a rich set of knobs, sliders, switches (Figs 6, 7 and 9 show different looks and feels that can be created from the same DSP code).", "mentionContextAttributes": {"used": {"value": false, "score": 0.00043064355850219727}, "created": {"value": false, "score": 0.00035703182220458984}, "shared": {"value": false, "score": 1.1920928955078125e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999884366989136}, "created": {"value": true, "score": 0.9957776069641113}, "shared": {"value": false, "score": 0.04958963394165039}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "asm.js", "normalizedForm": "asm.js", "offsetStart": 222, "offsetEnd": 228}, "context": "With the rise of the more stable and better designed WebAssembly10 format in 2017 (a portable binary-code format for executable programs, firstly to be used on the Web, but also on native environments) as a replacement of asm.js, the previous work done with asm.js was adapted. ", "mentionContextAttributes": {"used": {"value": false, "score": 9.751319885253906e-05}, "created": {"value": false, "score": 0.006427764892578125}, "shared": {"value": false, "score": 0.0005249381065368652}}, "documentContextAttributes": {"used": {"value": false, "score": 9.751319885253906e-05}, "created": {"value": false, "score": 0.006427764892578125}, "shared": {"value": false, "score": 0.0005249381065368652}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 224, "offsetEnd": 232}, "context": "With pure JavaScript WebAudio API, major issues arise when dealing with loops, firstly due to the limitations imposed by its blockprocessing paradigm and also because of some divergences/bugs in how different browsers parse WebAudio graphs with loops. ", "mentionContextAttributes": {"used": {"value": false, "score": 9.810924530029297e-05}, "created": {"value": false, "score": 0.0008604526519775391}, "shared": {"value": false, "score": 1.2874603271484375e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999572038650513}, "created": {"value": true, "score": 0.9997044205665588}, "shared": {"value": true, "score": 0.975178599357605}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "DSP", "normalizedForm": "DSP", "offsetStart": 231, "offsetEnd": 234}, "context": "In addition, to be able to calculate audio separately with a FAUST DSP independent from the browser audio context, we created an \"offline processor\" which will be used exclusively for getting the very first samples calculated by a DSP.", "mentionContextAttributes": {"used": {"value": false, "score": 0.022619903087615967}, "created": {"value": true, "score": 0.8531707525253296}, "shared": {"value": false, "score": 5.960464477539062e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9861841797828674}, "created": {"value": true, "score": 0.9997044205665588}, "shared": {"value": false, "score": 0.0060179829597473145}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 245, "offsetEnd": 253}, "context": "Most tube simulations, like the Guitarix tube simulations, relied heavily on C/C++ code, making it quite difficult to run them in Web browsers as the FAUST toolchain does not support yet hybrid FAUST/C source code with compilation target set to WebAudio/WebAssembly.", "mentionContextAttributes": {"used": {"value": true, "score": 0.5932685136795044}, "created": {"value": false, "score": 0.00018221139907836914}, "shared": {"value": false, "score": 9.059906005859375e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999572038650513}, "created": {"value": true, "score": 0.9997044205665588}, "shared": {"value": true, "score": 0.975178599357605}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 246, "offsetEnd": 254}, "context": "Consequently, the first step was recreating with FAUST our signal chain as faithfully as possible -i.e. using the same filters with the same parameters, the same transfer function, the same gain values, etc. Adapting FAUST filters to behave like WebAudio ones was not straightforward but after some interactions with the FAUST and WebAudio implementers, it proved to be easier to restart from the original C++ implementation of the WebAudio filter API (Chromium browser's source code). ", "mentionContextAttributes": {"used": {"value": true, "score": 0.9951423406600952}, "created": {"value": false, "score": 1.811981201171875e-05}, "shared": {"value": false, "score": 1.5497207641601562e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999572038650513}, "created": {"value": true, "score": 0.9997044205665588}, "shared": {"value": true, "score": 0.975178599357605}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Linux", "normalizedForm": "Linux", "offsetStart": 250, "offsetEnd": 255}, "context": "Several native audio plugin standards are currently available, including Steinberg's VST (Virtual Studio Technology, created in 1997 by Cubase creators), Apple's Audio Units (Logic Audio, GarageBand), Avid's AAX (ProTools creators), and LV2 from the Linux audio community. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.00023788213729858398}, "created": {"value": false, "score": 0.0004693269729614258}, "shared": {"value": false, "score": 0.0014292001724243164}}, "documentContextAttributes": {"used": {"value": false, "score": 0.00023788213729858398}, "created": {"value": false, "score": 0.0004693269729614258}, "shared": {"value": false, "score": 0.0014292001724243164}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAssembly", "normalizedForm": "WebAssembly", "offsetStart": 254, "offsetEnd": 265}, "language": {"rawForm": "JavaScript", "normalizedForm": "JavaScript"}, "context": "Most tube simulations, like the Guitarix tube simulations, relied heavily on C/C++ code, making it quite difficult to run them in Web browsers as the FAUST toolchain does not support yet hybrid FAUST/C source code with compilation target set to WebAudio/WebAssembly.", "mentionContextAttributes": {"used": {"value": true, "score": 0.5932678580284119}, "created": {"value": false, "score": 0.00018221139907836914}, "shared": {"value": false, "score": 9.059906005859375e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9997132420539856}, "created": {"value": false, "score": 0.0465703010559082}, "shared": {"value": false, "score": 0.04958963394165039}}, "references": [{"label": "15", "normalizedForm": "15", "refKey": 15}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "DSP", "normalizedForm": "DSP", "offsetStart": 257, "offsetEnd": 260}, "context": "\u2022 Load WebAssembly version of the FAUST compiler and import its C functions into JavaScript \u2022 Compile the code: the input is the FAUST source code, the output is the compiled WebAssembly binary version with some related data \u2022 Load and wrap the module as a DSP processing function inside an AudioWorkletProcessor or a ScriptProcessor AudioNode", "mentionContextAttributes": {"used": {"value": true, "score": 0.8635294437408447}, "created": {"value": false, "score": 3.933906555175781e-06}, "shared": {"value": false, "score": 4.172325134277344e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9861841797828674}, "created": {"value": true, "score": 0.9997044205665588}, "shared": {"value": false, "score": 0.0060179829597473145}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Web", "normalizedForm": "Web", "offsetStart": 258, "offsetEnd": 261}, "context": "To conclude, we have been able, using only the online FAUST IDE, to completely redesign our Power Amp stage, to fine tune it using the embedded measurement tools, to build its GUI and to thoroughly test the final version before publishing it as a plugin for Web-based host applications.", "mentionContextAttributes": {"used": {"value": false, "score": 0.1717093586921692}, "created": {"value": true, "score": 0.9925139546394348}, "shared": {"value": false, "score": 2.002716064453125e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.5932685136795044}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MIDI", "normalizedForm": "MIDI", "offsetStart": 258, "offsetEnd": 262}, "context": "Additional generic code is added to connect the DSP computation itself with audio inputs/outputs, and with parameter controllers, which could be buttons, sliders, numerical entries, etc. Architectures files can also possibly implement polyphonic support for MIDI-controllable instruments, by automatically dealing with dynamic voice allocation, and decoding and mapping of incoming MIDI events [11].", "mentionContextAttributes": {"used": {"value": false, "score": 0.0006245970726013184}, "created": {"value": false, "score": 0.014672636985778809}, "shared": {"value": false, "score": 2.384185791015625e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.053231000900268555}, "created": {"value": true, "score": 0.9927679300308228}, "shared": {"value": false, "score": 8.702278137207031e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "asm.js", "normalizedForm": "asm.js", "offsetStart": 258, "offsetEnd": 264}, "context": "With the rise of the more stable and better designed WebAssembly10 format in 2017 (a portable binary-code format for executable programs, firstly to be used on the Web, but also on native environments) as a replacement of asm.js, the previous work done with asm.js was adapted. ", "mentionContextAttributes": {"used": {"value": false, "score": 9.751319885253906e-05}, "created": {"value": false, "score": 0.006427645683288574}, "shared": {"value": false, "score": 0.0005249381065368652}}, "documentContextAttributes": {"used": {"value": false, "score": 9.751319885253906e-05}, "created": {"value": false, "score": 0.006427764892578125}, "shared": {"value": false, "score": 0.0005249381065368652}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "DSP", "normalizedForm": "DSP", "offsetStart": 263, "offsetEnd": 266}, "context": "\u2022 100% of the developers managed to create a plugin (including its GUI), to publish and to test it, \u2022 Average time to complete the tasks: 37 minutes, \u2022 83.3% of them used the visualization tools and considered them an important addition to help understanding the DSP code behavior, \u2022 100% appreciated the fact that a default GUI is generated automatically.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9861841797828674}, "created": {"value": false, "score": 7.271766662597656e-05}, "shared": {"value": false, "score": 3.337860107421875e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9861841797828674}, "created": {"value": true, "score": 0.9997044205665588}, "shared": {"value": false, "score": 0.0060179829597473145}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "code", "normalizedForm": "code", "offsetStart": 267, "offsetEnd": 271}, "context": "\u2022 100% of the developers managed to create a plugin (including its GUI), to publish and to test it, \u2022 Average time to complete the tasks: 37 minutes, \u2022 83.3% of them used the visualization tools and considered them an important addition to help understanding the DSP code behavior, \u2022 100% appreciated the fact that a default GUI is generated automatically.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9861841797828674}, "created": {"value": false, "score": 7.271766662597656e-05}, "shared": {"value": false, "score": 3.337860107421875e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999884366989136}, "created": {"value": true, "score": 0.9957776069641113}, "shared": {"value": false, "score": 0.04958963394165039}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "AudioWorkletProcessor", "normalizedForm": "AudioWorkletProcessor", "offsetStart": 291, "offsetEnd": 312}, "context": "\u2022 Load WebAssembly version of the FAUST compiler and import its C functions into JavaScript \u2022 Compile the code: the input is the FAUST source code, the output is the compiled WebAssembly binary version with some related data \u2022 Load and wrap the module as a DSP processing function inside an AudioWorkletProcessor or a ScriptProcessor AudioNode", "mentionContextAttributes": {"used": {"value": true, "score": 0.8635294437408447}, "created": {"value": false, "score": 3.933906555175781e-06}, "shared": {"value": false, "score": 4.172325134277344e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.8635294437408447}, "created": {"value": false, "score": 0.00015079975128173828}, "shared": {"value": false, "score": 4.172325134277344e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ScriptProcessor", "normalizedForm": "ScriptProcessor", "offsetStart": 318, "offsetEnd": 333}, "context": "\u2022 Load WebAssembly version of the FAUST compiler and import its C functions into JavaScript \u2022 Compile the code: the input is the FAUST source code, the output is the compiled WebAssembly binary version with some related data \u2022 Load and wrap the module as a DSP processing function inside an AudioWorkletProcessor or a ScriptProcessor AudioNode", "mentionContextAttributes": {"used": {"value": true, "score": 0.8635294437408447}, "created": {"value": false, "score": 3.933906555175781e-06}, "shared": {"value": false, "score": 4.172325134277344e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.8635294437408447}, "created": {"value": false, "score": 0.0003553628921508789}, "shared": {"value": false, "score": 4.172325134277344e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 321, "offsetEnd": 326}, "context": "Consequently, the first step was recreating with FAUST our signal chain as faithfully as possible -i.e. using the same filters with the same parameters, the same transfer function, the same gain values, etc. Adapting FAUST filters to behave like WebAudio ones was not straightforward but after some interactions with the FAUST and WebAudio implementers, it proved to be easier to restart from the original C++ implementation of the WebAudio filter API (Chromium browser's source code).", "mentionContextAttributes": {"used": {"value": true, "score": 0.9951423406600952}, "created": {"value": false, "score": 1.811981201171875e-05}, "shared": {"value": false, "score": 1.5497207641601562e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 331, "offsetEnd": 339}, "context": "Consequently, the first step was recreating with FAUST our signal chain as faithfully as possible -i.e. using the same filters with the same parameters, the same transfer function, the same gain values, etc. Adapting FAUST filters to behave like WebAudio ones was not straightforward but after some interactions with the FAUST and WebAudio implementers, it proved to be easier to restart from the original C++ implementation of the WebAudio filter API (Chromium browser's source code). ", "mentionContextAttributes": {"used": {"value": true, "score": 0.9951423406600952}, "created": {"value": false, "score": 1.811981201171875e-05}, "shared": {"value": false, "score": 1.5497207641601562e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999572038650513}, "created": {"value": true, "score": 0.9997044205665588}, "shared": {"value": true, "score": 0.975178599357605}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Firefox Nightly", "normalizedForm": "Firefox Nightly", "offsetStart": 331, "offsetEnd": 346}, "version": {"rawForm": "75.0a1", "normalizedForm": "75.0a1", "offsetStart": 347, "offsetEnd": 353}, "context": "Now, in terms of aggregated latency for the Power Amp, we did measurements of the \"end-to-end\" latency, from guitar to cabinet and obtained consistently better values for latency with the new FAUST implementation: around 20-21 ms compared to the 23-24 ms latency of our previous finelytuned JavaScript implementation (both using a Firefox Nightly 75.0a1 browser with an external Focusrite Scarlett and a Macbook Pro 16 under 10.14). ", "mentionContextAttributes": {"used": {"value": true, "score": 0.9996803998947144}, "created": {"value": false, "score": 7.987022399902344e-06}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9996803998947144}, "created": {"value": false, "score": 7.987022399902344e-06}, "shared": {"value": false, "score": 4.76837158203125e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "AudioNode", "normalizedForm": "AudioNode", "offsetStart": 334, "offsetEnd": 343}, "context": "\u2022 Load WebAssembly version of the FAUST compiler and import its C functions into JavaScript \u2022 Compile the code: the input is the FAUST source code, the output is the compiled WebAssembly binary version with some related data \u2022 Load and wrap the module as a DSP processing function inside an AudioWorkletProcessor or a ScriptProcessor AudioNode", "mentionContextAttributes": {"used": {"value": true, "score": 0.8635294437408447}, "created": {"value": false, "score": 3.933906555175781e-06}, "shared": {"value": false, "score": 4.172325134277344e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.8635294437408447}, "created": {"value": false, "score": 3.933906555175781e-06}, "shared": {"value": false, "score": 4.172325134277344e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "code", "normalizedForm": "code", "offsetStart": 341, "offsetEnd": 345}, "context": "\u2022 All options related to FAUST code compilation are located using controllers from the left sidebar; \u2022 All options and displays related to DSP runtime, such as MIDI, audio inputs, and quick signal probing are placed in the right sidebar; \u2022 The remaining central zone of the page is divided into two parts with configurable heights: a source code editor on the top and a multi-tab display panel which can display the logs from the compiler, a FAUST block diagram corresponding to the DSP code, a larger signal scope, a running GUI of the plugin being developed, and finally, a GUI builder/exporter for designing the user interface of the WAP plugin version of the code, usable in external host applications.", "mentionContextAttributes": {"used": {"value": false, "score": 0.05323082208633423}, "created": {"value": false, "score": 4.0531158447265625e-06}, "shared": {"value": false, "score": 4.887580871582031e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999884366989136}, "created": {"value": true, "score": 0.9957776069641113}, "shared": {"value": false, "score": 0.04958963394165039}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 348, "offsetEnd": 356}, "context": "The first step of the evaluation were careful measurements and critical listening to assess the dynamical and harmonic possible shortcomings of this FAUST implementation in standalone mode, tweaking the different parameters (i.e., master volume, presence, NFB gain, presence, transfer function parameters), and also comparing its behavior with our WebAudio/JavaScript implementation. ", "mentionContextAttributes": {"used": {"value": true, "score": 0.9990653395652771}, "created": {"value": false, "score": 0.0034433603286743164}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999572038650513}, "created": {"value": true, "score": 0.9997044205665588}, "shared": {"value": true, "score": 0.975178599357605}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Focusrite Scarlett", "normalizedForm": "Focusrite Scarlett", "offsetStart": 379, "offsetEnd": 397}, "context": "Now, in terms of aggregated latency for the Power Amp, we did measurements of the \"end-to-end\" latency, from guitar to cabinet and obtained consistently better values for latency with the new FAUST implementation: around 20-21 ms compared to the 23-24 ms latency of our previous finelytuned JavaScript implementation (both using a Firefox Nightly 75.0a1 browser with an external Focusrite Scarlett and a Macbook Pro 16 under 10.14). ", "mentionContextAttributes": {"used": {"value": true, "score": 0.9996803998947144}, "created": {"value": false, "score": 7.987022399902344e-06}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9996803998947144}, "created": {"value": false, "score": 7.987022399902344e-06}, "shared": {"value": false, "score": 4.76837158203125e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MIDI", "normalizedForm": "MIDI", "offsetStart": 382, "offsetEnd": 386}, "context": "Additional generic code is added to connect the DSP computation itself with audio inputs/outputs, and with parameter controllers, which could be buttons, sliders, numerical entries, etc. Architectures files can also possibly implement polyphonic support for MIDI-controllable instruments, by automatically dealing with dynamic voice allocation, and decoding and mapping of incoming MIDI events [11].", "mentionContextAttributes": {"used": {"value": false, "score": 0.0006245970726013184}, "created": {"value": false, "score": 0.014672636985778809}, "shared": {"value": false, "score": 2.384185791015625e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.053231000900268555}, "created": {"value": true, "score": 0.9927679300308228}, "shared": {"value": false, "score": 8.702278137207031e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MIDI", "normalizedForm": "MIDI", "offsetStart": 385, "offsetEnd": 389}, "context": "The project includes examples of very simple plugins and host software, but also more ambitious tools to validate the WAP standard: a virtual guitar \"pedalboard\" that discovers plugins from several remote repositories, and allows musicians to chain for examplevirtual audio effects pedal plugins, synthesizers, guitar amplifier simulators, drum machines, etc., and to control them via MIDI in real-time (see Fig. 1).", "mentionContextAttributes": {"used": {"value": false, "score": 9.763240814208984e-05}, "created": {"value": false, "score": 0.27530163526535034}, "shared": {"value": false, "score": 7.510185241699219e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.053231000900268555}, "created": {"value": true, "score": 0.9927679300308228}, "shared": {"value": false, "score": 8.702278137207031e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Pro 16", "normalizedForm": "Pro 16", "offsetStart": 412, "offsetEnd": 418}, "context": "Now, in terms of aggregated latency for the Power Amp, we did measurements of the \"end-to-end\" latency, from guitar to cabinet and obtained consistently better values for latency with the new FAUST implementation: around 20-21 ms compared to the 23-24 ms latency of our previous finelytuned JavaScript implementation (both using a Firefox Nightly 75.0a1 browser with an external Focusrite Scarlett and a Macbook Pro 16 under 10.14). ", "mentionContextAttributes": {"used": {"value": true, "score": 0.9996803998947144}, "created": {"value": false, "score": 7.987022399902344e-06}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9996803998947144}, "created": {"value": false, "score": 7.987022399902344e-06}, "shared": {"value": false, "score": 4.76837158203125e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio filter API", "normalizedForm": "WebAudio filter API", "offsetStart": 432, "offsetEnd": 451}, "context": "Consequently, the first step was recreating with FAUST our signal chain as faithfully as possible -i.e. using the same filters with the same parameters, the same transfer function, the same gain values, etc. Adapting FAUST filters to behave like WebAudio ones was not straightforward but after some interactions with the FAUST and WebAudio implementers, it proved to be easier to restart from the original C++ implementation of the WebAudio filter API (Chromium browser's source code). ", "mentionContextAttributes": {"used": {"value": true, "score": 0.9951423406600952}, "created": {"value": false, "score": 1.811981201171875e-05}, "shared": {"value": false, "score": 1.5497207641601562e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9951423406600952}, "created": {"value": false, "score": 1.811981201171875e-05}, "shared": {"value": false, "score": 1.5497207641601562e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FAUST", "normalizedForm": "FAUST", "offsetStart": 442, "offsetEnd": 447}, "context": "\u2022 All options related to FAUST code compilation are located using controllers from the left sidebar; \u2022 All options and displays related to DSP runtime, such as MIDI, audio inputs, and quick signal probing are placed in the right sidebar; \u2022 The remaining central zone of the page is divided into two parts with configurable heights: a source code editor on the top and a multi-tab display panel which can display the logs from the compiler, a FAUST block diagram corresponding to the DSP code, a larger signal scope, a running GUI of the plugin being developed, and finally, a GUI builder/exporter for designing the user interface of the WAP plugin version of the code, usable in external host applications.", "mentionContextAttributes": {"used": {"value": false, "score": 0.05323082208633423}, "created": {"value": false, "score": 4.0531158447265625e-06}, "shared": {"value": false, "score": 4.887580871582031e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999902248382568}, "created": {"value": true, "score": 0.9999372959136963}, "shared": {"value": true, "score": 0.969192385673523}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "code", "normalizedForm": "code", "offsetStart": 479, "offsetEnd": 483}, "context": "Consequently, the first step was recreating with FAUST our signal chain as faithfully as possible -i.e. using the same filters with the same parameters, the same transfer function, the same gain values, etc. Adapting FAUST filters to behave like WebAudio ones was not straightforward but after some interactions with the FAUST and WebAudio implementers, it proved to be easier to restart from the original C++ implementation of the WebAudio filter API (Chromium browser's source code).", "mentionContextAttributes": {"used": {"value": true, "score": 0.9951423406600952}, "created": {"value": false, "score": 1.811981201171875e-05}, "shared": {"value": false, "score": 1.5497207641601562e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999884366989136}, "created": {"value": true, "score": 0.9957776069641113}, "shared": {"value": false, "score": 0.04958963394165039}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "DSP", "normalizedForm": "DSP", "offsetStart": 483, "offsetEnd": 486}, "context": "\u2022 All options related to FAUST code compilation are located using controllers from the left sidebar; \u2022 All options and displays related to DSP runtime, such as MIDI, audio inputs, and quick signal probing are placed in the right sidebar; \u2022 The remaining central zone of the page is divided into two parts with configurable heights: a source code editor on the top and a multi-tab display panel which can display the logs from the compiler, a FAUST block diagram corresponding to the DSP code, a larger signal scope, a running GUI of the plugin being developed, and finally, a GUI builder/exporter for designing the user interface of the WAP plugin version of the code, usable in external host applications.", "mentionContextAttributes": {"used": {"value": false, "score": 0.05323082208633423}, "created": {"value": false, "score": 4.0531158447265625e-06}, "shared": {"value": false, "score": 4.887580871582031e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9861841797828674}, "created": {"value": true, "score": 0.9997044205665588}, "shared": {"value": false, "score": 0.0060179829597473145}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "code", "normalizedForm": "code", "offsetStart": 487, "offsetEnd": 491}, "context": "\u2022 All options related to FAUST code compilation are located using controllers from the left sidebar; \u2022 All options and displays related to DSP runtime, such as MIDI, audio inputs, and quick signal probing are placed in the right sidebar; \u2022 The remaining central zone of the page is divided into two parts with configurable heights: a source code editor on the top and a multi-tab display panel which can display the logs from the compiler, a FAUST block diagram corresponding to the DSP code, a larger signal scope, a running GUI of the plugin being developed, and finally, a GUI builder/exporter for designing the user interface of the WAP plugin version of the code, usable in external host applications.", "mentionContextAttributes": {"used": {"value": false, "score": 0.05323082208633423}, "created": {"value": false, "score": 4.0531158447265625e-06}, "shared": {"value": false, "score": 4.887580871582031e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999884366989136}, "created": {"value": true, "score": 0.9957776069641113}, "shared": {"value": false, "score": 0.04958963394165039}}}], "references": [{"refKey": 15, "tei": "<biblStruct xml:id=\"b15\">\n\t<analytic>\n\t\t<title level=\"a\" type=\"main\">AudioWorklet: The Future of Web Audio</title>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">H</forename><surname>Choi</surname></persName>\n\t\t</author>\n\t</analytic>\n\t<monogr>\n\t\t<title level=\"m\">the International Computer Music Conference (ICMC&apos;18)</title>\n\t\t<imprint>\n\t\t\t<date>2018 Aug.</date>\n\t\t</imprint>\n\t</monogr>\n</biblStruct>\n"}, {"refKey": 16, "tei": "<biblStruct xml:id=\"b16\">\n\t<analytic>\n\t\t<title level=\"a\" type=\"main\">A Browser-based WebAudio Ecosystem to Dynamically Play with Real-time Simulations of Historic Guitar Tube Amps and Their Typical Distortions</title>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Michel</forename><surname>Buffa</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Jerome</forename><surname>Lebrun</surname></persName>\n\t\t</author>\n\t\t<idno type=\"DOI\">10.4324/9780429356841-4</idno>\n\t</analytic>\n\t<monogr>\n\t\t<title level=\"m\">Distortion in Music Production</title>\n\t\t<imprint>\n\t\t\t<publisher>Focal Press</publisher>\n\t\t\t<date type=\"published\" when=\"2023-03-27\">2016 Apr.</date>\n\t\t\t<biblScope unit=\"page\" from=\"28\" to=\"46\" />\n\t\t</imprint>\n\t</monogr>\n</biblStruct>\n"}, {"refKey": 0, "tei": "<biblStruct xml:id=\"b0\">\n\t<analytic>\n\t\t<title level=\"a\" type=\"main\">Using Faust DSL to Develop Custom, Sample Accurate DSP Code and Audio Plugins for the Web Browser</title>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Shihong</forename><surname>Ren</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">St\u00e9phane</forename><surname>Letz</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Yann</forename><surname>Orlarey</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Romain</forename><surname>Michon</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Dominique</forename><surname>Fober</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Michel</forename><surname>Buffa</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Jerome</forename><surname>Lebrun</surname></persName>\n\t\t</author>\n\t\t<idno type=\"DOI\">10.17743/jaes.2020.0014</idno>\n\t\t<idno>514A75895E9E8C20F21E35894D9B6D2A</idno>\n\t</analytic>\n\t<monogr>\n\t\t<title level=\"j\">Journal of the Audio Engineering Society</title>\n\t\t<title level=\"j\" type=\"abbrev\">J. Audio Eng. Soc.</title>\n\t\t<idno type=\"ISSN\">1549-4950</idno>\n\t\t<imprint>\n\t\t\t<biblScope unit=\"volume\">68</biblScope>\n\t\t\t<biblScope unit=\"issue\">10</biblScope>\n\t\t\t<biblScope unit=\"page\" from=\"703\" to=\"716\" />\n\t\t\t<date type=\"published\" when=\"2020-12-07\" />\n\t\t\t<publisher>Audio Engineering Society</publisher>\n\t\t</imprint>\n\t</monogr>\n</biblStruct>\n"}], "runtime": 25988, "id": "4e13e4eefcd24d7c6a16994b65538deabca85aee", "metadata": {"id": "4e13e4eefcd24d7c6a16994b65538deabca85aee"}, "original_file_path": "../../datalake/Samuel/SOFTware-Sync/downloads/xml/hal-03087763.grobid.tei.xml", "file_name": "hal-03087763.grobid.tei.xml"}