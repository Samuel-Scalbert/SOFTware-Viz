{"application": "software-mentions", "version": "0.8.0", "date": "2024-10-07T12:01+0000", "md5": "59D12465E45813625EBEA2E19146B390", "mentions": [{"type": "software", "software-type": "software", "software-name": {"rawForm": "Teseo", "normalizedForm": "Teseo", "offsetStart": 0, "offsetEnd": 5}, "context": "Teseo follows a Compressed Sparse Row (CSR) design, where the vertices and edges are stored in a B+ tree with 2MB-size leaves, called a FAT tree, which is a packed memory array supporting sequential vertex access and sequential neighborhood access.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00700223445892334}, "created": {"value": false, "score": 3.4809112548828125e-05}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.99986732006073}, "created": {"value": true, "score": 0.9975646734237671}, "shared": {"value": false, "score": 9.5367431640625e-07}}, "references": [{"label": "[11]", "normalizedForm": "[11]", "refKey": 11}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Teseo", "normalizedForm": "Teseo", "offsetStart": 0, "offsetEnd": 5}, "context": "Teseo performs significantly worse than HAL mainly because: (\ud835\udc56) Teseo needs a per-edge entry mapping from sparse to dense vertex ids in the analytics part of the graph algorithm using a hash table, which is costly.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00042062997817993164}, "created": {"value": false, "score": 9.894371032714844e-06}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.99986732006073}, "created": {"value": true, "score": 0.9975646734237671}, "shared": {"value": false, "score": 9.5367431640625e-07}}, "references": [{"label": "[11]", "normalizedForm": "[11]", "refKey": 11}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LiveGraph", "normalizedForm": "LiveGraph", "offsetStart": 0, "offsetEnd": 9}, "context": "LiveGraph stores graph edges in adjacency list, one for each source node; it supports random vertex access, and sequential neighborhood access. ", "mentionContextAttributes": {"used": {"value": false, "score": 7.522106170654297e-05}, "created": {"value": false, "score": 4.291534423828125e-05}, "shared": {"value": false, "score": 5.960464477539062e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9988667964935303}, "created": {"value": true, "score": 0.934317409992218}, "shared": {"value": false, "score": 7.152557373046875e-07}}, "references": [{"label": "[11]", "normalizedForm": "[11]", "refKey": 11}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LiveGraph", "normalizedForm": "LiveGraph", "offsetStart": 0, "offsetEnd": 9}, "context": "LiveGraph takes \ud835\udc42 (1) (without false positive) for deletions, and up to \ud835\udc42 (|\ud835\udc38|) (with false positives) to find an edge. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0006834268569946289}, "created": {"value": false, "score": 6.198883056640625e-06}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9988667964935303}, "created": {"value": true, "score": 0.934317409992218}, "shared": {"value": false, "score": 7.152557373046875e-07}}, "references": [{"label": "[11]", "normalizedForm": "[11]", "refKey": 11}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LiveGraph", "normalizedForm": "LiveGraph", "offsetStart": 0, "offsetEnd": 9}, "context": "LiveGraph is slower than HAL due to storing edge entry metadata (transaction timestamp, invalidation timestamp, property size) with destination ids, which causes more cache misses during the access. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0001214742660522461}, "created": {"value": false, "score": 1.7642974853515625e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9988667964935303}, "created": {"value": true, "score": 0.934317409992218}, "shared": {"value": false, "score": 7.152557373046875e-07}}, "references": [{"label": "[11]", "normalizedForm": "[11]", "refKey": 11}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LiveGraph", "normalizedForm": "LiveGraph", "offsetStart": 0, "offsetEnd": 9}, "context": "LiveGraph is also hampered by the need to check invalidation timestamps, to see if an edge entry is still valid. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.00019568204879760742}, "created": {"value": false, "score": 2.86102294921875e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9988667964935303}, "created": {"value": true, "score": 0.934317409992218}, "shared": {"value": false, "score": 7.152557373046875e-07}}, "references": [{"label": "[11]", "normalizedForm": "[11]", "refKey": 11}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LiveGraph", "normalizedForm": "LiveGraph", "offsetStart": 0, "offsetEnd": 9}, "context": "LiveGraph does not sort but simply appends the edges in the neighborhood list; it uses Bloom filters to check the edge's existence, which takes \ud835\udc42 (1).", "mentionContextAttributes": {"used": {"value": false, "score": 0.0016603469848632812}, "created": {"value": false, "score": 7.3909759521484375e-06}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9988667964935303}, "created": {"value": true, "score": 0.934317409992218}, "shared": {"value": false, "score": 7.152557373046875e-07}}, "references": [{"label": "[11]", "normalizedForm": "[11]", "refKey": 11}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Sortledton", "normalizedForm": "Sortledton", "offsetStart": 0, "offsetEnd": 10}, "context": "Sortledton and Teseo perform (\ud835\udc56,\ud835\udc56\ud835\udc56) in \ud835\udc42 (\ud835\udc59\ud835\udc5c\ud835\udc54(|\ud835\udc38|)).", "mentionContextAttributes": {"used": {"value": true, "score": 0.99986732006073}, "created": {"value": false, "score": 1.9311904907226562e-05}, "shared": {"value": false, "score": 9.5367431640625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.99986732006073}, "created": {"value": false, "score": 0.08489882946014404}, "shared": {"value": false, "score": 9.5367431640625e-07}}, "references": [{"label": "[5]", "normalizedForm": "[5]", "refKey": 5}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Sortledton", "normalizedForm": "Sortledton", "offsetStart": 0, "offsetEnd": 10}, "context": "Sortledton and Teseo perform very similarly on all the datasets, because of their similar set-based neighborhood design; for edge existence check, this requires takes \ud835\udc42 (\ud835\udc59\ud835\udc5c\ud835\udc54 2 |\ud835\udc38|)).", "mentionContextAttributes": {"used": {"value": true, "score": 0.5905577540397644}, "created": {"value": false, "score": 8.463859558105469e-06}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.99986732006073}, "created": {"value": false, "score": 0.08489882946014404}, "shared": {"value": false, "score": 9.5367431640625e-07}}, "references": [{"label": "[5]", "normalizedForm": "[5]", "refKey": 5}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Sortledton", "normalizedForm": "Sortledton", "offsetStart": 0, "offsetEnd": 10}, "context": "Sortledton's performance is slightly slower than HAL's because of the number of edges allowed in the block (512 for Sortledton, there are 512 edges per block, 2047 for HAL), leading to more random accesses for Sortledton.", "mentionContextAttributes": {"used": {"value": false, "score": 0.01750659942626953}, "created": {"value": false, "score": 1.704692840576172e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.99986732006073}, "created": {"value": false, "score": 0.08489882946014404}, "shared": {"value": false, "score": 9.5367431640625e-07}}, "references": [{"label": "[5]", "normalizedForm": "[5]", "refKey": 5}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Live-Graph", "normalizedForm": "Live-Graph", "offsetStart": 0, "offsetEnd": 15}, "context": "Live-Graph [16] supports historical queries based on transaction time; on the other hand, we are supporting historical queries based on source time (time when the update was emitted from the source machine). ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0002682805061340332}, "created": {"value": false, "score": 3.886222839355469e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0002682805061340332}, "created": {"value": false, "score": 5.8531761169433594e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Sortledton", "normalizedForm": "Sortledton", "offsetStart": 3, "offsetEnd": 13}, "context": "In Sortledton, blocks of edges are sorted and connected through a skiplist.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0040091872215271}, "created": {"value": false, "score": 1.0013580322265625e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.99986732006073}, "created": {"value": false, "score": 0.08489882946014404}, "shared": {"value": false, "score": 9.5367431640625e-07}}, "references": [{"label": "[5]", "normalizedForm": "[5]", "refKey": 5}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Sortledton", "normalizedForm": "Sortledton", "offsetStart": 6, "offsetEnd": 16}, "context": "While Sortledton and Teseo also gain from parallelism, they do so much less than HAL; LiveGraph does not benefit at all from it.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0016004443168640137}, "created": {"value": false, "score": 4.5299530029296875e-06}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.99986732006073}, "created": {"value": false, "score": 0.08489882946014404}, "shared": {"value": false, "score": 9.5367431640625e-07}}, "references": [{"label": "[5]", "normalizedForm": "[5]", "refKey": 5}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Teseo", "normalizedForm": "Teseo", "offsetStart": 10, "offsetEnd": 15}, "context": "(\ud835\udc56\ud835\udc56) In Teseo, sorted neighborhood block contains up to 512 edges as compared to HAL, where the maximum number of edges in a STALB is 2047, resulting in fewer random accesses.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0006516575813293457}, "created": {"value": false, "score": 9.059906005859375e-06}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.99986732006073}, "created": {"value": true, "score": 0.9975646734237671}, "shared": {"value": false, "score": 9.5367431640625e-07}}, "references": [{"label": "[11]", "normalizedForm": "[11]", "refKey": 11}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Sortledton", "normalizedForm": "Sortledton", "offsetStart": 10, "offsetEnd": 20}, "context": "We choose Sortledton (the latest system in the literature) as baseline, and measure the slowdown of other systems with respect to it.", "mentionContextAttributes": {"used": {"value": false, "score": 0.4697572588920593}, "created": {"value": false, "score": 0.0263364315032959}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.99986732006073}, "created": {"value": false, "score": 0.08489882946014404}, "shared": {"value": false, "score": 9.5367431640625e-07}}, "references": [{"label": "[5]", "normalizedForm": "[5]", "refKey": 5}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LiveGraph", "normalizedForm": "LiveGraph", "offsetStart": 11, "offsetEnd": 25}, "context": "Except for LiveGraph [16] and this paper, no other system supports historical state queries. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0007135272026062012}, "created": {"value": false, "score": 2.7179718017578125e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9988667964935303}, "created": {"value": true, "score": 0.934317409992218}, "shared": {"value": false, "score": 7.152557373046875e-07}}, "references": [{"label": "[11]", "normalizedForm": "[11]", "refKey": 11}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Live-Graph", "normalizedForm": "Live-Graph", "offsetStart": 12, "offsetEnd": 22}, "context": "Even though Live-Graph append newly arrived edges (without sorting by destination ids) in the adjacency list, it still performs significantly slower than the other systems. ", "mentionContextAttributes": {"used": {"value": false, "score": 5.054473876953125e-05}, "created": {"value": false, "score": 5.8531761169433594e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0002682805061340332}, "created": {"value": false, "score": 5.8531761169433594e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "PageRank", "normalizedForm": "PageRank", "offsetStart": 13, "offsetEnd": 21}, "context": "In contrast, PageRank, WCC, and CDLP require sequential vertex access and sequential neighborhood access, in which HAL performs significantly better than LiveGraph and Teseo, and slightly better than Sortledton.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0002078413963317871}, "created": {"value": false, "score": 8.463859558105469e-06}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.989263117313385}, "created": {"value": false, "score": 0.00011909008026123047}, "shared": {"value": false, "score": 5.960464477539062e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Sortledton", "normalizedForm": "Sortledton", "offsetStart": 13, "offsetEnd": 23}, "context": "In contrast, Sortledton and Teseo follow a set-based neighborhood design, where the blocks of edges are sorted by destination id.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0007630586624145508}, "created": {"value": false, "score": 0.00021117925643920898}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.99986732006073}, "created": {"value": false, "score": 0.08489882946014404}, "shared": {"value": false, "score": 9.5367431640625e-07}}, "references": [{"label": "[5]", "normalizedForm": "[5]", "refKey": 5}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LiveGraph", "normalizedForm": "LiveGraph", "offsetStart": 14, "offsetEnd": 23}, "context": "Additionally, LiveGraph checks each entry's invalidation time to see whether the edge entry is deleted or safe to read. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.024631500244140625}, "created": {"value": false, "score": 6.556510925292969e-06}, "shared": {"value": false, "score": 5.960464477539062e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9988667964935303}, "created": {"value": true, "score": 0.934317409992218}, "shared": {"value": false, "score": 7.152557373046875e-07}}, "references": [{"label": "[11]", "normalizedForm": "[11]", "refKey": 11}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Teseo", "normalizedForm": "Teseo", "offsetStart": 15, "offsetEnd": 20}, "context": "Sortledton and Teseo perform (\ud835\udc56,\ud835\udc56\ud835\udc56) in \ud835\udc42 (\ud835\udc59\ud835\udc5c\ud835\udc54(|\ud835\udc38|)).", "mentionContextAttributes": {"used": {"value": true, "score": 0.99986732006073}, "created": {"value": false, "score": 1.9311904907226562e-05}, "shared": {"value": false, "score": 9.5367431640625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.99986732006073}, "created": {"value": true, "score": 0.9975646734237671}, "shared": {"value": false, "score": 9.5367431640625e-07}}, "references": [{"label": "[11]", "normalizedForm": "[11]", "refKey": 11}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Teseo", "normalizedForm": "Teseo", "offsetStart": 15, "offsetEnd": 20}, "context": "Sortledton and Teseo perform very similarly on all the datasets, because of their similar set-based neighborhood design; for edge existence check, this requires takes \ud835\udc42 (\ud835\udc59\ud835\udc5c\ud835\udc54 2 |\ud835\udc38|)).", "mentionContextAttributes": {"used": {"value": true, "score": 0.5905577540397644}, "created": {"value": false, "score": 8.463859558105469e-06}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.99986732006073}, "created": {"value": true, "score": 0.9975646734237671}, "shared": {"value": false, "score": 9.5367431640625e-07}}, "references": [{"label": "[11]", "normalizedForm": "[11]", "refKey": 11}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LiveGraph", "normalizedForm": "LiveGraph", "offsetStart": 16, "offsetEnd": 25}, "context": "This is because LiveGraph provides completely sequential access to the adjacency list, which in turn leads to more resize requests as the edge vector, initially of size 1, is resized. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.00018781423568725586}, "created": {"value": false, "score": 3.349781036376953e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9988667964935303}, "created": {"value": true, "score": 0.934317409992218}, "shared": {"value": false, "score": 7.152557373046875e-07}}, "references": [{"label": "[11]", "normalizedForm": "[11]", "refKey": 11}]}, {"type": "software", "software-type": "implicit", "software-name": {"rawForm": "code", "normalizedForm": "code", "offsetStart": 18, "offsetEnd": 22}, "version": {"rawForm": ".2", "normalizedForm": ".2", "offsetStart": 64, "offsetEnd": 66}, "context": "All system source code is written in C++ and compiled on GCC v10.2, with the optimization flag -O3. ", "mentionContextAttributes": {"used": {"value": true, "score": 0.7252070903778076}, "created": {"value": false, "score": 0.00025850534439086914}, "shared": {"value": false, "score": 0.0501866340637207}}, "documentContextAttributes": {"used": {"value": true, "score": 0.7252070903778076}, "created": {"value": false, "score": 0.00025850534439086914}, "shared": {"value": false, "score": 0.0501866340637207}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Teseo", "normalizedForm": "Teseo", "offsetStart": 21, "offsetEnd": 26}, "context": "While Sortledton and Teseo also gain from parallelism, they do so much less than HAL; LiveGraph does not benefit at all from it.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0016004443168640137}, "created": {"value": false, "score": 4.5299530029296875e-06}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.99986732006073}, "created": {"value": true, "score": 0.9975646734237671}, "shared": {"value": false, "score": 9.5367431640625e-07}}, "references": [{"label": "[11]", "normalizedForm": "[11]", "refKey": 11}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CurIndex", "normalizedForm": "CurIndex", "offsetStart": 22, "offsetEnd": 30}, "context": "Then, update \ud835\udc46 \ud835\udc56\ud835\udc5c .CurIndex, decrementing it by 1. (5) Create a new UPI, denoted UPI \ud835\udc52 , storing the position (in the STAL) of the newly inserted edge entry.", "mentionContextAttributes": {"used": {"value": false, "score": 0.003988504409790039}, "created": {"value": false, "score": 2.86102294921875e-06}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999257504940033}, "created": {"value": false, "score": 2.8848648071289062e-05}, "shared": {"value": false, "score": 3.5762786865234375e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LiveGraph", "normalizedForm": "LiveGraph", "offsetStart": 22, "offsetEnd": 35}, "context": "On the other hand, in LiveGraph [16], the order of edge arrival is maintained. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0015859603881835938}, "created": {"value": false, "score": 5.125999450683594e-06}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9988667964935303}, "created": {"value": true, "score": 0.934317409992218}, "shared": {"value": false, "score": 7.152557373046875e-07}}, "references": [{"label": "[11]", "normalizedForm": "[11]", "refKey": 11}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Sortledton", "normalizedForm": "Sortledton", "offsetStart": 23, "offsetEnd": 33}, "context": "In contrast, HAL (like Sortledton) makes this conversion at edge insertion time.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00029981136322021484}, "created": {"value": false, "score": 1.0013580322265625e-05}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.99986732006073}, "created": {"value": false, "score": 0.08489882946014404}, "shared": {"value": false, "score": 9.5367431640625e-07}}, "references": [{"label": "[5]", "normalizedForm": "[5]", "refKey": 5}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LiveGraph", "normalizedForm": "LiveGraph", "offsetStart": 25, "offsetEnd": 34}, "context": "To handle graph updates, LiveGraph manages versions of edge entries in the vector. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.002466440200805664}, "created": {"value": false, "score": 0.0054427385330200195}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9988667964935303}, "created": {"value": true, "score": 0.934317409992218}, "shared": {"value": false, "score": 7.152557373046875e-07}}, "references": [{"label": "[11]", "normalizedForm": "[11]", "refKey": 11}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Sortledton", "normalizedForm": "Sortledton", "offsetStart": 26, "offsetEnd": 36}, "context": "To find and delete edges, Sortledton and Teseo take \ud835\udc42 (\ud835\udc59\ud835\udc5c\ud835\udc54(|\ud835\udc38|)) because of the set-based neighborhood design, while HAL needs \ud835\udc42 (1) for in-order updates and \ud835\udc42 (\ud835\udc59\ud835\udc5c\ud835\udc54(|\ud835\udc38|)) for out-of-order updates.", "mentionContextAttributes": {"used": {"value": false, "score": 0.2062472105026245}, "created": {"value": false, "score": 1.7404556274414062e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.99986732006073}, "created": {"value": false, "score": 0.08489882946014404}, "shared": {"value": false, "score": 9.5367431640625e-07}}, "references": [{"label": "[5]", "normalizedForm": "[5]", "refKey": 5}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LiveGraph", "normalizedForm": "LiveGraph", "offsetStart": 27, "offsetEnd": 41}, "context": "In our work, we follow the LiveGraph [16] MVCC protocol with the optimization described in Section 4 to improve update throughput and performance on analytics. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0009707212448120117}, "created": {"value": true, "score": 0.934317409992218}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9988667964935303}, "created": {"value": true, "score": 0.934317409992218}, "shared": {"value": false, "score": 7.152557373046875e-07}}, "references": [{"label": "[11]", "normalizedForm": "[11]", "refKey": 11}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Teseo", "normalizedForm": "Teseo", "offsetStart": 28, "offsetEnd": 33}, "context": "In contrast, Sortledton and Teseo follow a set-based neighborhood design, where the blocks of edges are sorted by destination id.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0007630586624145508}, "created": {"value": false, "score": 0.00021117925643920898}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.99986732006073}, "created": {"value": true, "score": 0.9975646734237671}, "shared": {"value": false, "score": 9.5367431640625e-07}}, "references": [{"label": "[11]", "normalizedForm": "[11]", "refKey": 11}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CurIndex", "normalizedForm": "CurIndex", "offsetStart": 35, "offsetEnd": 43}, "context": "\u2022 \ud835\udc4f \ud835\udc56 stores on 11 bits \ud835\udc46 \ud835\udc56\ud835\udc5c .CurIndex.", "mentionContextAttributes": {"used": {"value": true, "score": 0.999257504940033}, "created": {"value": false, "score": 5.4836273193359375e-06}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999257504940033}, "created": {"value": false, "score": 2.8848648071289062e-05}, "shared": {"value": false, "score": 3.5762786865234375e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LiveGraph", "normalizedForm": "LiveGraph", "offsetStart": 35, "offsetEnd": 44}, "context": "Thus, set-based systems outperform LiveGraph. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0004271864891052246}, "created": {"value": false, "score": 5.8531761169433594e-05}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9988667964935303}, "created": {"value": true, "score": 0.934317409992218}, "shared": {"value": false, "score": 7.152557373046875e-07}}, "references": [{"label": "[11]", "normalizedForm": "[11]", "refKey": 11}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Sortledton", "normalizedForm": "Sortledton", "offsetStart": 35, "offsetEnd": 45}, "context": "Lessons learned Set-based systems (Sortledton and Teseo) incur fewer cache misses than LiveGraph, since the former read the latest version of the destination ids, while LiveGraph must traverse all versions of the destination ids in the adjacency list, together with per-edge information.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9259790182113647}, "created": {"value": false, "score": 5.841255187988281e-06}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.99986732006073}, "created": {"value": false, "score": 0.08489882946014404}, "shared": {"value": false, "score": 9.5367431640625e-07}}, "references": [{"label": "[5]", "normalizedForm": "[5]", "refKey": 5}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CurIndex", "normalizedForm": "CurIndex", "offsetStart": 38, "offsetEnd": 46}, "context": "(4) In \ud835\udc46 \ud835\udc56\ud835\udc5c , at position \ud835\udc46 \ud835\udc56\ud835\udc5c .CurIndex-1, store \ud835\udc51 in the DestEntries, the IEM block in the IEMEntries, the \ud835\udc60 \u2192 \ud835\udc51 edge properties in the Property vector.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9894298911094666}, "created": {"value": false, "score": 2.8848648071289062e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999257504940033}, "created": {"value": false, "score": 2.8848648071289062e-05}, "shared": {"value": false, "score": 3.5762786865234375e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Sortledton", "normalizedForm": "Sortledton", "offsetStart": 40, "offsetEnd": 50}, "context": "At maximum parallelism, HAL outperforms Sortledton and Teseo by 3\u00d7, and LiveGraph by 30\u00d7.", "mentionContextAttributes": {"used": {"value": false, "score": 0.08749788999557495}, "created": {"value": false, "score": 2.086162567138672e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.99986732006073}, "created": {"value": false, "score": 0.08489882946014404}, "shared": {"value": false, "score": 9.5367431640625e-07}}, "references": [{"label": "[5]", "normalizedForm": "[5]", "refKey": 5}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Teseo", "normalizedForm": "Teseo", "offsetStart": 41, "offsetEnd": 46}, "context": "To find and delete edges, Sortledton and Teseo take \ud835\udc42 (\ud835\udc59\ud835\udc5c\ud835\udc54(|\ud835\udc38|)) because of the set-based neighborhood design, while HAL needs \ud835\udc42 (1) for in-order updates and \ud835\udc42 (\ud835\udc59\ud835\udc5c\ud835\udc54(|\ud835\udc38|)) for out-of-order updates.", "mentionContextAttributes": {"used": {"value": false, "score": 0.2062472105026245}, "created": {"value": false, "score": 1.7404556274414062e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.99986732006073}, "created": {"value": true, "score": 0.9975646734237671}, "shared": {"value": false, "score": 9.5367431640625e-07}}, "references": [{"label": "[11]", "normalizedForm": "[11]", "refKey": 11}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Teseo", "normalizedForm": "Teseo", "offsetStart": 50, "offsetEnd": 55}, "context": "Lessons learned Set-based systems (Sortledton and Teseo) incur fewer cache misses than LiveGraph, since the former read the latest version of the destination ids, while LiveGraph must traverse all versions of the destination ids in the adjacency list, together with per-edge information.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9259790182113647}, "created": {"value": false, "score": 5.841255187988281e-06}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.99986732006073}, "created": {"value": true, "score": 0.9975646734237671}, "shared": {"value": false, "score": 9.5367431640625e-07}}, "references": [{"label": "[11]", "normalizedForm": "[11]", "refKey": 11}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Teseo", "normalizedForm": "Teseo", "offsetStart": 55, "offsetEnd": 60}, "context": "At maximum parallelism, HAL outperforms Sortledton and Teseo by 3\u00d7, and LiveGraph by 30\u00d7.", "mentionContextAttributes": {"used": {"value": false, "score": 0.08749788999557495}, "created": {"value": false, "score": 2.086162567138672e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.99986732006073}, "created": {"value": true, "score": 0.9975646734237671}, "shared": {"value": false, "score": 9.5367431640625e-07}}, "references": [{"label": "[11]", "normalizedForm": "[11]", "refKey": 11}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Teseo", "normalizedForm": "Teseo", "offsetStart": 56, "offsetEnd": 61}, "context": "We run the LDBC graph analytics benchmark [7] on top of Teseo, Sortledton, LiveGraph and HAL, for our four datasets.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9819707870483398}, "created": {"value": false, "score": 0.0018222332000732422}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.99986732006073}, "created": {"value": true, "score": 0.9975646734237671}, "shared": {"value": false, "score": 9.5367431640625e-07}}, "references": [{"label": "[11]", "normalizedForm": "[11]", "refKey": 11}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Sortledton", "normalizedForm": "Sortledton", "offsetStart": 63, "offsetEnd": 73}, "context": "We run the LDBC graph analytics benchmark [7] on top of Teseo, Sortledton, LiveGraph and HAL, for our four datasets.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9819707870483398}, "created": {"value": false, "score": 0.0018222332000732422}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.99986732006073}, "created": {"value": false, "score": 0.08489882946014404}, "shared": {"value": false, "score": 9.5367431640625e-07}}, "references": [{"label": "[5]", "normalizedForm": "[5]", "refKey": 5}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LiveGraph", "normalizedForm": "LiveGraph", "offsetStart": 64, "offsetEnd": 73}, "context": "As our experiments show (Section 9), competitor systems such as LiveGraph, which makes some checks for each traversed edge, suffer, among others, from their poor usage of the cache. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.00011026859283447266}, "created": {"value": false, "score": 0.02413010597229004}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9988667964935303}, "created": {"value": true, "score": 0.934317409992218}, "shared": {"value": false, "score": 7.152557373046875e-07}}, "references": [{"label": "[11]", "normalizedForm": "[11]", "refKey": 11}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Teseo", "normalizedForm": "Teseo", "offsetStart": 65, "offsetEnd": 70}, "context": "Teseo performs significantly worse than HAL mainly because: (\ud835\udc56) Teseo needs a per-edge entry mapping from sparse to dense vertex ids in the analytics part of the graph algorithm using a hash table, which is costly.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00042062997817993164}, "created": {"value": false, "score": 9.894371032714844e-06}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.99986732006073}, "created": {"value": true, "score": 0.9975646734237671}, "shared": {"value": false, "score": 9.5367431640625e-07}}, "references": [{"label": "[11]", "normalizedForm": "[11]", "refKey": 11}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Sortledton", "normalizedForm": "Sortledton", "offsetStart": 66, "offsetEnd": 76}, "context": "For out-of-order insertion, the complexity is similar to those of Sortledton and Teseo, but worse than LiveGraph's best-case scenario (no false positive in the Bloom filter).", "mentionContextAttributes": {"used": {"value": false, "score": 0.0019172430038452148}, "created": {"value": false, "score": 3.6835670471191406e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.99986732006073}, "created": {"value": false, "score": 0.08489882946014404}, "shared": {"value": false, "score": 9.5367431640625e-07}}, "references": [{"label": "[5]", "normalizedForm": "[5]", "refKey": 5}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LiveGraph", "normalizedForm": "LiveGraph", "offsetStart": 72, "offsetEnd": 81}, "context": "At maximum parallelism, HAL outperforms Sortledton and Teseo by 3\u00d7, and LiveGraph by 30\u00d7. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.08749788999557495}, "created": {"value": false, "score": 2.086162567138672e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9988667964935303}, "created": {"value": true, "score": 0.934317409992218}, "shared": {"value": false, "score": 7.152557373046875e-07}}, "references": [{"label": "[11]", "normalizedForm": "[11]", "refKey": 11}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LiveGraph", "normalizedForm": "LiveGraph", "offsetStart": 75, "offsetEnd": 84}, "context": "We run the LDBC graph analytics benchmark [7] on top of Teseo, Sortledton, LiveGraph and HAL, for our four datasets.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9819707870483398}, "created": {"value": false, "score": 0.0018222332000732422}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9988667964935303}, "created": {"value": true, "score": 0.934317409992218}, "shared": {"value": false, "score": 7.152557373046875e-07}}, "references": [{"label": "[11]", "normalizedForm": "[11]", "refKey": 11}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Teseo", "normalizedForm": "Teseo", "offsetStart": 81, "offsetEnd": 86}, "context": "For out-of-order insertion, the complexity is similar to those of Sortledton and Teseo, but worse than LiveGraph's best-case scenario (no false positive in the Bloom filter).", "mentionContextAttributes": {"used": {"value": false, "score": 0.0019172430038452148}, "created": {"value": false, "score": 3.6835670471191406e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.99986732006073}, "created": {"value": true, "score": 0.9975646734237671}, "shared": {"value": false, "score": 9.5367431640625e-07}}, "references": [{"label": "[11]", "normalizedForm": "[11]", "refKey": 11}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "PageRank", "normalizedForm": "PageRank", "offsetStart": 86, "offsetEnd": 94}, "context": "Popular benchmarks compare them on algorithms including such as Breadth-First Search, PageRank, Community Detection, etc.", "mentionContextAttributes": {"used": {"value": false, "score": 0.027032315731048584}, "created": {"value": false, "score": 0.00011909008026123047}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.989263117313385}, "created": {"value": false, "score": 0.00011909008026123047}, "shared": {"value": false, "score": 5.960464477539062e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LiveGraph", "normalizedForm": "LiveGraph", "offsetStart": 86, "offsetEnd": 95}, "context": "While Sortledton and Teseo also gain from parallelism, they do so much less than HAL; LiveGraph does not benefit at all from it. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0016004443168640137}, "created": {"value": false, "score": 4.5299530029296875e-06}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9988667964935303}, "created": {"value": true, "score": 0.934317409992218}, "shared": {"value": false, "score": 7.152557373046875e-07}}, "references": [{"label": "[11]", "normalizedForm": "[11]", "refKey": 11}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LiveGraph", "normalizedForm": "LiveGraph", "offsetStart": 87, "offsetEnd": 96}, "context": "Lessons learned Set-based systems (Sortledton and Teseo) incur fewer cache misses than LiveGraph, since the former read the latest version of the destination ids, while LiveGraph must traverse all versions of the destination ids in the adjacency list, together with per-edge information. ", "mentionContextAttributes": {"used": {"value": true, "score": 0.9259790182113647}, "created": {"value": false, "score": 5.841255187988281e-06}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9988667964935303}, "created": {"value": true, "score": 0.934317409992218}, "shared": {"value": false, "score": 7.152557373046875e-07}}, "references": [{"label": "[11]", "normalizedForm": "[11]", "refKey": 11}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Sortledton", "normalizedForm": "Sortledton", "offsetStart": 91, "offsetEnd": 101}, "context": "In our system, the maximum number of entries allowed per block is 2047; for the competitor Sortledton [5], it is set to 512 entries per block.", "mentionContextAttributes": {"used": {"value": false, "score": 0.003871440887451172}, "created": {"value": false, "score": 4.553794860839844e-05}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.99986732006073}, "created": {"value": false, "score": 0.08489882946014404}, "shared": {"value": false, "score": 9.5367431640625e-07}}, "references": [{"label": "[5]", "normalizedForm": "[5]", "refKey": 5, "offsetStart": 25594, "offsetEnd": 25597}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Teseo", "normalizedForm": "Teseo", "offsetStart": 97, "offsetEnd": 102}, "context": "Next, we evaluate our system on a mixed workload made of insertions and deletions, introduced in Teseo [11].", "mentionContextAttributes": {"used": {"value": false, "score": 0.012551486492156982}, "created": {"value": true, "score": 0.9975646734237671}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.99986732006073}, "created": {"value": true, "score": 0.9975646734237671}, "shared": {"value": false, "score": 9.5367431640625e-07}}, "references": [{"label": "[11]", "normalizedForm": "[11]", "refKey": 11, "offsetStart": 33706, "offsetEnd": 33710}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Teseo", "normalizedForm": "Teseo", "offsetStart": 97, "offsetEnd": 102}, "context": "Finally, converting sparse vertex identifiers into dense ones during analytics computation (like Teseo does) is costly.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00024968385696411133}, "created": {"value": false, "score": 2.2292137145996094e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.99986732006073}, "created": {"value": true, "score": 0.9975646734237671}, "shared": {"value": false, "score": 9.5367431640625e-07}}, "references": [{"label": "[11]", "normalizedForm": "[11]", "refKey": 11}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Sortledton", "normalizedForm": "Sortledton", "offsetStart": 101, "offsetEnd": 111}, "context": "Our system performs approximately 9 million updates per second, which is three times faster than the Sortledton.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00043886899948120117}, "created": {"value": false, "score": 0.08489882946014404}, "shared": {"value": false, "score": 8.344650268554688e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.99986732006073}, "created": {"value": false, "score": 0.08489882946014404}, "shared": {"value": false, "score": 9.5367431640625e-07}}, "references": [{"label": "[5]", "normalizedForm": "[5]", "refKey": 5}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LiveGraph", "normalizedForm": "LiveGraph", "offsetStart": 103, "offsetEnd": 112}, "context": "For out-of-order insertion, the complexity is similar to those of Sortledton and Teseo, but worse than LiveGraph's best-case scenario (no false positive in the Bloom filter).", "mentionContextAttributes": {"used": {"value": false, "score": 0.0019172430038452148}, "created": {"value": false, "score": 3.6835670471191406e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9988667964935303}, "created": {"value": true, "score": 0.934317409992218}, "shared": {"value": false, "score": 7.152557373046875e-07}}, "references": [{"label": "[11]", "normalizedForm": "[11]", "refKey": 11}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Benchmark Suite", "normalizedForm": "Benchmark Suite", "offsetStart": 107, "offsetEnd": 122}, "context": "For fair comparison, the implementation of the graph algorithms is taken from the Graph Algorithm Platform Benchmark Suite (GAP BS) [2], and runs on the driver implemented by Teseo [11].", "mentionContextAttributes": {"used": {"value": true, "score": 0.9963011741638184}, "created": {"value": false, "score": 0.00010895729064941406}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9963011741638184}, "created": {"value": false, "score": 0.00010895729064941406}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "references": [{"label": "[2]", "normalizedForm": "[2]", "refKey": 2, "offsetStart": 26850, "offsetEnd": 26853}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Sortledton", "normalizedForm": "Sortledton", "offsetStart": 116, "offsetEnd": 126}, "context": "Sortledton's performance is slightly slower than HAL's because of the number of edges allowed in the block (512 for Sortledton, there are 512 edges per block, 2047 for HAL), leading to more random accesses for Sortledton.", "mentionContextAttributes": {"used": {"value": false, "score": 0.01750659942626953}, "created": {"value": false, "score": 1.704692840576172e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.99986732006073}, "created": {"value": false, "score": 0.08489882946014404}, "shared": {"value": false, "score": 9.5367431640625e-07}}, "references": [{"label": "[5]", "normalizedForm": "[5]", "refKey": 5}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Teseo", "normalizedForm": "Teseo", "offsetStart": 127, "offsetEnd": 132}, "context": "Lesson learned: In systems that follow the set-based neighborhood design, with edge blocks that are connected through B+ tree (Teseo) or skip lists (Sortledton), the necessary sorting steps limit the throughput due to contention between writer threads; their advantage is that they do not need an extra index when checking for edge existence.", "mentionContextAttributes": {"used": {"value": false, "score": 0.002954423427581787}, "created": {"value": false, "score": 1.1205673217773438e-05}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.99986732006073}, "created": {"value": true, "score": 0.9975646734237671}, "shared": {"value": false, "score": 9.5367431640625e-07}}, "references": [{"label": "[11]", "normalizedForm": "[11]", "refKey": 11}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LiveGraph", "normalizedForm": "LiveGraph", "offsetStart": 133, "offsetEnd": 146}, "context": "We compared our system with three other cache-friendly hybrid analytical/transactional processing (HTAP) systems for graphs, namely: LiveGraph [16], Teseo [11], and Sortledton [5]. ", "mentionContextAttributes": {"used": {"value": true, "score": 0.9988667964935303}, "created": {"value": false, "score": 3.325939178466797e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9988667964935303}, "created": {"value": true, "score": 0.934317409992218}, "shared": {"value": false, "score": 7.152557373046875e-07}}, "references": [{"label": "[11]", "normalizedForm": "[11]", "refKey": 11, "offsetStart": 27069, "offsetEnd": 27073}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Teseo", "normalizedForm": "Teseo", "offsetStart": 149, "offsetEnd": 158}, "context": "We compared our system with three other cache-friendly hybrid analytical/transactional processing (HTAP) systems for graphs, namely: LiveGraph [16], Teseo [11], and Sortledton [5]. ", "mentionContextAttributes": {"used": {"value": true, "score": 0.9988667964935303}, "created": {"value": false, "score": 3.325939178466797e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.99986732006073}, "created": {"value": true, "score": 0.9975646734237671}, "shared": {"value": false, "score": 9.5367431640625e-07}}, "references": [{"label": "[11]", "normalizedForm": "[11]", "refKey": 11}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Sortledton", "normalizedForm": "Sortledton", "offsetStart": 149, "offsetEnd": 159}, "context": "Lesson learned: In systems that follow the set-based neighborhood design, with edge blocks that are connected through B+ tree (Teseo) or skip lists (Sortledton), the necessary sorting steps limit the throughput due to contention between writer threads; their advantage is that they do not need an extra index when checking for edge existence.", "mentionContextAttributes": {"used": {"value": false, "score": 0.002954423427581787}, "created": {"value": false, "score": 1.1205673217773438e-05}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.99986732006073}, "created": {"value": false, "score": 0.08489882946014404}, "shared": {"value": false, "score": 9.5367431640625e-07}}, "references": [{"label": "[5]", "normalizedForm": "[5]", "refKey": 5}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LiveGraph", "normalizedForm": "LiveGraph", "offsetStart": 154, "offsetEnd": 163}, "context": "In contrast, PageRank, WCC, and CDLP require sequential vertex access and sequential neighborhood access, in which HAL performs significantly better than LiveGraph and Teseo, and slightly better than Sortledton.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0002078413963317871}, "created": {"value": false, "score": 8.463859558105469e-06}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9988667964935303}, "created": {"value": true, "score": 0.934317409992218}, "shared": {"value": false, "score": 7.152557373046875e-07}}, "references": [{"label": "[11]", "normalizedForm": "[11]", "refKey": 11}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "PageRank", "normalizedForm": "PageRank", "offsetStart": 163, "offsetEnd": 171}, "context": "We compare our system with existing competitors using the LDBC graph analytics benchmark [7], from which we use five graph algorithms: Breadth-First Search (BFS), PageRank (PR), Single-Source Shortest Path (SSSP), Community Detection Via Label Propagation (CDLP), and the Weakly Connected Components (WCC).", "mentionContextAttributes": {"used": {"value": true, "score": 0.989263117313385}, "created": {"value": false, "score": 8.213520050048828e-05}, "shared": {"value": false, "score": 5.960464477539062e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.989263117313385}, "created": {"value": false, "score": 0.00011909008026123047}, "shared": {"value": false, "score": 5.960464477539062e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LiveGraph", "normalizedForm": "LiveGraph", "offsetStart": 163, "offsetEnd": 172}, "context": "Existing systems supporting multi-stream dynamic graph analytics can be classified into two main categories: those which provide transactional guarantees, such as LiveGraph [16], Teseo [11], and Sortledton [5], and those that do not, such as Llama [13], GraphOne [8], and STINGER [4].", "mentionContextAttributes": {"used": {"value": false, "score": 0.00026351213455200195}, "created": {"value": false, "score": 1.1444091796875e-05}, "shared": {"value": false, "score": 7.152557373046875e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9988667964935303}, "created": {"value": true, "score": 0.934317409992218}, "shared": {"value": false, "score": 7.152557373046875e-07}}, "references": [{"label": "[16]", "normalizedForm": "[16]", "refKey": 16, "offsetStart": 37913, "offsetEnd": 37917}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Sortledton", "normalizedForm": "Sortledton", "offsetStart": 165, "offsetEnd": 178}, "context": "We compared our system with three other cache-friendly hybrid analytical/transactional processing (HTAP) systems for graphs, namely: LiveGraph [16], Teseo [11], and Sortledton [5]. ", "mentionContextAttributes": {"used": {"value": true, "score": 0.9988667964935303}, "created": {"value": false, "score": 3.325939178466797e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.99986732006073}, "created": {"value": false, "score": 0.08489882946014404}, "shared": {"value": false, "score": 9.5367431640625e-07}}, "references": [{"label": "[5]", "normalizedForm": "[5]", "refKey": 5}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Teseo", "normalizedForm": "Teseo", "offsetStart": 168, "offsetEnd": 173}, "context": "In contrast, PageRank, WCC, and CDLP require sequential vertex access and sequential neighborhood access, in which HAL performs significantly better than LiveGraph and Teseo, and slightly better than Sortledton.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0002078413963317871}, "created": {"value": false, "score": 8.463859558105469e-06}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.99986732006073}, "created": {"value": true, "score": 0.9975646734237671}, "shared": {"value": false, "score": 9.5367431640625e-07}}, "references": [{"label": "[11]", "normalizedForm": "[11]", "refKey": 11}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LiveGraph", "normalizedForm": "LiveGraph", "offsetStart": 169, "offsetEnd": 178}, "context": "Lessons learned Set-based systems (Sortledton and Teseo) incur fewer cache misses than LiveGraph, since the former read the latest version of the destination ids, while LiveGraph must traverse all versions of the destination ids in the adjacency list, together with per-edge information.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9259790182113647}, "created": {"value": false, "score": 5.841255187988281e-06}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9988667964935303}, "created": {"value": true, "score": 0.934317409992218}, "shared": {"value": false, "score": 7.152557373046875e-07}}, "references": [{"label": "[11]", "normalizedForm": "[11]", "refKey": 11}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Teseo", "normalizedForm": "Teseo", "offsetStart": 175, "offsetEnd": 180}, "context": "For fair comparison, the implementation of the graph algorithms is taken from the Graph Algorithm Platform Benchmark Suite (GAP BS) [2], and runs on the driver implemented by Teseo [11].", "mentionContextAttributes": {"used": {"value": true, "score": 0.9963011741638184}, "created": {"value": false, "score": 0.00010895729064941406}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.99986732006073}, "created": {"value": true, "score": 0.9975646734237671}, "shared": {"value": false, "score": 9.5367431640625e-07}}, "references": [{"label": "[11]", "normalizedForm": "[11]", "refKey": 11, "offsetStart": 26899, "offsetEnd": 26903}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Sortledton", "normalizedForm": "Sortledton", "offsetStart": 175, "offsetEnd": 185}, "context": "For both deletions and edge search, for in-order updates, HAL has better complexity than the existing systems; for out-of-order updates, its complexity is the same as that of Sortledton and Teseo, and better than LiveGraph's.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0002974867820739746}, "created": {"value": false, "score": 3.6597251892089844e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.99986732006073}, "created": {"value": false, "score": 0.08489882946014404}, "shared": {"value": false, "score": 9.5367431640625e-07}}, "references": [{"label": "[5]", "normalizedForm": "[5]", "refKey": 5}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Teseo", "normalizedForm": "Teseo", "offsetStart": 179, "offsetEnd": 184}, "context": "Existing systems supporting multi-stream dynamic graph analytics can be classified into two main categories: those which provide transactional guarantees, such as LiveGraph [16], Teseo [11], and Sortledton [5], and those that do not, such as Llama [13], GraphOne [8], and STINGER [4].", "mentionContextAttributes": {"used": {"value": false, "score": 0.00026351213455200195}, "created": {"value": false, "score": 1.1444091796875e-05}, "shared": {"value": false, "score": 7.152557373046875e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.99986732006073}, "created": {"value": true, "score": 0.9975646734237671}, "shared": {"value": false, "score": 9.5367431640625e-07}}, "references": [{"label": "[11]", "normalizedForm": "[11]", "refKey": 11, "offsetStart": 37925, "offsetEnd": 37929}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Teseo", "normalizedForm": "Teseo", "offsetStart": 190, "offsetEnd": 195}, "context": "For both deletions and edge search, for in-order updates, HAL has better complexity than the existing systems; for out-of-order updates, its complexity is the same as that of Sortledton and Teseo, and better than LiveGraph's.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0002974867820739746}, "created": {"value": false, "score": 3.6597251892089844e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.99986732006073}, "created": {"value": true, "score": 0.9975646734237671}, "shared": {"value": false, "score": 9.5367431640625e-07}}, "references": [{"label": "[11]", "normalizedForm": "[11]", "refKey": 11}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Sortledton", "normalizedForm": "Sortledton", "offsetStart": 195, "offsetEnd": 205}, "context": "Existing systems supporting multi-stream dynamic graph analytics can be classified into two main categories: those which provide transactional guarantees, such as LiveGraph [16], Teseo [11], and Sortledton [5], and those that do not, such as Llama [13], GraphOne [8], and STINGER [4].", "mentionContextAttributes": {"used": {"value": false, "score": 0.00026351213455200195}, "created": {"value": false, "score": 1.1444091796875e-05}, "shared": {"value": false, "score": 7.152557373046875e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.99986732006073}, "created": {"value": false, "score": 0.08489882946014404}, "shared": {"value": false, "score": 9.5367431640625e-07}}, "references": [{"label": "[5]", "normalizedForm": "[5]", "refKey": 5, "offsetStart": 37946, "offsetEnd": 37949}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Sortledton", "normalizedForm": "Sortledton", "offsetStart": 200, "offsetEnd": 210}, "context": "In contrast, PageRank, WCC, and CDLP require sequential vertex access and sequential neighborhood access, in which HAL performs significantly better than LiveGraph and Teseo, and slightly better than Sortledton.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0002078413963317871}, "created": {"value": false, "score": 8.463859558105469e-06}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.99986732006073}, "created": {"value": false, "score": 0.08489882946014404}, "shared": {"value": false, "score": 9.5367431640625e-07}}, "references": [{"label": "[5]", "normalizedForm": "[5]", "refKey": 5}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LiveGraph", "normalizedForm": "LiveGraph", "offsetStart": 204, "offsetEnd": 213}, "context": "However, the set-based neighborhood design (sorted by destination ids) does not maintain the arrival order of the edges; hence, for historical queries, its complexity is worse, \ud835\udc42 (|\ud835\udc38|), than the one of LiveGraph, \ud835\udc42 (\ud835\udc59\ud835\udc5c\ud835\udc54(|\ud835\udc38|)). ", "mentionContextAttributes": {"used": {"value": false, "score": 0.000405728816986084}, "created": {"value": false, "score": 4.744529724121094e-05}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9988667964935303}, "created": {"value": true, "score": 0.934317409992218}, "shared": {"value": false, "score": 7.152557373046875e-07}}, "references": [{"label": "[11]", "normalizedForm": "[11]", "refKey": 11}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Sortledton", "normalizedForm": "Sortledton", "offsetStart": 210, "offsetEnd": 220}, "context": "Sortledton's performance is slightly slower than HAL's because of the number of edges allowed in the block (512 for Sortledton, there are 512 edges per block, 2047 for HAL), leading to more random accesses for Sortledton.", "mentionContextAttributes": {"used": {"value": false, "score": 0.01750659942626953}, "created": {"value": false, "score": 1.704692840576172e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.99986732006073}, "created": {"value": false, "score": 0.08489882946014404}, "shared": {"value": false, "score": 9.5367431640625e-07}}, "references": [{"label": "[5]", "normalizedForm": "[5]", "refKey": 5}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LiveGraph", "normalizedForm": "LiveGraph", "offsetStart": 213, "offsetEnd": 222}, "context": "For both deletions and edge search, for in-order updates, HAL has better complexity than the existing systems; for out-of-order updates, its complexity is the same as that of Sortledton and Teseo, and better than LiveGraph's.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0002974867820739746}, "created": {"value": false, "score": 3.6597251892089844e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9988667964935303}, "created": {"value": true, "score": 0.934317409992218}, "shared": {"value": false, "score": 7.152557373046875e-07}}, "references": [{"label": "[11]", "normalizedForm": "[11]", "refKey": 11}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "GraphOne", "normalizedForm": "GraphOne", "offsetStart": 254, "offsetEnd": 265}, "context": "Existing systems supporting multi-stream dynamic graph analytics can be classified into two main categories: those which provide transactional guarantees, such as LiveGraph [16], Teseo [11], and Sortledton [5], and those that do not, such as Llama [13], GraphOne [8], and STINGER [4].", "mentionContextAttributes": {"used": {"value": false, "score": 0.00026351213455200195}, "created": {"value": false, "score": 1.1444091796875e-05}, "shared": {"value": false, "score": 7.152557373046875e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.00026351213455200195}, "created": {"value": false, "score": 1.1444091796875e-05}, "shared": {"value": false, "score": 7.152557373046875e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Sortledton", "normalizedForm": "Sortledton", "offsetStart": 257, "offsetEnd": 267}, "context": "Further, there are two main different data storage designs in transactional systems: (\ud835\udc56) set-based neighborhood blocks, where the edges are sorted by destination ids and edge entry version maintenance is done by the Hyper protocol [14]; sample systems are Sortledton [5] and Teseo [11], and (\ud835\udc56\ud835\udc56) edges stored in the adjacency blocks without sorting by destination ids, with per-entry version management within the adjacency block, represented by LiveGraph [16].", "mentionContextAttributes": {"used": {"value": false, "score": 0.05983239412307739}, "created": {"value": false, "score": 2.6226043701171875e-06}, "shared": {"value": false, "score": 5.960464477539062e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.99986732006073}, "created": {"value": false, "score": 0.08489882946014404}, "shared": {"value": false, "score": 9.5367431640625e-07}}, "references": [{"label": "[5]", "normalizedForm": "[5]", "refKey": 5, "offsetStart": 38399, "offsetEnd": 38402}, {"label": "[5]", "normalizedForm": "[5]", "refKey": 5, "offsetStart": 38399, "offsetEnd": 38402}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "STINGER", "normalizedForm": "STINGER", "offsetStart": 272, "offsetEnd": 282}, "context": "Existing systems supporting multi-stream dynamic graph analytics can be classified into two main categories: those which provide transactional guarantees, such as LiveGraph [16], Teseo [11], and Sortledton [5], and those that do not, such as Llama [13], GraphOne [8], and STINGER [4].", "mentionContextAttributes": {"used": {"value": false, "score": 0.00026351213455200195}, "created": {"value": false, "score": 1.1444091796875e-05}, "shared": {"value": false, "score": 7.152557373046875e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.00026351213455200195}, "created": {"value": false, "score": 1.1444091796875e-05}, "shared": {"value": false, "score": 7.152557373046875e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Teseo", "normalizedForm": "Teseo", "offsetStart": 276, "offsetEnd": 281}, "context": "Further, there are two main different data storage designs in transactional systems: (\ud835\udc56) set-based neighborhood blocks, where the edges are sorted by destination ids and edge entry version maintenance is done by the Hyper protocol [14]; sample systems are Sortledton [5] and Teseo [11], and (\ud835\udc56\ud835\udc56) edges stored in the adjacency blocks without sorting by destination ids, with per-entry version management within the adjacency block, represented by LiveGraph [16].", "mentionContextAttributes": {"used": {"value": false, "score": 0.05983239412307739}, "created": {"value": false, "score": 2.6226043701171875e-06}, "shared": {"value": false, "score": 5.960464477539062e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.99986732006073}, "created": {"value": true, "score": 0.9975646734237671}, "shared": {"value": false, "score": 9.5367431640625e-07}}, "references": [{"label": "[11]", "normalizedForm": "[11]", "refKey": 11, "offsetStart": 38413, "offsetEnd": 38417}, {"label": "[11]", "normalizedForm": "[11]", "refKey": 11, "offsetStart": 38413, "offsetEnd": 38417}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LiveGraph", "normalizedForm": "LiveGraph", "offsetStart": 449, "offsetEnd": 462}, "context": "Further, there are two main different data storage designs in transactional systems: (\ud835\udc56) set-based neighborhood blocks, where the edges are sorted by destination ids and edge entry version maintenance is done by the Hyper protocol [14]; sample systems are Sortledton [5] and Teseo [11], and (\ud835\udc56\ud835\udc56) edges stored in the adjacency blocks without sorting by destination ids, with per-entry version management within the adjacency block, represented by LiveGraph [16]. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.05983239412307739}, "created": {"value": false, "score": 2.6226043701171875e-06}, "shared": {"value": false, "score": 5.960464477539062e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9988667964935303}, "created": {"value": true, "score": 0.934317409992218}, "shared": {"value": false, "score": 7.152557373046875e-07}}, "references": [{"label": "[11]", "normalizedForm": "[11]", "refKey": 11}]}], "references": [{"refKey": 11, "tei": "<biblStruct xml:id=\"b11\">\n\t<analytic>\n\t\t<title level=\"a\" type=\"main\">Teseo and the Analysis of Structural Dynamic Graphs</title>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Dean</forename><surname>De</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Leo</forename></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Peter</forename><forename type=\"middle\">A</forename><surname>Boncz</surname></persName>\n\t\t</author>\n\t</analytic>\n\t<monogr>\n\t\t<title level=\"j\">Proc. VLDB Endow</title>\n\t\t<imprint>\n\t\t\t<biblScope unit=\"volume\">14</biblScope>\n\t\t\t<biblScope unit=\"page\">1066</biblScope>\n\t\t\t<date>2021. 2021</date>\n\t\t</imprint>\n\t</monogr>\n</biblStruct>\n"}, {"refKey": 5, "tei": "<biblStruct xml:id=\"b5\">\n\t<analytic>\n\t\t<title level=\"a\" type=\"main\">Sortledton</title>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Per</forename><surname>Fuchs</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Domagoj</forename><surname>Margan</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Jana</forename><surname>Giceva</surname></persName>\n\t\t</author>\n\t\t<idno type=\"DOI\">10.14778/3514061.3514065</idno>\n\t</analytic>\n\t<monogr>\n\t\t<title level=\"j\">Proceedings of the VLDB Endowment</title>\n\t\t<title level=\"j\" type=\"abbrev\">Proc. VLDB Endow.</title>\n\t\t<idno type=\"ISSN\">2150-8097</idno>\n\t\t<imprint>\n\t\t\t<biblScope unit=\"volume\">15</biblScope>\n\t\t\t<biblScope unit=\"issue\">6</biblScope>\n\t\t\t<biblScope unit=\"page\" from=\"1173\" to=\"1186\" />\n\t\t\t<date type=\"published\" when=\"2022-02\">2022. feb 2022</date>\n\t\t\t<publisher>Association for Computing Machinery (ACM)</publisher>\n\t\t</imprint>\n\t</monogr>\n</biblStruct>\n"}, {"refKey": 2, "tei": "<biblStruct xml:id=\"b2\">\n\t<monogr>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Scott</forename><surname>Beamer</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Krste</forename><surname>Asanovi\u0107</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">David</forename><surname>Patterson</surname></persName>\n\t\t</author>\n\t\t<idno>arXiv:1508.03619[cs.DC</idno>\n\t\t<title level=\"m\">The GAP Benchmark Suite</title>\n\t\t<imprint>\n\t\t\t<date>2017</date>\n\t\t</imprint>\n\t</monogr>\n</biblStruct>\n"}, {"refKey": 16, "tei": "<biblStruct xml:id=\"b16\">\n\t<analytic>\n\t\t<title level=\"a\" type=\"main\">LiveGraph</title>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Xiaowei</forename><surname>Zhu</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Guanyu</forename><surname>Feng</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Marco</forename><surname>Serafini</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Xiaosong</forename><surname>Ma</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Jiping</forename><surname>Yu</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Lei</forename><surname>Xie</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Ashraf</forename><surname>Aboulnaga</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Wenguang</forename><surname>Chen</surname></persName>\n\t\t</author>\n\t\t<idno type=\"DOI\">10.14778/3384345.3384351</idno>\n\t</analytic>\n\t<monogr>\n\t\t<title level=\"j\">Proceedings of the VLDB Endowment</title>\n\t\t<title level=\"j\" type=\"abbrev\">Proc. VLDB Endow.</title>\n\t\t<idno type=\"ISSN\">2150-8097</idno>\n\t\t<imprint>\n\t\t\t<biblScope unit=\"volume\">13</biblScope>\n\t\t\t<biblScope unit=\"issue\">7</biblScope>\n\t\t\t<biblScope unit=\"page\" from=\"1020\" to=\"1034\" />\n\t\t\t<date type=\"published\" when=\"2020-03\">2020. 2020</date>\n\t\t\t<publisher>Association for Computing Machinery (ACM)</publisher>\n\t\t</imprint>\n\t</monogr>\n</biblStruct>\n"}], "runtime": 12778, "id": "e32b6dc50fda4d2100c563ecfbe616fbb17bd43a", "metadata": {"id": "e32b6dc50fda4d2100c563ecfbe616fbb17bd43a"}, "original_file_path": "../../datalake/Samuel/SOFTware-Sync/downloads/xml/hal-04212814.grobid.tei.xml", "file_name": "hal-04212814.grobid.tei.xml"}