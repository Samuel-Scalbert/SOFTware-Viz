{"application": "software-mentions", "version": "0.8.0", "date": "2024-10-07T12:45+0000", "md5": "85F41300DADCECB6245F0FA52732B858", "mentions": [{"type": "software", "software-type": "software", "software-name": {"rawForm": "KwikCluster", "normalizedForm": "KwikCluster", "offsetStart": 0, "offsetEnd": 11}, "context": "KwikCluster as special case.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9810755252838135}, "created": {"value": false, "score": 7.033348083496094e-06}, "shared": {"value": false, "score": 1.7881393432617188e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999881982803345}, "created": {"value": true, "score": 0.9999256134033203}, "shared": {"value": false, "score": 1.7881393432617188e-06}}, "references": [{"label": "[2]", "normalizedForm": "[2]", "refKey": 2}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 4, "offsetEnd": 7}, "context": "For ACC this is not true because a pivot can become a singleton cluster, which does not cause e \u2208 \u0393 A necessarily to hold.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00040847063064575195}, "created": {"value": false, "score": 3.3855438232421875e-05}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 7, "offsetEnd": 10}, "context": "First, ACC achieves expected clustering error 3OPT + O(n 3 /Q), where Q = \u2126(n) is a deterministic bound on the number of queries.", "mentionContextAttributes": {"used": {"value": false, "score": 0.15559464693069458}, "created": {"value": false, "score": 7.271766662597656e-06}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 7, "offsetEnd": 10}, "context": "Hence, ACC and KwikCluster behaves identically for any sequence of pivot draws.", "mentionContextAttributes": {"used": {"value": false, "score": 0.003991127014160156}, "created": {"value": false, "score": 7.987022399902344e-06}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 8, "offsetEnd": 11}, "context": "Second, ACC recovers adversarially perturbed latent clusters.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0002345442771911621}, "created": {"value": false, "score": 2.2292137145996094e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 9, "offsetEnd": 12}, "context": "We prove ACC does exactly this.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9996412992477417}, "created": {"value": false, "score": 0.15181559324264526}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 9, "offsetEnd": 12}, "context": "Thus, if ACC pivots on \u03c0 i C , we have:", "mentionContextAttributes": {"used": {"value": false, "score": 0.41628116369247437}, "created": {"value": false, "score": 1.5020370483398438e-05}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 10, "offsetEnd": 13}, "context": "We tested ACC on six datasets from [21,20].", "mentionContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": false, "score": 1.6689300537109375e-06}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KwikCluster", "normalizedForm": "KwikCluster", "offsetStart": 11, "offsetEnd": 22}, "context": "Indeed, in KwikCluster the events {G T (e) : T \u2208 T (e)} are disjoint, because G T (e) holds iff T is the first and only triangle in T (e) whose node opposite to e is chosen as pivot.", "mentionContextAttributes": {"used": {"value": false, "score": 0.023353397846221924}, "created": {"value": false, "score": 2.9802322387695312e-06}, "shared": {"value": false, "score": 7.152557373046875e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999881982803345}, "created": {"value": true, "score": 0.9999256134033203}, "shared": {"value": false, "score": 1.7881393432617188e-06}}, "references": [{"label": "[2]", "normalizedForm": "[2]", "refKey": 2}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 12, "offsetEnd": 15}, "context": "In round r, ACC asks n r \u2264 n queries if \u03c0 r \u2208 V sing and f (n r ) \u2264 f (n) queries otherwise.", "mentionContextAttributes": {"used": {"value": false, "score": 0.037866950035095215}, "created": {"value": false, "score": 4.291534423828125e-06}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KwikCluster", "normalizedForm": "KwikCluster", "offsetStart": 12, "offsetEnd": 23}, "context": "Thus, while KwikCluster always finds all positive labels involving the pivot \u03c0 r , ACC can find them or not, with a probability that depends on f .", "mentionContextAttributes": {"used": {"value": false, "score": 0.0003044605255126953}, "created": {"value": false, "score": 6.556510925292969e-06}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999881982803345}, "created": {"value": true, "score": 0.9999256134033203}, "shared": {"value": false, "score": 1.7881393432617188e-06}}, "references": [{"label": "[2]", "normalizedForm": "[2]", "refKey": 2}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 13, "offsetEnd": 16}, "context": "We show that ACC outputs a C such that", "mentionContextAttributes": {"used": {"value": true, "score": 0.989876925945282}, "created": {"value": false, "score": 0.0003063678741455078}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACCESS", "normalizedForm": "ACCESS", "offsetStart": 13, "offsetEnd": 19}, "context": "In exchange, ACCESS makes at most Q queries in expectation rather than deterministically.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00010561943054199219}, "created": {"value": false, "score": 1.1563301086425781e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9996803998947144}, "created": {"value": true, "score": 0.7513517141342163}, "shared": {"value": false, "score": 4.76837158203125e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 15, "offsetEnd": 18}, "context": "We remark that ACC alone does not give better guarantees on strongly (1\u03b5)-knit subsets than on (1\u03b5)-knit subsets.", "mentionContextAttributes": {"used": {"value": false, "score": 0.009433567523956299}, "created": {"value": false, "score": 0.00013077259063720703}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 15, "offsetEnd": 18}, "context": "More formally, ACC misclassifies an edge e = {u, w} if and only if one of the following three disjoint events holds:", "mentionContextAttributes": {"used": {"value": false, "score": 0.009322762489318848}, "created": {"value": false, "score": 1.3232231140136719e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACCESS", "normalizedForm": "ACCESS", "offsetStart": 15, "offsetEnd": 21}, "context": "First, we show ACCESS gives guarantees virtually identical to ACC (only, with Q in expectation).", "mentionContextAttributes": {"used": {"value": true, "score": 0.9950907230377197}, "created": {"value": false, "score": 0.0011156201362609863}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9996803998947144}, "created": {"value": true, "score": 0.7513517141342163}, "shared": {"value": false, "score": 4.76837158203125e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KwikCluster", "normalizedForm": "KwikCluster", "offsetStart": 15, "offsetEnd": 26}, "context": "At each round, KwikCluster draws a random pivot \u03c0 r from V , queries the similarities between \u03c0 r and every other node in V , and creates a cluster C containing \u03c0 r and all points u such that \u03c3(\u03c0 r , u) = +1. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.018977224826812744}, "created": {"value": false, "score": 3.445148468017578e-05}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999881982803345}, "created": {"value": true, "score": 0.9999256134033203}, "shared": {"value": false, "score": 1.7881393432617188e-06}}, "references": [{"label": "[2]", "normalizedForm": "[2]", "refKey": 2}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KwikCluster", "normalizedForm": "KwikCluster", "offsetStart": 15, "offsetEnd": 26}, "context": "Hence, ACC and KwikCluster behaves identically for any sequence of pivot draws. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.003991127014160156}, "created": {"value": false, "score": 7.987022399902344e-06}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999881982803345}, "created": {"value": true, "score": 0.9999256134033203}, "shared": {"value": false, "score": 1.7881393432617188e-06}}, "references": [{"label": "[2]", "normalizedForm": "[2]", "refKey": 2}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KwikCluster", "normalizedForm": "KwikCluster", "offsetStart": 15, "offsetEnd": 26}, "context": "However, while KwikCluster queries \u03c3(\u03c0 r , u) for all u \u2208 V r \\ {\u03c0 r }, ACC queries only f (n r ) \u2264 n r other nodes u (lines 4-5), where n r = |V r | -1.", "mentionContextAttributes": {"used": {"value": false, "score": 0.01470482349395752}, "created": {"value": false, "score": 2.1457672119140625e-06}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999881982803345}, "created": {"value": true, "score": 0.9999256134033203}, "shared": {"value": false, "score": 1.7881393432617188e-06}}, "references": [{"label": "[2]", "normalizedForm": "[2]", "refKey": 2}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 16, "offsetEnd": 19}, "context": "This means that ACC recovers almost completely all perturbed clusters that are large enough to be \"seen\" with Q queries.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0005180239677429199}, "created": {"value": false, "score": 2.682209014892578e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KwikCluster", "normalizedForm": "KwikCluster", "offsetStart": 16, "offsetEnd": 27}, "context": "In the proof of KwikCluster, the condition T \u2208T (e) \u03b2 T \u2264 1 was ensured by considering events G T (e) = A T \u2227 e \u2208 \u0393 A .", "mentionContextAttributes": {"used": {"value": true, "score": 0.9999881982803345}, "created": {"value": false, "score": 3.4570693969726562e-06}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999881982803345}, "created": {"value": true, "score": 0.9999256134033203}, "shared": {"value": false, "score": 1.7881393432617188e-06}}, "references": [{"label": "[2]", "normalizedForm": "[2]", "refKey": 2}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 18, "offsetEnd": 21}, "context": "In particular, if ACC is run with Q = n 2 , then it becomes exactly equivalent to KwikCluster.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0008594989776611328}, "created": {"value": false, "score": 3.600120544433594e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 19, "offsetEnd": 22}, "context": "Let us now move to ACC.", "mentionContextAttributes": {"used": {"value": false, "score": 0.004434525966644287}, "created": {"value": false, "score": 0.049611806869506836}, "shared": {"value": false, "score": 8.344650268554688e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 19, "offsetEnd": 22}, "context": "Suppose we execute ACC independently K = 48 ln(n/p) times with the min-tagging rule.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9991563558578491}, "created": {"value": false, "score": 2.1457672119140625e-06}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KwikCluster", "normalizedForm": "KwikCluster", "offsetStart": 19, "offsetEnd": 30}, "context": "The performance of KwikCluster is shown by the circular marker. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.45594215393066406}, "created": {"value": false, "score": 8.606910705566406e-05}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999881982803345}, "created": {"value": true, "score": 0.9999256134033203}, "shared": {"value": false, "score": 1.7881393432617188e-06}}, "references": [{"label": "[2]", "normalizedForm": "[2]", "refKey": 2}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 20, "offsetEnd": 23}, "context": "The essence is that ACC can misclassify {u, w} in one of two ways.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00022608041763305664}, "created": {"value": false, "score": 1.537799835205078e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 21, "offsetEnd": 24}, "context": "Thus, our algorithms ACC and ACCESS are essentially optimal in the sense that, for c = 3, they guarantee an optimal additive error up to constant factors.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00015807151794433594}, "created": {"value": true, "score": 0.7513517141342163}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KwikCluster", "normalizedForm": "KwikCluster", "offsetStart": 21, "offsetEnd": 32}, "context": "Their algorithm runs KwikCluster on a random subset of 1/(2\u03b5) nodes and stores the set \u03a0 of resulting pivots.", "mentionContextAttributes": {"used": {"value": false, "score": 0.012481272220611572}, "created": {"value": false, "score": 0.05195653438568115}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999881982803345}, "created": {"value": true, "score": 0.9999256134033203}, "shared": {"value": false, "score": 1.7881393432617188e-06}}, "references": [{"label": "[2]", "normalizedForm": "[2]", "refKey": 2}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 23, "offsetEnd": 26}, "context": "Algorithm 1 Invoked as ACC(V 1 , 1) where V 1 \u2261 V and r = 1 is the index of the recursive call.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9999654293060303}, "created": {"value": false, "score": 2.0265579223632812e-05}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 24, "offsetEnd": 27}, "context": "First, if \u03c3(u, w) = -1, ACC can choose as pivot \u03c0 r a node v such that \u03c3(v, u) = \u03c3(v, w) = +1.", "mentionContextAttributes": {"used": {"value": false, "score": 0.07665497064590454}, "created": {"value": false, "score": 1.430511474609375e-05}, "shared": {"value": false, "score": 8.344650268554688e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KwikCluster", "normalizedForm": "KwikCluster", "offsetStart": 24, "offsetEnd": 35}, "context": "We propose a variant of KwikCluster, called ACC, for which we prove several desirable properties.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00010025501251220703}, "created": {"value": true, "score": 0.9999256134033203}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999881982803345}, "created": {"value": true, "score": 0.9999256134033203}, "shared": {"value": false, "score": 1.7881393432617188e-06}}, "references": [{"label": "[2]", "normalizedForm": "[2]", "refKey": 2}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 26, "offsetEnd": 29}, "context": "When f (r) = r for all r, ACC issues all queries \u03c3(\u03c0 r , u) for u \u2208 V r \\ {\u03c0 r } in each round r, and builds a cluster just like KwikCluster would.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0050623416900634766}, "created": {"value": false, "score": 6.67572021484375e-06}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 26, "offsetEnd": 29}, "context": "We then port the bound to ACC, relax the assumption to", "mentionContextAttributes": {"used": {"value": true, "score": 0.9697412252426147}, "created": {"value": false, "score": 0.0786752700805664}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 27, "offsetEnd": 30}, "context": "To this end note that when ACC pivots on \u03c0 i C all the remaining cluster nodes are found with probability at least f (n) n (this includes the cases S C \u2264 1, when such a probability is indeed 1).", "mentionContextAttributes": {"used": {"value": true, "score": 0.5581297278404236}, "created": {"value": false, "score": 1.9311904907226562e-05}, "shared": {"value": false, "score": 5.960464477539062e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 28, "offsetEnd": 31}, "context": "Third, we show a variant of ACC, called ACCESS (for Early Stopping Strategy), that makes significantly less queries on some graphs.", "mentionContextAttributes": {"used": {"value": false, "score": 5.221366882324219e-05}, "created": {"value": false, "score": 0.26577848196029663}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 28, "offsetEnd": 31}, "context": "We can refine our algorithm ACC so that, in some cases, it takes advantage of the structure of the input to reduce significantly the expected number of queries.", "mentionContextAttributes": {"used": {"value": false, "score": 4.363059997558594e-05}, "created": {"value": true, "score": 0.9367199540138245}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACCESS", "normalizedForm": "ACCESS", "offsetStart": 28, "offsetEnd": 34}, "context": "Theorem 2 reassures us that ACCESS is no worse than ACC.", "mentionContextAttributes": {"used": {"value": false, "score": 0.001623392105102539}, "created": {"value": false, "score": 0.00011408329010009766}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9996803998947144}, "created": {"value": true, "score": 0.7513517141342163}, "shared": {"value": false, "score": 4.76837158203125e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 29, "offsetEnd": 32}, "context": "In this section we show that ACC natively outputs clusters that are close to the latent clusters in the graph, thus acting as a cluster recovery tool. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0006685256958007812}, "created": {"value": false, "score": 0.0003134012222290039}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 29, "offsetEnd": 32}, "context": "Second, if \u03c3(u, w) = +1 then ACC could choose one of them, say u, as pivot \u03c0 r , and assign it to a singleton cluster.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9900600910186768}, "created": {"value": false, "score": 5.841255187988281e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACCESS", "normalizedForm": "ACCESS", "offsetStart": 29, "offsetEnd": 35}, "context": "Thus, our algorithms ACC and ACCESS are essentially optimal in the sense that, for c = 3, they guarantee an optimal additive error up to constant factors.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00015807151794433594}, "created": {"value": true, "score": 0.7513517141342163}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9996803998947144}, "created": {"value": true, "score": 0.7513517141342163}, "shared": {"value": false, "score": 4.76837158203125e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 30, "offsetEnd": 33}, "context": "The number of queries made by ACC is deterministically bounded as Q \u2264 nf (n).", "mentionContextAttributes": {"used": {"value": true, "score": 0.9154082536697388}, "created": {"value": false, "score": 7.987022399902344e-06}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 30, "offsetEnd": 33}, "context": "If instead \u03c3(u, w) = +1, then ACC could mistake {u, w} by pivoting on a node v such that \u03c3(v, u) = +1 and \u03c3(v, w) = -1, and clustering together only v and u.", "mentionContextAttributes": {"used": {"value": true, "score": 0.999582827091217}, "created": {"value": false, "score": 2.5510787963867188e-05}, "shared": {"value": false, "score": 5.960464477539062e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 30, "offsetEnd": 33}, "context": "We refer to the pseudocode of ACC ( Algorithm 2).", "mentionContextAttributes": {"used": {"value": true, "score": 0.9944676160812378}, "created": {"value": false, "score": 0.0002415776252746582}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACCESS", "normalizedForm": "ACCESS", "offsetStart": 30, "offsetEnd": 36}, "context": "We refer to the pseudocode of ACCESS (Algorithm 3).", "mentionContextAttributes": {"used": {"value": true, "score": 0.9804320335388184}, "created": {"value": false, "score": 0.00043386220932006836}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9996803998947144}, "created": {"value": true, "score": 0.7513517141342163}, "shared": {"value": false, "score": 4.76837158203125e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACCESS", "normalizedForm": "ACCESS", "offsetStart": 30, "offsetEnd": 36}, "context": "With probability at least 1/2 ACCESS finds no edge and thus stops right after lines 1-2.", "mentionContextAttributes": {"used": {"value": false, "score": 0.001122891902923584}, "created": {"value": false, "score": 7.867813110351562e-06}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9996803998947144}, "created": {"value": true, "score": 0.7513517141342163}, "shared": {"value": false, "score": 4.76837158203125e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 31, "offsetEnd": 34}, "context": "On both datasets, the error of ACC shows a nice sublinear drop as the number of queries increases, quickly approaching the performance of KwikCluster.", "mentionContextAttributes": {"used": {"value": true, "score": 0.8976424932479858}, "created": {"value": false, "score": 9.655952453613281e-06}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KwikCluster", "normalizedForm": "KwikCluster", "offsetStart": 32, "offsetEnd": 43}, "context": "However, it is easy to see that KwikCluster makes \u0398(n 2 ) queries in the worst case (e.g., if \u03c3 is the constant function -1).", "mentionContextAttributes": {"used": {"value": false, "score": 0.00012683868408203125}, "created": {"value": false, "score": 1.9073486328125e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999881982803345}, "created": {"value": true, "score": 0.9999256134033203}, "shared": {"value": false, "score": 1.7881393432617188e-06}}, "references": [{"label": "[2]", "normalizedForm": "[2]", "refKey": 2}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACCESS", "normalizedForm": "ACCESS", "offsetStart": 33, "offsetEnd": 39}, "context": "In fact, by definition of i , if ACCESS removes C i , . . .", "mentionContextAttributes": {"used": {"value": false, "score": 0.011470973491668701}, "created": {"value": false, "score": 1.1563301086425781e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9996803998947144}, "created": {"value": true, "score": 0.7513517141342163}, "shared": {"value": false, "score": 4.76837158203125e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KwikCluster", "normalizedForm": "KwikCluster", "offsetStart": 33, "offsetEnd": 44}, "context": "For the sake of analysis, we see KwikCluster as the following equivalent process.", "mentionContextAttributes": {"used": {"value": false, "score": 0.47648727893829346}, "created": {"value": false, "score": 0.007788419723510742}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999881982803345}, "created": {"value": true, "score": 0.9999256134033203}, "shared": {"value": false, "score": 1.7881393432617188e-06}}, "references": [{"label": "[2]", "normalizedForm": "[2]", "refKey": 2}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 34, "offsetEnd": 37}, "context": "Note that, in any recursive call, ACC misclassifies an edge e = {u, w} if and only if e is part of a bad triangle whose third node v is chosen as pivot and does not become a singleton cluster, or if \u03c3(e) = +1 and at least one of u, w becomes a singleton cluster.", "mentionContextAttributes": {"used": {"value": false, "score": 0.04796123504638672}, "created": {"value": false, "score": 2.7418136596679688e-06}, "shared": {"value": false, "score": 1.6689300537109375e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KwikCluster", "normalizedForm": "KwikCluster", "offsetStart": 36, "offsetEnd": 47}, "context": "which is our bound on E |C \u2229 C| for KwikCluster.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9816902279853821}, "created": {"value": false, "score": 0.0006947517395019531}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999881982803345}, "created": {"value": true, "score": 0.9999256134033203}, "shared": {"value": false, "score": 1.7881393432617188e-06}}, "references": [{"label": "[2]", "normalizedForm": "[2]", "refKey": 2}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 37, "offsetEnd": 40}, "context": "Another important difference is that ACC deterministically stops after f (n) recursive calls (line 1), declaring all remaining points as singleton clusters.", "mentionContextAttributes": {"used": {"value": false, "score": 0.010691523551940918}, "created": {"value": false, "score": 1.7523765563964844e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 38, "offsetEnd": 41}, "context": "Recursive call on the remaining nodes ACC has the same recursive structure as KwikCluster.", "mentionContextAttributes": {"used": {"value": false, "score": 0.05041372776031494}, "created": {"value": false, "score": 2.5987625122070312e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 39, "offsetEnd": 42}, "context": "Note that, if B 1 does not occur, then ACC will pivot on \u03c0 i C .", "mentionContextAttributes": {"used": {"value": false, "score": 0.03659689426422119}, "created": {"value": false, "score": 6.890296936035156e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACCESS", "normalizedForm": "ACCESS", "offsetStart": 40, "offsetEnd": 46}, "context": "Third, we show a variant of ACC, called ACCESS (for Early Stopping Strategy), that makes significantly less queries on some graphs. ", "mentionContextAttributes": {"used": {"value": false, "score": 5.221366882324219e-05}, "created": {"value": false, "score": 0.26577848196029663}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9996803998947144}, "created": {"value": true, "score": 0.7513517141342163}, "shared": {"value": false, "score": 4.76837158203125e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 41, "offsetEnd": 44}, "context": "We can now state formally our bounds for ACC.", "mentionContextAttributes": {"used": {"value": false, "score": 0.007146060466766357}, "created": {"value": true, "score": 0.9992716908454895}, "shared": {"value": false, "score": 1.3113021850585938e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 42, "offsetEnd": 45}, "context": "First, ACR performs K independent runs of ACC on input V , using the min-tagging rule on each run.", "mentionContextAttributes": {"used": {"value": false, "score": 0.3350784182548523}, "created": {"value": false, "score": 0.0001100301742553711}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 43, "offsetEnd": 46}, "context": "We introduce our active learning algorithm ACC (Active Correlation Clustering).", "mentionContextAttributes": {"used": {"value": false, "score": 0.0001302957534790039}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 43, "offsetEnd": 46}, "context": "The next lemma bounds the probability that ACC does not pivot on a node of C in the first k rounds.", "mentionContextAttributes": {"used": {"value": false, "score": 0.03872770071029663}, "created": {"value": false, "score": 2.777576446533203e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 44, "offsetEnd": 47}, "context": "We propose a variant of KwikCluster, called ACC, for which we prove several desirable properties.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00010025501251220703}, "created": {"value": true, "score": 0.9999256134033203}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 44, "offsetEnd": 47}, "context": "Placing this curve in our plots, shows that ACC is a factor of two or three better than the theoretical bound (which is not shown in Figure 2 due to scaling issues).", "mentionContextAttributes": {"used": {"value": true, "score": 0.954346776008606}, "created": {"value": false, "score": 1.3113021850585938e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 44, "offsetEnd": 47}, "context": "We have to take into account the facts that ACC performs f (|G r | -1) queries on the pivot before deciding whether to perform |G r | -1 queries, and that ACC stops after f (n -1) rounds.", "mentionContextAttributes": {"used": {"value": true, "score": 0.5673867464065552}, "created": {"value": false, "score": 2.396106719970703e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 45, "offsetEnd": 48}, "context": "In the special case f (n) = n for all n \u2208 N, ACC reduces to KwikCluster and achieves", "mentionContextAttributes": {"used": {"value": false, "score": 0.13785970211029053}, "created": {"value": false, "score": 7.271766662597656e-06}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACCESS", "normalizedForm": "ACCESS", "offsetStart": 45, "offsetEnd": 51}, "context": "The total cost of the clustering produced by ACCESS is clearly bounded by the sum of the cost of ACC without round restriction, plus the number of edges in the residual graph G r if r is the round at which ACCESS stops.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9810194373130798}, "created": {"value": false, "score": 8.821487426757812e-06}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9996803998947144}, "created": {"value": true, "score": 0.7513517141342163}, "shared": {"value": false, "score": 4.76837158203125e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 46, "offsetEnd": 49}, "context": "This set would be close to 1 /2-knit, and yet ACC would never produce a single cluster C corresponding to C. Things can only worsen if we consider also the edges in cut(C, C), which can lead ACC to assign the nodes of C to several different clusters when pivoting on C. Hence it is not obvious that a (1\u03b5)-knit set C can be efficiently recovered by ACC.", "mentionContextAttributes": {"used": {"value": false, "score": 0.2983347177505493}, "created": {"value": false, "score": 7.319450378417969e-05}, "shared": {"value": false, "score": 2.86102294921875e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 46, "offsetEnd": 49}, "context": "It is easy to check that the probability that ACC finds some of them is at least", "mentionContextAttributes": {"used": {"value": false, "score": 0.035619497299194336}, "created": {"value": false, "score": 0.0001100301742553711}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACCESS", "normalizedForm": "ACCESS", "offsetStart": 47, "offsetEnd": 53}, "context": "Hence the number of sparse rounds completed by ACCESS is at most one in expectation; the corresponding expected number of queries is then at most n.", "mentionContextAttributes": {"used": {"value": false, "score": 0.2273787260055542}, "created": {"value": false, "score": 2.7179718017578125e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9996803998947144}, "created": {"value": true, "score": 0.7513517141342163}, "shared": {"value": false, "score": 4.76837158203125e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 48, "offsetEnd": 51}, "context": "This implies that P F T (e) | A T = 1 3 because ACC chooses the pivot u.a.r.", "mentionContextAttributes": {"used": {"value": true, "score": 0.8137492537498474}, "created": {"value": false, "score": 8.463859558105469e-06}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 50, "offsetEnd": 53}, "context": "As in the proof of Theorem 4, we equivalently see ACC as going through a sequence of candidate pivots \u03c0 1 , . . .", "mentionContextAttributes": {"used": {"value": true, "score": 0.984327495098114}, "created": {"value": false, "score": 2.6226043701171875e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 50, "offsetEnd": 53}, "context": "We report the complete experimental evaluation of ACC including error bars (see the main paper for a full description of the experimental setting).", "mentionContextAttributes": {"used": {"value": true, "score": 0.9846402406692505}, "created": {"value": false, "score": 0.0288393497467041}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 52, "offsetEnd": 55}, "context": "Theorem 2 reassures us that ACCESS is no worse than ACC.", "mentionContextAttributes": {"used": {"value": false, "score": 0.001623392105102539}, "created": {"value": false, "score": 0.00011408329010009766}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 53, "offsetEnd": 56}, "context": "In this case, if the condition on line 6 holds, then ACC will cluster v together with u and w, thus mistaking {u, w}.", "mentionContextAttributes": {"used": {"value": false, "score": 0.07810896635055542}, "created": {"value": false, "score": 1.3589859008789062e-05}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 53, "offsetEnd": 56}, "context": "We can now state our main cluster recovery bound for ACC.", "mentionContextAttributes": {"used": {"value": false, "score": 0.003697514533996582}, "created": {"value": true, "score": 0.8816626071929932}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KwikCluster", "normalizedForm": "KwikCluster", "offsetStart": 53, "offsetEnd": 64}, "context": "This rules out a vast class of algorithms, including KwikCluster, ACC, and ACCESS, where the number of queries involving a node is a function of the random choices of the algorithm.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00015747547149658203}, "created": {"value": false, "score": 0.0013800859451293945}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999881982803345}, "created": {"value": true, "score": 0.9999256134033203}, "shared": {"value": false, "score": 1.7881393432617188e-06}}, "references": [{"label": "[2]", "normalizedForm": "[2]", "refKey": 2}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KwikCluster", "normalizedForm": "KwikCluster", "offsetStart": 55, "offsetEnd": 66}, "context": "We take inspiration from an existing greedy algorithm, KwikCluster [2], that has expected error 3OPT but a vacuous O(n 2 ) worst-case bound on the number of queries.", "mentionContextAttributes": {"used": {"value": false, "score": 0.008473694324493408}, "created": {"value": true, "score": 0.8954818248748779}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999881982803345}, "created": {"value": true, "score": 0.9999256134033203}, "shared": {"value": false, "score": 1.7881393432617188e-06}}, "references": [{"label": "[2]", "normalizedForm": "[2]", "refKey": 2, "offsetStart": 3375, "offsetEnd": 3378}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KwikCluster", "normalizedForm": "KwikCluster", "offsetStart": 56, "offsetEnd": 67}, "context": "Our algorithms can be seen as a parsimonious version of KwikCluster whose goal is reducing the number of queries.", "mentionContextAttributes": {"used": {"value": false, "score": 5.173683166503906e-05}, "created": {"value": true, "score": 0.9771925806999207}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999881982803345}, "created": {"value": true, "score": 0.9999256134033203}, "shared": {"value": false, "score": 1.7881393432617188e-06}}, "references": [{"label": "[2]", "normalizedForm": "[2]", "refKey": 2}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 57, "offsetEnd": 60}, "context": "Taking expectations with respect to the randomization of ACC,", "mentionContextAttributes": {"used": {"value": true, "score": 0.9905943870544434}, "created": {"value": false, "score": 1.0371208190917969e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KwikCluster", "normalizedForm": "KwikCluster", "offsetStart": 58, "offsetEnd": 69}, "context": "Let C be the cluster that contains \u03c0 i C in the output of KwikCluster.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9814966917037964}, "created": {"value": false, "score": 5.233287811279297e-05}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999881982803345}, "created": {"value": true, "score": 0.9999256134033203}, "shared": {"value": false, "score": 1.7881393432617188e-06}}, "references": [{"label": "[2]", "normalizedForm": "[2]", "refKey": 2}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 59, "offsetEnd": 62}, "context": "Suppose for example that To bypass this limitation, we run ACC several times to amplify the probability that every node in C is found.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9954297542572021}, "created": {"value": false, "score": 0.001245260238647461}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 60, "offsetEnd": 63}, "context": "Populate cluster based on queries 9: Output cluster C r 10: ACC(V r \\ C r , r + 1)", "mentionContextAttributes": {"used": {"value": true, "score": 0.9999779462814331}, "created": {"value": false, "score": 2.5033950805664062e-06}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KwikCluster", "normalizedForm": "KwikCluster", "offsetStart": 60, "offsetEnd": 71}, "context": "In the special case f (n) = n for all n \u2208 N, ACC reduces to KwikCluster and achieves", "mentionContextAttributes": {"used": {"value": false, "score": 0.13785970211029053}, "created": {"value": false, "score": 7.271766662597656e-06}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999881982803345}, "created": {"value": true, "score": 0.9999256134033203}, "shared": {"value": false, "score": 1.7881393432617188e-06}}, "references": [{"label": "[2]", "normalizedForm": "[2]", "refKey": 2}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACCESS", "normalizedForm": "ACCESS", "offsetStart": 61, "offsetEnd": 67}, "context": "Thus the expected number of edges in the residual graph when ACCESS returns is bounded from above by max k\u22651 (ke", "mentionContextAttributes": {"used": {"value": true, "score": 0.9692779183387756}, "created": {"value": false, "score": 6.794929504394531e-06}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9996803998947144}, "created": {"value": true, "score": 0.7513517141342163}, "shared": {"value": false, "score": 4.76837158203125e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KwikCluster", "normalizedForm": "KwikCluster", "offsetStart": 61, "offsetEnd": 72}, "context": "A very simple and elegant algorithhm for approximating CC is KwikCluster [2].", "mentionContextAttributes": {"used": {"value": false, "score": 0.00015974044799804688}, "created": {"value": false, "score": 2.5153160095214844e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999881982803345}, "created": {"value": true, "score": 0.9999256134033203}, "shared": {"value": false, "score": 1.7881393432617188e-06}}, "references": [{"label": "[2]", "normalizedForm": "[2]", "refKey": 2, "offsetStart": 6643, "offsetEnd": 6646}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 62, "offsetEnd": 65}, "context": "First, we show ACCESS gives guarantees virtually identical to ACC (only, with Q in expectation).", "mentionContextAttributes": {"used": {"value": true, "score": 0.9950907230377197}, "created": {"value": false, "score": 0.0011156201362609863}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 64, "offsetEnd": 67}, "context": "We start by addressing the first issue, assuming for the moment ACC has no restriction on the number of rounds.", "mentionContextAttributes": {"used": {"value": false, "score": 0.03301960229873657}, "created": {"value": false, "score": 0.042224228382110596}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 66, "offsetEnd": 69}, "context": "This rules out a vast class of algorithms, including KwikCluster, ACC, and ACCESS, where the number of queries involving a node is a function of the random choices of the algorithm.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00015747547149658203}, "created": {"value": false, "score": 0.0013800859451293945}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 66, "offsetEnd": 69}, "context": "Let \u0393 A be the set of mistaken edges for the clustering output by ACC and let \u2206 A = \u0393 A be the cost of this clustering.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9999405145645142}, "created": {"value": false, "score": 4.887580871582031e-06}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 72, "offsetEnd": 75}, "context": "However, while KwikCluster queries \u03c3(\u03c0 r , u) for all u \u2208 V r \\ {\u03c0 r }, ACC queries only f (n r ) \u2264 n r other nodes u (lines 4-5), where n r = |V r | -1.", "mentionContextAttributes": {"used": {"value": false, "score": 0.01470482349395752}, "created": {"value": false, "score": 2.1457672119140625e-06}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACCESS", "normalizedForm": "ACCESS", "offsetStart": 75, "offsetEnd": 81}, "context": "This rules out a vast class of algorithms, including KwikCluster, ACC, and ACCESS, where the number of queries involving a node is a function of the random choices of the algorithm.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00015747547149658203}, "created": {"value": false, "score": 0.0013800859451293945}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9996803998947144}, "created": {"value": true, "score": 0.7513517141342163}, "shared": {"value": false, "score": 4.76837158203125e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 77, "offsetEnd": 80}, "context": "We also show, under stronger assumptions, that via independent executions of ACC one can recover exactly all large clusters with high probability.", "mentionContextAttributes": {"used": {"value": true, "score": 0.8088207244873047}, "created": {"value": false, "score": 0.028503060340881348}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KwikCluster", "normalizedForm": "KwikCluster", "offsetStart": 78, "offsetEnd": 89}, "context": "Recursive call on the remaining nodes ACC has the same recursive structure as KwikCluster.", "mentionContextAttributes": {"used": {"value": false, "score": 0.05041372776031494}, "created": {"value": false, "score": 2.5987625122070312e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999881982803345}, "created": {"value": true, "score": 0.9999256134033203}, "shared": {"value": false, "score": 1.7881393432617188e-06}}, "references": [{"label": "[2]", "normalizedForm": "[2]", "refKey": 2}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KwikCluster", "normalizedForm": "KwikCluster", "offsetStart": 79, "offsetEnd": 90}, "context": "The algorithm then recursively invokes itself on V \\ C. On any instance of CC, KwikCluster achieves an expected error bounded by 3OPT. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.031116962432861328}, "created": {"value": false, "score": 1.6570091247558594e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999881982803345}, "created": {"value": true, "score": 0.9999256134033203}, "shared": {"value": false, "score": 1.7881393432617188e-06}}, "references": [{"label": "[2]", "normalizedForm": "[2]", "refKey": 2}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACCESS", "normalizedForm": "ACCESS", "offsetStart": 82, "offsetEnd": 88}, "context": "For the second term note that, if G r contains k edges, then the probability that ACCESS stops is at most:", "mentionContextAttributes": {"used": {"value": true, "score": 0.6084690690040588}, "created": {"value": false, "score": 7.355213165283203e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9996803998947144}, "created": {"value": true, "score": 0.7513517141342163}, "shared": {"value": false, "score": 4.76837158203125e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KwikCluster", "normalizedForm": "KwikCluster", "offsetStart": 82, "offsetEnd": 93}, "context": "In particular, if ACC is run with Q = n 2 , then it becomes exactly equivalent to KwikCluster.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0008594989776611328}, "created": {"value": false, "score": 3.600120544433594e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999881982803345}, "created": {"value": true, "score": 0.9999256134033203}, "shared": {"value": false, "score": 1.7881393432617188e-06}}, "references": [{"label": "[2]", "normalizedForm": "[2]", "refKey": 2}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 83, "offsetEnd": 86}, "context": "Thus, while KwikCluster always finds all positive labels involving the pivot \u03c0 r , ACC can find them or not, with a probability that depends on f .", "mentionContextAttributes": {"used": {"value": false, "score": 0.0003044605255126953}, "created": {"value": false, "score": 6.556510925292969e-06}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 88, "offsetEnd": 91}, "context": "We point out that the property of being (1\u03b5)-knit is rather weak for an algorithm, like ACC, that is completely oblivious to the global topology of the cluster -all what ACC tries to do is to blindly cluster together all the neighbors of the current pivot.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0001418590545654297}, "created": {"value": false, "score": 0.002180814743041992}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 90, "offsetEnd": 93}, "context": "We also show that, for a certain type of latent clusters, one can amplify the accuracy of ACC via independent executions and recover all clusters exactly with high probability.", "mentionContextAttributes": {"used": {"value": false, "score": 0.07036006450653076}, "created": {"value": false, "score": 0.008433818817138672}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 94, "offsetEnd": 97}, "context": "C r \u2190 C r \u222a {u : \u03c3(\u03c0 r , u) = +1} Populate cluster based on queries 9: Output cluster C r 10: ACC(V r \\ C r , r + 1)", "mentionContextAttributes": {"used": {"value": true, "score": 0.9999357461929321}, "created": {"value": false, "score": 2.5033950805664062e-06}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACCESS", "normalizedForm": "ACCESS", "offsetStart": 95, "offsetEnd": 101}, "context": "First of all, note that if the residual graph G r contains O(n 2 /f (n)) edges, from r onwards ACCESS stops at each round independently with constant probability.", "mentionContextAttributes": {"used": {"value": false, "score": 0.47245997190475464}, "created": {"value": false, "score": 2.5391578674316406e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9996803998947144}, "created": {"value": true, "score": 0.7513517141342163}, "shared": {"value": false, "score": 4.76837158203125e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 96, "offsetEnd": 99}, "context": "Given any vertex v \u2208 V r with d + r (v) \u2265 nr f (nr) , let E r (v) be the event when at round r, ACC queries \u03c3(v, u) for all u \u2208 V r \\ {v}.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9875055551528931}, "created": {"value": false, "score": 5.125999450683594e-06}, "shared": {"value": false, "score": 8.344650268554688e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KwikCluster", "normalizedForm": "KwikCluster", "offsetStart": 96, "offsetEnd": 107}, "context": "The expected number of mistakes can then be bound by 3OPT using the packing argument of [2] for KwikCluster.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9964432120323181}, "created": {"value": false, "score": 2.1457672119140625e-06}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999881982803345}, "created": {"value": true, "score": 0.9999256134033203}, "shared": {"value": false, "score": 1.7881393432617188e-06}}, "references": [{"label": "[2]", "normalizedForm": "[2]", "refKey": 2}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 97, "offsetEnd": 100}, "context": "The total cost of the clustering produced by ACCESS is clearly bounded by the sum of the cost of ACC without round restriction, plus the number of edges in the residual graph G r if r is the round at which ACCESS stops.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9810194373130798}, "created": {"value": false, "score": 8.821487426757812e-06}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACCESS", "normalizedForm": "ACCESS", "offsetStart": 103, "offsetEnd": 109}, "context": "For example, when OPT = 0 and there are \u2126 n 3 /Q similar pairs, the expected number of queries made by ACCESS is only the square root of the queries made by ACC. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.07062512636184692}, "created": {"value": false, "score": 7.271766662597656e-06}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9996803998947144}, "created": {"value": true, "score": 0.7513517141342163}, "shared": {"value": false, "score": 4.76837158203125e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KwikCluster", "normalizedForm": "KwikCluster", "offsetStart": 103, "offsetEnd": 114}, "context": "It is easy to see that |C \u2229 C| \u2265 S. Indeed, if Before continuing, we simplify the analysis by assuming KwikCluster runs on the graph G after all edges not incident on C have been deleted.", "mentionContextAttributes": {"used": {"value": false, "score": 0.2641698718070984}, "created": {"value": false, "score": 3.4570693969726562e-06}, "shared": {"value": false, "score": 5.960464477539062e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999881982803345}, "created": {"value": true, "score": 0.9999256134033203}, "shared": {"value": false, "score": 1.7881393432617188e-06}}, "references": [{"label": "[2]", "normalizedForm": "[2]", "refKey": 2}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KwikCluster", "normalizedForm": "KwikCluster", "offsetStart": 106, "offsetEnd": 117}, "context": "Furthermore, as one expects, if the learner is allowed to ask for all edge signs, then the exact bound of KwikCluster is recovered (note that the first formula in Theorem 1 clearly does not take into account the special case when f (n) = n, which is considered in the last part of the statement).", "mentionContextAttributes": {"used": {"value": false, "score": 0.05975884199142456}, "created": {"value": false, "score": 4.458427429199219e-05}, "shared": {"value": false, "score": 7.152557373046875e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999881982803345}, "created": {"value": true, "score": 0.9999256134033203}, "shared": {"value": false, "score": 1.7881393432617188e-06}}, "references": [{"label": "[2]", "normalizedForm": "[2]", "refKey": 2}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 115, "offsetEnd": 118}, "context": "For any query rate function f and any labeling \u03c3 on n nodes, the expected cost E[\u2206 A ] of the clustering output by ACC satisfies", "mentionContextAttributes": {"used": {"value": true, "score": 0.9999163150787354}, "created": {"value": false, "score": 2.6226043701171875e-06}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 116, "offsetEnd": 119}, "context": "For certain latent clusters, one can get recovery guarantees significantly stronger than the ones given natively by ACC (see Theorem 4).", "mentionContextAttributes": {"used": {"value": false, "score": 0.0013952851295471191}, "created": {"value": false, "score": 3.826618194580078e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 120, "offsetEnd": 123}, "context": "In particular, for Q = \u0398(n 2 ) any algorithm still suffers an additive error of order n, and for Q = \u2126(n) our algorithm ACC is essentially optimal in its additive error term.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0007785558700561523}, "created": {"value": false, "score": 3.731250762939453e-05}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KwikCluster", "normalizedForm": "KwikCluster", "offsetStart": 129, "offsetEnd": 140}, "context": "When f (r) = r for all r, ACC issues all queries \u03c3(\u03c0 r , u) for u \u2208 V r \\ {\u03c0 r } in each round r, and builds a cluster just like KwikCluster would.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0050623416900634766}, "created": {"value": false, "score": 6.67572021484375e-06}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999881982803345}, "created": {"value": true, "score": 0.9999256134033203}, "shared": {"value": false, "score": 1.7881393432617188e-06}}, "references": [{"label": "[2]", "normalizedForm": "[2]", "refKey": 2}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 133, "offsetEnd": 136}, "context": "According to [5,Lemma 4.1], the expected clustering error for this variant is 3OPT + O \u03b5n 2 , which can be compared to our bound for ACC by setting Q = n/\u03b5.", "mentionContextAttributes": {"used": {"value": false, "score": 0.06603294610977173}, "created": {"value": false, "score": 5.4836273193359375e-06}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACCESS", "normalizedForm": "ACCESS", "offsetStart": 136, "offsetEnd": 142}, "context": "Formally: Theorem 2. For any query rate function f and any labeling \u03c3 on n nodes, the expected cost E[\u2206 A ] of the clustering output by ACCESS satisfies", "mentionContextAttributes": {"used": {"value": true, "score": 0.9996803998947144}, "created": {"value": false, "score": 6.67572021484375e-06}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9996803998947144}, "created": {"value": true, "score": 0.7513517141342163}, "shared": {"value": false, "score": 4.76837158203125e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KwikCluster", "normalizedForm": "KwikCluster", "offsetStart": 138, "offsetEnd": 149}, "context": "On both datasets, the error of ACC shows a nice sublinear drop as the number of queries increases, quickly approaching the performance of KwikCluster. ", "mentionContextAttributes": {"used": {"value": true, "score": 0.8976424932479858}, "created": {"value": false, "score": 9.655952453613281e-06}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999881982803345}, "created": {"value": true, "score": 0.9999256134033203}, "shared": {"value": false, "score": 1.7881393432617188e-06}}, "references": [{"label": "[2]", "normalizedForm": "[2]", "refKey": 2}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 155, "offsetEnd": 158}, "context": "We have to take into account the facts that ACC performs f (|G r | -1) queries on the pivot before deciding whether to perform |G r | -1 queries, and that ACC stops after f (n -1) rounds.", "mentionContextAttributes": {"used": {"value": true, "score": 0.5673867464065552}, "created": {"value": false, "score": 2.396106719970703e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 156, "offsetEnd": 159}, "context": "In fact, if most edges of G belong to relatively large clusters (namely, all but O(n 2 /f (n)) edges), then we can show ACCESS uses much fewer queries than ACC (in a nutshell, ACCESS quickly finds all large clusters and then quits).", "mentionContextAttributes": {"used": {"value": false, "score": 0.013776838779449463}, "created": {"value": false, "score": 6.580352783203125e-05}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 157, "offsetEnd": 160}, "context": "For example, when OPT = 0 and there are \u2126 n 3 /Q similar pairs, the expected number of queries made by ACCESS is only the square root of the queries made by ACC.", "mentionContextAttributes": {"used": {"value": false, "score": 0.07062512636184692}, "created": {"value": false, "score": 7.271766662597656e-06}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 157, "offsetEnd": 160}, "context": "We just notice that, in that case, every node v \u2208 C could have a neighbor x v \u2208 V \\ C that is smaller than every node of C. In this case, when pivoting on v ACC would tag v with x rather than with u C , disrupting ACR.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9789817929267883}, "created": {"value": false, "score": 5.829334259033203e-05}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 170, "offsetEnd": 173}, "context": "We point out that the property of being (1\u03b5)-knit is rather weak for an algorithm, like ACC, that is completely oblivious to the global topology of the cluster -all what ACC tries to do is to blindly cluster together all the neighbors of the current pivot.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0001418590545654297}, "created": {"value": false, "score": 0.002180814743041992}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACCESS", "normalizedForm": "ACCESS", "offsetStart": 176, "offsetEnd": 182}, "context": "In fact, if most edges of G belong to relatively large clusters (namely, all but O(n 2 /f (n)) edges), then we can show ACCESS uses much fewer queries than ACC (in a nutshell, ACCESS quickly finds all large clusters and then quits).", "mentionContextAttributes": {"used": {"value": false, "score": 0.013776838779449463}, "created": {"value": false, "score": 6.580352783203125e-05}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9996803998947144}, "created": {"value": true, "score": 0.7513517141342163}, "shared": {"value": false, "score": 4.76837158203125e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 180, "offsetEnd": 183}, "context": "More precisely, if the input contains a cluster C obtained from a clique by adversarially perturbing a fraction \u03b5 of its edges (internal to the clique or leaving the clique), then ACC returns a cluster C such that E |C \u2295 C| = O \u03b5|C| + n 2 /Q , where \u2295 denotes symmetric difference.", "mentionContextAttributes": {"used": {"value": true, "score": 0.5904400944709778}, "created": {"value": false, "score": 3.2186508178710938e-06}, "shared": {"value": false, "score": 9.5367431640625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KwikCluster", "normalizedForm": "KwikCluster", "offsetStart": 186, "offsetEnd": 197}, "context": "Now, if any of the aforementioned f (n r ) queries returns a positive label (line 6), then all the labels between \u03c0 r and the remaining u \u2208 V r are queried and the algorithm operates as KwikCluster until the end of the recursive call; otherwise, the pivot becomes a singleton cluster which is removed from the set of nodes.", "mentionContextAttributes": {"used": {"value": false, "score": 0.12111514806747437}, "created": {"value": false, "score": 7.271766662597656e-06}, "shared": {"value": false, "score": 8.344650268554688e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999881982803345}, "created": {"value": true, "score": 0.9999256134033203}, "shared": {"value": false, "score": 1.7881393432617188e-06}}, "references": [{"label": "[2]", "normalizedForm": "[2]", "refKey": 2}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 189, "offsetEnd": 192}, "context": "Thus, \u03c0 i C is be incident to at most \u03b5 As far as the O(Ce -Cf (n)/n ) part of the bound is concerned, simply note that the bounds obtained so far hold unless i C > f (n -1), in which case ACC stops before ever reaching the first node of C. If this happens, C = {\u03c0 i C } and | C \u2295 C| < |C|.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9774888753890991}, "created": {"value": false, "score": 5.841255187988281e-06}, "shared": {"value": false, "score": 5.364418029785156e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 191, "offsetEnd": 194}, "context": "This set would be close to 1 /2-knit, and yet ACC would never produce a single cluster C corresponding to C. Things can only worsen if we consider also the edges in cut(C, C), which can lead ACC to assign the nodes of C to several different clusters when pivoting on C. Hence it is not obvious that a (1\u03b5)-knit set C can be efficiently recovered by ACC.", "mentionContextAttributes": {"used": {"value": false, "score": 0.2983347177505493}, "created": {"value": false, "score": 7.319450378417969e-05}, "shared": {"value": false, "score": 2.86102294921875e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACCESS", "normalizedForm": "ACCESS", "offsetStart": 206, "offsetEnd": 212}, "context": "The total cost of the clustering produced by ACCESS is clearly bounded by the sum of the cost of ACC without round restriction, plus the number of edges in the residual graph G r if r is the round at which ACCESS stops.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9810194373130798}, "created": {"value": false, "score": 8.821487426757812e-06}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9996803998947144}, "created": {"value": true, "score": 0.7513517141342163}, "shared": {"value": false, "score": 4.76837158203125e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 229, "offsetEnd": 232}, "context": "The min in the bound captures two different regimes: when f (n) is very close to n, then E |C\u2295 C| = O(\u03b5|C|) independently of the size of C, but when f (n) n we need |C| = \u2126(n/f (n)), i.e., |C| must be large enough to be found by ACC.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9199637174606323}, "created": {"value": false, "score": 3.933906555175781e-06}, "shared": {"value": false, "score": 2.0265579223632812e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ACC", "normalizedForm": "ACC", "offsetStart": 349, "offsetEnd": 352}, "context": "This set would be close to 1 /2-knit, and yet ACC would never produce a single cluster C corresponding to C. Things can only worsen if we consider also the edges in cut(C, C), which can lead ACC to assign the nodes of C to several different clusters when pivoting on C. Hence it is not obvious that a (1\u03b5)-knit set C can be efficiently recovered by ACC.", "mentionContextAttributes": {"used": {"value": false, "score": 0.2983347177505493}, "created": {"value": false, "score": 7.319450378417969e-05}, "shared": {"value": false, "score": 2.86102294921875e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999890327453613}, "created": {"value": true, "score": 0.9999371767044067}, "shared": {"value": false, "score": 5.364418029785156e-06}}}], "references": [{"refKey": 2, "tei": "<biblStruct xml:id=\"b2\">\n\t<analytic>\n\t\t<title level=\"a\" type=\"main\">Aggregating inconsistent information</title>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Nir</forename><surname>Ailon</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Moses</forename><surname>Charikar</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Alantha</forename><surname>Newman</surname></persName>\n\t\t</author>\n\t\t<idno type=\"DOI\">10.1145/1060590.1060692</idno>\n\t</analytic>\n\t<monogr>\n\t\t<title level=\"m\">Proceedings of the thirty-seventh annual ACM symposium on Theory of computing</title>\n\t\t<meeting>the thirty-seventh annual ACM symposium on Theory of computing</meeting>\n\t\t<imprint>\n\t\t\t<publisher>ACM</publisher>\n\t\t\t<date type=\"published\" when=\"2005-05-22\">2008</date>\n\t\t\t<biblScope unit=\"volume\">55</biblScope>\n\t\t\t<biblScope unit=\"page\">23</biblScope>\n\t\t</imprint>\n\t</monogr>\n</biblStruct>\n"}], "runtime": 14576, "id": "48114f534becbfdf2a83c96d0aa5f58764ecc925", "metadata": {"id": "48114f534becbfdf2a83c96d0aa5f58764ecc925"}, "original_file_path": "../../datalake/Samuel/SOFTware-Sync/downloads/xml/hal-02376961.grobid.tei.xml", "file_name": "hal-02376961.grobid.tei.xml"}