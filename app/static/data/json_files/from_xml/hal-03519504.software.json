{"application": "software-mentions", "version": "0.8.0", "date": "2024-10-07T11:47+0000", "md5": "A1FB6320109E023400F6B589B525F94C", "mentions": [{"type": "software", "software-type": "software", "software-name": {"rawForm": "WebPd 2", "normalizedForm": "WebPd 2", "offsetStart": 0, "offsetEnd": 7}, "context": "WebPd 2 is a web-based PureData patcher interpreter using JavaScript and the WebAudio API. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0003110170364379883}, "created": {"value": false, "score": 0.0005216002464294434}, "shared": {"value": false, "score": 0.014592766761779785}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0003110170364379883}, "created": {"value": false, "score": 0.0005216002464294434}, "shared": {"value": false, "score": 0.014592766761779785}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "JSPatcher", "normalizedForm": "JSPatcher", "offsetStart": 0, "offsetEnd": 9}, "context": "JSPatcher includes a set of box object that helps to code, register and use an AudioWorklet node in the patcher system.", "mentionContextAttributes": {"used": {"value": false, "score": 4.2319297790527344e-05}, "created": {"value": false, "score": 0.00018996000289916992}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.15094685554504395}, "created": {"value": true, "score": 0.9987627267837524}, "shared": {"value": false, "score": 0.008786141872406006}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio Visual Editor", "normalizedForm": "WebAudio Visual Editor", "offsetStart": 0, "offsetEnd": 22}, "context": "WebAudio Visual Editor, 4 WebAudioDesigner, 5 Mosaicode 6 [6] and Olos 7 are web-oriented VPLs for audio processing.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00040084123611450195}, "created": {"value": false, "score": 1.6808509826660156e-05}, "shared": {"value": false, "score": 8.285045623779297e-05}}, "documentContextAttributes": {"used": {"value": false, "score": 0.00040084123611450195}, "created": {"value": false, "score": 1.6808509826660156e-05}, "shared": {"value": false, "score": 8.285045623779297e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "OpenGL", "normalizedForm": "OpenGL", "offsetStart": 3, "offsetEnd": 9}, "context": "18 OpenGL rendering, d3.js 19 ", "mentionContextAttributes": {"used": {"value": true, "score": 0.9762395620346069}, "created": {"value": false, "score": 7.62939453125e-06}, "shared": {"value": false, "score": 1.1920928955078125e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9762395620346069}, "created": {"value": false, "score": 7.62939453125e-06}, "shared": {"value": false, "score": 1.1920928955078125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "JSPatcher", "normalizedForm": "JSPatcher", "offsetStart": 3, "offsetEnd": 12}, "context": "In JSPatcher, a box object called lambda allows to create a JavaScript anonymous function. ", "mentionContextAttributes": {"used": {"value": false, "score": 2.5987625122070312e-05}, "created": {"value": false, "score": 0.07116323709487915}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.15094685554504395}, "created": {"value": true, "score": 0.9987627267837524}, "shared": {"value": false, "score": 0.008786141872406006}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "JSPatcher", "normalizedForm": "JSPatcher", "offsetStart": 3, "offsetEnd": 12}, "context": "In JSPatcher, like the WebAudio Plugins, an analyzer with visualization can be packed in one WebAudio node box.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0001843571662902832}, "created": {"value": false, "score": 5.245208740234375e-05}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.15094685554504395}, "created": {"value": true, "score": 0.9987627267837524}, "shared": {"value": false, "score": 0.008786141872406006}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "JSPatcher", "normalizedForm": "JSPatcher", "offsetStart": 3, "offsetEnd": 12}, "context": "In JSPatcher, we designed a specific mode of patcher to build a FAUST-compatible graph, that will be firstly interpreted to an equivalent FAUST code which can be used in other FAUST tools, then be compiled to a WebAudio node using faust2webaudio. ", "mentionContextAttributes": {"used": {"value": false, "score": 8.535385131835938e-05}, "created": {"value": true, "score": 0.9322913289070129}, "shared": {"value": false, "score": 1.0848045349121094e-05}}, "documentContextAttributes": {"used": {"value": false, "score": 0.15094685554504395}, "created": {"value": true, "score": 0.9987627267837524}, "shared": {"value": false, "score": 0.008786141872406006}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "AudioNode", "normalizedForm": "AudioNode", "offsetStart": 4, "offsetEnd": 13}, "context": "4.5 AudioNode generated by FAUST 16FAUST is a functional, synchronous, domain-specific programming language designed for real-time audio signal processing and synthesis.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00021880865097045898}, "created": {"value": false, "score": 0.0027555227279663086}, "shared": {"value": false, "score": 7.152557373046875e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.15757930278778076}, "created": {"value": false, "score": 0.17710930109024048}, "shared": {"value": false, "score": 0.00021797418594360352}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "PureData", "normalizedForm": "PureData", "offsetStart": 5, "offsetEnd": 13}, "context": "Max, PureData and Vvvv, 1 which are well-known VPLs for audio and video processing, use patchers, connections with cables and boxes, to describe the dataflow of the program.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0009672641754150391}, "created": {"value": false, "score": 0.0001647472381591797}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0009672641754150391}, "created": {"value": false, "score": 0.0005216002464294434}, "shared": {"value": false, "score": 0.014592766761779785}}, "references": [{"label": "[2]", "normalizedForm": "[2]", "refKey": 2}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "JSPatcher", "normalizedForm": "JSPatcher", "offsetStart": 5, "offsetEnd": 14}, "context": "Yet, JSPatcher is designed for different purposes compared to Max, as web applications for multimedia will not perform as well as on native platforms in terms of efficiency and reliability, but more flexible on device-compatibility, networking and interactivity.", "mentionContextAttributes": {"used": {"value": false, "score": 3.4332275390625e-05}, "created": {"value": false, "score": 0.06525969505310059}, "shared": {"value": false, "score": 9.179115295410156e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.15094685554504395}, "created": {"value": true, "score": 0.9987627267837524}, "shared": {"value": false, "score": 0.008786141872406006}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "JSPatcher", "normalizedForm": "JSPatcher", "offsetStart": 5, "offsetEnd": 14}, "context": "When JSPatcher loads a patcher, it will automatically import these packages from these URLs.", "mentionContextAttributes": {"used": {"value": false, "score": 0.014419794082641602}, "created": {"value": false, "score": 2.7418136596679688e-05}, "shared": {"value": false, "score": 8.940696716308594e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.15094685554504395}, "created": {"value": true, "score": 0.9987627267837524}, "shared": {"value": false, "score": 0.008786141872406006}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 9, "offsetEnd": 17}, "context": "Figure 8 WebAudio graph with JavaScript boxes", "mentionContextAttributes": {"used": {"value": true, "score": 0.8936523199081421}, "created": {"value": false, "score": 2.86102294921875e-06}, "shared": {"value": false, "score": 1.3113021850585938e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.8936523199081421}, "created": {"value": true, "score": 0.9322909116744995}, "shared": {"value": false, "score": 0.04361367225646973}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "AudioWorklet", "normalizedForm": "AudioWorklet", "offsetStart": 9, "offsetEnd": 21}, "language": {"rawForm": "JavaScript", "normalizedForm": "JavaScript"}, "context": "Like the AudioWorklet box, its AudioNode and AudioParams are connectable with other WebAudio node boxes, in addition, it handles incoming MIDI messages from its first inlet.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0032026171684265137}, "created": {"value": false, "score": 0.00015115737915039062}, "shared": {"value": false, "score": 5.7220458984375e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.15757930278778076}, "created": {"value": true, "score": 0.9904370903968811}, "shared": {"value": false, "score": 0.00014579296112060547}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "JSPatcher", "normalizedForm": "JSPatcher", "offsetStart": 10, "offsetEnd": 19}, "context": "The UI of JSPatcher is inspired by Max and meant to be close to Max to facilitate the comprehension and the usage of Max-like VPL developers. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.013550221920013428}, "created": {"value": false, "score": 0.0066168904304504395}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.15094685554504395}, "created": {"value": true, "score": 0.9987627267837524}, "shared": {"value": false, "score": 0.008786141872406006}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "JSPatcher", "normalizedForm": "JSPatcher", "offsetStart": 13, "offsetEnd": 22}, "context": "A patcher in JSPatcher, following Max's convention, usually contains cables and boxes. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.00015878677368164062}, "created": {"value": false, "score": 3.6835670471191406e-05}, "shared": {"value": false, "score": 5.960464477539062e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.15094685554504395}, "created": {"value": true, "score": 0.9987627267837524}, "shared": {"value": false, "score": 0.008786141872406006}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 16, "offsetEnd": 24}, "context": "Some customized WebAudio nodes can have their inlet for receiving MIDI messages at the same time.", "mentionContextAttributes": {"used": {"value": false, "score": 5.5789947509765625e-05}, "created": {"value": false, "score": 0.00040084123611450195}, "shared": {"value": false, "score": 7.152557373046875e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.8936523199081421}, "created": {"value": true, "score": 0.9322909116744995}, "shared": {"value": false, "score": 0.04361367225646973}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "JSPatcher", "normalizedForm": "JSPatcher", "offsetStart": 16, "offsetEnd": 25}, "context": "Similar to Max, JSPatcher uses a specific object \"Bang\" as an event to tell any box object to proceed with its task.", "mentionContextAttributes": {"used": {"value": false, "score": 8.237361907958984e-05}, "created": {"value": false, "score": 0.0003249645233154297}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.15094685554504395}, "created": {"value": true, "score": 0.9987627267837524}, "shared": {"value": false, "score": 0.008786141872406006}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 17, "offsetEnd": 25}, "context": "In the design of WebAudio applications, JSPatcher is similar to some other platforms, allowing users to manipulate an audio graph and control the parameters. ", "mentionContextAttributes": {"used": {"value": false, "score": 3.2067298889160156e-05}, "created": {"value": false, "score": 0.41432565450668335}, "shared": {"value": false, "score": 1.5139579772949219e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.8936523199081421}, "created": {"value": true, "score": 0.9322909116744995}, "shared": {"value": false, "score": 0.04361367225646973}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio Plugin", "normalizedForm": "WebAudio Plugin", "offsetStart": 17, "offsetEnd": 32}, "context": "According to the WebAudio Plugin standard, an URL is needed to fetch from a remote server a JavaScript file that loaded its dependencies and returns an HTML element as its UI, an AudioNode to be connected and output from the box's last outlet.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0040087103843688965}, "created": {"value": false, "score": 0.00014448165893554688}, "shared": {"value": false, "score": 0.00021797418594360352}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0040087103843688965}, "created": {"value": false, "score": 0.00043720006942749023}, "shared": {"value": false, "score": 0.00021797418594360352}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Csound", "normalizedForm": "Csound", "offsetStart": 18, "offsetEnd": 29}, "context": "Aside from FAUST, Csound [15] is also a language that be compiled into an AudioWorklet node thanks to the WebAssembly Besides, it will be interesting to design an AudioWorklet's processor with JavaScript boxes in a subpatcher by having a dedicated patcher system in the audio thread. ", "mentionContextAttributes": {"used": {"value": false, "score": 5.8770179748535156e-05}, "created": {"value": false, "score": 0.005408585071563721}, "shared": {"value": false, "score": 5.459785461425781e-05}}, "documentContextAttributes": {"used": {"value": false, "score": 5.8770179748535156e-05}, "created": {"value": false, "score": 0.005408585071563721}, "shared": {"value": false, "score": 5.459785461425781e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "AudioWorkletProcessor", "normalizedForm": "AudioWorkletProcessor", "offsetStart": 18, "offsetEnd": 39}, "context": "In Figure 10, the AudioWorkletProcessor is written in a code box, registered by the audioWorklet box. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.26211774349212646}, "created": {"value": false, "score": 5.1021575927734375e-05}, "shared": {"value": false, "score": 1.6689300537109375e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.26211774349212646}, "created": {"value": false, "score": 5.1021575927734375e-05}, "shared": {"value": false, "score": 1.6689300537109375e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "audioWorklet", "normalizedForm": "audioWorklet", "offsetStart": 20, "offsetEnd": 32}, "context": "Then the box object audioWorklet allows users to register the processor from the code, using internally createObjectURL.", "mentionContextAttributes": {"used": {"value": false, "score": 0.003902435302734375}, "created": {"value": false, "score": 7.414817810058594e-05}, "shared": {"value": false, "score": 9.417533874511719e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.26211774349212646}, "created": {"value": false, "score": 7.414817810058594e-05}, "shared": {"value": false, "score": 9.417533874511719e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "d3.js", "normalizedForm": "d3.js", "offsetStart": 21, "offsetEnd": 26}, "context": "18 OpenGL rendering, d3.js 19 ", "mentionContextAttributes": {"used": {"value": true, "score": 0.9762395620346069}, "created": {"value": false, "score": 7.62939453125e-06}, "shared": {"value": false, "score": 1.1920928955078125e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9762395620346069}, "created": {"value": false, "score": 7.62939453125e-06}, "shared": {"value": false, "score": 1.1920928955078125e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "JSPatcher", "normalizedForm": "JSPatcher", "offsetStart": 21, "offsetEnd": 30}, "context": "Using this approach, JSPatcher offers possibilities to design AudioWorklet DSPs with compiled patchers thanks to FAUST WebAssembly compiler [7] and to interact with them in real-time from an imperative patcher.", "mentionContextAttributes": {"used": {"value": false, "score": 3.8504600524902344e-05}, "created": {"value": false, "score": 0.0309218168258667}, "shared": {"value": false, "score": 5.960464477539062e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.15094685554504395}, "created": {"value": true, "score": 0.9987627267837524}, "shared": {"value": false, "score": 0.008786141872406006}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "PureData", "normalizedForm": "PureData", "offsetStart": 23, "offsetEnd": 31}, "context": "WebPd 2 is a web-based PureData patcher interpreter using JavaScript and the WebAudio API.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0003110170364379883}, "created": {"value": false, "score": 0.0005216002464294434}, "shared": {"value": false, "score": 0.014592766761779785}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0009672641754150391}, "created": {"value": false, "score": 0.0005216002464294434}, "shared": {"value": false, "score": 0.014592766761779785}}, "references": [{"label": "[2]", "normalizedForm": "[2]", "refKey": 2}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 23, "offsetEnd": 31}, "context": "The box behaves like a WebAudio node box, creating automatically corresponded inlets and outlets.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00022548437118530273}, "created": {"value": false, "score": 0.0005562901496887207}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.8936523199081421}, "created": {"value": true, "score": 0.9322909116744995}, "shared": {"value": false, "score": 0.04361367225646973}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "JSPatcher", "normalizedForm": "JSPatcher", "offsetStart": 23, "offsetEnd": 32}, "context": "The box objects in the JSPatcher are extendable and meant to be fully accessible for developments from community contributors.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00032889842987060547}, "created": {"value": false, "score": 0.022202253341674805}, "shared": {"value": false, "score": 0.008786141872406006}}, "documentContextAttributes": {"used": {"value": false, "score": 0.15094685554504395}, "created": {"value": true, "score": 0.9987627267837524}, "shared": {"value": false, "score": 0.008786141872406006}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio Plugins", "normalizedForm": "WebAudio Plugins", "offsetStart": 23, "offsetEnd": 39}, "context": "In JSPatcher, like the WebAudio Plugins, an analyzer with visualization can be packed in one WebAudio node box.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0001843571662902832}, "created": {"value": false, "score": 5.245208740234375e-05}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0001843571662902832}, "created": {"value": false, "score": 5.245208740234375e-05}, "shared": {"value": false, "score": 4.76837158203125e-07}}}, {"type": "software", "software-type": "implicit", "software-name": {"rawForm": "code", "normalizedForm": "code", "offsetStart": 25, "offsetEnd": 29}, "context": "Firstly, users can add a code box to write an AudioWorklet processor with plain JavaScript code. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.00029462575912475586}, "created": {"value": false, "score": 0.0009245872497558594}, "shared": {"value": false, "score": 0.00014579296112060547}}, "documentContextAttributes": {"used": {"value": false, "score": 0.00029462575912475586}, "created": {"value": false, "score": 0.0009245872497558594}, "shared": {"value": false, "score": 0.00014579296112060547}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "JSPatcher", "normalizedForm": "JSPatcher", "offsetStart": 25, "offsetEnd": 34}, "context": "One of our main goals in JSPatcher is to offer a possibility to create JavaScript programs with patchers. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.00014829635620117188}, "created": {"value": true, "score": 0.9957316517829895}, "shared": {"value": false, "score": 2.7418136596679688e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.15094685554504395}, "created": {"value": true, "score": 0.9987627267837524}, "shared": {"value": false, "score": 0.008786141872406006}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudioDesigner", "normalizedForm": "WebAudioDesigner", "offsetStart": 26, "offsetEnd": 42}, "context": "WebAudio Visual Editor, 4 WebAudioDesigner, 5 Mosaicode 6 [6] and Olos 7 are web-oriented VPLs for audio processing.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00040084123611450195}, "created": {"value": false, "score": 1.6808509826660156e-05}, "shared": {"value": false, "score": 8.285045623779297e-05}}, "documentContextAttributes": {"used": {"value": false, "score": 0.00040084123611450195}, "created": {"value": false, "score": 1.6808509826660156e-05}, "shared": {"value": false, "score": 8.285045623779297e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "AudioNode", "normalizedForm": "AudioNode", "offsetStart": 27, "offsetEnd": 36}, "context": "This can be achieved by an AudioNode which receives and analyzes the real-time signal, and HTML elements to display the result of the analysis. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.008887708187103271}, "created": {"value": false, "score": 4.4465065002441406e-05}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.15757930278778076}, "created": {"value": false, "score": 0.17710930109024048}, "shared": {"value": false, "score": 0.00021797418594360352}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "AudioWorkletNode", "normalizedForm": "AudioWorkletNode", "offsetStart": 28, "offsetEnd": 44}, "context": "Then it's created using the AudioWorkletNode constructor, and transformed using node~ into an AudioNode box.", "mentionContextAttributes": {"used": {"value": false, "score": 0.061316072940826416}, "created": {"value": false, "score": 0.17710930109024048}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.061316072940826416}, "created": {"value": false, "score": 0.17710930109024048}, "shared": {"value": false, "score": 3.5762786865234375e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 31, "offsetEnd": 39}, "context": "One additional outlet of these WebAudio node box object outputs the instance of the AudioNode for further possible usage via JavaScript box object. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.021509170532226562}, "created": {"value": false, "score": 3.790855407714844e-05}, "shared": {"value": false, "score": 9.5367431640625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.8936523199081421}, "created": {"value": true, "score": 0.9322909116744995}, "shared": {"value": false, "score": 0.04361367225646973}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "AudioNode", "normalizedForm": "AudioNode", "offsetStart": 31, "offsetEnd": 40}, "context": "Like the AudioWorklet box, its AudioNode and AudioParams are connectable with other WebAudio node boxes, in addition, it handles incoming MIDI messages from its first inlet.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0032026171684265137}, "created": {"value": false, "score": 0.00015115737915039062}, "shared": {"value": false, "score": 5.7220458984375e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.15757930278778076}, "created": {"value": false, "score": 0.17710930109024048}, "shared": {"value": false, "score": 0.00021797418594360352}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "AudioParams", "normalizedForm": "AudioParams", "offsetStart": 33, "offsetEnd": 44}, "context": "For example, inlets representing AudioParams can be connected from an AudioNode as in the WebAudio API, or be connected from box objects that generate numbers to be set as the value of the AudioParam.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0008292198181152344}, "created": {"value": false, "score": 0.0002021193504333496}, "shared": {"value": false, "score": 1.609325408935547e-05}}, "documentContextAttributes": {"used": {"value": false, "score": 0.03988230228424072}, "created": {"value": false, "score": 0.0005699992179870605}, "shared": {"value": false, "score": 1.609325408935547e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "JSPatcher", "normalizedForm": "JSPatcher", "offsetStart": 35, "offsetEnd": 44}, "context": "For example, in Figure 6  When the JSPatcher is initialized, it scans recursively the global variable window and imports its content which includes most of the JavaScript built-ins and Web APIs.", "mentionContextAttributes": {"used": {"value": false, "score": 0.003124237060546875}, "created": {"value": false, "score": 3.063678741455078e-05}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.15094685554504395}, "created": {"value": true, "score": 0.9987627267837524}, "shared": {"value": false, "score": 0.008786141872406006}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "AudioNode", "normalizedForm": "AudioNode", "offsetStart": 35, "offsetEnd": 44}, "context": "The node~ box object can bring any AudioNode into the WebAudio connection layer so that the constructed AudioWorklet node can be connected to other AudioNode boxes.", "mentionContextAttributes": {"used": {"value": false, "score": 0.024814188480377197}, "created": {"value": false, "score": 3.552436828613281e-05}, "shared": {"value": false, "score": 1.621246337890625e-05}}, "documentContextAttributes": {"used": {"value": false, "score": 0.15757930278778076}, "created": {"value": false, "score": 0.17710930109024048}, "shared": {"value": false, "score": 0.00021797418594360352}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "JSPatcher", "normalizedForm": "JSPatcher", "offsetStart": 36, "offsetEnd": 45}, "context": "This paper presents a webbased VPL, JSPatcher, which allows not only to build audio graphs using the WebAudio API, but also to design graphically AudioWorklet DSPs with FAUST toolchain, [4] [5]  or to create interactive programs with other language built-ins, Web APIs or any JavaScript modules.", "mentionContextAttributes": {"used": {"value": false, "score": 3.719329833984375e-05}, "created": {"value": true, "score": 0.9215105175971985}, "shared": {"value": false, "score": 1.2159347534179688e-05}}, "documentContextAttributes": {"used": {"value": false, "score": 0.15094685554504395}, "created": {"value": true, "score": 0.9987627267837524}, "shared": {"value": false, "score": 0.008786141872406006}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 37, "offsetEnd": 45}, "context": "The first is a representation of the WebAudio graph which contains connections between WebAudio Nodes.", "mentionContextAttributes": {"used": {"value": true, "score": 0.826441764831543}, "created": {"value": false, "score": 0.0009055137634277344}, "shared": {"value": false, "score": 5.960464477539062e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.8936523199081421}, "created": {"value": true, "score": 0.9322909116744995}, "shared": {"value": false, "score": 0.04361367225646973}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "AudioParams", "normalizedForm": "AudioParams", "offsetStart": 38, "offsetEnd": 49}, "context": "The parameters will be interpreted as AudioParams, and the node has APIs to handle MIDI messages.", "mentionContextAttributes": {"used": {"value": false, "score": 0.009963274002075195}, "created": {"value": false, "score": 0.0005699992179870605}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.03988230228424072}, "created": {"value": false, "score": 0.0005699992179870605}, "shared": {"value": false, "score": 1.609325408935547e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "JSPatcher", "normalizedForm": "JSPatcher", "offsetStart": 40, "offsetEnd": 49}, "context": "These features could be included in the JSPatcher.", "mentionContextAttributes": {"used": {"value": false, "score": 0.15094685554504395}, "created": {"value": false, "score": 0.0004349350929260254}, "shared": {"value": false, "score": 9.5367431640625e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.15094685554504395}, "created": {"value": true, "score": 0.9987627267837524}, "shared": {"value": false, "score": 0.008786141872406006}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "JSPatcher", "normalizedForm": "JSPatcher", "offsetStart": 40, "offsetEnd": 49}, "context": "In the design of WebAudio applications, JSPatcher is similar to some other platforms, allowing users to manipulate an audio graph and control the parameters. ", "mentionContextAttributes": {"used": {"value": false, "score": 3.2067298889160156e-05}, "created": {"value": false, "score": 0.41432565450668335}, "shared": {"value": false, "score": 1.5139579772949219e-05}}, "documentContextAttributes": {"used": {"value": false, "score": 0.15094685554504395}, "created": {"value": true, "score": 0.9987627267837524}, "shared": {"value": false, "score": 0.008786141872406006}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 44, "offsetEnd": 52}, "context": "Here (Figure 8) are two examples to build a WebAudio graph (oscillator-gain-destination) with JavaScript box objects, they are equivalent:", "mentionContextAttributes": {"used": {"value": false, "score": 0.000287473201751709}, "created": {"value": false, "score": 0.0003063678741455078}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.8936523199081421}, "created": {"value": true, "score": 0.9322909116744995}, "shared": {"value": false, "score": 0.04361367225646973}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAssembly", "normalizedForm": "WebAssembly", "offsetStart": 44, "offsetEnd": 55}, "context": "Thanks to the Emscripten transpiler and the WebAssembly format, the FAUST compiler is available as a JavaScript module faust2webaudio [10] which can compile FAUST code to a fully functional WebAudio AudioWorklet node.", "mentionContextAttributes": {"used": {"value": false, "score": 0.005606532096862793}, "created": {"value": false, "score": 0.0005003213882446289}, "shared": {"value": false, "score": 0.0009702444076538086}}, "documentContextAttributes": {"used": {"value": false, "score": 0.005606532096862793}, "created": {"value": false, "score": 0.0309218168258667}, "shared": {"value": false, "score": 0.0009702444076538086}}, "references": [{"label": "[7]", "normalizedForm": "[7]", "refKey": 7}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Tone.js", "normalizedForm": "Tone.js", "offsetStart": 45, "offsetEnd": 52}, "context": "For the timeline, a JavaScript audio library Tone.js implemented an AudioWorklet-based timing and scheduling system, which is an interesting and more accurate method for musical timing. ", "mentionContextAttributes": {"used": {"value": false, "score": 6.115436553955078e-05}, "created": {"value": false, "score": 0.10586845874786377}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 6.115436553955078e-05}, "created": {"value": false, "score": 0.10586845874786377}, "shared": {"value": false, "score": 4.76837158203125e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "AudioParams", "normalizedForm": "AudioParams", "offsetStart": 45, "offsetEnd": 56}, "context": "Like the AudioWorklet box, its AudioNode and AudioParams are connectable with other WebAudio node boxes, in addition, it handles incoming MIDI messages from its first inlet.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0032026171684265137}, "created": {"value": false, "score": 0.00015115737915039062}, "shared": {"value": false, "score": 5.7220458984375e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.03988230228424072}, "created": {"value": false, "score": 0.0005699992179870605}, "shared": {"value": false, "score": 1.609325408935547e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "AudioWorklet", "normalizedForm": "AudioWorklet", "offsetStart": 46, "offsetEnd": 58}, "language": {"rawForm": "JavaScript", "normalizedForm": "JavaScript"}, "context": "Firstly, users can add a code box to write an AudioWorklet processor with plain JavaScript code. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.00029462575912475586}, "created": {"value": false, "score": 0.0009245872497558594}, "shared": {"value": false, "score": 0.00014579296112060547}}, "documentContextAttributes": {"used": {"value": false, "score": 0.15757930278778076}, "created": {"value": true, "score": 0.9904370903968811}, "shared": {"value": false, "score": 0.00014579296112060547}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "JSPatcher", "normalizedForm": "JSPatcher", "offsetStart": 47, "offsetEnd": 56}, "context": "We are working on a virtual file system in the JSPatcher so that dependencies like audio files or subpatchers can be loaded and saved to the file system.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00012040138244628906}, "created": {"value": true, "score": 0.9987627267837524}, "shared": {"value": false, "score": 4.291534423828125e-05}}, "documentContextAttributes": {"used": {"value": false, "score": 0.15094685554504395}, "created": {"value": true, "score": 0.9987627267837524}, "shared": {"value": false, "score": 0.008786141872406006}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 51, "offsetEnd": 59}, "context": "In this layer, each box is a representation of one WebAudio node that has node connections and its AudioParams becoming the box's inlets and outlets. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.03988230228424072}, "created": {"value": false, "score": 4.887580871582031e-05}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.8936523199081421}, "created": {"value": true, "score": 0.9322909116744995}, "shared": {"value": false, "score": 0.04361367225646973}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 51, "offsetEnd": 59}, "context": "Apart from using JavaScript box objects to build a WebAudio graph, JSPatcher provides a dedicated layer for WebAudio nodes.", "mentionContextAttributes": {"used": {"value": false, "score": 3.4809112548828125e-05}, "created": {"value": false, "score": 0.0002295374870300293}, "shared": {"value": false, "score": 1.1920928955078125e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.8936523199081421}, "created": {"value": true, "score": 0.9322909116744995}, "shared": {"value": false, "score": 0.04361367225646973}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 54, "offsetEnd": 62}, "context": "The node~ box object can bring any AudioNode into the WebAudio connection layer so that the constructed AudioWorklet node can be connected to other AudioNode boxes.", "mentionContextAttributes": {"used": {"value": false, "score": 0.024814188480377197}, "created": {"value": false, "score": 3.552436828613281e-05}, "shared": {"value": false, "score": 1.621246337890625e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.8936523199081421}, "created": {"value": true, "score": 0.9322909116744995}, "shared": {"value": false, "score": 0.04361367225646973}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "JSPatcher", "normalizedForm": "JSPatcher", "offsetStart": 54, "offsetEnd": 63}, "context": "This feature can change the design of a project under JSPatcher, as it can be separated into several patchers for different roles in the project. ", "mentionContextAttributes": {"used": {"value": false, "score": 7.128715515136719e-05}, "created": {"value": false, "score": 0.02195131778717041}, "shared": {"value": false, "score": 1.3113021850585938e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.15094685554504395}, "created": {"value": true, "score": 0.9987627267837524}, "shared": {"value": false, "score": 0.008786141872406006}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "JSPatcher", "normalizedForm": "JSPatcher", "offsetStart": 59, "offsetEnd": 68}, "context": "But we try to provide more flexibilities and potentials to JSPatcher, to design an AudioWorklet, and to gain control of other JavaScript-based web features. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0001074075698852539}, "created": {"value": true, "score": 0.9904370903968811}, "shared": {"value": false, "score": 7.748603820800781e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.15094685554504395}, "created": {"value": true, "score": 0.9987627267837524}, "shared": {"value": false, "score": 0.008786141872406006}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio Plugin", "normalizedForm": "WebAudio Plugin", "offsetStart": 59, "offsetEnd": 78}, "context": "We provide in this layer a box object plugin~ to bring any WebAudio Plugin [8] [9] into the patcher with its UI. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0003256797790527344}, "created": {"value": false, "score": 0.00043720006942749023}, "shared": {"value": false, "score": 7.152557373046875e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0040087103843688965}, "created": {"value": false, "score": 0.00043720006942749023}, "shared": {"value": false, "score": 0.00021797418594360352}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "PureData", "normalizedForm": "PureData", "offsetStart": 60, "offsetEnd": 68}, "context": "Many visual programming languages (VPLs) such as Max [1] or PureData [2] provide a graphic canvas to allow developers to connect functions or data between them.", "mentionContextAttributes": {"used": {"value": false, "score": 3.6716461181640625e-05}, "created": {"value": false, "score": 0.00043338537216186523}, "shared": {"value": false, "score": 2.2649765014648438e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0009672641754150391}, "created": {"value": false, "score": 0.0005216002464294434}, "shared": {"value": false, "score": 0.014592766761779785}}, "references": [{"label": "[2]", "normalizedForm": "[2]", "refKey": 2, "offsetStart": 69, "offsetEnd": 72}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "AudioWorklet", "normalizedForm": "AudioWorklet", "offsetStart": 62, "offsetEnd": 74}, "language": {"rawForm": "JavaScript", "normalizedForm": "JavaScript"}, "context": "Using this approach, JSPatcher offers possibilities to design AudioWorklet DSPs with compiled patchers thanks to FAUST WebAssembly compiler [7] and to interact with them in real-time from an imperative patcher.", "mentionContextAttributes": {"used": {"value": false, "score": 3.8504600524902344e-05}, "created": {"value": false, "score": 0.0309218168258667}, "shared": {"value": false, "score": 5.960464477539062e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.15757930278778076}, "created": {"value": true, "score": 0.9904370903968811}, "shared": {"value": false, "score": 0.00014579296112060547}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "JSPatcher", "normalizedForm": "JSPatcher", "offsetStart": 67, "offsetEnd": 76}, "context": "Apart from using JavaScript box objects to build a WebAudio graph, JSPatcher provides a dedicated layer for WebAudio nodes.", "mentionContextAttributes": {"used": {"value": false, "score": 3.4809112548828125e-05}, "created": {"value": false, "score": 0.0002295374870300293}, "shared": {"value": false, "score": 1.1920928955078125e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.15094685554504395}, "created": {"value": true, "score": 0.9987627267837524}, "shared": {"value": false, "score": 0.008786141872406006}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "AudioWorklet", "normalizedForm": "AudioWorklet", "offsetStart": 68, "offsetEnd": 80}, "language": {"rawForm": "JavaScript", "normalizedForm": "JavaScript"}, "context": "For the timeline, a JavaScript audio library Tone.js implemented an AudioWorklet-based timing and scheduling system, which is an interesting and more accurate method for musical timing. ", "mentionContextAttributes": {"used": {"value": false, "score": 6.115436553955078e-05}, "created": {"value": false, "score": 0.10586845874786377}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.15757930278778076}, "created": {"value": true, "score": 0.9904370903968811}, "shared": {"value": false, "score": 0.00014579296112060547}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "AudioNode", "normalizedForm": "AudioNode", "offsetStart": 70, "offsetEnd": 79}, "context": "For example, inlets representing AudioParams can be connected from an AudioNode as in the WebAudio API, or be connected from box objects that generate numbers to be set as the value of the AudioParam.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0008292198181152344}, "created": {"value": false, "score": 0.0002021193504333496}, "shared": {"value": false, "score": 1.609325408935547e-05}}, "documentContextAttributes": {"used": {"value": false, "score": 0.15757930278778076}, "created": {"value": false, "score": 0.17710930109024048}, "shared": {"value": false, "score": 0.00021797418594360352}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 72, "offsetEnd": 80}, "context": "If a cable is connected between an inlet and an outlet both marked as a WebAudio connection, the cable will be displayed differently, and call native WebAudio connect and disconnect methods while manipulated.", "mentionContextAttributes": {"used": {"value": false, "score": 0.001104891300201416}, "created": {"value": false, "score": 2.1696090698242188e-05}, "shared": {"value": false, "score": 4.291534423828125e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.8936523199081421}, "created": {"value": true, "score": 0.9322909116744995}, "shared": {"value": false, "score": 0.04361367225646973}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "AudioWorklet", "normalizedForm": "AudioWorklet", "offsetStart": 74, "offsetEnd": 86}, "language": {"rawForm": "JavaScript", "normalizedForm": "JavaScript"}, "context": "Aside from FAUST, Csound [15] is also a language that be compiled into an AudioWorklet node thanks to the WebAssembly Besides, it will be interesting to design an AudioWorklet's processor with JavaScript boxes in a subpatcher by having a dedicated patcher system in the audio thread. ", "mentionContextAttributes": {"used": {"value": false, "score": 5.8770179748535156e-05}, "created": {"value": false, "score": 0.005408585071563721}, "shared": {"value": false, "score": 5.459785461425781e-05}}, "documentContextAttributes": {"used": {"value": false, "score": 0.15757930278778076}, "created": {"value": true, "score": 0.9904370903968811}, "shared": {"value": false, "score": 0.00014579296112060547}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 75, "offsetEnd": 83}, "context": "Cables.gl3 is a video-oriented patcher editor on the web that also handles WebAudio nodes. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0007308125495910645}, "created": {"value": false, "score": 0.0003587007522583008}, "shared": {"value": false, "score": 0.04361367225646973}}, "documentContextAttributes": {"used": {"value": true, "score": 0.8936523199081421}, "created": {"value": true, "score": 0.9322909116744995}, "shared": {"value": false, "score": 0.04361367225646973}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio API", "normalizedForm": "WebAudio API", "offsetStart": 77, "offsetEnd": 89}, "context": "WebPd 2 is a web-based PureData patcher interpreter using JavaScript and the WebAudio API. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0003110170364379883}, "created": {"value": false, "score": 0.0005216002464294434}, "shared": {"value": false, "score": 0.014592766761779785}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0003110170364379883}, "created": {"value": false, "score": 0.0005216002464294434}, "shared": {"value": false, "score": 0.014592766761779785}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "AudioWorklet", "normalizedForm": "AudioWorklet", "offsetStart": 79, "offsetEnd": 91}, "language": {"rawForm": "JavaScript", "normalizedForm": "JavaScript"}, "context": "JSPatcher includes a set of box object that helps to code, register and use an AudioWorklet node in the patcher system.", "mentionContextAttributes": {"used": {"value": false, "score": 4.2319297790527344e-05}, "created": {"value": false, "score": 0.00018996000289916992}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.15757930278778076}, "created": {"value": true, "score": 0.9904370903968811}, "shared": {"value": false, "score": 0.00014579296112060547}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "AudioWorklet", "normalizedForm": "AudioWorklet", "offsetStart": 83, "offsetEnd": 95}, "language": {"rawForm": "JavaScript", "normalizedForm": "JavaScript"}, "context": "But we try to provide more flexibilities and potentials to JSPatcher, to design an AudioWorklet, and to gain control of other JavaScript-based web features. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0001074075698852539}, "created": {"value": true, "score": 0.9904370903968811}, "shared": {"value": false, "score": 7.748603820800781e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.15757930278778076}, "created": {"value": true, "score": 0.9904370903968811}, "shared": {"value": false, "score": 0.00014579296112060547}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 84, "offsetEnd": 92}, "context": "Like the AudioWorklet box, its AudioNode and AudioParams are connectable with other WebAudio node boxes, in addition, it handles incoming MIDI messages from its first inlet.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0032026171684265137}, "created": {"value": false, "score": 0.00015115737915039062}, "shared": {"value": false, "score": 5.7220458984375e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.8936523199081421}, "created": {"value": true, "score": 0.9322909116744995}, "shared": {"value": false, "score": 0.04361367225646973}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "AudioNode", "normalizedForm": "AudioNode", "offsetStart": 84, "offsetEnd": 93}, "context": "One additional outlet of these WebAudio node box object outputs the instance of the AudioNode for further possible usage via JavaScript box object.", "mentionContextAttributes": {"used": {"value": false, "score": 0.021509170532226562}, "created": {"value": false, "score": 3.790855407714844e-05}, "shared": {"value": false, "score": 9.5367431640625e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.15757930278778076}, "created": {"value": false, "score": 0.17710930109024048}, "shared": {"value": false, "score": 0.00021797418594360352}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "audioWorklet", "normalizedForm": "audioWorklet", "offsetStart": 84, "offsetEnd": 96}, "context": "In Figure 10, the AudioWorkletProcessor is written in a code box, registered by the audioWorklet box. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.26211774349212646}, "created": {"value": false, "score": 5.1021575927734375e-05}, "shared": {"value": false, "score": 1.6689300537109375e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.26211774349212646}, "created": {"value": false, "score": 7.414817810058594e-05}, "shared": {"value": false, "score": 9.417533874511719e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "AudioWorklet", "normalizedForm": "AudioWorklet", "offsetStart": 85, "offsetEnd": 97}, "language": {"rawForm": "JavaScript", "normalizedForm": "JavaScript"}, "context": "After being registered, the box will output a Bang that can be used to construct the AudioWorklet AudioNode with the processor's identifier.", "mentionContextAttributes": {"used": {"value": false, "score": 0.15757930278778076}, "created": {"value": false, "score": 0.0004998445510864258}, "shared": {"value": false, "score": 5.4836273193359375e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.15757930278778076}, "created": {"value": true, "score": 0.9904370903968811}, "shared": {"value": false, "score": 0.00014579296112060547}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 87, "offsetEnd": 95}, "context": "The first is a representation of the WebAudio graph which contains connections between WebAudio Nodes.", "mentionContextAttributes": {"used": {"value": true, "score": 0.826441764831543}, "created": {"value": false, "score": 0.0009055137634277344}, "shared": {"value": false, "score": 5.960464477539062e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.8936523199081421}, "created": {"value": true, "score": 0.9322909116744995}, "shared": {"value": false, "score": 0.04361367225646973}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 90, "offsetEnd": 98}, "context": "For example, inlets representing AudioParams can be connected from an AudioNode as in the WebAudio API, or be connected from box objects that generate numbers to be set as the value of the AudioParam. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0008292198181152344}, "created": {"value": false, "score": 0.0002021193504333496}, "shared": {"value": false, "score": 1.609325408935547e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.8936523199081421}, "created": {"value": true, "score": 0.9322909116744995}, "shared": {"value": false, "score": 0.04361367225646973}}}, {"type": "software", "software-type": "implicit", "software-name": {"rawForm": "code", "normalizedForm": "code", "offsetStart": 91, "offsetEnd": 95}, "context": "Firstly, users can add a code box to write an AudioWorklet processor with plain JavaScript code. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.00029462575912475586}, "created": {"value": false, "score": 0.0009245872497558594}, "shared": {"value": false, "score": 0.00014579296112060547}}, "documentContextAttributes": {"used": {"value": false, "score": 0.00029462575912475586}, "created": {"value": false, "score": 0.0009245872497558594}, "shared": {"value": false, "score": 0.00014579296112060547}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 91, "offsetEnd": 99}, "context": "When receiving the FAUST code, it will try to compile the code and transform itself into a WebAudio node box.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0053452253341674805}, "created": {"value": false, "score": 0.0006184577941894531}, "shared": {"value": false, "score": 1.9073486328125e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.8936523199081421}, "created": {"value": true, "score": 0.9322909116744995}, "shared": {"value": false, "score": 0.04361367225646973}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 93, "offsetEnd": 101}, "context": "In JSPatcher, like the WebAudio Plugins, an analyzer with visualization can be packed in one WebAudio node box.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0001843571662902832}, "created": {"value": false, "score": 5.245208740234375e-05}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.8936523199081421}, "created": {"value": true, "score": 0.9322909116744995}, "shared": {"value": false, "score": 0.04361367225646973}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "AudioNode", "normalizedForm": "AudioNode", "offsetStart": 94, "offsetEnd": 103}, "context": "Then it's created using the AudioWorkletNode constructor, and transformed using node~ into an AudioNode box.", "mentionContextAttributes": {"used": {"value": false, "score": 0.061316072940826416}, "created": {"value": false, "score": 0.17710930109024048}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.15757930278778076}, "created": {"value": false, "score": 0.17710930109024048}, "shared": {"value": false, "score": 0.00021797418594360352}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "AudioNode", "normalizedForm": "AudioNode", "offsetStart": 98, "offsetEnd": 107}, "context": "After being registered, the box will output a Bang that can be used to construct the AudioWorklet AudioNode with the processor's identifier.", "mentionContextAttributes": {"used": {"value": false, "score": 0.15757930278778076}, "created": {"value": false, "score": 0.0004998445510864258}, "shared": {"value": false, "score": 5.4836273193359375e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.15757930278778076}, "created": {"value": false, "score": 0.17710930109024048}, "shared": {"value": false, "score": 0.00021797418594360352}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "AudioParams", "normalizedForm": "AudioParams", "offsetStart": 99, "offsetEnd": 110}, "context": "In this layer, each box is a representation of one WebAudio node that has node connections and its AudioParams becoming the box's inlets and outlets.", "mentionContextAttributes": {"used": {"value": false, "score": 0.03988230228424072}, "created": {"value": false, "score": 4.887580871582031e-05}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.03988230228424072}, "created": {"value": false, "score": 0.0005699992179870605}, "shared": {"value": false, "score": 1.609325408935547e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 101, "offsetEnd": 109}, "context": "This paper presents a webbased VPL, JSPatcher, which allows not only to build audio graphs using the WebAudio API, but also to design graphically AudioWorklet DSPs with FAUST toolchain, [4] [5]  or to create interactive programs with other language built-ins, Web APIs or any JavaScript modules.", "mentionContextAttributes": {"used": {"value": false, "score": 3.719329833984375e-05}, "created": {"value": true, "score": 0.9215105175971985}, "shared": {"value": false, "score": 1.2159347534179688e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.8936523199081421}, "created": {"value": true, "score": 0.9322909116744995}, "shared": {"value": false, "score": 0.04361367225646973}}}, {"type": "software", "software-type": "implicit", "software-name": {"rawForm": "file", "normalizedForm": "file", "offsetStart": 103, "offsetEnd": 107}, "context": "According to the WebAudio Plugin standard, an URL is needed to fetch from a remote server a JavaScript file that loaded its dependencies and returns an HTML element as its UI, an AudioNode to be connected and output from the box's last outlet.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0040087103843688965}, "created": {"value": false, "score": 0.00014448165893554688}, "shared": {"value": false, "score": 0.00021797418594360352}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0040087103843688965}, "created": {"value": false, "score": 0.00014448165893554688}, "shared": {"value": false, "score": 0.00021797418594360352}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "AudioWorklet", "normalizedForm": "AudioWorklet", "offsetStart": 104, "offsetEnd": 116}, "language": {"rawForm": "JavaScript", "normalizedForm": "JavaScript"}, "context": "The node~ box object can bring any AudioNode into the WebAudio connection layer so that the constructed AudioWorklet node can be connected to other AudioNode boxes.", "mentionContextAttributes": {"used": {"value": false, "score": 0.024814188480377197}, "created": {"value": false, "score": 3.552436828613281e-05}, "shared": {"value": false, "score": 1.621246337890625e-05}}, "documentContextAttributes": {"used": {"value": false, "score": 0.15757930278778076}, "created": {"value": true, "score": 0.9904370903968811}, "shared": {"value": false, "score": 0.00014579296112060547}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "createObjectURL", "normalizedForm": "createObjectURL", "offsetStart": 104, "offsetEnd": 119}, "context": "Then the box object audioWorklet allows users to register the processor from the code, using internally createObjectURL. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.003902435302734375}, "created": {"value": false, "score": 7.414817810058594e-05}, "shared": {"value": false, "score": 9.417533874511719e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.003902435302734375}, "created": {"value": false, "score": 7.414817810058594e-05}, "shared": {"value": false, "score": 9.417533874511719e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "JSPatcher", "normalizedForm": "JSPatcher", "offsetStart": 105, "offsetEnd": 114}, "context": "With the SDK, developers can create their box object packages which can be imported from an URL into the JSPatcher.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0006462931632995605}, "created": {"value": false, "score": 0.03933870792388916}, "shared": {"value": false, "score": 0.004705369472503662}}, "documentContextAttributes": {"used": {"value": false, "score": 0.15094685554504395}, "created": {"value": true, "score": 0.9987627267837524}, "shared": {"value": false, "score": 0.008786141872406006}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAssembly", "normalizedForm": "WebAssembly", "offsetStart": 106, "offsetEnd": 117}, "context": "Aside from FAUST, Csound [15] is also a language that be compiled into an AudioWorklet node thanks to the WebAssembly Besides, it will be interesting to design an AudioWorklet's processor with JavaScript boxes in a subpatcher by having a dedicated patcher system in the audio thread. ", "mentionContextAttributes": {"used": {"value": false, "score": 5.8770179748535156e-05}, "created": {"value": false, "score": 0.005408585071563721}, "shared": {"value": false, "score": 5.459785461425781e-05}}, "documentContextAttributes": {"used": {"value": false, "score": 0.005606532096862793}, "created": {"value": false, "score": 0.0309218168258667}, "shared": {"value": false, "score": 0.0009702444076538086}}, "references": [{"label": "[7]", "normalizedForm": "[7]", "refKey": 7}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 108, "offsetEnd": 116}, "context": "Apart from using JavaScript box objects to build a WebAudio graph, JSPatcher provides a dedicated layer for WebAudio nodes. ", "mentionContextAttributes": {"used": {"value": false, "score": 3.4809112548828125e-05}, "created": {"value": false, "score": 0.0002295374870300293}, "shared": {"value": false, "score": 1.1920928955078125e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.8936523199081421}, "created": {"value": true, "score": 0.9322909116744995}, "shared": {"value": false, "score": 0.04361367225646973}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "faust2", "normalizedForm": "faust2", "offsetStart": 119, "offsetEnd": 125}, "language": {"rawForm": "JavaScript", "normalizedForm": "JavaScript", "wikidataId": "Q2005", "offsetStart": 179, "offsetEnd": 189}, "context": "Thanks to the Emscripten transpiler and the WebAssembly format, the FAUST compiler is available as a JavaScript module faust2webaudio [10] which can compile FAUST code to a fully functional WebAudio AudioWorklet node.", "mentionContextAttributes": {"used": {"value": false, "score": 0.005606532096862793}, "created": {"value": false, "score": 0.0005003213882446289}, "shared": {"value": false, "score": 0.0009702444076538086}}, "documentContextAttributes": {"used": {"value": false, "score": 0.005606532096862793}, "created": {"value": true, "score": 0.9322909116744995}, "shared": {"value": false, "score": 0.0009702444076538086}}, "references": [{"label": "[10]", "normalizedForm": "[10]", "refKey": 10, "offsetStart": 17899, "offsetEnd": 17903}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAssembly", "normalizedForm": "WebAssembly", "offsetStart": 119, "offsetEnd": 130}, "context": "Using this approach, JSPatcher offers possibilities to design AudioWorklet DSPs with compiled patchers thanks to FAUST WebAssembly compiler [7] and to interact with them in real-time from an imperative patcher.", "mentionContextAttributes": {"used": {"value": false, "score": 3.8504600524902344e-05}, "created": {"value": false, "score": 0.0309218168258667}, "shared": {"value": false, "score": 5.960464477539062e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.005606532096862793}, "created": {"value": false, "score": 0.0309218168258667}, "shared": {"value": false, "score": 0.0009702444076538086}}, "references": [{"label": "[7]", "normalizedForm": "[7]", "refKey": 7, "offsetStart": 4155, "offsetEnd": 4158}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 145, "offsetEnd": 153}, "context": "Figure 13 The generated code can be previewed in on the right panel (synchronized to the patcher) Figure 14 A FAUST patcher can be compiled to a WebAudio node box (the patcher on the right is the FAUST patcher) 17   6.", "mentionContextAttributes": {"used": {"value": false, "score": 0.02533501386642456}, "created": {"value": false, "score": 6.73532485961914e-05}, "shared": {"value": false, "score": 2.7060508728027344e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.8936523199081421}, "created": {"value": true, "score": 0.9322909116744995}, "shared": {"value": false, "score": 0.04361367225646973}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "AudioWorklet", "normalizedForm": "AudioWorklet", "offsetStart": 146, "offsetEnd": 158}, "language": {"rawForm": "JavaScript", "normalizedForm": "JavaScript"}, "context": "This paper presents a webbased VPL, JSPatcher, which allows not only to build audio graphs using the WebAudio API, but also to design graphically AudioWorklet DSPs with FAUST toolchain, [4] [5]  or to create interactive programs with other language built-ins, Web APIs or any JavaScript modules.", "mentionContextAttributes": {"used": {"value": false, "score": 3.719329833984375e-05}, "created": {"value": true, "score": 0.9215105175971985}, "shared": {"value": false, "score": 1.2159347534179688e-05}}, "documentContextAttributes": {"used": {"value": false, "score": 0.15757930278778076}, "created": {"value": true, "score": 0.9904370903968811}, "shared": {"value": false, "score": 0.00014579296112060547}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "AudioNode", "normalizedForm": "AudioNode", "offsetStart": 148, "offsetEnd": 157}, "context": "The node~ box object can bring any AudioNode into the WebAudio connection layer so that the constructed AudioWorklet node can be connected to other AudioNode boxes.", "mentionContextAttributes": {"used": {"value": false, "score": 0.024814188480377197}, "created": {"value": false, "score": 3.552436828613281e-05}, "shared": {"value": false, "score": 1.621246337890625e-05}}, "documentContextAttributes": {"used": {"value": false, "score": 0.15757930278778076}, "created": {"value": false, "score": 0.17710930109024048}, "shared": {"value": false, "score": 0.00021797418594360352}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 150, "offsetEnd": 158}, "context": "If a cable is connected between an inlet and an outlet both marked as a WebAudio connection, the cable will be displayed differently, and call native WebAudio connect and disconnect methods while manipulated.", "mentionContextAttributes": {"used": {"value": false, "score": 0.001104891300201416}, "created": {"value": false, "score": 2.1696090698242188e-05}, "shared": {"value": false, "score": 4.291534423828125e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.8936523199081421}, "created": {"value": true, "score": 0.9322909116744995}, "shared": {"value": false, "score": 0.04361367225646973}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "AudioNode", "normalizedForm": "AudioNode", "offsetStart": 158, "offsetEnd": 167}, "context": "For example, a level meter can be a box object that displays instant RMS (root mean square) values graphically, with one inlet as a connection to an analyzer AudioNode.", "mentionContextAttributes": {"used": {"value": false, "score": 6.258487701416016e-05}, "created": {"value": false, "score": 4.8279762268066406e-05}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.15757930278778076}, "created": {"value": false, "score": 0.17710930109024048}, "shared": {"value": false, "score": 0.00021797418594360352}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "AudioWorklet", "normalizedForm": "AudioWorklet", "offsetStart": 163, "offsetEnd": 175}, "language": {"rawForm": "JavaScript", "normalizedForm": "JavaScript", "wikidataId": "Q2005", "offsetStart": 193, "offsetEnd": 203}, "context": "Aside from FAUST, Csound [15] is also a language that be compiled into an AudioWorklet node thanks to the WebAssembly Besides, it will be interesting to design an AudioWorklet's processor with JavaScript boxes in a subpatcher by having a dedicated patcher system in the audio thread. ", "mentionContextAttributes": {"used": {"value": false, "score": 5.8770179748535156e-05}, "created": {"value": false, "score": 0.005408585071563721}, "shared": {"value": false, "score": 5.459785461425781e-05}}, "documentContextAttributes": {"used": {"value": false, "score": 0.15757930278778076}, "created": {"value": true, "score": 0.9904370903968811}, "shared": {"value": false, "score": 0.00014579296112060547}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "AudioNode", "normalizedForm": "AudioNode", "offsetStart": 179, "offsetEnd": 188}, "context": "According to the WebAudio Plugin standard, an URL is needed to fetch from a remote server a JavaScript file that loaded its dependencies and returns an HTML element as its UI, an AudioNode to be connected and output from the box's last outlet.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0040087103843688965}, "created": {"value": false, "score": 0.00014448165893554688}, "shared": {"value": false, "score": 0.00021797418594360352}}, "documentContextAttributes": {"used": {"value": false, "score": 0.15757930278778076}, "created": {"value": false, "score": 0.17710930109024048}, "shared": {"value": false, "score": 0.00021797418594360352}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "AudioParam", "normalizedForm": "AudioParam", "offsetStart": 189, "offsetEnd": 199}, "context": "For example, inlets representing AudioParams can be connected from an AudioNode as in the WebAudio API, or be connected from box objects that generate numbers to be set as the value of the AudioParam. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0008292198181152344}, "created": {"value": false, "score": 0.0002021193504333496}, "shared": {"value": false, "score": 1.609325408935547e-05}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0008292198181152344}, "created": {"value": false, "score": 0.0002021193504333496}, "shared": {"value": false, "score": 1.609325408935547e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio AudioWorklet", "normalizedForm": "WebAudio AudioWorklet", "offsetStart": 190, "offsetEnd": 211}, "context": "Thanks to the Emscripten transpiler and the WebAssembly format, the FAUST compiler is available as a JavaScript module faust2webaudio [10] which can compile FAUST code to a fully functional WebAudio AudioWorklet node.", "mentionContextAttributes": {"used": {"value": false, "score": 0.005606532096862793}, "created": {"value": false, "score": 0.0005003213882446289}, "shared": {"value": false, "score": 0.0009702444076538086}}, "documentContextAttributes": {"used": {"value": false, "score": 0.005606532096862793}, "created": {"value": false, "score": 0.0005003213882446289}, "shared": {"value": false, "score": 0.0009702444076538086}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "WebAudio", "normalizedForm": "WebAudio", "offsetStart": 211, "offsetEnd": 219}, "context": "In JSPatcher, we designed a specific mode of patcher to build a FAUST-compatible graph, that will be firstly interpreted to an equivalent FAUST code which can be used in other FAUST tools, then be compiled to a WebAudio node using faust2webaudio. ", "mentionContextAttributes": {"used": {"value": false, "score": 8.535385131835938e-05}, "created": {"value": true, "score": 0.9322909116744995}, "shared": {"value": false, "score": 1.0848045349121094e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.8936523199081421}, "created": {"value": true, "score": 0.9322909116744995}, "shared": {"value": false, "score": 0.04361367225646973}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "faust2", "normalizedForm": "faust2", "offsetStart": 231, "offsetEnd": 237}, "language": {"rawForm": "JavaScript", "normalizedForm": "JavaScript"}, "context": "In JSPatcher, we designed a specific mode of patcher to build a FAUST-compatible graph, that will be firstly interpreted to an equivalent FAUST code which can be used in other FAUST tools, then be compiled to a WebAudio node using faust2webaudio. ", "mentionContextAttributes": {"used": {"value": false, "score": 8.535385131835938e-05}, "created": {"value": true, "score": 0.9322909116744995}, "shared": {"value": false, "score": 1.0848045349121094e-05}}, "documentContextAttributes": {"used": {"value": false, "score": 0.005606532096862793}, "created": {"value": true, "score": 0.9322909116744995}, "shared": {"value": false, "score": 0.0009702444076538086}}, "references": [{"label": "[10]", "normalizedForm": "[10]", "refKey": 10}]}], "references": [{"refKey": 2, "tei": "<biblStruct xml:id=\"b2\">\n\t<analytic>\n\t\t<title level=\"a\" type=\"main\">Design choices in Max and Pure Data</title>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Miller</forename><surname>Puckette</surname></persName>\n\t\t</author>\n\t\t<idno type=\"DOI\">10.1121/10.0018738</idno>\n\t</analytic>\n\t<monogr>\n\t\t<title level=\"j\">The Journal of the Acoustical Society of America</title>\n\t\t<idno type=\"ISSN\">0001-4966</idno>\n\t\t<idno type=\"ISSNe\">1520-8524</idno>\n\t\t<imprint>\n\t\t\t<biblScope unit=\"volume\">153</biblScope>\n\t\t\t<biblScope unit=\"issue\">3_supplement</biblScope>\n\t\t\t<biblScope unit=\"page\" from=\"A230\" to=\"A230\" />\n\t\t\t<date type=\"published\" when=\"2023-03-01\">1997</date>\n\t\t\t<publisher>Acoustical Society of America (ASA)</publisher>\n\t\t</imprint>\n\t</monogr>\n</biblStruct>\n"}, {"refKey": 7, "tei": "<biblStruct xml:id=\"b7\">\n\t<analytic>\n\t\t<title level=\"a\" type=\"main\">FAUST Domain Specific Audio DSP Language Compiled to WebAssembly</title>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">St\u00e9phane</forename><surname>Letz</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Yann</forename><surname>Orlarey</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Dominique</forename><surname>Fober</surname></persName>\n\t\t</author>\n\t\t<idno type=\"DOI\">10.1145/3184558.3185970</idno>\n\t</analytic>\n\t<monogr>\n\t\t<title level=\"m\">Companion of the The Web Conference 2018 on The Web Conference 2018 - WWW &apos;18</title>\n\t\t<imprint>\n\t\t\t<publisher>ACM Press</publisher>\n\t\t\t<date type=\"published\" when=\"2018\">2015</date>\n\t\t\t<biblScope unit=\"page\" from=\"701\" to=\"709\" />\n\t\t</imprint>\n\t</monogr>\n</biblStruct>\n"}, {"refKey": 10, "tei": "<biblStruct xml:id=\"b10\">\n\t<analytic>\n\t\t<title level=\"a\" type=\"main\">Using Faust DSL to Develop Custom, Sample Accurate DSP Code and Audio Plugins for the Web Browser</title>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Shihong</forename><surname>Ren</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">St\u00e9phane</forename><surname>Letz</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Yann</forename><surname>Orlarey</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Romain</forename><surname>Michon</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Dominique</forename><surname>Fober</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Michel</forename><surname>Buffa</surname></persName>\n\t\t</author>\n\t\t<author>\n\t\t\t<persName><forename type=\"first\">Jerome</forename><surname>Lebrun</surname></persName>\n\t\t</author>\n\t\t<idno type=\"DOI\">10.17743/jaes.2020.0014</idno>\n\t</analytic>\n\t<monogr>\n\t\t<title level=\"j\">Journal of the Audio Engineering Society</title>\n\t\t<title level=\"j\" type=\"abbrev\">J. Audio Eng. Soc.</title>\n\t\t<idno type=\"ISSN\">1549-4950</idno>\n\t\t<imprint>\n\t\t\t<biblScope unit=\"volume\">68</biblScope>\n\t\t\t<biblScope unit=\"issue\">10</biblScope>\n\t\t\t<biblScope unit=\"page\" from=\"703\" to=\"716\" />\n\t\t\t<date type=\"published\" when=\"2020-12-07\">2019</date>\n\t\t\t<publisher>Audio Engineering Society</publisher>\n\t\t</imprint>\n\t</monogr>\n</biblStruct>\n"}], "runtime": 14381, "id": "78a4dd2b224b27df52008458f237d278a1990d00", "metadata": {"id": "78a4dd2b224b27df52008458f237d278a1990d00"}, "original_file_path": "../../datalake/Samuel/SOFTware-Sync/downloads/xml/hal-03519504.grobid.tei.xml", "file_name": "hal-03519504.grobid.tei.xml"}