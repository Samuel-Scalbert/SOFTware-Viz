{"application": "software-mentions", "version": "0.8.0", "date": "2024-10-07T11:39+0000", "md5": "0C9C0EAEC3BFCA9C1665DC79361ED046", "mentions": [{"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 0, "offsetEnd": 4}, "context": "KiVi is also crucial for the efficiency of the solution since it is a relational key-value data store that has implemented all operators from relational algebra, but Join, and thus it enables to push down all operators below joins to the storage engine highly reducing the movement of tuples between storage engine and query engine.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00011348724365234375}, "created": {"value": false, "score": 0.00744783878326416}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 0, "offsetEnd": 4}, "context": "KiVi is a distributed relational keyvalue store, combining the best of key-value stores (data partitioning, horizontal scaling) and relational data stores (relational schemas and algebraic operators such as predicate filtering, aggregation, grouping, and sorting).", "mentionContextAttributes": {"used": {"value": false, "score": 0.0001291036605834961}, "created": {"value": false, "score": 0.0005759000778198242}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 0, "offsetEnd": 4}, "context": "KiVi enables to push down all algebraic operators in a query plan below joins to multiple KiVi instances.", "mentionContextAttributes": {"used": {"value": false, "score": 6.115436553955078e-05}, "created": {"value": false, "score": 3.826618194580078e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "NewSQL", "normalizedForm": "NewSQL", "offsetStart": 0, "offsetEnd": 6}, "context": "NewSQL systems typically use a NoSQL key-value store layer under a transaction management layer, in order to provide horizontal scaling.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00018936395645141602}, "created": {"value": false, "score": 8.20159912109375e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0036667585372924805}, "created": {"value": true, "score": 0.9999250173568726}, "shared": {"value": false, "score": 1.6689300537109375e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LeanXcale", "normalizedForm": "LeanXcale", "offsetStart": 0, "offsetEnd": 9}, "context": "LeanXcale supports non-intrusive elasticity and can move data partitions without hurting the quality of service of transaction management. ", "mentionContextAttributes": {"used": {"value": false, "score": 2.7418136596679688e-05}, "created": {"value": false, "score": 0.00036585330963134766}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999606609344482}, "created": {"value": true, "score": 0.9999250173568726}, "shared": {"value": false, "score": 2.0503997802734375e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LeanXcale", "normalizedForm": "LeanXcale", "offsetStart": 0, "offsetEnd": 9}, "context": "LeanXcale outperforms cluster replication by relying on a distributed transaction processing approach that scales out linearly to a large number of nodes.", "mentionContextAttributes": {"used": {"value": false, "score": 4.279613494873047e-05}, "created": {"value": false, "score": 1.5020370483398438e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999606609344482}, "created": {"value": true, "score": 0.9999250173568726}, "shared": {"value": false, "score": 2.0503997802734375e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LeanXcale", "normalizedForm": "LeanXcale", "offsetStart": 0, "offsetEnd": 9}, "context": "LeanXcale also implements multiversioning and avoids the bottleneck of centralized certification by assigning timestamps to updated data items upon commit. ", "mentionContextAttributes": {"used": {"value": false, "score": 2.872943878173828e-05}, "created": {"value": false, "score": 0.005826771259307861}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999606609344482}, "created": {"value": true, "score": 0.9999250173568726}, "shared": {"value": false, "score": 2.0503997802734375e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LeanXcale", "normalizedForm": "LeanXcale", "offsetStart": 0, "offsetEnd": 9}, "context": "LeanXcale's architecture is also different than most other NewSQL database systems that rely on a NoSQL key-value store, e.g., Spanner is built atop BigTable. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0003110170364379883}, "created": {"value": false, "score": 0.0003197193145751953}, "shared": {"value": false, "score": 9.5367431640625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999606609344482}, "created": {"value": true, "score": 0.9999250173568726}, "shared": {"value": false, "score": 2.0503997802734375e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LeanXcale", "normalizedForm": "LeanXcale", "offsetStart": 0, "offsetEnd": 9}, "context": "LeanXcale has a relational key-value store, KiVi, that enables efficient SQL processing since all algebraic operators below a join in a query are pushed down to the data store, avoiding much data movement with the query engine.", "mentionContextAttributes": {"used": {"value": false, "score": 5.2809715270996094e-05}, "created": {"value": false, "score": 0.00017082691192626953}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999606609344482}, "created": {"value": true, "score": 0.9999250173568726}, "shared": {"value": false, "score": 2.0503997802734375e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LeanXcale", "normalizedForm": "LeanXcale", "offsetStart": 0, "offsetEnd": 9}, "context": "LeanXcale leverages multiversion concurrency control (MVCC) [25] to avoid the contention introduced by locking between queries that read many rows and updates across these rows. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.00021225214004516602}, "created": {"value": false, "score": 4.0531158447265625e-06}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999606609344482}, "created": {"value": true, "score": 0.9999250173568726}, "shared": {"value": false, "score": 2.0503997802734375e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LeanXcale", "normalizedForm": "LeanXcale", "offsetStart": 0, "offsetEnd": 9}, "context": "LeanXcale adopts the no undo/redo approach [25].", "mentionContextAttributes": {"used": {"value": false, "score": 6.008148193359375e-05}, "created": {"value": false, "score": 1.0132789611816406e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999606609344482}, "created": {"value": true, "score": 0.9999250173568726}, "shared": {"value": false, "score": 2.0503997802734375e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LeanXcale", "normalizedForm": "LeanXcale", "offsetStart": 0, "offsetEnd": 9}, "context": "LeanXcale does not suffer aborted reads.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00010287761688232422}, "created": {"value": false, "score": 4.291534423828125e-06}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999606609344482}, "created": {"value": true, "score": 0.9999250173568726}, "shared": {"value": false, "score": 2.0503997802734375e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LeanXcale", "normalizedForm": "LeanXcale", "offsetStart": 0, "offsetEnd": 9}, "context": "LeanXcale does not suffer intermediate reads.", "mentionContextAttributes": {"used": {"value": false, "score": 7.510185241699219e-05}, "created": {"value": false, "score": 7.152557373046875e-06}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999606609344482}, "created": {"value": true, "score": 0.9999250173568726}, "shared": {"value": false, "score": 2.0503997802734375e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LeanXcale", "normalizedForm": "LeanXcale", "offsetStart": 0, "offsetEnd": 9}, "context": "LeanXcale does not exhibit circular dependencies.", "mentionContextAttributes": {"used": {"value": false, "score": 6.16312026977539e-05}, "created": {"value": false, "score": 5.364418029785156e-06}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999606609344482}, "created": {"value": true, "score": 0.9999250173568726}, "shared": {"value": false, "score": 2.0503997802734375e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LeanXcale", "normalizedForm": "LeanXcale", "offsetStart": 0, "offsetEnd": 9}, "context": "LeanXcale transaction management satisfies the snapshot read property (Definition 6.3).", "mentionContextAttributes": {"used": {"value": false, "score": 0.09952723979949951}, "created": {"value": false, "score": 1.6689300537109375e-06}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999606609344482}, "created": {"value": true, "score": 0.9999250173568726}, "shared": {"value": false, "score": 2.0503997802734375e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LeanXcale", "normalizedForm": "LeanXcale", "offsetStart": 0, "offsetEnd": 9}, "context": "LeanXcale transaction management satisfies the snapshot write property (Definition 6.4).", "mentionContextAttributes": {"used": {"value": false, "score": 0.053276121616363525}, "created": {"value": false, "score": 1.3113021850585938e-06}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999606609344482}, "created": {"value": true, "score": 0.9999250173568726}, "shared": {"value": false, "score": 2.0503997802734375e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LeanXcale", "normalizedForm": "LeanXcale", "offsetStart": 0, "offsetEnd": 9}, "context": "LeanXcale transaction management provides snapshot isolation (Definition 6.5).", "mentionContextAttributes": {"used": {"value": false, "score": 0.00010728836059570312}, "created": {"value": false, "score": 2.5033950805664062e-06}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999606609344482}, "created": {"value": true, "score": 0.9999250173568726}, "shared": {"value": false, "score": 2.0503997802734375e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LeanXcale", "normalizedForm": "LeanXcale", "offsetStart": 0, "offsetEnd": 9}, "context": "LeanXcale transaction management provides session consistency (Definition 6.7).", "mentionContextAttributes": {"used": {"value": false, "score": 0.00012743473052978516}, "created": {"value": false, "score": 3.0994415283203125e-06}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999606609344482}, "created": {"value": true, "score": 0.9999250173568726}, "shared": {"value": false, "score": 2.0503997802734375e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LeanXcale", "normalizedForm": "LeanXcale", "offsetStart": 0, "offsetEnd": 9}, "context": "LeanXcale guarantees full consistency during the movement of a transactional data partition.", "mentionContextAttributes": {"used": {"value": false, "score": 5.340576171875e-05}, "created": {"value": false, "score": 5.7697296142578125e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999606609344482}, "created": {"value": true, "score": 0.9999250173568726}, "shared": {"value": false, "score": 2.0503997802734375e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LeanXcale", "normalizedForm": "LeanXcale", "offsetStart": 0, "offsetEnd": 9}, "context": "LeanXcale deployment.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00028508901596069336}, "created": {"value": false, "score": 0.00023812055587768555}, "shared": {"value": false, "score": 1.6689300537109375e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999606609344482}, "created": {"value": true, "score": 0.9999250173568726}, "shared": {"value": false, "score": 2.0503997802734375e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Spanner", "normalizedForm": "Spanner", "offsetStart": 0, "offsetEnd": 12}, "context": "Spanner [19] is an advanced NewSQL database system with full SQL and scalable ACID transactions. ", "mentionContextAttributes": {"used": {"value": false, "score": 4.553794860839844e-05}, "created": {"value": false, "score": 0.0004780292510986328}, "shared": {"value": false, "score": 1.0728836059570312e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.02560514211654663}, "created": {"value": false, "score": 0.48609960079193115}, "shared": {"value": false, "score": 2.3484230041503906e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "SQL", "normalizedForm": "SQL", "offsetStart": 2, "offsetEnd": 5}, "context": "\u2022 SQL Query engine.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9192568063735962}, "created": {"value": false, "score": 5.5670738220214844e-05}, "shared": {"value": false, "score": 5.960464477539062e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9192568063735962}, "created": {"value": false, "score": 0.001269996166229248}, "shared": {"value": false, "score": 6.496906280517578e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 2, "offsetEnd": 6}, "context": "\u2022 KiVi storage engine.", "mentionContextAttributes": {"used": {"value": true, "score": 0.6821851134300232}, "created": {"value": false, "score": 4.8160552978515625e-05}, "shared": {"value": false, "score": 1.5497207641601562e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 2, "offsetEnd": 6}, "context": "A KiVi instance can be CPU, memory or IO bound.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00010347366333007812}, "created": {"value": false, "score": 1.990795135498047e-05}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LeanXcale", "normalizedForm": "LeanXcale", "offsetStart": 3, "offsetEnd": 12}, "context": "In LeanXcale, this component is the local transaction manager (LTM) that is deployed on each node with transactional capabilities.", "mentionContextAttributes": {"used": {"value": false, "score": 0.009285926818847656}, "created": {"value": false, "score": 0.0018175840377807617}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999606609344482}, "created": {"value": true, "score": 0.9999250173568726}, "shared": {"value": false, "score": 2.0503997802734375e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LeanXcale", "normalizedForm": "LeanXcale", "offsetStart": 3, "offsetEnd": 12}, "context": "In LeanXcale, certification is performed at the time a row is updated and if there is a conflict, one of the transactions is aborted using a first updater wins approach.", "mentionContextAttributes": {"used": {"value": false, "score": 0.009604036808013916}, "created": {"value": false, "score": 1.0251998901367188e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999606609344482}, "created": {"value": true, "score": 0.9999250173568726}, "shared": {"value": false, "score": 2.0503997802734375e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LeanXcale", "normalizedForm": "LeanXcale", "offsetStart": 4, "offsetEnd": 13}, "context": "The LeanXcale distributed database system has three layers:", "mentionContextAttributes": {"used": {"value": false, "score": 0.0012745261192321777}, "created": {"value": false, "score": 5.7220458984375e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999606609344482}, "created": {"value": true, "score": 0.9999250173568726}, "shared": {"value": false, "score": 2.0503997802734375e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LeanXcale", "normalizedForm": "LeanXcale", "offsetStart": 6, "offsetEnd": 15}, "context": "Since LeanXcale uses private versions for the updates of transactions before a transaction is readable, no transaction can ever read an object written by an aborted transaction because the aborted transaction will never become either durable or readable.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00031185150146484375}, "created": {"value": false, "score": 3.8743019104003906e-05}, "shared": {"value": false, "score": 7.152557373046875e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999606609344482}, "created": {"value": true, "score": 0.9999250173568726}, "shared": {"value": false, "score": 2.0503997802734375e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 7, "offsetEnd": 11}, "context": "When a KiVi instance becomes highly loaded, one of its data partitions is moved to a less loaded KiVi instance.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0011430978775024414}, "created": {"value": false, "score": 2.968311309814453e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LeanXcale", "normalizedForm": "LeanXcale", "offsetStart": 9, "offsetEnd": 18}, "context": "However, LeanXcale's efficiency per core (TPM per core) is much higher, with 22700+ new order TPM per core versus 10800+, i.e., double that of Alibaba. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.002631068229675293}, "created": {"value": false, "score": 1.7642974853515625e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999606609344482}, "created": {"value": true, "score": 0.9999250173568726}, "shared": {"value": false, "score": 2.0503997802734375e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 10, "offsetEnd": 14}, "context": "The first KiVi server is responsible for 9 table partitions and the second one for 7 table partitions.", "mentionContextAttributes": {"used": {"value": false, "score": 0.02579289674758911}, "created": {"value": false, "score": 1.5497207641601562e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 11, "offsetEnd": 15}, "context": "We run one KiVi server in charge of 200 warehouses.", "mentionContextAttributes": {"used": {"value": false, "score": 0.001584172248840332}, "created": {"value": false, "score": 0.061168670654296875}, "shared": {"value": false, "score": 1.1920928955078125e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 11, "offsetEnd": 15}, "context": "Thus, each KiVi server is receiving exactly the same load corresponding to 7 table partitions, i.e., 280 warehouses.", "mentionContextAttributes": {"used": {"value": false, "score": 0.3874930739402771}, "created": {"value": false, "score": 3.6954879760742188e-06}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 11, "offsetEnd": 15}, "context": "In the new KiVi server, there is a first period where the load is low, as it is just buffering updates and receiving the data partition messages.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00026994943618774414}, "created": {"value": false, "score": 0.0021816492080688477}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 12, "offsetEnd": 16}, "context": "We focus on KiVi server load balancing, which is the most challenging since it is stateful.", "mentionContextAttributes": {"used": {"value": false, "score": 0.004159271717071533}, "created": {"value": true, "score": 0.8584019541740417}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 13, "offsetEnd": 17}, "context": "In addition, KiVi uses a variant of LSM Tree [24] that is more efficient in read operations than the SSTables (String Sorted Tables) used by key-value stores, which have to read many (tens of) files that contain an overlapping range of primary keys.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00021034479141235352}, "created": {"value": false, "score": 2.8133392333984375e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LeanXcale", "normalizedForm": "LeanXcale", "offsetStart": 13, "offsetEnd": 22}, "context": "In contrast, LeanXcale does not require any hardware assistance. ", "mentionContextAttributes": {"used": {"value": false, "score": 4.6372413635253906e-05}, "created": {"value": false, "score": 4.100799560546875e-05}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999606609344482}, "created": {"value": true, "score": 0.9999250173568726}, "shared": {"value": false, "score": 2.0503997802734375e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LeanXcale", "normalizedForm": "LeanXcale", "offsetStart": 13, "offsetEnd": 22}, "context": "In contrast, LeanXcale's elasticity is fully integrated within the database system, leveraging the ability to move data partitions across servers without disrupting data processing.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00012493133544921875}, "created": {"value": false, "score": 0.0005946159362792969}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999606609344482}, "created": {"value": true, "score": 0.9999250173568726}, "shared": {"value": false, "score": 2.0503997802734375e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 14, "offsetEnd": 18}, "context": "Note that the KiVi client side configuration is not atomic, that is, all clients are configured concurrently and the final order in which they get configured can be any.", "mentionContextAttributes": {"used": {"value": false, "score": 0.14104658365249634}, "created": {"value": false, "score": 3.314018249511719e-05}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LeanXcale", "normalizedForm": "LeanXcale", "offsetStart": 15, "offsetEnd": 24}, "context": "We proved that LeanXcale transaction management is correct, i.e., it correctly provides snapshot isolation and 1-copy transactional data movement.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9999535083770752}, "created": {"value": true, "score": 0.7200415730476379}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999606609344482}, "created": {"value": true, "score": 0.9999250173568726}, "shared": {"value": false, "score": 2.0503997802734375e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 16, "offsetEnd": 20}, "context": "The destination KiVi server can start buffering all the changes that might arrive for the data partition being moved.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0019797086715698242}, "created": {"value": false, "score": 0.00015854835510253906}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Spanner", "normalizedForm": "Spanner", "offsetStart": 16, "offsetEnd": 23}, "context": "However, unlike Spanner, which uses real-time timestamps, LeanXcale uses logical timestamps, which is simpler and cheaper. ", "mentionContextAttributes": {"used": {"value": false, "score": 5.233287811279297e-05}, "created": {"value": false, "score": 9.72747802734375e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.02560514211654663}, "created": {"value": false, "score": 0.48609960079193115}, "shared": {"value": false, "score": 2.3484230041503906e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 17, "offsetEnd": 21}, "context": "Then, the origin KiVi server is asked to start sending the data partition to the destination KiVi server.", "mentionContextAttributes": {"used": {"value": false, "score": 0.20313280820846558}, "created": {"value": false, "score": 0.0002575516700744629}, "shared": {"value": false, "score": 7.152557373046875e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Spanner", "normalizedForm": "Spanner", "offsetStart": 18, "offsetEnd": 25}, "context": "For this purpose, Spanner implements an internal service called TrueTime that provides the current time and its current accuracy. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.00013697147369384766}, "created": {"value": false, "score": 0.48609960079193115}, "shared": {"value": false, "score": 2.3484230041503906e-05}}, "documentContextAttributes": {"used": {"value": false, "score": 0.02560514211654663}, "created": {"value": false, "score": 0.48609960079193115}, "shared": {"value": false, "score": 2.3484230041503906e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 19, "offsetEnd": 23}, "context": "At the destination KiVi server, rows are inserted using the regular processing using a cache and a B+ tree.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9939917922019958}, "created": {"value": false, "score": 3.528594970703125e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 20, "offsetEnd": 24}, "context": "At this point, each KiVi server is handling half the workload.", "mentionContextAttributes": {"used": {"value": false, "score": 0.002076268196105957}, "created": {"value": false, "score": 4.6253204345703125e-05}, "shared": {"value": false, "score": 5.960464477539062e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Spanner", "normalizedForm": "Spanner", "offsetStart": 20, "offsetEnd": 27}, "context": "To avoid deadlocks, Spanner uses a wound-and-wait approach, thereby eliminating the bottleneck of deadlock detection. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0001685619354248047}, "created": {"value": false, "score": 9.465217590332031e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.02560514211654663}, "created": {"value": false, "score": 0.48609960079193115}, "shared": {"value": false, "score": 2.3484230041503906e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LeanXcale", "normalizedForm": "LeanXcale", "offsetStart": 20, "offsetEnd": 29}, "context": "Then, we prove that LeanXcale provides snapshot isolation and session consistency.", "mentionContextAttributes": {"used": {"value": true, "score": 0.7356250882148743}, "created": {"value": false, "score": 0.006361067295074463}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999606609344482}, "created": {"value": true, "score": 0.9999250173568726}, "shared": {"value": false, "score": 2.0503997802734375e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 22, "offsetEnd": 26}, "context": "Then, the destination KiVi server is notified about this fact and starts applying the row changes that has been buffered and are still buffering.", "mentionContextAttributes": {"used": {"value": false, "score": 0.13087624311447144}, "created": {"value": false, "score": 2.562999725341797e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 22, "offsetEnd": 26}, "context": "The load balancing of KiVi leverages the principle of nonintrusive moving of transactional data partitions.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00023752450942993164}, "created": {"value": false, "score": 0.00017708539962768555}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 22, "offsetEnd": 26}, "context": "This causes the first KiVi server to get significantly more load than the second one.", "mentionContextAttributes": {"used": {"value": false, "score": 0.05482590198516846}, "created": {"value": false, "score": 0.00024014711380004883}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Spanner", "normalizedForm": "Spanner", "offsetStart": 22, "offsetEnd": 29}, "context": "Storage management in Spanner is made scalable by leveraging BigTable, a wide column data store.", "mentionContextAttributes": {"used": {"value": false, "score": 0.02560514211654663}, "created": {"value": false, "score": 0.0006006956100463867}, "shared": {"value": false, "score": 8.344650268554688e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.02560514211654663}, "created": {"value": false, "score": 0.48609960079193115}, "shared": {"value": false, "score": 2.3484230041503906e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Alibaba Cloud Elastic", "normalizedForm": "Alibaba Cloud Elastic", "offsetStart": 23, "offsetEnd": 44}, "context": "These results are from Alibaba Cloud Elastic using 65,394 and 6,720 cores, respectively, yet used exclusively (not shared with other users as we do) for the benchmark. ", "mentionContextAttributes": {"used": {"value": true, "score": 0.9998984336853027}, "created": {"value": false, "score": 3.337860107421875e-06}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9998984336853027}, "created": {"value": false, "score": 3.337860107421875e-06}, "shared": {"value": false, "score": 1.1920928955078125e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LeanXcale", "normalizedForm": "LeanXcale", "offsetStart": 25, "offsetEnd": 34}, "context": "This is possible because LeanXcale transaction management does not have any requirement in terms of log ordering.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00027829408645629883}, "created": {"value": false, "score": 3.826618194580078e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999606609344482}, "created": {"value": true, "score": 0.9999250173568726}, "shared": {"value": false, "score": 2.0503997802734375e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LeanXcale", "normalizedForm": "LeanXcale", "offsetStart": 27, "offsetEnd": 36}, "context": "We show the correctness of LeanXcale transaction management. ", "mentionContextAttributes": {"used": {"value": true, "score": 0.9999606609344482}, "created": {"value": false, "score": 0.07749247550964355}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999606609344482}, "created": {"value": true, "score": 0.9999250173568726}, "shared": {"value": false, "score": 2.0503997802734375e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LeanXcale", "normalizedForm": "LeanXcale", "offsetStart": 27, "offsetEnd": 36}, "context": "We show the correctness of LeanXcale transaction management.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9999606609344482}, "created": {"value": false, "score": 0.07749247550964355}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999606609344482}, "created": {"value": true, "score": 0.9999250173568726}, "shared": {"value": false, "score": 2.0503997802734375e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "NewSQL", "normalizedForm": "NewSQL", "offsetStart": 28, "offsetEnd": 34}, "context": "Spanner [19] is an advanced NewSQL database system with full SQL and scalable ACID transactions.", "mentionContextAttributes": {"used": {"value": false, "score": 4.553794860839844e-05}, "created": {"value": false, "score": 0.0004780292510986328}, "shared": {"value": false, "score": 1.0728836059570312e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0036667585372924805}, "created": {"value": true, "score": 0.9999250173568726}, "shared": {"value": false, "score": 1.6689300537109375e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 29, "offsetEnd": 33}, "context": "Furthermore, the destination KiVi server has all the updates that have been sent since the data partition was moved (see Lemma 6.8) and continues to receive all the updates over that data partition as part of each transaction.", "mentionContextAttributes": {"used": {"value": false, "score": 0.053177058696746826}, "created": {"value": false, "score": 3.0517578125e-05}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LeanXcale", "normalizedForm": "LeanXcale", "offsetStart": 30, "offsetEnd": 39}, "context": "In order to avoid write skew, LeanXcale provides select for update, which could be used too by the standard snapshot isolation.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0869976282119751}, "created": {"value": false, "score": 4.57763671875e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999606609344482}, "created": {"value": true, "score": 0.9999250173568726}, "shared": {"value": false, "score": 2.0503997802734375e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LeanXcale", "normalizedForm": "LeanXcale", "offsetStart": 30, "offsetEnd": 39}, "context": "In this section, we show that LeanXcale transaction management is correct, i.e., it correctly provides snapshot isolation and 1-copy transactional data movement.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0021746158599853516}, "created": {"value": false, "score": 0.17756372690200806}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999606609344482}, "created": {"value": true, "score": 0.9999250173568726}, "shared": {"value": false, "score": 2.0503997802734375e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 31, "offsetEnd": 35}, "context": "This increases the load in the KiVi server above the elasticity threshold, which triggers the provisioning of a new KiVi server five minutes later with another KiVi server.", "mentionContextAttributes": {"used": {"value": false, "score": 0.006753981113433838}, "created": {"value": false, "score": 0.00012695789337158203}, "shared": {"value": false, "score": 8.344650268554688e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 34, "offsetEnd": 38}, "context": "Each data node has 4 instances of KiVi servers, and one instance of the query engine and LTM.", "mentionContextAttributes": {"used": {"value": false, "score": 0.07617127895355225}, "created": {"value": false, "score": 7.140636444091797e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 34, "offsetEnd": 38}, "context": "The micro-benchmark is run with 2 KiVi servers.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9226698279380798}, "created": {"value": false, "score": 0.0001245737075805664}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 35, "offsetEnd": 39}, "context": "This doubles the load of the first KiVi server.", "mentionContextAttributes": {"used": {"value": false, "score": 0.04037642478942871}, "created": {"value": false, "score": 0.0002601742744445801}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LeanXcale", "normalizedForm": "LeanXcale", "offsetStart": 35, "offsetEnd": 44}, "context": "For the TPC-C benchmark, we deploy LeanXcale using two kinds of nodes: metadata nodes and data nodes. ", "mentionContextAttributes": {"used": {"value": true, "score": 0.9972437620162964}, "created": {"value": true, "score": 0.5316958427429199}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999606609344482}, "created": {"value": true, "score": 0.9999250173568726}, "shared": {"value": false, "score": 2.0503997802734375e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LeanXcale", "normalizedForm": "LeanXcale", "offsetStart": 36, "offsetEnd": 45}, "context": "In this section, we first introduce LeanXcale's architecture with transaction management in mind.", "mentionContextAttributes": {"used": {"value": false, "score": 5.245208740234375e-05}, "created": {"value": true, "score": 0.9999189376831055}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999606609344482}, "created": {"value": true, "score": 0.9999250173568726}, "shared": {"value": false, "score": 2.0503997802734375e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 40, "offsetEnd": 44}, "context": "In extreme loads, where the destination KiVi server never catches up, there is a temporal limit, upon which the processing over the partition would be paused to enable to complete the movement and finalize the reconfiguration.", "mentionContextAttributes": {"used": {"value": false, "score": 0.005194485187530518}, "created": {"value": false, "score": 3.039836883544922e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "NewSQL", "normalizedForm": "NewSQL", "offsetStart": 42, "offsetEnd": 48}, "context": "Another solution is within the context of NewSQL, combining the scalability and availability of NoSQL with the consistency and usability of SQL [6]. ", "mentionContextAttributes": {"used": {"value": false, "score": 5.4717063903808594e-05}, "created": {"value": false, "score": 5.1140785217285156e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0036667585372924805}, "created": {"value": true, "score": 0.9999250173568726}, "shared": {"value": false, "score": 1.6689300537109375e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "BigTable", "normalizedForm": "BigTable", "offsetStart": 42, "offsetEnd": 50}, "context": "On the other hand, NoSQL systems, such as BigTable, Cassandra, and HBase, trade atomicity and consistency for scalability, with limited atomicity at the level of a single row. ", "mentionContextAttributes": {"used": {"value": false, "score": 4.38690185546875e-05}, "created": {"value": false, "score": 0.0001398324966430664}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.02560514211654663}, "created": {"value": false, "score": 0.0006006956100463867}, "shared": {"value": false, "score": 1.6689300537109375e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 43, "offsetEnd": 47}, "context": "If an update that is applied on the origin KiVi server is also buffered at the destination KiVi server, and thus re-applied, the row with that primary key would be labeled as a version equal or higher to the CTS of that transaction (higher in the case that some updates happened on the origin KiVi server before the state of the row was sent to the destination KiVi server) and that update would be discarded.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9943569302558899}, "created": {"value": false, "score": 7.271766662597656e-06}, "shared": {"value": false, "score": 2.0265579223632812e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Apache Zookeeper", "normalizedForm": "Apache Zookeeper", "offsetStart": 43, "offsetEnd": 59}, "context": "Each metadata node has one instance of the Apache Zookeeper configuration manager, 4 instances of the conflict manager, and 8 instances of the logger. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.048430681228637695}, "created": {"value": false, "score": 8.237361907958984e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.048430681228637695}, "created": {"value": false, "score": 8.237361907958984e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 44, "offsetEnd": 48}, "context": "LeanXcale has a relational key-value store, KiVi, that enables efficient SQL processing since all algebraic operators below a join in a query are pushed down to the data store, avoiding much data movement with the query engine.", "mentionContextAttributes": {"used": {"value": false, "score": 5.2809715270996094e-05}, "created": {"value": false, "score": 0.00017082691192626953}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 44, "offsetEnd": 48}, "context": "LeanXcale has a relational key-value store, KiVi, which supports non-intrusive elasticity and can move data partitions without affecting transaction processing.", "mentionContextAttributes": {"used": {"value": false, "score": 3.802776336669922e-05}, "created": {"value": false, "score": 0.0005766153335571289}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 46, "offsetEnd": 50}, "context": "Then, all the instances of the client side of KiVi are notified about the data partition movement.", "mentionContextAttributes": {"used": {"value": false, "score": 0.2526034712791443}, "created": {"value": false, "score": 0.00011551380157470703}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "SQL", "normalizedForm": "SQL", "offsetStart": 48, "offsetEnd": 51}, "context": "However, it comes at the expense of inefficient SQL query processing, because the interaction between the query engine and storage engine becomes inherently distributed, thus resulting in high communication overhead.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0001016855239868164}, "created": {"value": false, "score": 0.00019675493240356445}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9192568063735962}, "created": {"value": false, "score": 0.001269996166229248}, "shared": {"value": false, "score": 6.496906280517578e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 48, "offsetEnd": 52}, "context": "Thus, the changes being sent to the destination KiVi server can be different from each client side.", "mentionContextAttributes": {"used": {"value": false, "score": 0.045746803283691406}, "created": {"value": false, "score": 7.033348083496094e-05}, "shared": {"value": false, "score": 1.0728836059570312e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 49, "offsetEnd": 53}, "context": "The data nodes contain the query engine, LTM and KiVi servers.", "mentionContextAttributes": {"used": {"value": true, "score": 0.5328706502914429}, "created": {"value": false, "score": 1.6689300537109375e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LeanXcale", "normalizedForm": "LeanXcale", "offsetStart": 49, "offsetEnd": 58}, "context": "Note that there is a highly available version of LeanXcale that provides replication of all components. ", "mentionContextAttributes": {"used": {"value": false, "score": 6.568431854248047e-05}, "created": {"value": false, "score": 0.003117084503173828}, "shared": {"value": false, "score": 2.0503997802734375e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999606609344482}, "created": {"value": true, "score": 0.9999250173568726}, "shared": {"value": false, "score": 2.0503997802734375e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "SQL", "normalizedForm": "SQL", "offsetStart": 51, "offsetEnd": 54}, "context": "Cluster replication [10,11] is used in open-source SQL database systems such as MySQL or MariaDB.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0025001168251037598}, "created": {"value": false, "score": 3.933906555175781e-06}, "shared": {"value": false, "score": 6.496906280517578e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9192568063735962}, "created": {"value": false, "score": 0.001269996166229248}, "shared": {"value": false, "score": 6.496906280517578e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 51, "offsetEnd": 55}, "context": "The process of moving all data across all servers (KiVi servers, conflict managers) is completed in about 5 min.", "mentionContextAttributes": {"used": {"value": false, "score": 0.10382252931594849}, "created": {"value": false, "score": 0.000245511531829834}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Cassandra", "normalizedForm": "Cassandra", "offsetStart": 52, "offsetEnd": 61}, "context": "On the other hand, NoSQL systems, such as BigTable, Cassandra, and HBase, trade atomicity and consistency for scalability, with limited atomicity at the level of a single row. ", "mentionContextAttributes": {"used": {"value": false, "score": 4.38690185546875e-05}, "created": {"value": false, "score": 0.0001398324966430664}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 4.38690185546875e-05}, "created": {"value": false, "score": 0.0001398324966430664}, "shared": {"value": false, "score": 1.1920928955078125e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 53, "offsetEnd": 57}, "context": "The algebraic operators are executed locally at each KiVi instance, thus avoiding moving all scanned rows to the query engine for processing, and only sending the relevant rows.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9685538411140442}, "created": {"value": false, "score": 2.4199485778808594e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 53, "offsetEnd": 57}, "context": "Since transactions may include queries to read data, KiVi's ability to perform algebraic operators yields major reduction of query latency and thus better transaction response time.", "mentionContextAttributes": {"used": {"value": false, "score": 6.890296936035156e-05}, "created": {"value": false, "score": 5.2094459533691406e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 53, "offsetEnd": 57}, "context": "As for loggers, the load increase falls in the first KiVi server since it is the one that contains the data partitions of warehouses with no load.", "mentionContextAttributes": {"used": {"value": false, "score": 0.053949832916259766}, "created": {"value": false, "score": 5.710124969482422e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 53, "offsetEnd": 57}, "context": "Then, its CPU usage raises to the level of the other KiVi servers.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0008414983749389648}, "created": {"value": false, "score": 9.322166442871094e-05}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "NewSQL", "normalizedForm": "NewSQL", "offsetStart": 53, "offsetEnd": 59}, "context": "Furthermore, its architecture is different than most NewSQL database systems such as Spanner that rely on a NoSQL key-value store.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00013720989227294922}, "created": {"value": false, "score": 0.00021690130233764648}, "shared": {"value": false, "score": 8.344650268554688e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0036667585372924805}, "created": {"value": true, "score": 0.9999250173568726}, "shared": {"value": false, "score": 1.6689300537109375e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LeanXcale", "normalizedForm": "LeanXcale", "offsetStart": 53, "offsetEnd": 62}, "context": "For load injection, we use 1 AWS server for every 20 LeanXcale data servers.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9114052653312683}, "created": {"value": false, "score": 2.0265579223632812e-06}, "shared": {"value": false, "score": 7.152557373046875e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999606609344482}, "created": {"value": true, "score": 0.9999250173568726}, "shared": {"value": false, "score": 2.0503997802734375e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 54, "offsetEnd": 58}, "context": "This is the case for all transactional components but KiVi.", "mentionContextAttributes": {"used": {"value": false, "score": 0.04013991355895996}, "created": {"value": false, "score": 3.445148468017578e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LeanXcale", "normalizedForm": "LeanXcale", "offsetStart": 54, "offsetEnd": 63}, "context": "Thus, it is impossible that T k reads row x i , since LeanXcale guarantees that the biggest version that will be read by T k has a CTS lower than or equal to the snapshot associated to the reading transaction, sts k , which means that it will return a version of x that is x j or older, but not younger.", "mentionContextAttributes": {"used": {"value": false, "score": 0.1375754475593567}, "created": {"value": false, "score": 1.9311904907226562e-05}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999606609344482}, "created": {"value": true, "score": 0.9999250173568726}, "shared": {"value": false, "score": 2.0503997802734375e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 55, "offsetEnd": 59}, "context": "In this micro-benchmark, we show the elasticity of the KiVi servers.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9814687967300415}, "created": {"value": false, "score": 4.494190216064453e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 56, "offsetEnd": 60}, "context": "The transaction manager is integrated within the client KiVi layer, thus providing LeanXcale the capabilities of an ACID relational key-value store.", "mentionContextAttributes": {"used": {"value": false, "score": 0.04112827777862549}, "created": {"value": false, "score": 0.0002009272575378418}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 56, "offsetEnd": 60}, "context": "Then after, it notifies both the origin and destination KiVi servers about the data partition movement.", "mentionContextAttributes": {"used": {"value": false, "score": 0.08992719650268555}, "created": {"value": false, "score": 6.151199340820312e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LeanXcale", "normalizedForm": "LeanXcale", "offsetStart": 56, "offsetEnd": 65}, "context": "However, when it becomes widely available in the cloud, LeanXcale will be enriched to exploit it, which will make our innovations even more efficient.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00016617774963378906}, "created": {"value": false, "score": 0.12320244312286377}, "shared": {"value": false, "score": 1.1920928955078125e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999606609344482}, "created": {"value": true, "score": 0.9999250173568726}, "shared": {"value": false, "score": 2.0503997802734375e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 57, "offsetEnd": 61}, "context": "We also study the effectiveness of load balancing across KiVi servers and the global elasticity of all components.", "mentionContextAttributes": {"used": {"value": true, "score": 0.8467074632644653}, "created": {"value": false, "score": 0.0008044838905334473}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LeanXcale", "normalizedForm": "LeanXcale", "offsetStart": 58, "offsetEnd": 67}, "context": "However, unlike Spanner, which uses real-time timestamps, LeanXcale uses logical timestamps, which is simpler and cheaper. ", "mentionContextAttributes": {"used": {"value": false, "score": 5.233287811279297e-05}, "created": {"value": false, "score": 9.72747802734375e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999606609344482}, "created": {"value": true, "score": 0.9999250173568726}, "shared": {"value": false, "score": 2.0503997802734375e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "NewSQL", "normalizedForm": "NewSQL", "offsetStart": 59, "offsetEnd": 65}, "context": "LeanXcale's architecture is also different than most other NewSQL database systems that rely on a NoSQL key-value store, e.g., Spanner is built atop BigTable.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0003110170364379883}, "created": {"value": false, "score": 0.0003197193145751953}, "shared": {"value": false, "score": 9.5367431640625e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0036667585372924805}, "created": {"value": true, "score": 0.9999250173568726}, "shared": {"value": false, "score": 1.6689300537109375e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 60, "offsetEnd": 64}, "context": "There are two components with persistent state: loggers and KiVi.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00021034479141235352}, "created": {"value": false, "score": 0.00018066167831420898}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 60, "offsetEnd": 64}, "context": "Thus, the versions of their updated data are already in the KiVi servers.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9567848443984985}, "created": {"value": false, "score": 0.0004982948303222656}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 60, "offsetEnd": 64}, "context": "We show how the load of table partitions is balanced across KiVi servers.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9844121336936951}, "created": {"value": false, "score": 0.000557243824005127}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 60, "offsetEnd": 64}, "context": "This node has one instance of each transactional component (KiVi server, logger, conflict manager, query engine, commit sequencer, snapshot server and LTM).", "mentionContextAttributes": {"used": {"value": false, "score": 0.021475672721862793}, "created": {"value": false, "score": 7.212162017822266e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 60, "offsetEnd": 64}, "context": "Fig. 11 bottom left shows the evolution of CPU usage of the KiVi servers.", "mentionContextAttributes": {"used": {"value": true, "score": 0.705434262752533}, "created": {"value": false, "score": 2.181529998779297e-05}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 60, "offsetEnd": 64}, "context": "In particular, it is shown that all servers (i.e., loggers, KiVi servers, . . . ) can be scaled up and down without impacting the QoS as well as balancing the load across KiVi servers.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0013101696968078613}, "created": {"value": false, "score": 0.00015592575073242188}, "shared": {"value": false, "score": 2.5033950805664062e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "SQL", "normalizedForm": "SQL", "offsetStart": 61, "offsetEnd": 64}, "context": "Spanner [19] is an advanced NewSQL database system with full SQL and scalable ACID transactions.", "mentionContextAttributes": {"used": {"value": false, "score": 4.553794860839844e-05}, "created": {"value": false, "score": 0.0004780292510986328}, "shared": {"value": false, "score": 1.0728836059570312e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9192568063735962}, "created": {"value": false, "score": 0.001269996166229248}, "shared": {"value": false, "score": 6.496906280517578e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "BigTable", "normalizedForm": "BigTable", "offsetStart": 61, "offsetEnd": 69}, "context": "Storage management in Spanner is made scalable by leveraging BigTable, a wide column data store.", "mentionContextAttributes": {"used": {"value": false, "score": 0.02560514211654663}, "created": {"value": false, "score": 0.0006006956100463867}, "shared": {"value": false, "score": 8.344650268554688e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.02560514211654663}, "created": {"value": false, "score": 0.0006006956100463867}, "shared": {"value": false, "score": 1.6689300537109375e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LeanXcale", "normalizedForm": "LeanXcale", "offsetStart": 61, "offsetEnd": 70}, "context": "The experimental results using the TPC-C benchmark show that LeanXcale can scale linearly from 1 to 200 servers and reach 5 million of NewOrder TPM and 11 million TPM overall. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.12286782264709473}, "created": {"value": false, "score": 7.62939453125e-06}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999606609344482}, "created": {"value": true, "score": 0.9999250173568726}, "shared": {"value": false, "score": 2.0503997802734375e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 64, "offsetEnd": 68}, "context": "Writes from different transactions can be batched to be sent to KiVi instances.", "mentionContextAttributes": {"used": {"value": false, "score": 0.20685255527496338}, "created": {"value": false, "score": 4.494190216064453e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 67, "offsetEnd": 71}, "context": "One of the table partitions starts to be transferred to the second KiVi server.", "mentionContextAttributes": {"used": {"value": false, "score": 0.020276188850402832}, "created": {"value": false, "score": 7.367134094238281e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "HBase", "normalizedForm": "HBase", "offsetStart": 67, "offsetEnd": 72}, "context": "On the other hand, NoSQL systems, such as BigTable, Cassandra, and HBase, trade atomicity and consistency for scalability, with limited atomicity at the level of a single row. ", "mentionContextAttributes": {"used": {"value": false, "score": 4.38690185546875e-05}, "created": {"value": false, "score": 0.0001398324966430664}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0036667585372924805}, "created": {"value": false, "score": 0.0001398324966430664}, "shared": {"value": false, "score": 1.6689300537109375e-06}}, "references": [{"label": "[23]", "normalizedForm": "[23]", "refKey": 23}, {"label": "[23]", "normalizedForm": "[23]", "refKey": 23}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "NewSQL", "normalizedForm": "NewSQL", "offsetStart": 67, "offsetEnd": 73}, "context": "Using a key-value store as storage engine has been used in several NewSQL database systems such as Spanner (which uses BigTable), or Splice Machine [21] and EsgynDB [22] that both use HBase [23].", "mentionContextAttributes": {"used": {"value": false, "score": 0.0036667585372924805}, "created": {"value": false, "score": 4.1484832763671875e-05}, "shared": {"value": false, "score": 1.6689300537109375e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0036667585372924805}, "created": {"value": true, "score": 0.9999250173568726}, "shared": {"value": false, "score": 1.6689300537109375e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LeanXcale", "normalizedForm": "LeanXcale", "offsetStart": 67, "offsetEnd": 76}, "context": "Lemmas 6.1, 6.2, 6.3, 6.4, 6.5 prove each of the properties, thus, LeanXcale transactional management satisfies snapshot isolation.", "mentionContextAttributes": {"used": {"value": true, "score": 0.990993082523346}, "created": {"value": false, "score": 5.9604644775390625e-06}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999606609344482}, "created": {"value": true, "score": 0.9999250173568726}, "shared": {"value": false, "score": 2.0503997802734375e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LeanXcale", "normalizedForm": "LeanXcale", "offsetStart": 69, "offsetEnd": 78}, "context": "Since c i \u227a t c j , T i has necessarily a CTS lower than T j because LeanXcale uses the commit timestamp order as commit order (see Algorithm 6).", "mentionContextAttributes": {"used": {"value": false, "score": 0.2868231534957886}, "created": {"value": false, "score": 8.225440979003906e-06}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999606609344482}, "created": {"value": true, "score": 0.9999250173568726}, "shared": {"value": false, "score": 2.0503997802734375e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "SQL", "normalizedForm": "SQL", "offsetStart": 73, "offsetEnd": 76}, "context": "LeanXcale has a relational key-value store, KiVi, that enables efficient SQL processing since all algebraic operators below a join in a query are pushed down to the data store, avoiding much data movement with the query engine.", "mentionContextAttributes": {"used": {"value": false, "score": 5.2809715270996094e-05}, "created": {"value": false, "score": 0.00017082691192626953}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9192568063735962}, "created": {"value": false, "score": 0.001269996166229248}, "shared": {"value": false, "score": 6.496906280517578e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MySQL", "normalizedForm": "MySQL", "offsetStart": 80, "offsetEnd": 85}, "context": "Cluster replication [10,11] is used in open-source SQL database systems such as MySQL or MariaDB. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0025001168251037598}, "created": {"value": false, "score": 3.933906555175781e-06}, "shared": {"value": false, "score": 6.496906280517578e-05}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0025001168251037598}, "created": {"value": false, "score": 3.933906555175781e-06}, "shared": {"value": false, "score": 6.496906280517578e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LeanXcale", "normalizedForm": "LeanXcale", "offsetStart": 81, "offsetEnd": 90}, "context": "To validate our solution, we provide a thorough performance evaluation using the LeanXcale DBMS product with several benchmarks and micro-benchmarks on Amazon Web Services (AWS).", "mentionContextAttributes": {"used": {"value": true, "score": 0.6498910784721375}, "created": {"value": true, "score": 0.5030189156532288}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999606609344482}, "created": {"value": true, "score": 0.9999250173568726}, "shared": {"value": false, "score": 2.0503997802734375e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LeanXcale", "normalizedForm": "LeanXcale", "offsetStart": 83, "offsetEnd": 92}, "context": "This section evaluates the scalability and elasticity of transaction processing in LeanXcale using the TPC-C benchmark and microbenchmarks on Amazon Web Services (AWS). ", "mentionContextAttributes": {"used": {"value": false, "score": 0.034828782081604004}, "created": {"value": false, "score": 2.6702880859375e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999606609344482}, "created": {"value": true, "score": 0.9999250173568726}, "shared": {"value": false, "score": 2.0503997802734375e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LeanXcale", "normalizedForm": "LeanXcale", "offsetStart": 83, "offsetEnd": 92}, "context": "The transaction manager is integrated within the client KiVi layer, thus providing LeanXcale the capabilities of an ACID relational key-value store.", "mentionContextAttributes": {"used": {"value": false, "score": 0.04112827777862549}, "created": {"value": false, "score": 0.0002009272575378418}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999606609344482}, "created": {"value": true, "score": 0.9999250173568726}, "shared": {"value": false, "score": 2.0503997802734375e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Spanner", "normalizedForm": "Spanner", "offsetStart": 85, "offsetEnd": 92}, "context": "Furthermore, its architecture is different than most NewSQL database systems such as Spanner that rely on a NoSQL key-value store.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00013720989227294922}, "created": {"value": false, "score": 0.00021690130233764648}, "shared": {"value": false, "score": 8.344650268554688e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.02560514211654663}, "created": {"value": false, "score": 0.48609960079193115}, "shared": {"value": false, "score": 2.3484230041503906e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LeanXcale", "normalizedForm": "LeanXcale", "offsetStart": 86, "offsetEnd": 95}, "context": "In this paper, we present our solution for elastic scalable transaction processing in LeanXcale, an industrial-strength NewSQL database system. ", "mentionContextAttributes": {"used": {"value": false, "score": 5.316734313964844e-05}, "created": {"value": true, "score": 0.9999250173568726}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999606609344482}, "created": {"value": true, "score": 0.9999250173568726}, "shared": {"value": false, "score": 2.0503997802734375e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 87, "offsetEnd": 91}, "context": "If the update is lost, it can only be because the update did not reach the destination KiVi server since the destination KiVi server would apply all buffered updates.", "mentionContextAttributes": {"used": {"value": false, "score": 0.020502686500549316}, "created": {"value": false, "score": 4.76837158203125e-05}, "shared": {"value": false, "score": 2.1576881408691406e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LeanXcale", "normalizedForm": "LeanXcale", "offsetStart": 87, "offsetEnd": 96}, "context": "In this paper, we presented our solution to elastic scalable transaction processing in LeanXcale, an industrial-strength NewSQL database system.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0001169443130493164}, "created": {"value": true, "score": 0.999924898147583}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999606609344482}, "created": {"value": true, "score": 0.9999250173568726}, "shared": {"value": false, "score": 2.0503997802734375e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MariaDB", "normalizedForm": "MariaDB", "offsetStart": 89, "offsetEnd": 96}, "context": "Cluster replication [10,11] is used in open-source SQL database systems such as MySQL or MariaDB. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0025001168251037598}, "created": {"value": false, "score": 3.933906555175781e-06}, "shared": {"value": false, "score": 6.496906280517578e-05}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0025001168251037598}, "created": {"value": false, "score": 3.933906555175781e-06}, "shared": {"value": false, "score": 6.496906280517578e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "SQL", "normalizedForm": "SQL", "offsetStart": 90, "offsetEnd": 93}, "context": "They keep client sessions connected to them that start and commit transactions and submit SQL statements.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0036228299140930176}, "created": {"value": false, "score": 0.001269996166229248}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9192568063735962}, "created": {"value": false, "score": 0.001269996166229248}, "shared": {"value": false, "score": 6.496906280517578e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 90, "offsetEnd": 94}, "context": "KiVi enables to push down all algebraic operators in a query plan below joins to multiple KiVi instances.", "mentionContextAttributes": {"used": {"value": false, "score": 6.115436553955078e-05}, "created": {"value": false, "score": 3.826618194580078e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 91, "offsetEnd": 95}, "context": "At some point, all the rows on the origin data partition have been sent to the destination KiVi server.", "mentionContextAttributes": {"used": {"value": true, "score": 0.8355432152748108}, "created": {"value": false, "score": 6.091594696044922e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 91, "offsetEnd": 95}, "context": "If an update that is applied on the origin KiVi server is also buffered at the destination KiVi server, and thus re-applied, the row with that primary key would be labeled as a version equal or higher to the CTS of that transaction (higher in the case that some updates happened on the origin KiVi server before the state of the row was sent to the destination KiVi server) and that update would be discarded.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9943569302558899}, "created": {"value": false, "score": 7.271766662597656e-06}, "shared": {"value": false, "score": 2.0265579223632812e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 91, "offsetEnd": 95}, "context": "The transfer is completed in less than 1.5 min, including the time it takes for the second KiVi server to process all the buffered requests during the transfer.", "mentionContextAttributes": {"used": {"value": false, "score": 0.1717747449874878}, "created": {"value": false, "score": 2.5153160095214844e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 93, "offsetEnd": 97}, "context": "Then, the origin KiVi server is asked to start sending the data partition to the destination KiVi server.", "mentionContextAttributes": {"used": {"value": false, "score": 0.20313280820846558}, "created": {"value": false, "score": 0.0002575516700744629}, "shared": {"value": false, "score": 7.152557373046875e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 95, "offsetEnd": 99}, "context": "The dynamic load balancing of the transactional components (query engine, transaction manager, KiVi storage engine) depends on the nature of the state they manage: session state, temporal state, or persistent state.", "mentionContextAttributes": {"used": {"value": false, "score": 0.044407427310943604}, "created": {"value": false, "score": 0.00018841028213500977}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 95, "offsetEnd": 99}, "context": "Then, 2 min later, load balancing is triggered and one table partition is moved from the first KiVi server to the second one.", "mentionContextAttributes": {"used": {"value": false, "score": 0.17494380474090576}, "created": {"value": false, "score": 1.5735626220703125e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 97, "offsetEnd": 101}, "context": "When a KiVi instance becomes highly loaded, one of its data partitions is moved to a less loaded KiVi instance.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0011430978775024414}, "created": {"value": false, "score": 2.968311309814453e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Spanner", "normalizedForm": "Spanner", "offsetStart": 99, "offsetEnd": 106}, "context": "To avoid the high contention between large queries and update transactions resulting from locking, Spanner also implements multiversioning, which removes read/write conflicts. ", "mentionContextAttributes": {"used": {"value": false, "score": 4.6253204345703125e-05}, "created": {"value": false, "score": 0.029326021671295166}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.02560514211654663}, "created": {"value": false, "score": 0.48609960079193115}, "shared": {"value": false, "score": 2.3484230041503906e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Spanner", "normalizedForm": "Spanner", "offsetStart": 99, "offsetEnd": 106}, "context": "Using a key-value store as storage engine has been used in several NewSQL database systems such as Spanner (which uses BigTable), or Splice Machine [21] and EsgynDB [22] that both use HBase [23].", "mentionContextAttributes": {"used": {"value": false, "score": 0.0036667585372924805}, "created": {"value": false, "score": 4.1484832763671875e-05}, "shared": {"value": false, "score": 1.6689300537109375e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.02560514211654663}, "created": {"value": false, "score": 0.48609960079193115}, "shared": {"value": false, "score": 2.3484230041503906e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 100, "offsetEnd": 104}, "context": "Elasticity is demonstrated individually for all transactional components (logger, conflict manager, KiVi server) and globally.", "mentionContextAttributes": {"used": {"value": false, "score": 0.01327371597290039}, "created": {"value": false, "score": 9.918212890625e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 101, "offsetEnd": 105}, "context": "There are 80 warehouses for which no load is injected, corresponding to 2 table partitions for which KiVi server 1 is responsible.", "mentionContextAttributes": {"used": {"value": false, "score": 0.2375417947769165}, "created": {"value": false, "score": 6.318092346191406e-06}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 109, "offsetEnd": 113}, "context": "Once all client instances have been notified, then all changes are being sent to both origin and destination KiVi servers.", "mentionContextAttributes": {"used": {"value": false, "score": 0.18586385250091553}, "created": {"value": false, "score": 0.00034630298614501953}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 114, "offsetEnd": 118}, "context": "When a particular data partition becomes too big or overloaded, it is split and can be moved if needed to another KiVi server.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00043314695358276367}, "created": {"value": false, "score": 7.128715515136719e-05}, "shared": {"value": false, "score": 4.410743713378906e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 114, "offsetEnd": 118}, "context": "After the data partition is moved, i.e., all the rows from the data partition have been copied to the destination KiVi server, the destination KiVi server has a copy of the data partition with a fraction of the updates that happened after all client sides were reconfigured to send to the origin and destination servers.", "mentionContextAttributes": {"used": {"value": false, "score": 0.4907970428466797}, "created": {"value": false, "score": 6.854534149169922e-05}, "shared": {"value": false, "score": 1.3113021850585938e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 116, "offsetEnd": 120}, "context": "This increases the load in the KiVi server above the elasticity threshold, which triggers the provisioning of a new KiVi server five minutes later with another KiVi server.", "mentionContextAttributes": {"used": {"value": false, "score": 0.006753981113433838}, "created": {"value": false, "score": 0.00012695789337158203}, "shared": {"value": false, "score": 8.344650268554688e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 118, "offsetEnd": 122}, "context": "The data partition movement starts by configuring all client sides to send updates to both the origin and destination KiVi servers.", "mentionContextAttributes": {"used": {"value": false, "score": 0.22788000106811523}, "created": {"value": false, "score": 0.00017601251602172852}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "BigTable", "normalizedForm": "BigTable", "offsetStart": 119, "offsetEnd": 127}, "context": "Using a key-value store as storage engine has been used in several NewSQL database systems such as Spanner (which uses BigTable), or Splice Machine [21] and EsgynDB [22] that both use HBase [23]. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0036667585372924805}, "created": {"value": false, "score": 4.1484832763671875e-05}, "shared": {"value": false, "score": 1.6689300537109375e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.02560514211654663}, "created": {"value": false, "score": 0.0006006956100463867}, "shared": {"value": false, "score": 1.6689300537109375e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "NewSQL", "normalizedForm": "NewSQL", "offsetStart": 120, "offsetEnd": 126}, "context": "In this paper, we present our solution for elastic scalable transaction processing in LeanXcale, an industrial-strength NewSQL database system.", "mentionContextAttributes": {"used": {"value": false, "score": 5.316734313964844e-05}, "created": {"value": true, "score": 0.9999250173568726}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0036667585372924805}, "created": {"value": true, "score": 0.9999250173568726}, "shared": {"value": false, "score": 1.6689300537109375e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "NewSQL", "normalizedForm": "NewSQL", "offsetStart": 120, "offsetEnd": 126}, "context": "In this paper, we present our solution for elastic scalable transaction processing in LeanXcale, an industrial-strength NewSQL database system.", "mentionContextAttributes": {"used": {"value": false, "score": 5.316734313964844e-05}, "created": {"value": true, "score": 0.9999250173568726}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0036667585372924805}, "created": {"value": true, "score": 0.9999250173568726}, "shared": {"value": false, "score": 1.6689300537109375e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 121, "offsetEnd": 125}, "context": "The algorithm starts by telling the metadata server that the data partition is going to be moved from the current origin KiVi server to the destination KiVi server.", "mentionContextAttributes": {"used": {"value": false, "score": 0.06499040126800537}, "created": {"value": false, "score": 0.000301361083984375}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 121, "offsetEnd": 125}, "context": "If the update is lost, it can only be because the update did not reach the destination KiVi server since the destination KiVi server would apply all buffered updates.", "mentionContextAttributes": {"used": {"value": false, "score": 0.020502686500549316}, "created": {"value": false, "score": 4.76837158203125e-05}, "shared": {"value": false, "score": 2.1576881408691406e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "NewSQL", "normalizedForm": "NewSQL", "offsetStart": 121, "offsetEnd": 127}, "context": "In this paper, we presented our solution to elastic scalable transaction processing in LeanXcale, an industrial-strength NewSQL database system.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0001169443130493164}, "created": {"value": true, "score": 0.999924898147583}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0036667585372924805}, "created": {"value": true, "score": 0.9999250173568726}, "shared": {"value": false, "score": 1.6689300537109375e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Alibaba", "normalizedForm": "Alibaba", "offsetStart": 121, "offsetEnd": 128}, "context": "Furthermore, they also show double efficiency per core (i.e., 2*TPM per core) compared to the two top TPC-C results from Alibaba, which are the only results in a cloud data center but with no shared instances.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9274413585662842}, "created": {"value": false, "score": 1.4424324035644531e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9274413585662842}, "created": {"value": false, "score": 1.7642974853515625e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Spanner", "normalizedForm": "Spanner", "offsetStart": 127, "offsetEnd": 134}, "context": "LeanXcale's architecture is also different than most other NewSQL database systems that rely on a NoSQL key-value store, e.g., Spanner is built atop BigTable. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0003110170364379883}, "created": {"value": false, "score": 0.0003197193145751953}, "shared": {"value": false, "score": 9.5367431640625e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.02560514211654663}, "created": {"value": false, "score": 0.48609960079193115}, "shared": {"value": false, "score": 2.3484230041503906e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LeanXcale", "normalizedForm": "LeanXcale", "offsetStart": 129, "offsetEnd": 138}, "context": "Finally, since the isolation levels deal with the ordering of individual transactions but not session consistency, we prove that LeanXcale also provides session consistency (Definition 6.7).", "mentionContextAttributes": {"used": {"value": true, "score": 0.9295234680175781}, "created": {"value": false, "score": 5.245208740234375e-06}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999606609344482}, "created": {"value": true, "score": 0.9999250173568726}, "shared": {"value": false, "score": 2.0503997802734375e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Splice Machine", "normalizedForm": "Splice Machine", "offsetStart": 133, "offsetEnd": 152}, "context": "Using a key-value store as storage engine has been used in several NewSQL database systems such as Spanner (which uses BigTable), or Splice Machine [21] and EsgynDB [22] that both use HBase [23]. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0036667585372924805}, "created": {"value": false, "score": 4.1484832763671875e-05}, "shared": {"value": false, "score": 1.6689300537109375e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0036667585372924805}, "created": {"value": false, "score": 4.1484832763671875e-05}, "shared": {"value": false, "score": 1.6689300537109375e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "LeanXcale", "normalizedForm": "LeanXcale", "offsetStart": 138, "offsetEnd": 147}, "context": "In summary, this experiment shows the elasticity of all transactional components that, by working together, deliver the elasticity of the LeanXcale database system as a whole.", "mentionContextAttributes": {"used": {"value": false, "score": 0.4956832528114319}, "created": {"value": false, "score": 0.0038478970527648926}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999606609344482}, "created": {"value": true, "score": 0.9999250173568726}, "shared": {"value": false, "score": 2.0503997802734375e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 140, "offsetEnd": 144}, "context": "When the average cluster resource utilization of all resources after removing one server is below the lower threshold, then the less loaded KiVi server is chosen and the dynamic load balancing algorithm decides to which other KiVi servers to move each partition.", "mentionContextAttributes": {"used": {"value": false, "score": 0.02571016550064087}, "created": {"value": false, "score": 1.9431114196777344e-05}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "SQL", "normalizedForm": "SQL", "offsetStart": 140, "offsetEnd": 146}, "context": "Another solution is within the context of NewSQL, combining the scalability and availability of NoSQL with the consistency and usability of SQL [6]. ", "mentionContextAttributes": {"used": {"value": false, "score": 5.4717063903808594e-05}, "created": {"value": false, "score": 5.1140785217285156e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9192568063735962}, "created": {"value": false, "score": 0.001269996166229248}, "shared": {"value": false, "score": 6.496906280517578e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 143, "offsetEnd": 147}, "context": "After the data partition is moved, i.e., all the rows from the data partition have been copied to the destination KiVi server, the destination KiVi server has a copy of the data partition with a fraction of the updates that happened after all client sides were reconfigured to send to the origin and destination servers.", "mentionContextAttributes": {"used": {"value": false, "score": 0.4907970428466797}, "created": {"value": false, "score": 6.854534149169922e-05}, "shared": {"value": false, "score": 1.3113021850585938e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Alibaba", "normalizedForm": "Alibaba", "offsetStart": 143, "offsetEnd": 150}, "context": "However, LeanXcale's efficiency per core (TPM per core) is much higher, with 22700+ new order TPM per core versus 10800+, i.e., double that of Alibaba. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.002631068229675293}, "created": {"value": false, "score": 1.7642974853515625e-05}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9274413585662842}, "created": {"value": false, "score": 1.7642974853515625e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "BigTable", "normalizedForm": "BigTable", "offsetStart": 149, "offsetEnd": 157}, "context": "LeanXcale's architecture is also different than most other NewSQL database systems that rely on a NoSQL key-value store, e.g., Spanner is built atop BigTable. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0003110170364379883}, "created": {"value": false, "score": 0.0003197193145751953}, "shared": {"value": false, "score": 9.5367431640625e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.02560514211654663}, "created": {"value": false, "score": 0.0006006956100463867}, "shared": {"value": false, "score": 1.6689300537109375e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 152, "offsetEnd": 156}, "context": "The algorithm starts by telling the metadata server that the data partition is going to be moved from the current origin KiVi server to the destination KiVi server.", "mentionContextAttributes": {"used": {"value": false, "score": 0.06499040126800537}, "created": {"value": false, "score": 0.000301361083984375}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 154, "offsetEnd": 158}, "context": "As can be seen in the figure, the only effect in the QoS is a slight increment in average response time of 10 ms during the state transfer across the two KiVi servers.", "mentionContextAttributes": {"used": {"value": true, "score": 0.6464316248893738}, "created": {"value": false, "score": 9.655952453613281e-06}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "EsgynDB", "normalizedForm": "EsgynDB", "offsetStart": 157, "offsetEnd": 169}, "context": "Using a key-value store as storage engine has been used in several NewSQL database systems such as Spanner (which uses BigTable), or Splice Machine [21] and EsgynDB [22] that both use HBase [23]. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0036667585372924805}, "created": {"value": false, "score": 4.1484832763671875e-05}, "shared": {"value": false, "score": 1.6689300537109375e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0036667585372924805}, "created": {"value": false, "score": 4.1484832763671875e-05}, "shared": {"value": false, "score": 1.6689300537109375e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 160, "offsetEnd": 164}, "context": "This increases the load in the KiVi server above the elasticity threshold, which triggers the provisioning of a new KiVi server five minutes later with another KiVi server.", "mentionContextAttributes": {"used": {"value": false, "score": 0.006753981113433838}, "created": {"value": false, "score": 0.00012695789337158203}, "shared": {"value": false, "score": 8.344650268554688e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 163, "offsetEnd": 167}, "context": "This leads to a contradiction since the data partition movement would only start after the client side was reconfigured to send to both the origin and destination KiVi servers.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9955226182937622}, "created": {"value": false, "score": 3.445148468017578e-05}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 171, "offsetEnd": 175}, "context": "In particular, it is shown that all servers (i.e., loggers, KiVi servers, . . . ) can be scaled up and down without impacting the QoS as well as balancing the load across KiVi servers.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0013101696968078613}, "created": {"value": false, "score": 0.00015592575073242188}, "shared": {"value": false, "score": 2.5033950805664062e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 175, "offsetEnd": 179}, "context": "To evaluate the elasticity of the different transactional components described in Section 3, we exercise several microbenchmarks, one per component (logger, conflict manager, KiVi server).", "mentionContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": false, "score": 8.106231689453125e-06}, "shared": {"value": false, "score": 1.1920928955078125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "NewSQL", "normalizedForm": "NewSQL", "offsetStart": 179, "offsetEnd": 185}, "context": "Scaling ACID transactions in cloud distributed database systems has been addressed recently, with four main approaches: main memory, cluster replication, hardware assistance, and NewSQL. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.00022476911544799805}, "created": {"value": false, "score": 0.004928946495056152}, "shared": {"value": false, "score": 3.5762786865234375e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0036667585372924805}, "created": {"value": true, "score": 0.9999250173568726}, "shared": {"value": false, "score": 1.6689300537109375e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "HBase", "normalizedForm": "HBase", "offsetStart": 184, "offsetEnd": 189}, "context": "Using a key-value store as storage engine has been used in several NewSQL database systems such as Spanner (which uses BigTable), or Splice Machine [21] and EsgynDB [22] that both use HBase [23].", "mentionContextAttributes": {"used": {"value": false, "score": 0.0036667585372924805}, "created": {"value": false, "score": 4.1484832763671875e-05}, "shared": {"value": false, "score": 1.6689300537109375e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0036667585372924805}, "created": {"value": false, "score": 0.0001398324966430664}, "shared": {"value": false, "score": 1.6689300537109375e-06}}, "references": [{"label": "[23]", "normalizedForm": "[23]", "refKey": 23, "offsetStart": 15860, "offsetEnd": 15864}, {"label": "[23]", "normalizedForm": "[23]", "refKey": 23, "offsetStart": 15860, "offsetEnd": 15864}]}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 226, "offsetEnd": 230}, "context": "When the average cluster resource utilization of all resources after removing one server is below the lower threshold, then the less loaded KiVi server is chosen and the dynamic load balancing algorithm decides to which other KiVi servers to move each partition.", "mentionContextAttributes": {"used": {"value": false, "score": 0.02571004629135132}, "created": {"value": false, "score": 1.9431114196777344e-05}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 227, "offsetEnd": 231}, "context": "In this section, we present three additional principles to attain non-intrusive elasticity of transaction management and the underlying components, namely, transaction manager (LTM, logger, conflict manager), query engine, and KiVi.", "mentionContextAttributes": {"used": {"value": false, "score": 4.7326087951660156e-05}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.384185791015625e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 293, "offsetEnd": 297}, "context": "If an update that is applied on the origin KiVi server is also buffered at the destination KiVi server, and thus re-applied, the row with that primary key would be labeled as a version equal or higher to the CTS of that transaction (higher in the case that some updates happened on the origin KiVi server before the state of the row was sent to the destination KiVi server) and that update would be discarded.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9943569302558899}, "created": {"value": false, "score": 7.271766662597656e-06}, "shared": {"value": false, "score": 2.0265579223632812e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "KiVi", "normalizedForm": "KiVi", "offsetStart": 361, "offsetEnd": 365}, "context": "If an update that is applied on the origin KiVi server is also buffered at the destination KiVi server, and thus re-applied, the row with that primary key would be labeled as a version equal or higher to the CTS of that transaction (higher in the case that some updates happened on the origin KiVi server before the state of the row was sent to the destination KiVi server) and that update would be discarded.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9943569302558899}, "created": {"value": false, "score": 7.271766662597656e-06}, "shared": {"value": false, "score": 2.0265579223632812e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9986629486083984}, "created": {"value": true, "score": 0.9993220567703247}, "shared": {"value": false, "score": 2.1576881408691406e-05}}}], "references": [{"refKey": 23, "tei": "<biblStruct xml:id=\"b23\">\n\t<monogr>\n\t\t<title/>\n\t\t<author>\n\t\t\t<persName><surname>Apache</surname></persName>\n\t\t</author>\n\t\t<imprint>\n\t\t\t<date>2021</date>\n\t\t\t<pubPlace>Hbase</pubPlace>\n\t\t</imprint>\n\t</monogr>\n</biblStruct>\n"}], "runtime": 14912, "id": "5524730650da41c14fa525bc1c9208e525488aa7", "metadata": {"id": "5524730650da41c14fa525bc1c9208e525488aa7"}, "original_file_path": "../../datalake/Samuel/SOFTware-Sync/downloads/xml/lirmm-03639381.grobid.tei.xml", "file_name": "lirmm-03639381.grobid.tei.xml"}