<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">A Language for the Specification of Administrative Workflow Processes with Emphasis on Actors&apos; Views</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Milliam</forename><surname>Maxime</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Zekeng</forename><surname>Ndadji</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Departement of Mathematics and Computer Science</orgName>
								<orgName type="institution">University of Dschang</orgName>
								<address>
									<postBox>PO Box 67</postBox>
									<settlement>Dschang</settlement>
									<country key="CM">Cameroon</country>
								</address>
							</affiliation>
							<affiliation key="aff1">
								<orgName type="institution">FUCHSIA Research Associated Team</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Maurice</forename><forename type="middle">Tchoupé</forename><surname>Tchendji</surname></persName>
							<email>maurice.tchoupe@univ-dschang.org</email>
							<affiliation key="aff0">
								<orgName type="department">Departement of Mathematics and Computer Science</orgName>
								<orgName type="institution">University of Dschang</orgName>
								<address>
									<postBox>PO Box 67</postBox>
									<settlement>Dschang</settlement>
									<country key="CM">Cameroon</country>
								</address>
							</affiliation>
							<affiliation key="aff1">
								<orgName type="institution">FUCHSIA Research Associated Team</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Clémentin</forename><forename type="middle">Tayou</forename><surname>Djamegni</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Departement of Mathematics and Computer Science</orgName>
								<orgName type="institution">University of Dschang</orgName>
								<address>
									<postBox>PO Box 67</postBox>
									<settlement>Dschang</settlement>
									<country key="CM">Cameroon</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Didier</forename><surname>Parigot</surname></persName>
							<email>didier.parigot@inria.fr</email>
							<affiliation key="aff3">
								<orgName type="institution">Inria</orgName>
								<address>
									<settlement>Sophia Antipolis</settlement>
									<country key="FR">France</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff2">
								<orgName type="department">project.inria.fr</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">A Language for the Specification of Administrative Workflow Processes with Emphasis on Actors&apos; Views</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">FBBCAE30BCE106B5C39F39F818F71A30</idno>
					<idno type="DOI">10.1007/978-3-030-58817-5_18</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.8.0" ident="GROBID" when="2024-04-12T14:53+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Business Process</term>
					<term>Workflow Language</term>
					<term>Grammatical Model of Workflow</term>
					<term>Artifact</term>
					<term>Accreditation, View</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Administrative workflows refer to variable business processes in which all cases are known; tasks are predictable and their sequencing rules are simple and clearly defined. When such processes are collaboratively executed by several actors, it may be desirable, for security reasons (confidentiality), that each of them has at all times, only a partial perception (this is what we call "actor's view") of the current process state. This concern seems sufficiently important to be considered when specifying such workflows. However, traditional workflow specification languages (BPMN, BPEL, YAWL) only partially address it. This is why we present in this paper, a new language for specifying administrative workflows that allows us not only to simply model all of the processes tasks and their sequence, but also and especially to explicitly express the rights of the various actors with respect to each of them, in order to guarantee a certain degree of security. The proposed model is an executable grammatical specification that allows to express using decorated productions, the different types of basic flows (sequential, parallel, alternative and iterative) that are found in workflow specification languages; moreover, it also allows to specify the rights of each actor in each process and on its data in a formalism similar to that used in UNIX-like operating systems.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Workflow technology is concerned with automating business processes. Since its emergence in the early 80s, it has continued to prove its worth in the computer-aided production industry by allowing companies to reduce the costs of their production, to quickly and easily develop new products and services, and thus to be more competitive <ref type="bibr" target="#b2">[3]</ref>. Technically, workflow technology provides a clear technological framework, composed of two major entities: (1) a process specification language or workflow language which allows the description of such processes in a (graphical and/or textual) format that can be interpreted by <ref type="bibr" target="#b1">(2)</ref> an autonomous system called Workflow Management System (WfMS); the role of the latter is to facilitate collaboration and coordination between various actors involved in the (generally distributed) execution of processes, as well as to facilitate their ability to execute the tasks under their responsibility <ref type="bibr" target="#b1">[2]</ref>: In this way, workflow technology reduces the automation of business processes to their specifications in workflow languages.</p><p>The growing reputation of workflow led to the creation, in 1993, of the Workflow Management Coalition <ref type="foot" target="#foot_0">4</ref> (WfMC) as the organization responsible for developing standards in this field. Since then, standards have been adopted, particularly for workflow languages. Through its standard XML Process Definition Language (XPDL), WfMC supports BPMN (Business Process Model and Notation<ref type="foot" target="#foot_1">5</ref> ) [6] as a business process modelling standard. In addition to BPMN, several other process specification languages have been developed. Examples include YAWL (Yet Another Workflow Language) <ref type="bibr" target="#b6">[7,</ref><ref type="bibr" target="#b7">8]</ref> which allows processes to be represented using a formalism derived from that of Petri Nets, and BPEL (Business Process Execution Language) <ref type="bibr" target="#b3">[4]</ref> which allows to formalize the behaviour of business processes by choreographing web services.</p><p>Motivations of this work: one of the inherent characteristics of business processes is, the confidentiality that must sometimes be guaranteed on data and/or tasks that are executed. It is indeed easy to imagine administrative processes in which, various actors at any given time, have only a potentially partial perception of all the activities that have already and/or must be carried out: the perception that an actor has on the current state of a process is called his "view on the process". For example, in a peer-review process, a reviewer does not necessarily need to know if another reviewer has been contacted for the expertise of the article entrusted to him; and even if so, he should not necessarily know if the latter has already returned his report, etc. Similarly, when organising a journey for a Head of State, not all actors (secret services, civil office, doctor, presidential guard, etc.) have access to the same information which may include for example, tasks to be executed, their dates and states of execution, etc.</p><p>Administrative workflows are characterized by the fact that all cases (tasks and their sequences), all actors and the permissions they have on tasks, etc. are known in advance. When specifying such processes, it should also be possible to model confidentiality constraints; for example, it should be possible to explicitly express the permissions -called in the following accreditations -which each actor has on each task. Unfortunately, traditional worflow languages (BPMN, BPEL, YAWL, etc.), although well developed and very expressive (very high expressiveness), do not allow to simply address this problem by providing formalisms (notations) to model them. Indeed, the formalisms they offer generally only allow to specify tasks, their sequencing and their allocation to actors; they delegate the detailed management of possible accreditations to the WfMS <ref type="bibr" target="#b3">[4]</ref>.</p><p>Another important aspect of administrative processes is that they are inherently distributed. It is therefore natural to consider specifying them for execution on truly distributed architectures in order to take full advantage of the benefits (better fault toler-ance, better performance, absence of congestion points, etc. <ref type="bibr" target="#b9">[10]</ref> ) that the latter provide over centralized architectures. On this aspect specifically, it can be noted that traditional workflow languages have been designed to write specifications to be executed on (distributed) WfMS built in the centralized architectural style standardized by the WfMC <ref type="bibr" target="#b8">[9]</ref>.</p><p>Paper contribution: considering the above-mentioned shortcomings of traditional workflow languages, we propose in this paper a new Language for the Specification of Administrative Workflow Processes (LSAWfP) allowing to simply express the standard characteristics (tasks, scheduling, etc.) of business processes as we would do with its predecessors. However, unlike these, LSAWfP makes it possible to specify the accreditations of the various actors of the process. With LSAWfP, the model of an administrative process is an executable grammatical specification given by a triplet</p><formula xml:id="formula_0">W f = G, L P k , L A k in which:</formula><p>-G is the Grammatical Model of Workflow (GMWf -a grammar -): its sorts (symbols) represent all tasks and its productions (decorated by sequencing operators) express their ordering;</p><p>-L P k is the list of actors involved in the process; -L A k is the list of accreditations: it allows to define the view of each actor in a formalism inspired by the one used to specify user rights in UNIX-like systems.</p><p>Manuscript organization: after reminding some basic definitions and notions on workflows in section 2, we present more formally the proposed language (sec. 3.1) followed by an illustration of its use for modelling a peer-review process (sec. 3.2). A discussion on its expressiveness is conducted in section 3.3. Section 3.4 gives an overview of the recommended WfMS architecture on which instances of LSAWfP (ie. specifications made in LSAWfP) must be executed. Finally, section 4 is devoted to the conclusion.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Preliminaries</head><p>Workflow technology is full of many concepts. The presentation of some of them in this section aims at facilitating their understanding and especially, at motivating some of the choices made in this paper.</p><p>Definitions A business process is a set of tasks that follow a specific pattern and are executed to achieve a specific goal <ref type="bibr" target="#b2">[3]</ref>. When such processes are managed electronically, they are called workflows. The WfMC <ref type="bibr" target="#b8">[9]</ref> defines workflow management as the modelling and computer management of all the tasks and different actors involved in executing a business process. The peer-review validation <ref type="bibr" target="#b0">[1]</ref> of an article in a scientific journal is a common example of business process.</p><p>Workflow typology In the literature, there are several approaches to workflow classification. However, it is the approach that classifies them by the nature and the behaviour of automated processes that is most commonly used. According to the latter, workflows are divided into three groups: production workflows, administrative workflows and adhoc workflows <ref type="bibr" target="#b6">[7]</ref>. Production workflows are those automating highly structured processes that experience very little (or no) change over time. Administrative workflows apply to variable processes of which all cases are known; that means that tasks are predictable and their sequencing are simple and clearly defined (these are the ones that are of particular interest to the work we are doing). Ad-hoc workflows are more general; they automate occasional processes for which it is not always possible to define all the rules in advance.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Business process specification</head><p>In the literature, the specification of a business process is commonly referred to as a workflow model. According to <ref type="bibr" target="#b1">[2]</ref>, a workflow model consists of three main conceptual models: the organizational, informational and process models.</p><p>The organizational model is used to express and classify the resources responsible for executing the tasks of the studied process. Generally, these are classified into roles to which tasks are assigned.</p><p>The informational model is used to describe the structure of consumed and produced data during processes execution.</p><p>Finally, the process model is used to describe the structure of each task, the coordination between them and consequently, the coordination between the various actors involved in their execution. The process model is generally expressed using a language and allows the expression of basic control flows (sequential, parallel, alternative and iterative) between tasks.</p><p>Ideally, a workflow language should be able to allow workflow model designers to express these three conceptual models.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">A Language for the Specification of Administrative Workflow Processes (LSAWfP)</head><p>In this section, we present the language LSAWfP. It is a new language that allows to specify administrative workflow processes with a particular emphasis on the consideration of accreditations.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Language Definition</head><p>In LSAWfP, each administrative process is specified using a triplet composed of: a grammatical model (called Grammatical Model of Workflow -GMWf -thereafter), a list of actors and a list of accreditations. The GMWf is used to describe all the tasks of the studied process and the precedence of execution between them, while the list of accreditations provides information on the role played by each actor involved in the process execution.</p><p>In the rest of this manuscript, any specification of a business process produced using the language LSAWfP will be called a Grammatical Model of Administrative Workflow Process (GMAWfP). A GMAWfP is therefore a triplet formally defined as follows:</p><formula xml:id="formula_1">Definition 1. A Grammatical Model of Administrative Workflow Process (GMAWfP) W f for a given business process, is a triplet W f = G, L P k , L A k wherein G is the studied process (global) GMWf, L P k</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>is the set of k actors taking part in its execution and L A k represents the set of these actors accreditations.</head><p>Concept of GMWf For a given process, the GMWf is the mathematical instrument that allows to specify all the tasks to be executed as well as the control flow (also called routing) that allows to schedule them. It is a grammatical model based on the observation that: the set of tasks of a given administrative process and their execution precedence orders can be described using a (finite) set of annotated trees (see fig. <ref type="figure" target="#fig_0">1</ref>). Each of these trees, called target artifact, is a task graph representing one of the possible execution scenarios of the studied process. In fact, it is sufficient to consider in each target artifact that, nodes represent the different tasks to be executed and each hierarchical decomposition (a node and its sons) represents an ordering.</p><p>For a given set of tasks {X 0 , X s1 . . . X sn }, we consider two types of ordering simply specified using two types of decorated productions<ref type="foot" target="#foot_2">6</ref> : (1) sequential ordering, noted X 0 → X s1 X s2 . . . X sn , which specifies that task X 0 precedes (ie. must be executed before all) tasks X s1 , . . . , X sn which are to be executed in sequence (X s1 must precede X s2 , . . . ) and, (2) parallel odering, noted X 0 → X p1 X p2 . . . X pn , which specifies that task X 0 must be executed before tasks X p1 , X p2 , . . . , X pn which can be executed concurrently. From the above observations, it is easy to deduce that all the target artifacts of a given administrative process, form an algebraic tree language. It can therefore be defined by a grammar G (a GMWf) in which, each symbol (sort) corresponds to a task of the studied process and, each production (p) is of one of the two following forms: p : X 0 → X 1 . . . X n or p : X 0 → X 1 . . . X n . Each target artifact t i is conform to G and we note t i ∴ G. We can thus define a GMWf more formally in the following way:</p><formula xml:id="formula_2">Definition 2. A Grammatical Model of Workflow (GMWf) is defined by G = (S , P , A)</formula><p>where S is a finite set of grammatical symbols or sorts corresponding to various tasks to be executed in the studied business process; A ⊂ S is a finite set of particular symbols called axioms, representing tasks that can start an execution scenario, and P ⊆ S × S * is a finite set of productions decorated by the operators " " (is sequential to) and " " (is parallel to): they are precedence rules. A production P = X P(0) , X P(1)</p><formula xml:id="formula_3">• • • X P(|P|) is either of the form P : X 0 → X 1 . . . X |P| , or of the form P : X 0 → X 1 . . . X |P|</formula><p>and |P| designates the length of P right-hand side. Each grammatical symbol X ∈ S is associated with an attribute called status, that can be updated when task X is executed; X.status provides access (read and write) to its content. A production with the symbol X as left-hand side is called a X-production.</p><p>For some business processes, there may be particular cases where it would be impossible to strictly order all tasks using the (only) two retained production forms for GMWf. This is for example the case of a process with four tasks A, B,C and D such that: task A precedes all the others, tasks B and C can be executed concurrently and precede D. In these cases, the introduction of a given number of new symbols known as (re)structuring ones (not associated with tasks), can make it possible to produce a correct ordering that respects the form imposed on productions. For the previous example, introducing a new symbol S allows us to obtain the following productions: Defined in this way, GMWf allow basic control flows (sequential, parallel, alternative and iterative) to be expressed between tasks as illustrated in section 3.3.</p><formula xml:id="formula_4">p 1 : A → S D, p 2 : S → B C, p 3 : B → ε,</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Concept of accreditation of an actor</head><p>As business processes are generally executed collectively, it is necessary to set up mechanisms to ensure better coordination between the various actors and to guarantee the confidentiality of certain actions and data: this is the purpose of accreditation. With it, we propose to take these aspects into account during the workflow system design phase. The accreditation of a given actor provides information on its rights (permissions) relatively to each sort (task) of the studied process's GMWf. The nomenclature of rights that we handle and that we want simple, is inspired by the one used in UNIX-like operating systems. Three types of accreditation are therefore defined: accreditation in reading (r), writing (w) and execution (x).</p><p>1. The accreditation in reading (r): an actor accredited in reading on sort X must be informed of the execution of the associated task; he must also have free access to its execution state (data generated during its execution). An actor's view is the set of sorts on which he is accredited in reading.</p><p>2. The accreditation in writing (w): an actor accredited in writing on sort X can execute/realize the associated task. To be simple, any actor accredited in writing on a sort must necessarily be accredited in reading on it. 3. The accreditation in execution (x): an actor accredited in execution on sort X is allowed to ask the actor who is accredited in writing in it, to execute it (realization of the associated task).</p><p>More formally, an accreditation is defined as follows:</p><p>Definition 4. An accreditation A A i defined on the set S of grammatical symbols for an actor A i , is a triplet</p><formula xml:id="formula_5">A A i = A A i (r) , A A i (w) , A A i (x) such that, A A i (r) ⊆ S also called view of actor A i ,</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>is the set of symbols on which A i is accredited in reading,</head><formula xml:id="formula_6">A A i (w) ⊆ A A i (r)</formula><p>is the set of symbols on which A i is accredited in writing and A A i (x) ⊆ S is the set of symbols on which A i is accredited in execution.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Example of specification using LSAWfP</head><p>As an illustrative example, consider the process of validating an article in a peerreviewed scientific journal commonly referred to as peer-review process. The latter can be briefly described as follows:</p><p>-The process is triggered when the editor in chief receives a paper for validation submitted by one of the authors who participated in its drafting; -After receipt, the editor in chief performs a pre-validation after which he can accept or reject the submission for various reasons (subject of minor interest, submission not within the journal scope, non-compliant format, etc.); -If the submission is rejected, he writes a report then notifies the corresponding author and the process ends; -In the other case, he chooses an associated editor and sends him the paper for the continuation of the validation; -The associated editor prepares the manuscript, forms a referees committee (two members in our case) and then triggers the peer-review process; -Each referee reads, seriously evaluates the paper and sends back a message and a report to the associated editor; -After receiving reports from all referees, the associated editor takes a decision and informs the editor in chief who sends the final decision to the corresponding author.</p><p>Figure <ref type="figure" target="#fig_2">2</ref> shows the BPMN orchestration diagram corresponding to the graphical description of this peer-review process.</p><p>To specify this process using our language, we will proceed in four distinct steps during which we will produce each of the components of the triplet</p><formula xml:id="formula_7">W f = G, L P k , L A k .</formula><p>Step 1: identification and ordering of process tasks From the description of the peerreview process made previously, it is easy to identify all the tasks to be executed, all the actors involved as well as the tasks assigned to them. A summary of this assignment is presented in table 1. From the analysis of the execution precedence constraints that exist between the highlighted tasks (see table <ref type="table">1</ref>), we obtain the target artifacts art 1 and art 2 of figure <ref type="figure" target="#fig_0">1</ref>. For example, the target artifact art 1 in figure <ref type="figure" target="#fig_0">1</ref> shows how the "Receipt and pre-validation of a submitted article" task, executed by the editor in chief (EC) and to which sort A has been associated (for readability purposes -see table <ref type="table">1</ref>), must be executed before the two sequential tasks associated respectively to sorts B and D. This target artifact represents the scenario where the article received by the editor in chief is immediately rejected for form issues, research domain incompatibility, etc.</p><p>Step 2: deduction of the Grammatical Model of Workflow (G = (S , P , A)) When analyzing this example's target artifacts, we deduce that the set of grammatical symbols S is: S = {A, B,C, D, E, F, G1, G2, H1, H2, I1, I2} (see table <ref type="table">1</ref>); the only initial task (axiom) is A (hence A = {A}) and the set P of productions is:</p><formula xml:id="formula_8">P 1 : A → B D P 2 : A → C D P 3 : C → E F P 4 : E → G1 G2 P 5 : G1 → H1 I1 P 6 : G2 → H2 I2 P 7 : B → ε P 8 : D → ε P 9 : F → ε P 10 : H1 → ε P 11 : I1 → ε P 12 : H2 → ε P 13 : I2 → ε</formula><p>Step 3: actors involved in the execution of the process (L P k ) According to our description of the peer-review process, four (k = 4) actors participate in its execution: an editor in chief (EC), an associated editor (AE) and two referees (R1 and R2). So we deduce that L P k = {EC, AE, R1, R2}. It should be noted that the notion of actor here does not Writing the message according to evaluation by the first (resp. second) referee</p><formula xml:id="formula_9">I1 (resp. I2) R1 (resp. R2) Table 1.</formula><p>Exhaustive tasks list of a paper validation process in a scientific journal and their respective performers.</p><p>necessarily refer to a specific natural person; it refers more precisely to a role that can be assumed by several natural persons with the same skills.</p><p>Step 4: the accreditation of each participant (L A k ) From the assignment of tasks to actors (see table <ref type="table">1</ref>), it follows that the accreditation in writing of the editor in chief is</p><p>A EC(w) = {A, B, D}, the one of the associated editor is A AE(w) = {C, E, F} and that of the first (resp. the second) referee is A R 1 (w) = {G1, H1, I1} (resp. A R 2 (w) = {G2, H2, I2}).</p><p>Moreover, since the editor in chief can only execute task D if task C is already executed (see artifacts art 1 and art 2 , fig. <ref type="figure" target="#fig_0">1</ref>), for the editor in chief to be able to request this task execution from the associated editor, he must be accredited in execution on it; therefore, we have A EC(x) = {C}. In addition, in order to be able to access all the information on the progress of the peer-review evaluation (task C) and synthesize the right decision to be sent to the author, the editor in chief must be able to consult reports (tasks I1 and I2) and messages (tasks H1 and H2) of the various referees, as well as the final decision made by the associated editor (task F). These tasks, in addition to A EC(w)</p><formula xml:id="formula_10">7</formula><p>constitute the set A EC(r) = V EC = {A, B,C, D, H1, H2, I1, I2, F} of tasks on which he is accredited in reading. Doing so for each of the other actors leads to the deductions of the accreditations represented in the table 2 and we have</p><formula xml:id="formula_11">L A k = {A EC , A AE , A R1 , A R2 }.</formula><p>7 Remember that in our case we can only execute what we see.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Actor Accreditation Editor in Chief (EC)</head><p>A EC = ({A, B,C, D, H1, H2, I1, I2, F}, {A, B, D}, {C}) Associated Editor (AE) A AE = ({A,C, E, F, H1, H2, I1, I2}, {C, E, F}, {G1, G2})</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>First referee (R1)</head><p>A R1 = ({C, G1, H1, I1}, {G1, H1, I1}, / 0)</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Second referee (R2)</head><p>A R2 = ({C, G2, H2, I2}, {G2, H2, I2}, / 0) Table <ref type="table">2</ref>. Accreditations of the different actors taking part in the peer-review process.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">On the expressiveness of LSAWfP</head><p>In this subsection, we want to show that LSAWfP has all the expected characteristics of a workflow language. In particular, we show that each of its instances (i.e. a specification of a business process in this language) contains both an organizational model, an informational model and a process model.</p><p>Let's consider a specification W f = G, L P k , L A k of a given business process P op . The organizational model of P op that expresses and classifies/assigns the resources that must execute its tasks is given by the couple L P k , L A k of W f . Its informational model that describes the data structure being manipulated is given by the type of the attribute status <ref type="foot" target="#foot_3">8</ref> . LSAWfP does not impose any constraints on the type of this attribute and leaves the responsibility to the designer to specify it; by default it is a string type. The process model of P op that provides information on the tasks and their sequencing (coordination) is then given by the GMWf G of W f . Let's take a moment to look at the process model contained in a specification made in LSAWfP, to show that it effectively allows the designers to specify all the basic control flows (sequential, parallel, alternative and iterative) that they can find in traditional workflow languages. Figure <ref type="figure" target="#fig_4">3</ref> gives for each type of control flow its BPMN notation and the corresponding notations (tree and associated productions) in LSAWfP as described below:</p><p>-the sequential flow between two tasks A and B can be expressed either by a production p of the form p : A → B, or by a production q of the form q : S → A B in which S is a (re)structuring symbol (see fig. <ref type="figure" target="#fig_4">3(a)</ref>); -the parallel flow between two tasks A and B is expressed using a production p of the form p : S → A B (see fig. <ref type="figure" target="#fig_4">3(b)</ref>); -the alternative flow (choice) between two tasks A1 and A2 is expressed using two productions p1 and p2 such that p1 : S → A1 and p2 : S → A2; S is a (re)structuring symbol expressing the fact that after "execution" of S, one must execute either task A1 or task A2 (see fig. <ref type="figure" target="#fig_4">3(c)</ref>). -iterative routing (repetition) is expressed using recursive symbols. Thus the productions p1 : A → B, p2 : B → C and p3 : B → A express a potentially iterative flow on the task A (see fig. <ref type="figure" target="#fig_4">3(d)</ref>).</p><p>Note that, when the process to be specified contains an iterative routing (modeled by a cycle in the task graph according to the BPMN notation (see fig. <ref type="figure" target="#fig_4">3(d)</ref>)), it is impossible to list exhaustively all the set of its target artifacts (execution scenarios) because the latter is infinite. In this case, we propose to represent it by all its generators: generators are a finite and minimal set of artifacts allowing to represent each artifact as a combination/juxtaposition of generators; each artifact is therefore decomposable into a set of sub-artifacts all belonging to the set of generators. A generator is a target artifact for which each of its branches (from the root to a leaf) contains a given symbol only twice at most. Operationally, when designing the target artifacts of a given process, the designer must prune each branch as soon as he encounters a symbol for the second time. This will provide a finite set of target artifacts (generators) whose elements, combined with each other, represent the set of possible execution scenarios for the studied process.</p><p>That is what was done to obtain the two target artifacts shown in figure <ref type="figure" target="#fig_4">3(d)</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Privileged WfMS architecture that must execute instances of LSAWfP</head><p>Process specifications in LSAWfP (GMAWfP) can be easily executed in a distributed way, by fully decentralized WfMS, offering an artifact-centric execution of business processes. It is this type of WfMS, later called P2P-WfMS-View<ref type="foot" target="#foot_4">9</ref> , that we describe in this section.</p><p>A P2P-WfMS-View is a set of components distributed on all the sites where various workflow actors operate. These different components (hereinafter referred to as peers) have the same architecture, execute the same protocols, communicate by service calls and cooperate in P2P to execute a GMAWfP. On each peer, a set of three (03) software components that manage the entire lifecycle (creation, storage, execution) of workflows is executed. These are (see fig. <ref type="figure" target="#fig_5">4</ref>): a local workflow engine (LWfE), a specialized graphic editor and a storage device. The local workflow engine (LWfE) manages the life cycle of incoming requests on a given site. It communicates with engines of other peers via its communication interface which exposes four services: two input services or provided services (returnTo and forwardTo for processing requests/responses) connected to two corresponding output services or required service (returnTo and for-wardTo for sending requests/responses) (see fig. <ref type="figure" target="#fig_5">4</ref>). The storage device is a database (DB) of documents (a JSON<ref type="foot" target="#foot_5">10</ref> database for example) used by the LWfE to store the state of each workflow that it manages. The specialized editor allows the local actor to access process data, access and execute tasks assigned to him. It is important to note that on a given site, the specialized editor only gives access to information relevant to the local actor; i.e. those for which he has sufficient accreditation. It therefore guarantees that each actor has only a potentially partial perception of the executed processes. During the execution of a given GMAWfP, each peer keeps locally a copy of the (global) artifact representing the current execution state of the considered process. It is also the latter that serves as a medium for communication and coordination between actors: it is in this sense that the execution is artifact-centric.</p><p>The (global) artifact is in conformity with the GMWf of the considered GMAWfP and provides information on already executed tasks, on those ready to be immediately executed as well as on their executors. In fact, when a given actor acts on the workflow (by executing his tasks through the specialized editor for example), his local copy of the (global) artifact is updated accordingly. In order to synchronize, actors exchange (through service invocations) their local copies of the (global) artifact and these are merged each time, to obtain a coherent state of process execution before it is continued. In this way, we succeed in using the unique and simple artifact formalism, as a mechanism for the specification of process models and as a model of the exchange and coordination between actors mediums. It should be noted that existing solutions generally use at least two formalisms for the same needs.</p><p>For experimentation purposes, we have produced a P2P-WfMS-View prototype called P2PTinyWfMS<ref type="foot" target="#foot_6">11</ref> through which we can simulate the completely decentralized execution of processes. In accordance with P2P-SGWf-View architecture (see fig. <ref type="figure" target="#fig_5">4</ref>), P2PTinyWfMS has a front-end for displaying and graphically editing artifacts handled when executing a business process (see fig. <ref type="figure" target="#fig_6">5</ref> and<ref type="figure" target="#fig_7">6</ref>), as well as a communication module built using SON<ref type="foot" target="#foot_7">12</ref> (Shared-data Overlay Network) <ref type="bibr" target="#b4">[5]</ref>; SON is a middleware offering several DSL (Domain Specific Language) to facilitate the implementation of P2P systems whose components communicate by services invocations. In order to execute our running example (the peer-review process), we deployed four instances of P2PTinyWfMS respectively identified by EC, AE, R1 and R2. Figures <ref type="figure" target="#fig_6">5</ref> and<ref type="figure" target="#fig_7">6</ref> are screenshots showing some highlights of the workflow's distributed execution. For example, on figure <ref type="figure" target="#fig_6">5</ref>, the tab "Workflow overview" presents at the beginning of the execution, various tasks, actors, target artifacts etc., on the editor in chief's site. Figure 6 is a screenshot of the tab "Workflow execution" made on the associated editor's site; it shows artifacts resulting from processing performed after the receipt of a request from the editor in chief. This figure 6 actually reveals that: the associated editor received an artifact under execution (fig. <ref type="figure" target="#fig_7">6</ref> (Requests Queue)) from the editor in chief's site; then, after the merging and replication operations performed by the LWfE, task D and its data were hidden to the associated editor (he does not have sufficient accreditations on the latter) while task C was proposed to him for execution. With the specialized editor, the associated editor has accessed and executed ready tasks one after the other until he could not continue; his partial copy of the global artifact was updated accordingly (fig. <ref type="figure" target="#fig_7">6</ref> (WYSIWYG Execution)). Finally, the LWfE has calculated the overall process execution state on the associated editor's site through an operation called expansionpruning and has sent requests to referees' sites on which execution was supposed to continue concurrently.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Conclusion</head><p>In this paper, we have proposed a new workflow language called LSAWfP which allows, through a simple grammar-based formalism, to specify business processes. Like any workflow language, LSAWfP allows to specify basic flows (sequential, parallel, alternative and iterative) that are generally found in workflow models; particularly, it allows (unlike other languages) to address certain security aspects of administrative workflows. In fact, LSAWfP allows the workflow models designers, to simply express each actor's accreditations for each task in a process, by the means of a formalism inspired by that used in UNIX-like operating systems for the expression of users' rights.</p><p>The utility and usability of LSAWfP has been satisfactorily tested through an experiment of its use for the implementation of a distributed environment to execute a peer-review process; this environment has been briefly presented in this paper. However, this experiment suggested that it would certainly be easier to handle LSAWfP if we had a (graphical) tool to assist in the design and validation of its instances. Moreover, it seems equally important to more precisely describe the model for executing business processes specified in LSAWfP. In our opinion, this is just a few of the many studies that must be carried out following the one presented in this paper.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 1 .</head><label>1</label><figDesc>Fig. 1. Example of target artifacts for a given process (peer-review process)</figDesc><graphic coords="6,208.46,472.77,198.12,97.66" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head></head><label></label><figDesc>p 4 : C → ε and p 5 : D → ε that model the proper ordering required for this process. To deal with such cases, we adjust the previously given definition of GMWf (definition 2) by integrating (re)structuring symbols into it; the resulting definition is as follows: Definition 3. A Grammatical Model of Workflow (GMWf) is defined by G = (S , P , A) wherein P and A refer to the same purpose as in definition 2, S = T ∪ T Struc is a finite set of grammatical symbols or sorts in which, those of T correspond to tasks of the studied business process, while those of T Struc are (re)structuring symbols.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig. 2 .</head><label>2</label><figDesc>Fig. 2. BPMN orchestration diagram of the peer-review process.</figDesc><graphic coords="9,147.62,166.35,319.85,209.66" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head></head><label></label><figDesc>-validation of a submitted paper and possible choice of an associated editor to lead peer-review evaluation A EC Drafting of a pre-validation report informing on the reasons for the immediate rejection of the paper B EC Sending the final decision (acceptance or rejection of the paper) to the author D EC Study, eventually formatting of the paper for the examination by a committee C AE Constitution of the reading committee (selection of referees) and triggering the peer-review evaluation E AE Decision making (paper accepted or rejected) from referees evaluations F AE Evaluation of the manuscript by the first (resp. second) referee G1 (resp. G2) R1 (resp. R2) Drafting of the after evaluation report by the first (resp. second) referee H1 (resp. H2) R1 (resp. R2)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Fig. 3 .</head><label>3</label><figDesc>Fig. 3. Illustrating basic control flow with LSAWfP.</figDesc><graphic coords="12,169.43,166.07,276.54,302.74" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Fig. 4 .</head><label>4</label><figDesc>Fig. 4. Simplified peer architecture.</figDesc><graphic coords="13,215.28,437.82,184.76,103.22" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Fig. 5 .</head><label>5</label><figDesc>Fig. 5. P2pTinyWfMS on the editor in chief's site: presentation of the GMAWfP (tasks and their relationships, actors and their accreditations).</figDesc><graphic coords="14,135.02,370.01,348.47,186.73" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Fig. 6 .</head><label>6</label><figDesc>Fig. 6. Simulation of the execution of the peer-review process using P2PTinyWfMS.</figDesc><graphic coords="15,135.02,166.22,348.47,187.24" type="bitmap" /></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="4" xml:id="foot_0"><p>Official website of the WfMC: https://www.wfmc.org/.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="5" xml:id="foot_1"><p>BPMN was initiated by the Business Process Management Initiative (BPMI) which merged with Object Management Group (OMG) in 2005.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="6" xml:id="foot_2"><p>Decorations are made using the operators " " (is sequential to) for sequential ordering and " " (is parallel to) for parallel odering.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="8" xml:id="foot_3"><p>Reminder: each task is represented by a grammatical symbol with an attribute named status (see definition 2)</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="9" xml:id="foot_4"><p>Peer to Peer Workflow Management Systems with emphasis on actor's Views.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="10" xml:id="foot_5"><p>JavaScript Object Notation, http://www.json.org, https://www.mongodb.com</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="11" xml:id="foot_6"><p>P2PTinyWfMS is a tool developed in Java under Eclipse (https://www.eclipse.org).</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="12" xml:id="foot_7"><p>SON is available under Eclipse from SmartTools plugin family.</p></note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">A Grammatical Approach to Datacentric Case Management in a Distributed Collaborative Environment</title>
		<author>
			<persName><forename type="first">E</forename><surname>Badouel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Hélouët</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">E</forename><surname>Kouamou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Morvan</surname></persName>
		</author>
		<idno>CoRR abs/1405.3223</idno>
		<ptr target="http://arxiv.org/abs/1405.3223" />
		<imprint>
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Inter-organizational workflows for enterprise coordination</title>
		<author>
			<persName><forename type="first">M</forename><surname>Divitini</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Hanachi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Sibertin-Blanc</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Coordination of Internet agents</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2001">2001</date>
			<biblScope unit="page" from="369" to="398" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">An Overview of Workflow Management: from Process Modeling to Workflow Automation Infrastructure</title>
		<author>
			<persName><forename type="first">D</forename><surname>Georgakopoulos</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">F</forename><surname>Hornick</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">P</forename><surname>Sheth</surname></persName>
		</author>
		<idno type="DOI">10.1007/BF01277643</idno>
		<ptr target="https://doi.org/10.1007/BF01277643" />
	</analytic>
	<monogr>
		<title level="j">Distributed and Parallel Databases</title>
		<imprint>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="119" to="153" />
			<date type="published" when="1995">1995</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Web services business process execution language version 2.0</title>
		<author>
			<persName><forename type="first">D</forename><surname>Jordan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Evdemon</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Alves</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Arkin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Askary</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Barreto</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Bloch</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Curbera</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Ford</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Goland</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">OASIS standard</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="issue">120</biblScope>
			<biblScope unit="page">5</biblScope>
			<date type="published" when="2007">2007</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">A Lightweight Middleware for Developing P2P Applications with Component and Service-Based Principles</title>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">A</forename><surname>Lahcen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Parigot</surname></persName>
		</author>
		<idno type="DOI">10.1109/ICCSE.2012.12</idno>
		<ptr target="https://doi.org/10.1109/ICCSE.2012" />
	</analytic>
	<monogr>
		<title level="m">15th IEEE International Conference on Computational Science and Engineering, CSE 2012</title>
		<meeting><address><addrLine>Paphos, Cyprus</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2012">December 5-7, 2012. 2012</date>
			<biblScope unit="page" from="9" to="16" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Notation (BPMN) version 2.0. OMG Specification</title>
		<author>
			<persName><forename type="first">B</forename><forename type="middle">P</forename><surname>Model</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="s">Object Management Group</title>
		<imprint>
			<biblScope unit="page" from="22" to="31" />
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">The Application of Petri Nets to Workflow Management</title>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">M P</forename><surname>Van Der Aalst</surname></persName>
		</author>
		<idno type="DOI">10.1142/S0218126698000043</idno>
		<ptr target="https://doi.org/10.1142/S0218126698000043" />
	</analytic>
	<monogr>
		<title level="j">Journal of Circuits, Systems, and Computers</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="21" to="66" />
			<date type="published" when="1998">1998</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Yawl: yet another workflow language</title>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">M P</forename><surname>Van Der Aalst</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">H</forename><surname>Ter Hofstede</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Information systems</title>
		<imprint>
			<biblScope unit="volume">30</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="245" to="275" />
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<ptr target="http://www.aiim.org/wfmc/mainframe.htm" />
		<title level="m">WfMC: Wfmc Standards: the Workflow Reference Model</title>
		<imprint>
			<date type="published" when="1995">1995</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">SwinDeW-a P2P-Based Decentralized Workflow Management System</title>
		<author>
			<persName><forename type="first">J</forename><surname>Yan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">K</forename><surname>Raikundalia</surname></persName>
		</author>
		<idno type="DOI">10.1109/TSMCA.2005.855789</idno>
		<ptr target="https://doi.org/10.1109/TSMCA.2005.855789" />
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Systems, Man, and Cybernetics, Part A</title>
		<imprint>
			<biblScope unit="volume">36</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="922" to="935" />
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
