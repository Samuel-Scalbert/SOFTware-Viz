<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main"></title>
				<funder ref="#_xXxGFn8">
					<orgName type="full">Open Research Project of the State Key Laboratory of Industrial Control Technology, Zhejiang University, China</orgName>
				</funder>
				<funder ref="#_gjgFsuC">
					<orgName type="full">Fundamental Research Funds for the Central Universities, China</orgName>
				</funder>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<affiliation key="aff0">
								<orgName type="laboratory">Big Data Laboratory</orgName>
								<orgName type="institution">Baidu Research</orgName>
								<address>
									<postCode>100085</postCode>
									<settlement>Beijing</settlement>
									<country key="CN">China</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<orgName type="department" key="dep1">Center of Excellence in Mathematical Sciences</orgName>
								<orgName type="department" key="dep2">IT and Applications</orgName>
								<address>
									<postCode>01 BP 613</postCode>
									<settlement>Porto-Novo</settlement>
									<country key="BJ">Benin</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff2">
								<orgName type="department">School of Automation</orgName>
								<orgName type="institution">Southeast University</orgName>
								<address>
									<postCode>210096</postCode>
									<settlement>Nanjing</settlement>
									<country key="CN">China</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff3">
								<orgName type="institution" key="instit1">Inria</orgName>
								<orgName type="institution" key="instit2">University of Montpellier</orgName>
								<orgName type="institution" key="instit3">CNRS</orgName>
								<orgName type="institution" key="instit4">LIRMM</orgName>
								<address>
									<postCode>34095</postCode>
									<settlement>Montpellier</settlement>
									<country key="FR">France</country>
								</address>
							</affiliation>
						</author>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">B524E470A5422E828A3E1066E72739E7</idno>
					<idno type="DOI">10.1109/TITS.2020.3011952</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.8.0" ident="GROBID" when="2024-04-12T14:51+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract/>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Two-phase Scheduling for Efficient Vehicle Sharing Ji Liu, Member, IEEE, Carlyna Bondiombouy, Lei Mo, Member, IEEE, and Patrick Valduriez Abstract-Cooperative Intelligent Transport Systems (C-ITS) is a promising technology to make transportation safer and more efficient. Ridesharing for long-distance is becoming a key means of transportation in C-ITS. In this paper, we focus on private long-distance ridesharing, which reduces the total cost of vehicle utilization for long-distance journeys. In this context, we investigate journey scheduling problem with shared vehicles to reduce the total cost of vehicle utilization. Most of the existing works directly schedule journeys to vehicles with long scheduling time and only consider the cost of driving travellers instead of the total cost. In contrast, to reduce the total cost and scheduling time, we propose a comprehensive cost model and a two-phase journey scheduling approach, which includes path generation and path scheduling. On this basis, we propose two path generation methods: a simple near optimal method and a reset near optimal method as well as a greedy based path scheduling method. Finally, we present an experimental evaluation with different path generation and path scheduling methods with synthetic data generated based on real-world data. The results reveal that the proposed scheduling approach significantly outperforms baseline methods in terms of total cost (up to 69.8%) and scheduling time (up to 84.0%) and the scheduling time is reasonable (up to 0.16s). The results also show that our approach has higher efficiency (up to 141.7%) than baseline methods.</p><p>Index Terms-Vehicle sharing, Path planning problem, Scheduling, Optimization</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>I. INTRODUCTION</head><p>Cooperative Intelligent Transport Systems (C-ITS) <ref type="bibr" target="#b0">[1]</ref> promise to make transportation safer and more efficient. By integrating different data sources, C-ITS can deeply change people's driving experience by reducing traffic congestion, providing intelligent transportation algorithms, reducing significantly the number of traffic accidents, and finally realizing unmanned vehicles <ref type="bibr" target="#b1">[2]</ref>. For instance, by integrating the location of different vehicles, a centralized system could generate a smart scheduling plan for all the related vehicles. However, vehicle locations in different agencies are not frequently updated or the data are not fully exploited. When there is an order, an agency's employees typically assign the order to an available vehicle in the agency without paying attention to the overall cost. In addition, there is no cooperation among different vehicle agencies and thus, no data integration. By integrating the data about vehicle locations in different agencies in a single system, we could achieve smart scheduling so that the total cost of vehicle utilization is reduced. Fig. <ref type="figure">1</ref>: An example for long-distance ridesharing. A, B, C represent three groups of travellers distributed in Amsterdam, Calais and Brussels. 1, 2, 3 respectively represent Group A travels from Amsterdam to Brussels, Group B from Brussels to Calais and Group C from Brussels to Amsterdam.</p><p>Ridesharing is a promising approach for reducing energy consumption and traffic congestion while satisfying people's commuting needs <ref type="bibr" target="#b2">[3]</ref>. Ridesharing based on private cars, often known as carpooling or recurring ridesharing, has been studied for years to deal with people's routine commutes. Furthermore, ridesharing based on buses or other vehicles for long-distance travelling is becoming a promising transport manner in C-ITS <ref type="bibr" target="#b3">[4]</ref>. According to the analyses of the French National Transport Survey <ref type="bibr" target="#b4">[5]</ref> and the Europe Environment Agency (EEA) Report <ref type="bibr" target="#b5">[6]</ref>, the long-distance is defined as the distance longer than 80 km across different cities or countries. In this paper, we focus on private long-distance ridesharing with vehicles, where several vehicles can realize a set of journeys for different groups of travellers while a vehicle can only realize a journey for a single group at a time in order to ensure the privacy and efficiency of each journey. Private longdistance ridesharing can be widely exploited to reuse buses from different bus agencies for several traveller groups in order to reduce the total cost of vehicle utilization. As shown in the example presented in Figure <ref type="figure">1</ref>, three groups of travellers (A, B and C) are respectively distributed in three cities, e.g., Amsterdam, Brussels and Calais. Group A needs to go to Brussels <ref type="bibr" target="#b0">(1)</ref>, Group B needs to go to Calais <ref type="bibr" target="#b1">(2)</ref> and Group C needs to go to Amsterdam <ref type="bibr" target="#b2">(3)</ref>. Assume timing is perfect, i.e., just after Group A arrives in Brussels (1), Group B can start travelling and just after Group B arrives in Calais <ref type="bibr" target="#b1">(2)</ref>, Group C can begin to go to Amsterdam <ref type="bibr" target="#b2">(3)</ref>. In this case, without private long-distance ridesharing, each group needs to rent a vehicle to go from one city to another with high cost, which includes the cost to return back the vehicle from their destination city to the original city. With private long-distance ridesharing, only one vehicle needs to be exploited, which will go from Amsterdam to Brussels, Brussels to Calais, and finally back to Amsterdam. This simple example shows a significant cost reduction for three groups with one vehicle. Furthermore, significant cost can be reduced by exploiting private long-distance ridesharing for multiple groups of travellers and vehicles.</p><p>In order to provide private long-distance ridesharing, the scheduling of journeys to each vehicle is critical to satisfy travellers' requirements in order to reduce total cost. The journey scheduling process is to map each journey to a vehicle and decide if the vehicle should be returned back to its original location after realizing the journey. The result of the scheduling process is a scheduling plan. A journey can be realized by any available vehicle with different cost. We assume that the vehicle is available for driving the travellers during day time and that there is always an available driver to drive the vehicle according to the scheduling plan <ref type="foot" target="#foot_0">1</ref> . A vehicle has its original location and should be returned back to its original location after realizing its scheduled journeys. As the travellers are sensitive to the cost of using vehicles, the objective of journey scheduling is to reduce the total cost of realizing all the journeys in the orders. The total cost is the cost of using the vehicle, including transporting travellers, driving the vehicle to the start location of each journey and returning back to the original location. Thus, the problem we address in this paper is how to efficiently generate a scheduling plan that reduces the total cost of all the orders.</p><p>There are already some scheduling methods <ref type="bibr" target="#b6">[7]</ref>, <ref type="bibr" target="#b7">[8]</ref>, <ref type="bibr" target="#b8">[9]</ref>, <ref type="bibr" target="#b9">[10]</ref> for ridesharing. However, they do not consider the cost to drive the vehicle to the start location of the scheduled journey or the cost to return the vehicle back to its original location. In addition, existing scheduling methods directly schedule journeys to available vehicles, which corresponds to long scheduling time. In this paper, we decompose the problem into two sub-problems and propose a two-phase journey scheduling approach, which generates paths based on the journeys and then schedules each path to vehicles in order to minimize the total cost. A path <ref type="bibr" target="#b10">[11]</ref> is a combination of successive journeys to be scheduled as a unit to a vehicle. A vehicle is not returned back to its original location until all the journeys in the path are realized. We propose a cost model to calculate the total cost to schedule journeys to different vehicles. We propose two path generation methods, i.e., Simple Near Optimal (SNO) and Reset Near Optimal (RNO), which yield low cost. In addition, we propose a greedy path scheduling method in order to schedule each path to a vehicle in order to reduce the total cost. The two-phase approach, SNO and the greedy path scheduling method have already been implemented in the scheduling system of a startup company, i.e., TUDING <ref type="foot" target="#foot_1">2</ref> . The main contributions of this paper are:</p><p>1) A problem formulation of journey scheduling problems.</p><p>We decompose the journey scheduling problem into two sub-problems, i.e., path generation problem and path scheduling problem.</p><p>2) A cost model for journey scheduling. The cost model calculates the total cost to realize all the journeys corresponding to a scheduling plan with the consideration of the cost to drive the vehicles to the start location of each journey and the cost to return vehicles. 3) A two-phase journey scheduling approach with two path generation algorithms and a greedy path scheduling algorithm. The two-phase journey scheduling approach first generates paths based on journeys and then schedules each journey to vehicles in order to reduce the total cost based on the cost model. 4) An extensive experimental evaluation on synthetic data based on real-world data, that shows the advantages of our approach, compared with baseline algorithms. This paper is organized as follows. Section II discusses related work. Section III defines some basic concepts, proposes a cost model and formally defines the scheduling problem we address in this paper. Section IV describes our proposed twophase journey scheduling approach including path generation methods and path scheduling methods. Section V presents an experimental evaluation based on synthetic data generated from real-world data, which shows the advantages of our proposed methods. Finally, section VI concludes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>II. RELATED WORK</head><p>Many existing journey scheduling approaches directly schedule each journey to each vehicle using heuristics in order to minimize a cost function <ref type="bibr" target="#b6">[7]</ref>, <ref type="bibr" target="#b7">[8]</ref>. These approaches do not combine the journeys into paths and the corresponding search space is big (see details in Section III). Lam et al. <ref type="bibr" target="#b6">[7]</ref> propose a distributed genetic algorithm for scheduling. The principle of a genetic algorithm is to encode possible scheduling plans into a population of chromosomes, and subsequently to transform the population using standard operations of selection, crossover and mutation, producing successive generations, until the convergence condition is met. It is hard to configure the initial chromosomes and convergence condition when there is no additional information about the scheduling. In addition, strict convergence condition can incur long execution time as many iterations are needed <ref type="bibr" target="#b11">[12]</ref>. Greedy scheduling algorithms are proposed to maximize the profits of taxi drivers <ref type="bibr" target="#b8">[9]</ref>, while the total cost of the journeys is not considered. The journeys can be adjusted in order to reduce the number of vehicles to use for the journeys <ref type="bibr" target="#b7">[8]</ref>, <ref type="bibr" target="#b9">[10]</ref>. However, these methods are not used for reducing the total cost to realize the journeys. The total cost includes the cost to drive the vehicle to the start location of each journey and the cost to return the vehicle to its original location. A heuristic solution is proposed to schedule journeys to public vehicles within a short distance, e.g., a city, in order to have big sharing rate within short scheduling time <ref type="bibr" target="#b10">[11]</ref>. However, this solution does not address the long-distance vehicle sharing and does not consider the cost to return the vehicles to the original location. It also directly schedules journeys to vehicles without generating paths. In addition, some approaches have other objectives than the total cost, e.g., reducing the number of buses <ref type="bibr" target="#b12">[13]</ref>, maximizing the number of bus riders <ref type="bibr" target="#b13">[14]</ref>, improving the utilization efficiency of buses <ref type="bibr" target="#b14">[15]</ref>, or optimizing the traffic based on behavior prediction <ref type="bibr" target="#b15">[16]</ref>, <ref type="bibr" target="#b16">[17]</ref>.</p><p>In the case of long-distance journeys, the cost of vehicles from different agencies or countries is different. Thus, the cost of different scheduling plans is different. In addition, the cost to return the vehicle may be significant. As a result, it is critical to share a rented vehicle for a long time in order to reduce the cost using a scheduling algorithm. In the case of short distance journeys, the vehicles are generally within the same city. Thus, the cost of different vehicles is generally similar. In addition, the cost to return the vehicle may be negligible. In this case, there is no need to rent a vehicle for a long time. Thus, the problem of long-distance vehicle sharing is different from that of short-distance.</p><p>Scheduling vehicles to journeys is similar to the scheduling of parallel tasks in a distributed system, which is an NP-hard problem <ref type="bibr" target="#b17">[18]</ref>. The vehicles resemble the distributed servers while each journey corresponds to a task to be scheduled. There are many algorithms to schedule tasks in distributed systems, e.g., Opportunistic Load Balancing (OLB) <ref type="bibr" target="#b18">[19]</ref>, Minimum Completion Time (MCT) <ref type="bibr" target="#b18">[19]</ref>, Data-Intensive Multi-site task scheduling (DIM) <ref type="bibr" target="#b14">[15]</ref> and Heterogeneous Earliest Finish Time (HEFT) <ref type="bibr" target="#b19">[20]</ref>. After adapting them to the scheduling process of vehicles, they can be described as follows.</p><p>OLB randomly selects an available or an earliest available vehicle for a journey while MCT schedules a journey to the vehicle that can finish its previous journey first with the consideration of the time to move from its last place to the start point of the journey. DIM first schedules the journeys to the vehicle that has the same place as the start point of the journey. Then, it balances the workload in each vehicle in order to achieve load balancing and reduce the overall execution cost. HEFT gives the priority to each journey according to the dependencies between journeys and the distance of the journey, i.e., the distance between the start location and the end location of the journey. Then, it schedules the journeys with the highest priority to the vehicle that can finish the journey first. However, the aforementioned scheduling algorithms do not take the cost of moving the vehicles from one place to the start location of a journey or the cost of returning the vehicle to its original location into consideration, which is critical to vehicle sharing. The ActGreedy scheduling algorithm <ref type="bibr" target="#b11">[12]</ref> can be used to efficiently schedule the journeys to vehicles for reducing the cost based on a cost model. However, it does not consider grouping different journeys into paths in order to reduce the total cost to realize all the journeys.</p><p>The problem we address can be formulated as the Mixed-Integer Linear Program (MILP) problem as explained in III-E. Although the B&amp;B method <ref type="bibr" target="#b20">[21]</ref> can provide an optimal solution for the MILP problem, the complexity of B&amp;B can be exponential <ref type="bibr" target="#b21">[22]</ref>, which is unacceptable. In our work, our proposed two-phase approach first generates paths and then schedules paths to different vehicles. A basic approach to generating paths is to encapsulate each journey as a path. However, this approach cannot optimize the combination of different journeys to reduce cost. A-star is an efficient algorithm to generate a shortest path between two points <ref type="bibr" target="#b22">[23]</ref>. However, it lacks the sensibility of the total cost of the generated path. We propose a greedy approach to generate a path, which corresponds to the minimal total cost based on a cost model. Inspired by <ref type="bibr" target="#b7">[8]</ref>, we propose the adjustment of journeys while meeting the time requirements of the journeys in order to reduce the total cost. In addition, there are different scheduling algorithms to match each path to different vehicles. A basic approach for path scheduling is to randomly select a vehicle for each path. Based on the location of the vehicle, a second approach can be to schedule the path to the bus, which has the nearest location to the start place of the path. This approach can reduce the cost to drive the vehicle from its original location to the start location of the path. In addition, a path can also be scheduled to the available vehicle that has the lowest renting cost. However, this approach does not consider the total cost to realize the whole paths. In this paper, we propose a greedy approach, which selects the vehicle that corresponds to the minimum cost to realize the generated paths.</p><p>When vehicle utilization is high, the corresponding scheduling plan typically leads to journey delay problems. A delay on one journey can cascade through the schedule, delaying all subsequent journeys on that path, and if all vehicles are in use there are no spares in case of breakdowns, crashes, or severe delays. A common strategy to deal with it is to have some buffer time between journeys and paths <ref type="bibr" target="#b23">[24]</ref> while the buffer may cause more cost <ref type="bibr" target="#b24">[25]</ref>. In our cost model, we can set the rest time (see details in Formula 10) longer to address the journey delay. As the execution time of our algorithm (RNO or SNO) is very short, we can re-execute the scheduling algorithm when there is an important delay. And then, we dynamically change the scheduling plan based on the new results of re-execution. In addition, we can assign a new vehicle to the impacted path without changing other scheduling plans of other paths <ref type="bibr" target="#b25">[26]</ref>. Note that the last two strategies can be also used in a railway system: a train that is late has impact on other trains (because of connections) and the schedule needs to be adjusted.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>III. PROBLEM DEFINITION</head><p>In this section, we define some basic concepts, present the time constraints and give a motivating example. Then, we propose a cost model to estimate the cost corresponding to a scheduling plan and finally formulate the problem we address in this paper.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Notations and Definitions</head><p>We first introduce some important terms, e.g., order, journey and journey scheduling.</p><p>Let us assume that there are multiple requirements from travellers, denoted by orders, and diverse vehicles to be used to achieve these orders. An order represents that a group of travellers wants to travel to different locations. We assume that the number of travellers in each group is smaller than a limit, e.g., 20 travellers, so that one vehicle is able to pick up all the travellers. If an order has more travellers than the limit, the order can be split into multiple orders and the number of travellers in each split order is no more than the limit. An order contains multiple journeys. A journey represents the smallest unit of travel, which should be realized by a vehicle to transport a group of travellers from a start location to an end location with a time duration defined by the start time and end time of the journey. The time period of the start time and end time should be long enough for a vehicle to travel from the start location to the end location. The start time of a journey can be postponed or the end time can be brought forward, i.e., the group of travellers arrive at the end location before the original end time. A vehicle has an original location, which means that the vehicle is retrieved from that location and should be finally returned back to it. The cost of using a vehicle includes renting, driving without passengers and driving with passengers. The cost of renting the vehicle is per day. The cost to drive without passengers is the cost to drive the vehicle to the start location of each journey or the cost to return the vehicle to its original location. The cost to drive with passengers is the cost to transport the travellers from the start location to the end location defined in the journey. When the vehicle is at its original location, the cost to drive without passengers is null. The vehicles belong to different types, and different types correspond to different costs.</p><p>A vehicle can realize several journeys from different orders without being returned, and thus the vehicle can realize several paths in order to realize the related journeys. As defined in Section I, a path <ref type="bibr" target="#b10">[11]</ref> is a combination of successive journeys to be scheduled as a unit to a vehicle. All the journeys of a path are realized by a vehicle in a sequential manner without returning the vehicle back to its original location. At the end of each path, the vehicle should be returned back to its original location. In addition, a vehicle can realize multiple paths sequentially. For instance, after it is returned after realizing all the journeys in a path, a vehicle can start realizing the journeys of another path.</p><p>Journey scheduling is the process that maps each journey to a vehicle, which generates a scheduling plan. The time to generate a scheduling plan is called scheduling time. A scheduling plan defines which vehicle will realize which journey and whether the vehicle is returned back to its original location after realizing the journey.</p><p>We summarize the symbols used in this paper in Table <ref type="table" target="#tab_0">I</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Time Constraints</head><p>A scheduling plan should meet three time constraints.</p><p>1) The first one (Formula 1) is that different scheduled journeys should not have overlapping time periods if they are assigned to the same vehicle. For instance, journey j i is scheduled to vehicle v l . Then, the start time stj k and end time etj k of another journey j k that is scheduled to vehicle v l should meet the following constraint: stj i is later than etj k or etj i is earlier than stj k , which is defined in Formula 1 with "&gt;" representing later than and "&lt;" representing earlier than.</p><formula xml:id="formula_0">∀ two journeys ji ∈ J l , j k ∈ J l , stji &gt; etj k or etji &lt; stj k (1)</formula><p>2) The second time constraint (Formula 2) is that the intervals of any two successive journeys in the same path should be long enough to move the vehicle from the end The amount of time between t 1 and t 2 loc i A location with the index i location of the former journey (j i ) to the start location of the later journey (j k ). Formula 2 ensures that there is enough time between two journeys, e.g., journeys j i and j k , in the same path to drive the vehicle from the end location and the end time of journey j i to the start location of journey j k before the start time of journey j k . In Formulas 2 and 3, function T ime represents the amount of time that it takes to drive the vehicle from one location to another.</p><p>∀ two successive journeys ji, j k ∈ path, stj k -etji &gt; T ime(eli, sl k )</p><p>3) The third time constraint (Formula 3) is that the intervals of any two successive paths scheduled to the same vehicle should be long enough to return the vehicle from the end location of the former path to its original location and to drive the vehicle from its original location to the start location of the following path.</p><p>∀ two successive paths pr, pu ∈ P l , stpu -etpr &gt; T ime(elpr, ol l ) + T ime(ol l , slpu)</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C. A Motivating Example</head><p>Let us assume that there are m vehicles distributed at different locations, n journeys ordered by travellers, and a scheduling plan. When a set of journeys is scheduled to a vehicle, the scheduled journeys and corresponding paths should meet the time constraints given in Section III-B. The vehicle should drive the travellers from the start location to the end location of each journey. We assume that a vehicle is capable of transporting the travellers from the start location to the end location within the required time of each journey. A path starts from an earliest journey that does not need to return the vehicle and ends at a journey that needs to return the vehicle back to its original location. The vehicle is driven back to its original location after realizing the last journey in a path. The last journey is the journey that has the latest end time in all journeys of the path. Afterwards, the vehicle continues realizing the following paths until all its scheduled paths are realized.</p><p>The total cost of a vehicle is the cost to realize all the paths. The cost to realize a path is the cost of each journey and that of returning the vehicle to its original location (when the vehicle is rented for a short time, e.g., one day, there is some extra cost incurred for returning the vehicle at a different location than the original location <ref type="bibr" target="#b26">[27]</ref>, <ref type="bibr" target="#b27">[28]</ref>). The cost corresponding to a journey includes the cost to drive the vehicle to the start location of the journey and the cost to transport the travellers from the start location to the end location of the journey. The time to rent a vehicle is counted from the time when the vehicle starts being driven to the start location of the first journey in the path to the time when the vehicle is returned back to its original location. The first journey is the journey that has the earliest start time in all journeys of the path. The cost to return the vehicle to its original location can be ignored when the renting time is longer than a limit, e.g., 3 months (vehicle agencies can offer a discount on the price of returning vehicles when the renting time is longer than a limit, because they earn enough money). The vehicles of different types have different original locations and may have different costs to move from one location to another.</p><p>Different scheduling plans can incur different costs. In this paper, we address the problem of how to efficiently generate a scheduling plan in order to reduce the total cost. Let us assume that there are three vehicles distributed at Amsterdam (vehicle A), Brussels (vehicle B) and Calais (vehicle C) as shown in Figure <ref type="figure">1</ref>. If we do not consider the Cost to Return vehicles to their Original Location (CROL), then we could schedule journey 1 to vehicle A, journey 2 to vehicle B and journey 3 to vehicle C (scheduling plan sp 1 ). In this case, there will be the cost to return vehicle A back to Amsterdam, vehicle B back to Brussels and Vehicle C back to Calais, in reality. If we schedule the three journeys with time constraints and CROL, e.g., journeys 1, 2, 3, to the vehicle at Amsterdam (vehicle A) (scheduling plan sp 2 ), there will not be the cost to return the vehicle back to Amsterdam. It is obvious that sp 2 is better than sp 1 as sp 2 reduces the cost to return vehicles in reality. In fact, reusing vehicle A for journeys 2 and 3 is transforming the cost to return vehicle A after journey 1 to the cost to realize journeys 2 and 3. In this paper, we propose a twophase journey scheduling approach to generate a scheduling plan similar to sp 2 in order to reduce the total cost.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>D. Cost Model</head><p>The cost of all journeys can be calculated using Formula 4, where the total cost of all orders is composed of the cost of each vehicle with the scheduled journeys.</p><formula xml:id="formula_3">T otalCost(SP ) = v l ∈V Cost l (SP )<label>(4)</label></formula><p>In Formula 4, SP represents a scheduling plan, which is defined by a matrix of scheduling decision variables, i.e., a matrix of sp i,l . T otalCost(SP ) represents the cost of the scheduling plan SP . Cost l (SP ) represents the cost of vehicle v l according to the scheduling plan SP . j → v represents that vehicle v is assigned to journey j. The decision variable sp i,l is defined as</p><formula xml:id="formula_4">sp i,l =    1, if ji → v l with returning v l -1, if ji → v l without returning v l 0, if ji is not scheduled to v l (5)</formula><p>The total cost (Formula 6) of a vehicle is composed of the total cost of all the paths of the vehicle. In Formula 6, P athCost r,l (SP ) represents the total cost to realize Path p r using vehicle v l according to scheduling plan SP .</p><formula xml:id="formula_5">Cost l (SP ) = pr ∈P l P athCost r,l (SP ) (6)</formula><p>1) Cost of A Path: The total cost of a path (Formula 7) is composed of the cost to realize all the scheduled journeys, the time cost to use the vehicle for each path and the cost to return the vehicle from the end location of the last journey to its original location. In Formula 7, ji∈pr vi∈V journeyCost i,l * |sp i,l | represents the cost to realize all the journeys in p r according to SP . journeyCost i,l represents the cost to realize j i using v l . If j i is scheduled to v l , |sp i,l | is 1. T imeCost r,l (SP ) represents the renting cost to use the vehicle for the path. The renting time starts from the time to drive the vehicle to the start location of the first journey of the path and ends at the time when the vehicle is returned to its original location. T imeCost r,l (SP ) can be calculated based on Formula 11. ReturnCost r,l (SP ) represents the cost to return the vehicle from the end location of its last scheduled journey in p r to the original location of v l . When the renting time of a vehicle for the path is longer than a limit, ReturnCost r,l (SP ) can be ignored and the total cost of a path can be calculated based on Formula 8. P athCost r,l (SP ) =</p><formula xml:id="formula_6">j i ∈pr v l ∈V journeyCost i,l * |sp i,l | + T imeCost r,l (SP ) + ReturnCost r,l (SP )<label>(7)</label></formula><p>P athCost r,l (SP ) =</p><formula xml:id="formula_7">j i ∈pr v i ∈V journeyCost i,l * |sp i,l | + T imeCost r,l (SP ) (8)</formula><p>2) Cost of A Journey: The cost to realize a journey (Formula 9) is composed of the cost to drive the vehicle to the start location of the journey and the cost to drive the travellers from the start location to the end location of the journey. In Formula 9, journeyCost i,l represents the cost to realize the journey j i using vehicle v l . idleDrivingCost l represents the cost to drive the vehicle without passengers per time period, e.g., hour. T ime(Loc(v l ), slj i ) represents the time to drive the vehicle to the start location of a journey. Loc(v l ) represents the location of vehicle v l . The location of the vehicle is determined by whether j i is the first journey in a path. If it is the first journey, the location of vehicle v l is the original location of v l . Otherwise, the location is the end location of the previous journey that is scheduled to v l . This can be calculated based on SP . drivingCost l represents the cost to drive the vehicle with a group of passengers per time period, i.e., hour. T ime(slj i , elj i ) represents the time to drive the vehicle with the group of passengers from the start location of j i to the end location of j i , which can be calculated based on Formula 10.</p><formula xml:id="formula_8">journeyCost i,l = idleDrivingCost l * T ime(Loc(v l ), slji) + drivingCost l * T ime(slji, elji)<label>(9)</label></formula><p>In Formula 10, Distance(loc i , loc j ) represents the distance to drive vehicle v from one location to another. averageSpeed is configured by the user of the scheduling algorithm. The calculation of the time considers that the vehicle can be driven in the daily time and that the driver should have a rest every three hours. This is applied in the AdaptT ime function of Formula 10. In addition, we assume that there is always an available driver to drive the vehicle according to a scheduling plan. The distance between two locations can be calculated based on Baidu maps <ref type="bibr" target="#b28">[29]</ref>, Google maps <ref type="bibr" target="#b29">[30]</ref> or formulas of orthodromic distance <ref type="bibr" target="#b30">[31]</ref>, which is outside of the scope of this paper.</p><formula xml:id="formula_9">T ime(loci, locj) = AdaptT ime( Distance(loci, locj) averageSpeed )<label>(10)</label></formula><p>3) Renting Cost of A Path: The renting cost of a path is calculated based on Formula 11. rentingCost l represents the cost to rent v l per day. P athT ime(p r ) represents the time of path p r , which is calculated based on Formula 12 or 13.</p><p>T imeCost r,l (SP ) = rentingCost l * P athT ime(pr) <ref type="bibr" target="#b10">(11)</ref> Formula 12 represents the time of a path, which is composed of the time for the journeys in the path, the time to drive the vehicle to the start location of the first journey and the time to return the vehicle. The time for the journeys in the paths starts from the start time of the first journey, e.g., j i , to the end time of the last journey, e.g., j k . The time to drive the vehicle to the start location of the first journey and the time to return the vehicle can be calculated based on Formula 10. When the renting time for the journeys (etj k -stj i + T ime(ol l , slj i )) is longer than a time limit, e.g., 3 months, the time to return the vehicle can be ignored and the time of a path can be calculated based on Formula 13.</p><p>P athT ime(pr) = etj k -stji + T ime(ol l , slji)</p><formula xml:id="formula_10">+ T ime(elj k , ol l )<label>(12)</label></formula><p>P athT ime(pr) = etj k -stji + T ime(ol l , slji)</p><p>4) Cost to Return: The cost to drive the vehicle from the end location of the last journey of a path to its original location is calculated based on Formula 14. ReturnCost r,l (SP ) represents the cost to drive the vehicle from its end location of the last journey of path p r to its original location. In Formulas 14 and 9, idleDrivingCost l represents the cost to drive Vehicle v l without passengers per time period, e.g., hour. T ime(elp r , ol l ) represents the time to drive v l from the end location of p r to its original location. The end location of p r is the end location of the last journey in p r , which can be calculated based on SP . T ime(elp r , ol l ) can be calculated based on Formula 10.</p><p>ReturnCost r,l (SP ) = IdleDrivingCost l * T ime(elpr, ol l )</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>E. Problem Formulation</head><p>The scheduling problem we address in this paper is how to schedule each journey to an available vehicle in order to minimize the total cost for all journeys. The problem is formulated as: how to calculate a decision variable matrix SP in order to min S.T.</p><p>T otalCost(SP ) s.t.</p><p>(1), ( <ref type="formula" target="#formula_1">2</ref>), ( <ref type="formula" target="#formula_2">3</ref>)</p><formula xml:id="formula_13">sp i,l ∈ {1, -1, 0}, ∀sp i,l ∈ SP<label>(15)</label></formula><p>We call this problem the original scheduling problem. Each decision variable contains three possible choices. The size of the search space of this problem is very large. We can reduce this search space by decomposing the problem into two sub-problems, i.e., the decomposed problem. The first sub-problem, i.e., path generation problem, is how to group the journeys in a small number of paths in order to minimize the cost of all journeys. The second problem, i.e., scheduling problem, is how to schedule the paths to vehicles in order to minimize the total cost.</p><p>1) Path Generation Problem: The first sub-problem is how to calculate a path generation plan in order to achieve the objective defined in Formula 16. T otalCost(P GP ) represents the total cost to realize the journeys in a set of paths, which does not contain the cost to return back the vehicles to the original locations. P GP represents a path generation plan. The time cost to use the vehicle from the start time of a path to the end time of a path is calculated based on Formula 18. min S.T.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>T otalCost(P GP )</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>s.t.</head><p>(1), ( <ref type="formula" target="#formula_1">2</ref>) pgpi,r ∈ {0, 1}, ∀ pgpi,r ∈ P GP</p><p>where P GP is defined by a matrix of binary decision variables pgp i,r , and pgp i,r is defined in Formula 17.</p><p>pgpi,r = 1 if ji ∈ pr 0 otherwise</p><p>P GP can be represented by a set of paths P . The total cost of P is calculated based on Formula 18. journeyCost i,l represents the cost to realize a journey. We assume there is a vehicle v l , whose idleDrivingCost l , drivingCost l and rentingCost l is the average cost of all the available vehicles. Although v l is a vehicle with fixed parameters, we keep index l in order to have consistency with Formula 9. P athT ime(p r ) represents the time of renting the vehicle, which is calculated based on Formula 13.</p><p>T otalCost(P GP ) = pr ∈P ( j i ∈pr journeyCost i,l * pgpi,r</p><formula xml:id="formula_16">+ rentingCost l * P athT ime(pr)) (18)</formula><p>2) Path Scheduling Problem: The second sub-problem is how to schedule each path to a vehicle in order to minimize the total cost, which is given in Formula 19. P SP represents the scheduling plan of paths, which is defined by a matrix of binary scheduling decision variables psp r,l defined in Formula 20. T otalCost(P SP, P GP ) represents the total cost of all paths, which is calculated based on Formula 21. min S.T.</p><p>T otalCost(P SP, P GP ) s.t.</p><p>(3) psp r,l ∈ {0, 1}, ∀ pspr, l ∈ P SP</p><p>The binary scheduling decision variables psp r,l are defined as follows. As defined in Formula 21, T otalCost(P SP, P GP ) is the sum of the costs to realize each path.</p><formula xml:id="formula_18">psp r,l = 1 if pr is scheduled to v l 0 otherwise<label>(20)</label></formula><p>T otalCost(P SP, P GP ) = pr ∈P v l ∈V P athCost r,l (getSP (P SP, P GP )) * psp r,l <ref type="bibr" target="#b20">(21)</ref> where P athCost r,l (getSP (P SP, P GP )) represents the cost to realize p r using v l . The function getSP (P SP, P GP ) to infer the scheduling plan SP used in Formula 7 or 8 is based on Formula 22. Then, the cost of each path can be calculated based on Formula 7 or 8.</p><formula xml:id="formula_19">sp i,l =         </formula><p>1, if pgpi,r = 1 and psp r,l = 1 and ji is not the last journey in pr -1, if pgpi,r = 1 and psp r,l = 1 and ji is the last journey in pr 0, if pgpi,r = 0 or psp r,l = 0</p><p>These two sub-problems have a linear objective function and inequality constraints. Some of the variables are binary, e.g., path generation plan and path scheduling plan, while the rest are real. Thus, the two sub-problems are Mixed-Integer Linear Program (MILP) problems <ref type="bibr" target="#b31">[32]</ref>. These problems are not easy to solve since the search space is complex and this space increases exponentially with the number of journeys, the number of vehicles and the number of paths.</p><p>3) Search Space Analysis: Let us assume that there are n journeys, w vehicles and m paths. The size of the search space of the original scheduling problem is 3 w * n . The size of the search space of the decomposed problem is 2 w * m * m n , where 2 w * m is the size of the search space to schedule paths to vehicles and m n is the size of the search space to generate paths. In most cases, e.g., the cases except Baseline presented in Section V, the size of the search space of the original scheduling problem is bigger than that of the decomposed problem according to Lemma III.1.</p><p>Lemma III.1. The search space of the decomposed problem is smaller than that of the original scheduling problem when m &lt;= n and m &lt; (3/2) w .</p><p>Proof: When m &lt; (3/2) w , we have 2 w * m &lt; 3 w . Then, (2 w * m) n &lt; (3 w ) n , which equals to 2 w * n * m n &lt; 3 w * n . When m &lt;= n, we have 2 w * m &lt;= 2 w * n . Thus, 2 w * m * m n &lt; 3 w * n .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>IV. TWO-PHASE JOURNEY SCHEDULING</head><p>We propose two-phase journey scheduling to address the journey scheduling problem defined in Formula 15. This approach first groups the journeys to generate paths as shown in Figure <ref type="figure" target="#fig_0">2</ref> and then schedules the generated paths to vehicles as shown in Figure <ref type="figure" target="#fig_1">3</ref>. Grouping the journeys to paths addresses the first sub-problem defined in Formula 16 and scheduling the generated paths to vehicles addresses the second sub-problem defined in Formula 19. Algorithm 1 describes the process of two-phase journey scheduling. In this algorithm, Line 1 first generates paths based on the journeys while achieving the minimum total cost. When grouping the journeys, we use an average cost of all the buses to calculate the cost of each path. Line 2 schedules different paths to different vehicles in order to achieve a small total cost. Algorithm 1 Journey scheduling Input: journeys: a set of journeys; V : a set of vehicles Output: SP : a scheduling plan that assigns each journey to a vehicle paths ← GenerateP aths(journeys) SP ← ScheduleP athsT oV ehicles(paths, V )</p><p>We can use different methods to generate paths and schedule paths to vehicles, which we present in this section. The calculation of cost is based on Formula 21 and the cost model presented in Section III-D.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Path Generation</head><p>In this section, we adapt A-Star <ref type="bibr" target="#b32">[33]</ref> for path generation and propose two methods to generate paths, i.e., Simple Near Optimal (SNO) and Reset Near Optimal (RNO). In addition, we take a baseline method to compare our proposed approaches. The baseline path generation algorithm simply encapsulates each journey to a path.</p><p>1) Adapted A-Star: Inspired by <ref type="bibr" target="#b32">[33]</ref>, the A-star algorithm can be used to search for the shortest path from a start point to an end point. We can adapt the A-star algorithm to generate paths based on a set of journeys, as shown in Algorithm 2.</p><p>The goal of our Adapted A-Star is to generate paths in order to reduce the total cost. Algorithm 2 has two loops. Lines 2-16 generate all the possible paths based on the journeys. Line 4 gets the earliest start time in the journeys that are not added to generated paths, i.e., the earliest start time in all the journeys. Line 5 gets the start location corresponding to the earliest start time in Line 4. Lines 6-14 add all the journeys to a path. Line 7 selects the suitable journey that requires the smallest additional cost to be added to the path according to Formula 18. In addition, the selected journey should meet the second time constraint defined in Formula 2 (see details in Section III-A). The start time of the selected journey should be late enough so that there is enough time to drive the vehicle from the end location of the last journey in the path to the start location of the selected journey before the start time of the selected journey. The time constraint is verified in the getSmallestCost function. If the interval between the end time of the path and the start time of the selected journey is longer than three days, we stop adding new journeys (Lines 8-10). Line 11 adds the journey to the path. Lines 12-13 update the end time and the start location of the path.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Algorithm 2 Adapted A-Star</head><p>Input: J: a set of journeys Output: P : a set of paths 1: P ← ∅ 2: while not all journeys in J are added in a path do 3:</p><p>path ← ∅ 4:</p><p>endT ime = earliestStartT ime(J)</p><formula xml:id="formula_21">5: startLocation = f irstStartLocation(J) 6:</formula><p>while at least a journey in J can be added to path do 7:</p><p>journeyT oAdd ← getSmallestCost(endT ime, startLocation, J)</p><formula xml:id="formula_22">8:</formula><p>if Interval(journeyT oAdd, path) &gt; limit then P ← P ∪ path 16: end while 2) Near Optimal Algorithm: Inspired by the ActGreedy scheduling algorithm <ref type="bibr" target="#b11">[12]</ref>, we propose a near optimal algorithm to generate a set of paths, which is presented in Algorithm 3. The idea of this algorithm is to reuse a vehicle when there is a journey, whose start location is in the surrounding of the destination of the previous journey in the near future, in order to transform the cost to return vehicles to the cost of realizing other journeys so that the total cost is reduced.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Algorithm 3 Near Optimal Algorithm</head><p>Input: J: a set of journeys Output: P : a set of paths 1: P ← ∅ 2: sortAccordingT oStartT ime(J) 3: for Each journey in J do 4:</p><p>path ← getP athW ithSmallestCost(P, journey)</p><formula xml:id="formula_23">5:</formula><p>path ← path ∪ journey 6: end for 7: for Each path in P do for Each journey in path do if The cost can be reduced by splitting the path then end for 13: end for</p><p>In Algorithm 3, we first sort the journeys according to their start time (Line 2). Then, for each journey, we assign it a path that corresponds to the smallest additional cost, i.e., the difference between the total cost after adding the journey and that before adding the journey (Lines 3-6). In Line 4, if there is no available path in P to add journey journey, an empty path is created and returned. In addition, the newly created path is put into P in the getP athW ithSmallestCost function. Then, for each path, we split it into multiple paths in order to reduce the total cost (Lines 8-12) by reducing the useless renting time. The journeys in a path are in ascending order of start time, i.e., path = {j 1 , j 2 ,..., j i , j i+1 , ..., j n } with the start time of j i earlier than that of j i+1 . When splitting a path at j i (Function split), the path is split into path 1 and path 2 with path 1 = {j 1 , j 2 ,..., j i } and path 2 = {j i+1 , ..., j n }. path 1 is returned and put into P and the original path (path) is replaced by path 2 in the merge function (Line 10).</p><p>While adding a journey to the path (Line 4), we have two situations. The first situation is that the start time and the end time of the journey cannot be modified. In this situation, we directly add the journey to the path. We call this method Simple Near Optimal (SNO). The second situation is that we can adjust the start time and the end time of the journey J i in order to reduce the total cost for the following journeys. We call this adjustment method Reset Near Optimal (RNO). RNO can postpone the start time or bring the end time forward, i.e., stj i &gt;= stj i or etj i &lt;= etj i , in order to reduce the cost according to a temporary path generation plan. Note that as the original time period includes the adjusted time period for a journey, the travellers should value the adjusted journey times as highly as the original one. After adjustment, the journey should be able to be realized within the start time and the end time from the start location to the end location as defined in Formula 23. In Formula 23, etj i -stj i represents the time period of J i , after adjustment, and T ime(slj i , elj i ) represents the time to drive the travellers from the start location of the journey to the end location of the journey, which can be calculated based on Formula 10.</p><formula xml:id="formula_24">etj i -stj i ≥ T ime(slji, elji)<label>(23)</label></formula><p>3) Path Generation Algorithm Complexity: Let n denote the number of journeys. The complexity of Baseline is O(n). The complexity of Adapted A-Star is O(n 2 ) (the complexity of Function getSmallestCost is O(n) as it needs to iterate on all the remaining journeys). This complexity is much bigger than the baseline approach and corresponds to long scheduling time. The complexity of SNO and RNO depends on the sorting algorithm, which can be O(n log n) using TimSort <ref type="bibr" target="#b33">[34]</ref>, <ref type="bibr" target="#b34">[35]</ref>. This complexity is much smaller than that of Adapted A-Star and is slightly bigger than that of Baseline while it corresponds to small total cost as presented in Section V.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Path Scheduling</head><p>Once the paths are generated, they can be scheduled to different vehicles with small total cost. In this section, we present three basic methods, i.e., Random <ref type="bibr" target="#b35">[36]</ref>, Nearest <ref type="bibr" target="#b8">[9]</ref> and Economic <ref type="bibr" target="#b8">[9]</ref>, and propose one greedy schedule method. When a path is scheduled to a vehicle, all the journeys in the path are scheduled to the vehicle. In addition, when a path is scheduled to a vehicle, the vehicle is able to take all the travellers in each journey of the order. The Random method schedules each path to a random available vehicle after sorting the paths according to their total cost based on an average cost of all the vehicles, which is similar to OLB. The Nearest method schedules each path to a vehicle that has the nearest location to its start location after sorting. This method tries to reduce the cost to drive the scheduled vehicle to its start location. The Economic method schedules the path to the vehicle that has the smallest renting cost. This method intends to reduce the cost for long paths. However, it does not consider the overall total cost.</p><p>We propose a greedy path scheduling (Greedy) algorithm to schedule each path to a vehicle in order to reduce the total cost, which is described in Algorithm 4. Line 2 sorts the paths according to their total cost based on an average cost of all the vehicles. Then, for each path, Line 4 chooses the vehicle that takes the smallest total cost to realize the path according to Formula 21. Algorithm 4 Greedy Path Scheduling Input: P : a set of paths; V : a set of vehicles Output: P SP : a path scheduling plan 1: psp r,l = 0 f or ∀ psp r,l ∈ P SP 2: sortAccordingT oT otalCost(P ) 3: for Each p r in P do 4:</p><formula xml:id="formula_25">v l ← getV ehicleW ithSmallestCost(V, p r ) 5:</formula><p>psp r,l = 1 6: end for The complexity of Random is O(m), with m representing the number of paths. The complexity of Nearest and Economic is the same, i.e., O(m * w) with w representing the number of types of vehicles. Although the complexity of Nearest and Economic is bigger than Random, they can generate better scheduling plans as presented in Section V. The complexity of Greedy is O(m log m) (when log m is bigger than w) or O(m * w) (when log m is smaller than w), which is the same (for O(m * w)) or slightly bigger (for O(m log m)) than the other scheduling methods while generating a better scheduling plan with small total cost (see Section V for details).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>V. EXPERIMENTAL EVALUATION</head><p>In this section, we present an experimental evaluation of our approach. We first present the experimental setup. Then, we show the experiments. Finally, we summarize the main experimental results.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Experimental Setup</head><p>The vehicles and the journey information is synthetically generated based on real-world data from a bus sharing startup, i.e., TUDING. We consider a dataset with 649 journeys and the vehicles originally distributed at five locations, i.e., Porto, Lodz, Warsaw, Athens and Paris. There are at most 46 journeys that cover the same time period. This means that at least 46 vehicles can realize all the 649 journeys.</p><p>For setting the parameters of the vehicles, we consider three cases, i.e., Average (A), Limited (L) and General (G). In case A, vehicles of different types have different renting costs, original locations and numbers of vehicles while other parameters, i.e., idle cost and driving cost, are the same. In case L, vehicles of different types have different renting costs and different original locations while other parameters, i.e., number of vehicles, idle cost and driving cost, are the same. In case G, vehicles differ in all the parameters, i.e., number of vehicles, location, idle cost and driving cost.</p><p>We implemented the algorithms in Java, i.e., Baseline, Adapted A-Star (AA-Star for short), SNO and RNO as path generation method; Random, Nearest, Economic and Greedy as path scheduling method. In addition, we implemented three one-phase algorithms, i.e., ActGreedy (1-Greedy) <ref type="bibr" target="#b11">[12]</ref>, Genetic <ref type="bibr" target="#b6">[7]</ref> and Brute force. 1-Greedy and Genetic are designed without the consideration of the cost to return vehicles while we implement our cost model in these two algorithms.</p><p>The experiments are carried out in a workstation with Intel quad-core i7-3610QM CPU and 32GB RAM. We use the cost model presented in Section III-D to compute the total cost.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Experimental Results</head><p>In this section, we first present the experiments to show that our proposed approaches are near optimal. Then, we give the detailed results of executing the program with the 649 journeys in case A. Afterwards, we give the total cost, scheduling time and efficiency of the program execution in cases L and G.</p><p>1) Near Optimal: In order to show that the scheduling plans generated by our proposed methods are near optimal, we compare the total cost of SNO/Greedy and RNO/Greedy with the optimal scheduling plans generated by a brute force method without modifying start time and end time. As the execution time of the brute force method is very long, we only compare the results with up to 14 journeys and 1 vehicle of Types 1-5 and 2 vehicles of Type 6 as presented in Table <ref type="table" target="#tab_1">II</ref>. As shown in Figure <ref type="figure">4</ref>, RNO/Greedy can outperform the optimal scheduling plans without adjusting start time or end time. SNO/Greedy can generate the scheduling plans that perform as well as that of the optimal one, in many cases (42.9%). In all the cases, the difference of the total cost between SNO/Greedy and the optimal scheduling plan is less than 1.6%.</p><p>2) Average Case: In this section, we present the experiment results based on the parameters in Table <ref type="table" target="#tab_1">II</ref>. We show the total cost, scheduling time and average efficiency of different scheduled plans generated by different methods. When using RNO, 431 journeys have been forced to modify their start or end time with 339 modifications in start time and 431 modifications in end time. Fig. <ref type="figure">4</ref>: Comparison with optimal scheduling plans. The total cost calculated based on Formulas 21 is shown in Figure <ref type="figure">5a</ref>. Random has the highest total cost compared with the other three scheduling methods. The combination of our adapted and proposed methods, i.e., AA-Star and Greedy, SNO and Greedy and RNO and Greedy, significantly outperforms (by up to 24%, 26% and 62%, respectively) the combination of Baseline and Random. Our proposed scheduling method, i.e., Greedy, performs up to 19.0%, 19.4% and 5.4% better compared with Random, Nearest and Economic, respectively. This is expected as our scheduling methods consider the total cost to realize the journeys. AA-Star outperforms Baseline up to 17.6%. SNO and RNO perform better than AA-Star and much better than Baseline. While generating paths, AA-Star, SNO and RNO reduce the total cost. In addition, RNO can significantly reduce total cost compared with SNO since it can further adjust the start time and the end time of the journey in order to reduce total cost. As RNO and SNO optimize the generated paths based on total cost, which is different from the time interval between the scheduled journeys in AA-Star, RNO and SNO have smaller total cost compared with AA-Star. When the system is not able to modify the start or end time of journeys, SNO can be used, performing up to 20.7% and 3.8% better compared with Baseline and AA-Star in terms of total cost of the generated scheduling plan. When the system is able to modify the start and end time of journeys, RNO can be used, performing up to 58.8% and 50.4% better in terms of total cost of the generated scheduling plan compared with Baseline and AA-Star. The total cost of Baseline and Greedy is already smaller than that of 1-Greedy and Genetic. In addition, our proposed approaches, i.e., RNO/Greedy and SNO/Greedy, significantly outperform 1-Greedy (18.3% and 58.4%) and Genetic (20.9% and 59.7%), in terms of total cost.</p><p>Figure <ref type="figure">5b</ref> shows the number of generated paths. Since Baseline encapsulates each journey into a path, it yields the highest number of paths. By adapting the journeys according to the ongoing scheduling plan, RNO generates the smallest number of paths. AA-Star, SNO and RNO yield up to 60%, 71% and 84% fewer paths than Baseline.</p><p>Figure <ref type="figure">5c</ref> shows the total scheduling time, including the time for path generation and path scheduling. The scheduling time of 1-Greedy is acceptable (0.62 seconds) while the scheduling time of genetic is very long (more than 47 seconds). Figure <ref type="figure">5c</ref> shows that Baseline is much longer (up to 1.85, 13.25 and 16.1 times) than AA-Star, SNO and RNO, respectively. This is reasonable since Baseline generates more paths compared with the other methods. Although RNO takes time to reset the start or end time of journeys, it has shorter total scheduling time (up to 20%) since it generates fewer paths than SNO. The total scheduling time of Nearest and Economic is longer (up to 112% and 98%) than that of Random as they have slightly higher complexity. The total scheduling time of Greedy is longer than that of Random (up to 136%), Nearest (up to 60%) and Economic (45%) while its scheduling plan incurs the smallest total cost. Compared with the combination of Baseline/Random, the combination of SNO/Greedy and RNO/Greedy is respectively up to 77.3% and 78.7% better in terms of total scheduling time. The total scheduling time of Greedy with Baseline, SNO (up to 0.17s) and RNO (up to 0.16s) is less than 0.2 seconds, which is quite acceptable.</p><p>Figure <ref type="figure">5d</ref> shows the time to generate paths, i.e., path generation time, according to different approaches. AA-Star takes the longest time to generate paths as its complexity is the highest (see Section IV-A1). The path generation time of AA-Star is up to 5.3 and 5.1 times longer than SNO and RNO, respectively. Baseline has the shortest time to generate paths as it has the smallest complexity. Although the path generation time of AA-Star, SNO and RNO is much longer than Baseline, it is much less than 1s, which is quite acceptable.</p><p>Figure <ref type="figure">5e</ref> shows that the path scheduling time of Baseline is much longer than AA-Star (up to 19 times), SNO (up to 52 times) and RNO (up to 147 times) as Baseline schedules large number of paths. Figure <ref type="figure">5f</ref> zooms on the path scheduling time of AA-Star, SNO and RNO. As AA-Star generates more paths than SNO and RNO, it takes more time to schedule paths. RNO yields the smallest number of paths, and its scheduling time is the smallest among all path generation methods. As the complexity of Random is the smallest, it yields the smallest path scheduling time among all path scheduling methods. The path scheduling times of Nearest and Economic are similar. The scheduling time of Greedy is longer than Random (up to 11 times), Nearest (up to 3 times) and Economic (up to 4 times) as it has higher complexity. Furthermore, we analyse the average efficiency of different approaches. The efficiency of a scheduling plan is the average efficiency of all the vehicles, defined in Formula 24. The efficiency of a vehicle is the ratio between the driving time (drivingT ime(v l , SP )) and the total time of using the vehicle (T otalT ime(v l , SP )), as defined in Formula 25. In Formulas 25 24, the scheduling plan SP contains the path generation plan and the path scheduling plan. As defined in Formula 26, the driving time of a vehicle is the sum of the driving time of each scheduled journey. In Formula 26, T ime(slj i , elj i ) represents the time to drive the passengers for a journey, which can be calculated based on Formula 10. The total time of using a vehicle is the sum of the times of all the paths scheduled to it, which can be calculated based on Formula 27. In Formula 27, P athT ime(p r ) can be calculated using Formula 12.</p><formula xml:id="formula_26">ef f iciency(SP ) = v l ∈V ef f iciency(v l , SP ) getN umberOf V ehicles(SP ) (24) ef f iciency(v l , SP ) = drivingT ime(v l , SP ) T otalT ime(v l , SP )<label>(25)</label></formula><p>drivingT ime(v l , SP ) =</p><p>pr ∈P l j i ∈pr T ime(slji, elji)  </p><p>Figure <ref type="figure">6</ref> shows the efficiency of different scheduling approaches. The efficiency of 1-Greedy is much lower than other methods (less than 32%). The combination of Baseline and Greedy outperforms both 1-Greedy and Genetic. The efficiency of different path scheduling methods is almost similar (the difference is less than 8%) while it differs much for different path generation methods. Random corresponds to the least efficiency, as it does not have optimization in terms of total cost. Our proposed path generation methods, i.e., AA-Star, SNO and RNO, have higher efficiency (up to 6.2%, 7.4% and 79.5%) compared with Baseline. Note that RNO corresponds to the highest efficiency, as it optimizes the journeys according to the scheduling plan. Compared with the combination of Baseline/Random, the combination of SNO/Greedy and RNO/Greedy is up to 3.1% and 79.3% better, respectively.</p><p>3) Limited and General Cases: In this section, we present the results in cases L and G. In case L, the vehicles of different types only differ in the renting cost and location, as shown in Table <ref type="table" target="#tab_1">II</ref>. The parameters of the vehicles (e.g., the number of vehicles, the idle and the driving cost of different vehicles) are the same among different types of vehicles. They are set to 20, 5 and 10, respectively. Figure <ref type="figure">7a</ref> shows the combination of RNO/Greedy and SNO/Greedy outperforms the combination of Baseline/Random up to 46.6% and 69.8%, 1-Greedy (14.3% and 51.8%) and Genetic (37.5% and 64.9%) in terms of total cost. In addition, as shown in Figure <ref type="figure">7b</ref>, the scheduling time of RNO/Greedy and SNO/Greedy is up to 77.6% and 80.3%, respectively, smaller than Baseline/Random. The efficiency of RNO/Greedy and SNO/Greedy is respectively up to 40.2% and 141.7% higher than the combination of Baseline/Random, as shown in Figure <ref type="figure">7c</ref>. When using RNO, 431 journeys have been forced to modify their start or end time with 336 modifications in start time and 431 modifications in end time.</p><p>In case G, the vehicles of different types differ in number, idle cost and driving cost. The numbers of Types 1-6 are respectively 5, 10, 15, 20, 25, 30; the idle costs of Types 1-6 are respectively 3, 4, 5, 6, 7, 8; the driving costs of Types 1-6 are respectively 8, 9, 10, 11, 12, 13. Figure <ref type="figure">8a</ref> shows the combination of RNO/Greedy and SNO/Greedy outperforms the combination of Baseline/Random up to 43.9% and 68.4%, 1-Greedy (15.6% and 52.3%) and Genetic (39.5% and 65.8%) in terms of total cost. As shown in Figure <ref type="figure">8b</ref>, the scheduling time of RNO/Greedy and SNO/Greedy is up to 81.5% and 84.0%, respectively, smaller than Baseline/Random. The efficiency of RNO/Greedy and SNO/Greedy is up to 23.3% and 123.4%, respectively, higher than Baseline/Random, as shown in Figure <ref type="figure">8c</ref>. When using RNO, 431 journeys have been forced to modify their start or end time, where 339 modifications in start time and 431 modifications in end time. As we use average cost of all the available vehicles for the path generation, which is similar for cases A, L, and G, the numbers of journeys modified in RNO are similar. While generating paths, we calculate the total cost based on the average cost of all the vehicles, which is different from the cost of the scheduled vehicle of each journey. Thus, the final result may not be an optimal solution. However, the combination of SNO or RNO and Greedy can generate a near optimal scheduling plan (the difference is less than 1.6% compared with the brute force method), which significantly outperforms the baseline method and state of the art methods, i.e., 1-Greedy and Genetic, in terms of total cost, scheduling time and efficiency. Our proposed approach, i.e., the combination of SNO/Greedy and RNO/Greedy outperforms the combination of Baseline/Random in terms of total cost (up to 46.6% and 69.8% respectively), scheduling time (up to 81.5% and 84.0% respectively) and efficiency (up to 40.2% and 141.7% respectively).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>VI. CONCLUSION</head><p>Efficient scheduling approaches are promising to improve people's driving experience by reducing significantly the cost of using vehicles to realize travellers' orders. In this paper, we proposed a two-phase journey scheduling approach to generate scheduling plans while reducing total cost. This approach includes a cost model to calculate the total cost based on a scheduling plan, two path generation methods, i.e., SNO and RNO, and a greedy scheduling method. We evaluated our approach by comparing the proposed path generation methods to a baseline method and the scheduling method to three other methods, i.e., Random, Nearest and Economic. Our evaluation shows that our proposed path generation methods, i.e., SNO and RNO, outperform (up to 20.7% and 58.8%) Baseline in terms of total cost. In addition, Greedy performs (up to 19.0%) better than Random. The scheduling time of our approach is smaller than 2.5 seconds, which is acceptable. Our proposed path generation algorithms, i.e., SNO and RNO, correspond to higher efficiency (up to 7.4% and 79.5%) compared with Baseline. As a result, the combination of SNO/Greedy and RNO/Greedy significantly outperforms the combination of Baseline/Random in terms of total cost (up to 46.6% and 69.8% respectively), scheduling time (up to 81.5% and 84.0% respectively) and efficiency (up to 40.2%/141.7% respectively).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>VII. ACKNOWLEDGEMENT</head></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 2 :</head><label>2</label><figDesc>Fig. 2: Path generation. Journeys are combined to generate paths. Each journey belongs to only one path. The journeys in the same path can only be sequentially realized.</figDesc><graphic coords="8,55.44,56.07,238.11,85.04" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 3 :</head><label>3</label><figDesc>Fig. 3: Path scheduling. Each path is scheduled to a vehicle. The scheduled paths of the same vehicle should meet the time constraints presented in Section III-B.in Figure2and then schedules the generated paths to vehicles as shown in Figure3. Grouping the journeys to paths addresses the first sub-problem defined in Formula 16 and scheduling the generated paths to vehicles addresses the second sub-problem defined in Formula 19. Algorithm 1 describes the process of two-phase journey scheduling. In this algorithm, Line 1 first generates paths based on the journeys while achieving the minimum total cost. When grouping the journeys, we use an average cost of all the buses to calculate the cost of each path. Line 2 schedules different paths to different vehicles in order to achieve a small total cost. Algorithm 1 Journey scheduling</figDesc><graphic coords="8,318.45,56.07,238.10,70.29" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head></head><label></label><figDesc>path ← path ∪ journeyT oAdd 12:endT ime = endT ime(journeyT oAdd)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>10 :P</head><label>10</label><figDesc>← merge(P, split(path, journey))</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head></head><label></label><figDesc>The number of generated paths.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Fig. 5 :Fig. 6 :</head><label>56</label><figDesc>Fig. 5: Scheduling time for different approaches</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Fig. 7 :Fig. 8 :</head><label>78</label><figDesc>Fig. 7: Experimental results in limited case (L)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>TABLE I :</head><label>I</label><figDesc>Symbols used in our cost model. Symbol Meaning J Set of journeys (indexed by i or k) V Set of vehicles (indexed by l) P Set of paths (indexed by r or u) SP A scheduling plan defined by a n * m matrix sp i,l Scheduling decision for journey j i , vehicle v l End time of journey j i stp r Start time of path p r etp r End time of path p r J l Set of journeys scheduled to vehicle v l P l Set of paths scheduled to vehicle v l slj i Start location of journey j i elj i End location of journey j i ol l Original location of vehicle v l slp r Start location of path p r elp r End location of path p r t 2 -t 1</figDesc><table><row><cell>n</cell><cell>Number of journeys in J</cell></row><row><cell>w</cell><cell>Number of vehicles in V</cell></row><row><cell>m</cell><cell>Number of paths in P</cell></row><row><cell>stj i</cell><cell>Start time of journey j i</cell></row><row><cell>etj i</cell><cell></cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>TABLE II :</head><label>II</label><figDesc>Parameters in average case (A). Costs are in Euro. Number represents the number of vehicles. Cost represents the cost to rent a vehicle per day. Idle cost (ICost) represents the cost to drive the vehicle without passengers per hour. Driving cost (DCost) represents the cost to drive the vehicle with a group of passengers per hour in Euro.</figDesc><table><row><cell cols="6">Type Cost Location Number ICost DCost</cell></row><row><cell>1</cell><cell>350</cell><cell>Porto</cell><cell>2</cell><cell>5</cell><cell>10</cell></row><row><cell>2</cell><cell>370</cell><cell>Porto</cell><cell>2</cell><cell>5</cell><cell>10</cell></row><row><cell>3</cell><cell>300</cell><cell>Lodz</cell><cell>2</cell><cell>5</cell><cell>10</cell></row><row><cell>4</cell><cell>330</cell><cell>Warsaw</cell><cell>2</cell><cell>5</cell><cell>10</cell></row><row><cell>5</cell><cell>290</cell><cell>Athens</cell><cell>1</cell><cell>5</cell><cell>10</cell></row><row><cell>6</cell><cell>500</cell><cell>Paris</cell><cell>100</cell><cell>5</cell><cell>10</cell></row></table></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1" xml:id="foot_0"><p>We assume that a driver is always available for a vehicle. Under the given scheduling plan, we assign a driver to a vehicle. If the driver is not available for the whole path, more drivers can be assigned to the vehicle to ensure that this vehicle can be driven according to the scheduling plan. The cost of sending a driver to vehicle is out of the scope of the paper as this depends on the preference of the drivers.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="2" xml:id="foot_1"><p>https://www.tudingbus.com/</p></note>
		</body>
		<back>

			<div type="acknowledgement">
<div><p>We thank <rs type="person">Bo Hu</rs> from <rs type="affiliation">TUDING</rs> for his support and help with the experimental evaluation, and <rs type="person">Han Qiu</rs> from <rs type="affiliation">LTCI, Telecom Paris</rs> for fruitful discussions and useful comments. Some of the experiments in this paper were carried out on Baidu Data Federation Platform (Baidu Fed-Cube). For platform usage, please contact via {fedcube, shubang}@baidu.com. This work was supported in part by the <rs type="funder">Open Research Project of the State Key Laboratory of Industrial Control Technology, Zhejiang University, China</rs> under Grant <rs type="grantNumber">ICT20058</rs>, and in part by the <rs type="funder">Fundamental Research Funds for the Central Universities, China</rs> under Grant <rs type="grantNumber">2242020R10059</rs>.</p></div>
			</div>
			<listOrg type="funding">
				<org type="funding" xml:id="_xXxGFn8">
					<idno type="grant-number">ICT20058</idno>
				</org>
				<org type="funding" xml:id="_gjgFsuC">
					<idno type="grant-number">2242020R10059</idno>
				</org>
			</listOrg>
			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0" />			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">A survey of intelligent transportation systems</title>
		<author>
			<persName><forename type="first">S</forename><surname>An</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Shin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Int. Conf. on Computational Intelligence, Communication Systems and Networks (CICSYN)</title>
		<imprint>
			<date type="published" when="2011">2011</date>
			<biblScope unit="page" from="332" to="337" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">Status of the dedicated short-range communications technology and applications: Report to congress</title>
		<author>
			<persName><forename type="first">C</forename><surname>Bettisworth</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Burt</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Chachich</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Harrington</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Hassol</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Lamoureux</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Lafrance-Linden</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Maloney</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Perlman</surname></persName>
		</author>
		<idno>FHWA-JPO- 15-218</idno>
		<imprint/>
	</monogr>
	<note type="report_type">Tech. Report</note>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Optimization for dynamic ride-sharing: A review</title>
		<author>
			<persName><forename type="first">N</forename><surname>Agatz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Erera</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Savelsbergh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Wang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">European Journal of Operational Research</title>
		<imprint>
			<biblScope unit="volume">223</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="295" to="303" />
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Analysis of intercity bus markets on long distances in an established and a young market: The example of the u.s. and germany</title>
		<author>
			<persName><forename type="first">K</forename><surname>Augustin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Gerike</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">J M</forename><surname>Sanchez</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Ayala</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Research in Transportation Economics</title>
		<imprint>
			<biblScope unit="volume">48</biblScope>
			<biblScope unit="page" from="245" to="254" />
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Workshop synthesis: Surveys on long-distance travel and other rare events</title>
		<author>
			<persName><forename type="first">R</forename><surname>Gerike</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Schulz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Transportation Research Procedia</title>
		<imprint>
			<biblScope unit="volume">32</biblScope>
			<biblScope unit="page" from="535" to="541" />
			<date type="published" when="2018">2018</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Focusing on environmental pressures from long-distance transport</title>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">E</forename><surname>Agency</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Europe Environment Agency (EEA) Report</title>
		<imprint>
			<biblScope unit="issue">7</biblScope>
			<biblScope unit="page" from="1" to="108" />
			<date type="published" when="2014">2014. 2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Autonomous-vehicle public transportation system: Scheduling and admission control</title>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">Y S</forename><surname>Lam</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Leung</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Chu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Intelligent Transportation Systems</title>
		<imprint>
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="1210" to="1226" />
			<date type="published" when="2016">2016</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Vehicle scheduling of singleline bus service using operational strategies</title>
		<author>
			<persName><forename type="first">C</forename><surname>Tang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Ceder</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Zhao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Ge</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Intelligent Transportation Systems</title>
		<imprint>
			<biblScope unit="volume">20</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="1149" to="1159" />
			<date type="published" when="2019">2019</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">An optimization framework for online ridesharing markets</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Jia</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Liu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Int. Conf. on Distributed Computing Systems</title>
		<imprint>
			<date type="published" when="2017">2017</date>
			<biblScope unit="page" from="826" to="835" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">Optimizing ride matches for dynamic ride-sharing systems</title>
		<author>
			<persName><forename type="first">X</forename><surname>Wang</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2013">2013</date>
		</imprint>
		<respStmt>
			<orgName>Georgia Institute of Technology</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">PhD dissertation</note>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">An online ride-sharing path-planning strategy for public vehicle systems</title>
		<author>
			<persName><forename type="first">M</forename><surname>Zhu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Wang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Intelligent Transportation Systems</title>
		<imprint>
			<biblScope unit="volume">20</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="616" to="627" />
			<date type="published" when="2019">2019</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Multiobjective scheduling of scientific workflows in multisite clouds</title>
		<author>
			<persName><forename type="first">J</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Pacitti</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Valduriez</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Oliveira</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Mattoso</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Future Generation Computer Systems</title>
		<imprint>
			<biblScope unit="volume">63</biblScope>
			<biblScope unit="page" from="76" to="95" />
			<date type="published" when="2016">2016</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">Personalized travel route recommendation using collaborative filtering based on gps trajectories</title>
		<author>
			<persName><forename type="first">G</forename><surname>Cui</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Luo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Wang</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2017">2017</date>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="page" from="284" to="307" />
			<pubPlace>College Park</pubPlace>
		</imprint>
		<respStmt>
			<orgName>University Maryland</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Scda: School compatibility decomposition algorithm for solving the multi-school bus routing and scheduling problem</title>
		<author>
			<persName><forename type="first">Z</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Shafahi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Haghani</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Int. Journal of Digital Earth</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="284" to="307" />
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Intelligent bus routing with heterogeneous human mobility patterns</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><forename type="middle">J</forename><surname>Yuan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Duan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Fu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Xiong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Wu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Knowledge and Information Systems</title>
		<imprint>
			<biblScope unit="volume">50</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="383" to="415" />
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Lane-level vehicle navigation for vehicle routing and traffic management</title>
		<author>
			<persName><forename type="first">H</forename><surname>Slavin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Q</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Morgan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Rabinowicz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Brandon</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Balakrishna</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">U.S. Patent 9</title>
		<imprint>
			<biblScope unit="volume">964</biblScope>
			<biblScope unit="page" from="414" to="B416" />
			<date type="published" when="2018">2018</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Intelligent transportation and control systems using data mining and machine learning techniques: A comprehensive study</title>
		<author>
			<persName><forename type="first">N</forename><forename type="middle">O</forename><surname>Alsrehin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">F</forename><surname>Klaib</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Magableh</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Access</title>
		<imprint>
			<biblScope unit="volume">7</biblScope>
			<biblScope unit="page" from="49" to="830" />
			<date type="published" when="2019">2019</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Network-aware scheduling for data-parallel jobs: Plan when you can</title>
		<author>
			<persName><forename type="first">V</forename><surname>Jalaparti</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Bodík</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Menache</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Rao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Makarychev</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Caesar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM Conf. on Special Interest Group on Data Communication (SIGCOMM)</title>
		<imprint>
			<date type="published" when="2015">2015</date>
			<biblScope unit="page" from="407" to="420" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Dynamic matching and scheduling of a class of independent tasks onto heterogeneous computing systems</title>
		<author>
			<persName><forename type="first">M</forename><surname>Maheswaran</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Ali</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><forename type="middle">J</forename><surname>Siegel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">A</forename><surname>Hensgen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">F</forename><surname>Freund</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Heterogeneous Computing Workshop</title>
		<imprint>
			<date type="published" when="1999">1999</date>
			<biblScope unit="page" from="30" to="44" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Scheduling of scientific workflows in the ASKALON grid environment</title>
		<author>
			<persName><forename type="first">M</forename><surname>Wieczorek</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Prodan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Fahringer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIGMOD Record</title>
		<imprint>
			<biblScope unit="volume">34</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="56" to="62" />
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Branch-and-bound methods: A survey</title>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">L</forename><surname>Lawler</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">E</forename><surname>Wood</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Operations Research</title>
		<imprint>
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="699" to="719" />
			<date type="published" when="1966">1966</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<title level="m" type="main">brand and bound search algorithm and their complexity</title>
		<author>
			<persName><forename type="first">W</forename><surname>Zhang</surname></persName>
		</author>
		<idno>ADA314598</idno>
		<imprint>
			<date type="published" when="1996">1996</date>
			<biblScope unit="page" from="1" to="31" />
		</imprint>
		<respStmt>
			<orgName>USC/Information Sciences Institute</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Tech. Report</note>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Path planning with modified a star algorithm for a mobile robot</title>
		<author>
			<persName><forename type="first">F</forename><forename type="middle">D</forename></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Babinec</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Kajan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">B</forename><surname>No</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Florek</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Fico</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><forename type="middle">J</forename><surname>Sica</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Procedia Engineering</title>
		<imprint>
			<biblScope unit="volume">96</biblScope>
			<biblScope unit="page" from="59" to="69" />
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Robustness as a third dimension for evaluating public transport plans</title>
		<author>
			<persName><forename type="first">M</forename><surname>Friedrich</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Müller-Hannemann</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Rückert</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Schiewe</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Schöbel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Workshop on Algorithmic Approaches for Transportation Modelling, Optimization, and Systems (ATMOS)</title>
		<imprint>
			<date type="published" when="2018">2018</date>
			<biblScope unit="page" from="1" to="4" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">A stochastic programming approach for robust vehicle scheduling in public bus transport</title>
		<author>
			<persName><forename type="first">M</forename><surname>Naumann</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Suhl</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Kramkowski</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Procedia -Social and Behavioral Sciences</title>
		<imprint>
			<biblScope unit="volume">20</biblScope>
			<biblScope unit="page" from="826" to="835" />
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Planning for the unexpected: The value of reserve capacity for public transport network robustness</title>
		<author>
			<persName><forename type="first">O</forename><surname>Cats</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Jenelius</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Transportation Research Part A: Policy and Practice</title>
		<imprint>
			<biblScope unit="volume">81</biblScope>
			<biblScope unit="page" from="47" to="61" />
			<date type="published" when="2015">2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<monogr>
		<ptr target="https://www.metropolitanshuttle.com/pricing/" />
		<title level="m">Charter Bus Pricing</title>
		<imprint>
			<date type="published" when="2019-11-27">2019. 27-November-2019</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<monogr>
		<author>
			<persName><forename type="first">D</forename><surname>Henion</surname></persName>
		</author>
		<ptr target="https://gogocharters.com/blog/charter-bus-prices/" />
		<title level="m">Charter Bus Prices: How to Calculate Your Rental Costs</title>
		<imprint>
			<date type="published" when="2019-11-27">2019. 27-November-2019</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<monogr>
		<title level="m" type="main">Baidu Maps</title>
		<ptr target="https://map.baidu.com/" />
		<imprint>
			<date type="published" when="2020-04-28">28-April-2020</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<monogr>
		<title level="m" type="main">Google Maps</title>
		<ptr target="https://www.google.com/maps/" />
		<imprint>
			<date type="published" when="2019-11-27">27-November-2019</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Position and direction on the earth&apos;s surface</title>
		<author>
			<persName><forename type="first">G</forename><surname>Britain</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Admiralty Manual of Navigation</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="page" from="1" to="23" />
			<date type="published" when="1964">1964</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">Milp optimal path planning for real-time applications</title>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">S</forename><surname>Ma</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">H</forename><surname>Miller</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">American Control Conference</title>
		<imprint>
			<date type="published" when="2006">2006</date>
			<biblScope unit="page" from="1" to="6" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">Research of agv scheduling and path planning of automatic transport system</title>
		<author>
			<persName><forename type="first">M</forename><surname>Lv</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Gao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Int. Journal of Control and Automation</title>
		<imprint>
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="1" to="10" />
			<date type="published" when="2016">2016</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">Optimistic sorting and information theoretic complexity</title>
		<author>
			<persName><forename type="first">P</forename><surname>Mcilroy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM-SIAM Symposium on Discrete Algorithms (SODA)</title>
		<imprint>
			<date type="published" when="1993">1993</date>
			<biblScope unit="page" from="467" to="474" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<monogr>
		<title level="m" type="main">Sort algorithm in Java</title>
		<ptr target="https://docs.oracle.com/javase/7/docs/api/java/util/Arrays.html#sort" />
		<imprint>
			<date type="published" when="2019-11-27">27-November-2019</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">Design and management of vehicle-sharing systems: a survey of algorithmic approaches</title>
		<author>
			<persName><forename type="first">D</forename><surname>Gavalas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Konstantopoulos</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Pantziou</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Smart Cities and Homes</title>
		<imprint>
			<publisher>Morgan Kaufmann</publisher>
			<date type="published" when="2016">2016</date>
			<biblScope unit="page" from="261" to="289" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<monogr>
		<author>
			<persName><forename type="first">Ji</forename><surname>Liu</surname></persName>
			<affiliation>
				<orgName type="collaboration">Member</orgName>
			</affiliation>
		</author>
		<title level="m">His research interests include big data, applied machine learning and distributed, and parallel data management. Carlyna Bondiombouy received the master&apos;s degree from University Cheikh Anta Diop</title>
		<meeting><address><addrLine>Beijing, China; Dakar; Paris</addrLine></address></meeting>
		<imprint>
			<publisher>Baidu Research</publisher>
			<date type="published" when="2011">2011. 2016. 2013</date>
		</imprint>
		<respStmt>
			<orgName>Xidian University ; University of Montpellier and the Microsoft Research Inria Joint Centre, Inria Zenith Team ; Researcher with Inria and LIRMM, University of Montpellier, France</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">He was a Post-Doctoral</note>
	<note>received the B.Sc. degree from. the master&apos;s degree from Telecom SudParis in 2013, the Ph.D. degree from the. He is currently a Researcher with the Big Data Laboratory. He has published several articles in international journals and conferences on scientific workflows, big data, and cloud computing. and the Ph.D. degree in computer science from the University of Montpellier in 2017. She is currently a Researcher with the African Center of Excellence in Mathematical Sciences, IT, and Applications. Previously, she was a Big Data Consultant with Ysance. . She has published several articles in international journals and conferences on big data, databases, and cloud computing. She received the best Ph.D. thesis Award from the Congolese Government in 2017. Her research interests include data science, big data, and polystores</note>
</biblStruct>

<biblStruct xml:id="b37">
	<monogr>
		<title level="m" type="main">degree from the</title>
		<author>
			<persName><forename type="first">Lei</forename><surname>Mo</surname></persName>
			<affiliation>
				<orgName type="collaboration">Member</orgName>
			</affiliation>
		</author>
		<imprint>
			<date type="published" when="2007">2007. 2013</date>
			<pubPlace>China; China; Nanjing, China</pubPlace>
		</imprint>
		<respStmt>
			<orgName>Lanzhou University of Technology ; South China University of Technology ; Southeast University</orgName>
		</respStmt>
	</monogr>
	<note>received the B.S. and the Ph.D. degree from the. He is currently an Associate Professor with the School of Automation</note>
</biblStruct>

<biblStruct xml:id="b38">
	<monogr>
		<author>
			<persName><surname>Previously</surname></persName>
		</author>
		<title level="m">he was a Researcher with Inria Rennes, 1186 France, from 2017 to 2019</title>
		<meeting><address><addrLine>France, from; China</addrLine></address></meeting>
		<imprint>
			<publisher>Inria Nancy</publisher>
			<date type="published" when="2013">2015 to 2017. 2013 to 2015</date>
		</imprint>
		<respStmt>
			<orgName>Zhejiang University</orgName>
		</respStmt>
	</monogr>
	<note>His current research interests include networked control systems, cyberphysical systems, and embedded systems</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
