<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Modeling Complex Structures in Graph-FCA: Illustration on Natural Language Syntax</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Sébastien</forename><surname>Ferré</surname></persName>
							<email>ferre@irisa.fr</email>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Univ Rennes</orgName>
								<orgName type="institution" key="instit2">INSA</orgName>
								<orgName type="institution" key="instit3">CNRS</orgName>
								<orgName type="institution" key="instit4">IRISA Campus de Beaulieu</orgName>
								<address>
									<postCode>35042</postCode>
									<settlement>Rennes</settlement>
									<country key="FR">France</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Peggy</forename><surname>Cellier</surname></persName>
							<email>peggy.cellier@irisa.fr</email>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Univ Rennes</orgName>
								<orgName type="institution" key="instit2">INSA</orgName>
								<orgName type="institution" key="instit3">CNRS</orgName>
								<orgName type="institution" key="instit4">IRISA Campus de Beaulieu</orgName>
								<address>
									<postCode>35042</postCode>
									<settlement>Rennes</settlement>
									<country key="FR">France</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Modeling Complex Structures in Graph-FCA: Illustration on Natural Language Syntax</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">196A4B892EC43391F693414B31DFC683</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.8.0" ident="GROBID" when="2024-04-12T14:51+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Graph-FCA is an extension of formal concept analysis for multi-relational data. In this paper, we discuss the freedom of representation offered by Graph-FCA, in particular by its support of n-ary relations, considering natural language syntax as a use case.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Several extensions of formal concept analysis have been proposed to handle multirelational data, such as Relational Concept Analysis (RCA) <ref type="bibr" target="#b6">[7]</ref> and Graph-FCA <ref type="bibr" target="#b3">[4]</ref>. Graph-FCA adopts a graph view of multi-relational data, seeing entities as nodes and relationships as directed edges between nodes. Graph-FCA concept intents are therefore characterized and visualized as graph patterns. Graph-FCA is the formal basis of concepts of neighbors, which have been applied to similarity search in knowledge graphs <ref type="bibr" target="#b2">[3]</ref>, knowledge graph completion <ref type="bibr" target="#b4">[5]</ref>, and relation extraction <ref type="bibr" target="#b0">[1]</ref>.</p><p>A distinctive feature of Graph-FCA is to uniformly represent entity attributes, relations and n-ary relations (n&gt;2) through the notion of hyper-edge, whereas RCA differentiates between attributes and binary relations. N-ary relations offer a lot of freedom in the representation of complex structures: e.g., a ternary relation can be represented directly by one ternary relation or decomposed into three binary relations, whereas RCA has only the latter option <ref type="bibr" target="#b5">[6]</ref>.</p><p>The objective of this paper is to demonstrate and discuss this freedom of representation in Graph-FCA. At the same time, the input and output format of the Graph-FCA tool is explained through concrete examples. As a use case, we have chosen to analyze syntactic descriptions of English sentences with the goal to discover common syntactic patterns. Such descriptions are complex because they combine: tokens, words, part-of-speech (POS) tags, parse trees, and the relative position of tokens and phrases. An important lesson learned is that a naive representation of structures may lead to uninteresting patterns, and that n-ary relations are useful to alleviate the problem.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Graph-FCA Theory</head><p>Graph-FCA defines a graph context as an incidence relation between tuples of objects and attributes. A graph context is a triple K = (O,A,I), where O is a set of objects (the nodes), A is a set of attributes (the hyper-edge labels), and I ⊆O * ×A is an incidence relation (the hyper-edges). An hyper-edge ((o 1 ,...,o k ),a) ∈ I can be seen as the logical atom a(o 1 ,...,o k ) where attribute a is used as a predicate with arity k (we use the atom notation for readability). Unary attributes (k =1) are used to label nodes while binary attributes (k =2) are used to label edges.</p><p>In a graph concept, the extent is a set of n-tuples of objects, and the intent expresses what those n-tuples of objects have in common, where n is the arity of the concept. Unary concepts (n=1) are about sets of objects, while other concepts (n&gt;1) are about relationships between objects. A concept intent is a graph pattern with n distinguished nodes, called a Projected Graph Pattern (PGP), and it can be seen as conjunctive query. For example, the PGP (x,y)←parent(x,z),parent(y,z) has three nodes x,y,z, two edges parent(x,z) and parent(y,z), and two distinguished nodes x,y. It can be used as a definition of the "sibling" relationship, i.e. the fact that x and y have a common parent z. A core concept is a concept whose graph pattern cannot be "simplified", i.e. is not homomorphic to a smaller graph pattern. Unlike RCA, there is a concept lattice for each concept arity rather than for each object type. Classical FCA is a special case of Graph-FCA where k =1 (only unary attributes) and n=1 (only unary concepts).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Graph-FCA Implementation</head><p>A Graph-FCA tool, called gfca, is available as a web application, a web service and a source code (visit https://bitbucket.org/sebferre/graph-fca/). It is implemented in about 3000 lines of OCaml, and a general presentation is given in <ref type="bibr" target="#b3">[4]</ref>. A reference manual details the command line options, the input format, and the different output formats. The input format is inspired by λProlog <ref type="bibr" target="#b1">[2]</ref>, an extension of Prolog to λ-terms that uses a currified notation for logical atoms. For example, the atom capital(F rance,P aris) is noted capital France Paris. More in general, an hyper-edge a(o 1 ,...,o k ) is noted a o 1 ... o k . The input format offers a system of macros (attribute definitions) and syntactic sugar to allow for more concise notations of graph contexts.</p><p>The tool can output graph concepts (and optionally the graph context) in a textual format close to the input format (option -txt), and/or in JSON (option -json), and/or a graphical format using DOT and SVG (option -dot). Examples are shown below. There are several options to control the display of concepts: e.g., -only-cores to only show core concepts; -ext to label each unary concept by its extent (as a list of objects); -minsupp to only show the concepts with minsupp objects in their extent.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Use Case: Modeling Complex Syntactic Structures</head><p>Syntactic structures offer an interesting use case for demonstrating and discussing the representation of complex structures in Graph-FCA. To make the following illustrations fit in the paper, we consider a small context made of only two short sentences: (1) "a black cat sits on a mat", and (2) "a dog barks at the red car". To obtain syntactic information about those sentences, we apply CoreNLP (https://corenlp.run/) to each of them. Figure <ref type="figure" target="#fig_0">1</ref> shows the two different parse  trees returned by CoreNLP: the dependency tree that labels tokens with POS tags and links them with dependencies; and the constituency tree that aggregates tokens into phrases, and recursively phrases into larger phrases.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Labelled Directed Graphs</head><p>The dependency tree of a sentence is mathematically a labelled directed graph, with tokens as nodes and dependencies as edges. Each node is labelled by a word (e.g., "cat") and a POS tag (e.g., NN), and each edge is labelled by a dependency type (e.g., nsubj). A dependency tree therefore admits an immediate representation as a graph context, with tokens as objects, words and POS tags as unary attributes, and dependency types as binary attributes. Figure <ref type="figure" target="#fig_1">2</ref> (left) shows the graphical notation of the first sentence in the gfca tool. Each box represents an object, with its identifier at the top (e.g., X4, the 4th token), and its unary attributes at the bottom (e.g., sits, VBZ).</p><p>In gfca's input format, the first sentence can be written as follows, as a set of edges: sits X4, VBZ X4, nsubj X4 X3, cat X3, NN X3, det X3 X1. . . To enable a more compact notation, the input format offers some syntactic sugar. Figure <ref type="figure" target="#fig_1">2</ref> (right) shows an object-centric notation, as an alternative to the default edge-centric notation. Each line describes an object by listing all edges starting at it. For instance, the set of edges cat X3, NN X3, det X3 X1, amod X3 X2 is compacted into X3 : [cat, NN, det X1, amod X2] by factorizing on the first argument X3.</p><p>Figure <ref type="figure" target="#fig_2">3</ref> shows the 4 distinct graph patterns of concept intents. Several concepts may share the same pattern, only differing by the distinguished nodes. Here, as in the rest of this paper, we applied the options -only-cores -dot -minsupp 2 to get the graphical representation of core patterns that occur at least twice. The 4 graph patterns can be read as follows: (Q1) a noun (NN) with the specific determiner 'a'; (Q2) a noun with a determiner (det, DT); (Q3) a noun with a determiner and an adjective modifier (amod, JJ); (Q4) a verb (VBZ) with, as a subject (nsubj), a noun with determiner 'a', and as an oblique complement (obl), a noun with a preposition (case, IN) and a determiner. Q4 abstracts over the two sentences, showing what they have in common. Q2 abstracts over all noun phrases, showing that all nouns have a determiner. Q1 and Q3 are specializations of Q2, respectively with a specific determiner and an adjective.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Rooted Trees</head><p>The constituency tree is mathematically a rooted tree. It can be seen as a directed graph with edges from each phrase to its constituents. Compared to the dependency tree, the nodes represent not only tokens but also phrases, and there is only one type of edge that represents a part-of hierarchy over the nodes. The nodes are labelled with words and phrase types (e.g., S, NP). In our Graph-FCA representation, we choose to merge the atomic phrases and the tokens, and we introduce a binary attribute part as an edge label. Figure <ref type="figure" target="#fig_3">4</ref> (left) shows the graphical notation for the first sentence (Xi-j denotes the phrase spanning from token Xi to Xj). Figure <ref type="figure" target="#fig_4">5</ref> shows the 7 found graph patterns, among which patterns Q3, Q4, Q6 and Q7 respectively correspond to the four patterns found on the dependency trees. The three other patterns have no other attribute than part. They only reflect the structural shape of trees, and do not bring information on English syntax.</p><p>In order to avoid uninteresting patterns, all attributes should be meaningful for the domain. It is therefore desirable to eliminate the part attribute, while retaining the tree structure. We observe that, whenever there is an edge (part P arent Child), e.g.,  part X1-7 X4-7, there is also a unique edge (σ Child) where σ is a phrase type, e.g., VP X4-7. A solution is therefore to merge the two edges into a domain-specific edge (σ P arent Child), e.g. VP X1-7 X4-7. Each unary attribute σ is therefore lifted into a binary attribute that encodes for both the tree structure and the phrase type. Figure <ref type="figure" target="#fig_3">4</ref> (right) shows the new representation for the first sentence. Note that phrase types now appear as edge labels because they are now binary attributes. It can be verified that only the four interesting graph patterns are now found (omitted for lack of space).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Constituency Trees: Handling Relative Positions</head><p>As one can see in the above figures, the previous representations adequately handle the part-of aspect of constituency trees but not the relative positions of phrases, which is a key aspect of syntax in general. For instance, in a noun phrase, the determiner comes first, not at an arbitrary position, and the adjective comes before the noun. An effective way to handle relative positions and ordering is to describe each phrase by its starting and ending position. In Graph-FCA terms, we introduce new objects for the offset positions (I0..I7 for the first sentence), and two new binary attributes start and end for linking phrases to their start/end positions. Position Ik is the position right after the kth token. For instance, the new edges for X1-3 are start X1-3 I0 and end X1-3 I3. However, like with part, the start and end attributes are purely structural, and lead to uninteresting patterns saying that phrases end where other phrases start and the like. We can eliminate them by observing that edges (start X I s ) and (end X I e ) come with one and only one edge (σ X X). We can therefore merge them into a single quaternary edge (σ X I s X I e ) that expresses at the same time the phrase type, the tree structure, and the position in the sentence. For instance, the description X1-7 : [NP I0 X1-3 I3, VP I3 X4-7 I7] says that phrase X1-7 is composed by a NP from position 0 to 3, followed by a VP from position 3 to 7.</p><p>From there, we obtain the same four patterns, except that we now have additional information about the relative position of constituents. The patterns show that all noun phrases start with a determiner, and end with a noun. In some pattern, the determiner and the noun are adjacent while in another pattern, there is a gap between the two.</p><p>To conclude, we note that the elimination of structural attributes implies an increase of the arity of domain-specific attributes. In our example, the arity of phrase types goes from unary to binary when eliminating part, and then to quaternary when eliminating start and end. The ability of Graph-FCA to handle n-ary edges/attributes is here a key feature. Without them, one would be forced to keep the structural attributes, and this would result in possibly many uninteresting concepts and patterns.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 1 .</head><label>1</label><figDesc>Fig.1. Dependency/constituency tree of sentence "a black cat sits on a mat" (CoreNLP).</figDesc><graphic coords="4,141.91,292.14,108.93,113.35" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 2 .</head><label>2</label><figDesc>Fig.2. Representation of the dependency tree of sentence "a black cat sits on a mat", in graphical notation (left) and in textual notation (right).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig. 3 .</head><label>3</label><figDesc>Fig. 3. Graph concepts of the dependency trees (minsupp=2).</figDesc><graphic coords="5,221.22,116.84,172.89,99.65" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fig. 4 .</head><label>4</label><figDesc>Fig. 4. Representation of the constituency tree of the sentence "a black cat sits on a mat", with the part attribute (left) and without (right).</figDesc><graphic coords="6,150.56,122.39,124.49,165.78" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Fig. 5 .</head><label>5</label><figDesc>Fig. 5. Graph concepts of the constituency trees (with the part attribute).</figDesc><graphic coords="6,152.06,333.51,311.24,145.63" type="bitmap" /></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" xml:id="foot_0"><p>This research is supported by ANR project SmartFCA (ANR-21-CE23-0023).</p></note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Extracting relations in texts with concepts of neighbours</title>
		<author>
			<persName><forename type="first">H</forename><surname>Ayats</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Cellier</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Ferré</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Formal Concept Analysis</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2021">2021</date>
			<biblScope unit="volume">12733</biblScope>
			<biblScope unit="page" from="155" to="171" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">A pragmatic reconstruction of λprolog</title>
		<author>
			<persName><forename type="first">C</forename><surname>Belleannée</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Brisset</surname></persName>
		</author>
		<author>
			<persName><forename type="first">O</forename><surname>Ridoux</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">The Journal of Logic Programming</title>
		<imprint>
			<biblScope unit="volume">41</biblScope>
			<biblScope unit="page" from="67" to="102" />
			<date type="published" when="1999">1999</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Answers partitioning and lazy joins for efficient query relaxation and application to similarity search</title>
		<author>
			<persName><forename type="first">S</forename><surname>Ferré</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">The Semantic Web (ESWC)</title>
		<editor>
			<persName><forename type="first">A</forename><surname>Gangemi</surname></persName>
		</editor>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2018">2018</date>
			<biblScope unit="volume">10843</biblScope>
			<biblScope unit="page" from="209" to="224" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Graph-FCA: An extension of formal concept analysis to knowledge graphs</title>
		<author>
			<persName><forename type="first">S</forename><surname>Ferré</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Cellier</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Discrete Applied Mathematics</title>
		<imprint>
			<biblScope unit="volume">273</biblScope>
			<biblScope unit="page" from="81" to="102" />
			<date type="published" when="2019">2019</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Application of concepts of neighbours to knowledge graph completion</title>
		<author>
			<persName><forename type="first">S</forename><surname>Ferré</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Data Science: Methods, Infrastructure, and Applications</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="page" from="1" to="28" />
			<date type="published" when="2021">2021</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Practical comparison of FCA extensions to model indeterminate value of ternary data</title>
		<author>
			<persName><forename type="first">P</forename><surname>Keip</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Ferré</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Gutierrez</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Huchard</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Silvie</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Martin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Concept Lattices and their Applications (CLA)</title>
		<imprint>
			<date type="published" when="2020">2020</date>
			<biblScope unit="volume">2668</biblScope>
			<biblScope unit="page" from="197" to="208" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Relational concept analysis: mining concept lattices from multi-relational data</title>
		<author>
			<persName><forename type="first">M</forename><surname>Rouane-Hacene</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Huchard</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Napoli</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Valtchev</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Annals of Mathematics and Artificial Intelligence</title>
		<imprint>
			<biblScope unit="volume">67</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="81" to="108" />
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
