<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main"></title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">A6CD45D8A74AFEC5B42921E0C67E5D4F</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.8.0" ident="GROBID" when="2024-04-12T14:49+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>C++/Rust</term>
					<term>DSLs like FAUST</term>
					<term>Csound</term>
					<term>CMajor</term>
					<term>patchers like Max</term>
					<term>etc VSTs</term>
					<term>AU</term>
					<term>AAX</term>
					<term>RTAS</term>
					<term>JUCE</term>
					<term>CLAP</term>
					<term>iPlug2</term>
					<term>etc</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Use plain HTML/CSS/JavaScript but very often also bundlers/minifiers (webpack, parcel, rollup), npm modules, frameworks (react, vueJS), and also code with TypeScript, etc.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>WebAudioModules version 2 (aka WAM or WAM2) How to start with WAMs! (2015), and WAM2 is the updated version:</p><p>• webaudiomodules.org will remain the home of the project (not yet up to date! Soon with a section about WAM2!)</p><p>• The official github repo is the regular webaudiomodules one: https://github.com/webaudiomodules.  Faust offers end-users a high-level alternative to C/C++ to develop audio applications for a large variety of platforms.</p><p>The role of the Faust compiler is to synthesize the most efficient implementations for the target language (C, C++, LLVM, WebAssembly, etc.).</p><p>Online doc / tutorial so that you can experiment yourself, create, build GUI, export WAM2 plugins directly from the FAUST online IDE.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Conclusion / Perspectives</head><p>The WAM standard is stable now and comes with many examples. </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>FAUST: a</head><label>a</label><figDesc>DSL for DSP programming, born in 2002 at GRAME-CNCM, France Used in artistic productions, education and research, open source projects and commercial applications.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head></head><label></label><figDesc>OUR MAIN CONCERN NOW: get inputs from developers regarding barriers to entry / adoption! Things that will come soon: ○ The wam-community repo is growing :-) ○ The WAM SDK has been extended to support 3D WebGL/GLSL/Video extensions ○ A WAM based DAW is under development and will be open source ○ More examples using WASM, in particular C++/WASM ○ Remote plugin server with an object (such as JSON or a serialized blob) that can be used to restore the WAM's state. a callback function so it will be called when matching events are processed. */ addEventListener&lt;K extends keyof WamEventMap&gt;(type: K, listener: (this: this, ev: CustomEvent&lt;WamEventMap[K]&gt;) =&gt; any, options?: boolean | AddEventListenerOptions): void; addEventListener(type: string, listener: (this: this, ev: CustomEvent) =&gt; any, options?: boolean | AddEventListenerOptions): void; addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void; /** Deregister a callback function so it will no longer be called when matching events are processed. */ removeEventListener&lt;K extends keyof WamEventMap&gt;(type: K, listener: (this: this, ev: CustomEvent&lt;WamEventMap[K]&gt;) =&gt; any, options?: boolean | EventListenerOptions): void; removeEventListener(type: string, listener: (this: this, ev: CustomEvent) =&gt; any, options?: boolean | AddEventListenerOptions): void; removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void; /** Schedule a WamEvent. Listeners will be triggered when the event is processed. an event output stream to another WAM. If no output index is given, assume output 0. */ connectEvents(to: WamNode, output?: number): void; /** Disconnect an event output stream from another WAM. If no arguments are given, all event streams will be disconnected. */ disconnectEvents(to?: WamNode, output?: number): void; /** Stop processing and remove the node from the graph. Stop processing and remove the node from the WAM event graph. */ destroy(): void; } WamEnv and WamGroup: manage plugin chains Send events downstream to a list of chained plugins…, manage group (states) etc.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0"><head></head><label></label><figDesc></figDesc><graphic coords="5,16.03,90.75,365.76,320.97" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0"><head></head><label></label><figDesc></figDesc><graphic coords="5,386.19,90.75,317.77,299.25" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0"><head></head><label></label><figDesc></figDesc><graphic coords="11,156.36,286.64,536.09,112.77" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0"><head></head><label></label><figDesc></figDesc><graphic coords="11,241.05,60.64,366.71,217.61" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0"><head></head><label></label><figDesc></figDesc><graphic coords="14,31.55,219.11,366.85,179.65" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0"><head></head><label></label><figDesc></figDesc><graphic coords="17,453.55,202.81,261.05,207.05" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0"><head></head><label></label><figDesc></figDesc><graphic coords="18,327.04,109.08,385.25,224.75" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0"><head></head><label></label><figDesc></figDesc><graphic coords="23,304.52,85.07,395.76,300.86" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0"><head></head><label></label><figDesc></figDesc><graphic coords="23,16.93,118.93,280.52,233.15" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0"><head></head><label></label><figDesc></figDesc><graphic coords="24,45.12,138.08,329.19,233.92" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0"><head></head><label></label><figDesc></figDesc><graphic coords="24,393.52,138.08,281.36,233.92" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0"><head></head><label></label><figDesc></figDesc><graphic coords="25,387.69,131.68,323.23,211.14" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>• 2021-2022: WebAudio Modules 2.0</head><label></label><figDesc></figDesc><table><row><cell>○</cell><cell>A WAM plugin can be loaded using a</cell></row><row><cell></cell><cell>simple URI!</cell></row><row><cell>○</cell><cell>A WAM plugin is a JavaScript module,</cell></row><row><cell>○</cell><cell>A WAM can be made of a single</cell></row><row><cell></cell><cell>AudioWorklet Node, or made of multiple</cell></row><row><cell></cell><cell>nodes, it will behave like a single</cell></row><row><cell></cell><cell>AudioNode.</cell></row><row><cell>○</cell><cell>Plugin parameters are handled by the</cell></row><row><cell></cell><cell>WamParamMgr,</cell></row><row><cell>○</cell><cell>Focus on performance (ring buffer, audio</cell></row><row><cell></cell><cell>thread isolation)</cell></row><row><cell>○</cell><cell>Plain modern JS or build systems for JS /</cell></row><row><cell></cell><cell>TS / frameworks</cell></row><row><cell>○</cell><cell>Support for C/C++</cell></row><row><cell>○</cell><cell>Support for DSL (Faust, CSound)</cell></row><row><cell>○</cell><cell>Parameter Automation, MIDI support,</cell></row></table><note><p>○ host/plugin interaction as an API (+ rich SDK). The API can be entirely re-implemented for low-level plugins</p></note></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" xml:id="foot_0"><p>WebAudioModules (WAM) is an old standard</p></note>
		</body>
		<back>

			<div type="availability">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>WebAudioModule API WamNode API AudioWorklet Thread Host WamProcessor API WamEnv API GUI (will return true after calling `initialize()`. */ initialized: boolean; /** The identifier of the current WAM, composed of vender + name */ readonly moduleId: string; /** The unique identifier of the current WAM instance. */ readonly instanceId: string; /** The values from `descriptor.json` */ readonly descriptor: WamDescriptor; /** The WAM's name */ readonly name: string; /** The WAM Vendor's name */ readonly vendor: string; /** * This async method must be redefined to get `AudioNode` that * will connected to the host. * It can be any object that extends `AudioNode` and implements `WamNode` The WAM devs can also fetch and preload the GUI Element in while initializing. Redefine this method to get the WAM's GUI as an HTML `Element`. */ createGui(): Promise&lt;Element&gt;; /** Clean up an element previously returned by</p></div>
			</div>

			<div type="references">

				<listBibl/>
			</div>
		</back>
	</text>
</TEI>
