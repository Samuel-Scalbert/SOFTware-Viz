<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main"></title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">5FDD50FF0C4D59D01D31D8A2C8AF070F</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.8.0" ident="GROBID" when="2024-04-12T14:46+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>main or audio thread 1 -The WebAudioModule API Main Thread Host</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Concepts de l'API WebAudio</head><p>The Web Audio API also supports custom DSP programming with the AudioWorklet This is where custom DSP processing is done! Can be done in JavaScript or in a WebAssembly module! This is where the AW node is created, connected to the audio graph, where the GUI is managed etc. (JavaScript)</p><p>Web Audio development</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Web developers</head><p>• Use plain HTML/CSS/JavaScript but very often also bundlers/minifiers (webpack, parcel, rollup), npm modules, frameworks <ref type="bibr">(react, vueJS)</ref>, and also code with TypeScript, etc.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Audio developers</head><p>• Use C++/Rust, DSLs like FAUST, Csound, CMajor, patchers like Max, etc. • Use plugin standards: VSTs, AU, AAX, RTAS, JUCE, CLAP, iPlug2, etc.</p><p>How to combine all this? WebAudioModules version 2 (aka WAM or WAM2)  Used by the community to publish and share "ready to use" plugins!</p><p>• Remember that a plugin is just a URI! • Several dozens of plugins available, 99% also available with source code to study (github.com/boourns/burns-audio-wam) • Cover all classic effects, proposes some instruments and utilitary plugins. • All plugins available in the https://sequencer.party host.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>FAUST: a DSL for DSP programming, born in 2002 at GRAME-CNCM, France</head><p>Used in artistic productions, education and research, open source projects and commercial applications.</p><p>Faust offers end-users a high-level alternative to C/C++ to develop audio applications for a large variety of platforms.</p><p>The role of the Faust compiler is to synthesize the most efficient implementations for the target language (C, C++, LLVM, WebAssembly, etc.).</p><p>Online doc / tutorial so that you can experiment yourself, create, build GUI, export WAM2 plugins directly from the FAUST online IDE.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Conclusion / Perspectives</head><p>The WAM standard is stable now and comes with many examples. -the role of processes seems to assume more importance than their results -the notions of non-linearity and erraticism have increasingly become part of creative processes -digital creativity : digital objects can be modified by human-computer interaction more than ever, and that the formal connotations of a musical work may be re-tracked in an ever-changing way -the interpretation of sonorous events has to deal with dynamism of inter-medial relationships -relationships between musical subjectivity and the emotional indexes of sonorous space ¤ Moles (1972): the object is situated at the crossroads of an interaction when there is a conjunction between situation and act, so it is always included in a praxeological dimension.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Device and creativity</head><p>Agamben (2014): "I call a device (p.31) anything that has, in one way or another, the capacity to capture, orientate, determine, intercept, model, control and ensure the gestures, conducts, opinions and discourses of living beings."</p><p>-The device ranges from the school to the pen, from the asylum to the cell phone.</p><p>-Foucault has thus shown how, in a disciplinary society, devices aim, through a series of practices and discourses, knowledge and exercises, to create docile yet free bodies that assume their identity and freedom as subjects in the very process of their subjection.</p><p>-The device is therefore, above all, a machine that produces subjectivation. Digital Creativity is a constant negotiation between the engagement in a NMP process or WAM interaction, non linear music production, and the freedom of music agency and literacy, in which serendipity could have a central role. </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><label></label><figDesc>(gain1).connect(ctx.destination);</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>•</head><label></label><figDesc>Developers can choose to adapt their existing code to the API • Others can use the SDK that implements the API (much easier), inherit classes etc. available at https://wam-examples.vidalmazuy.fr/ Also, check the wam-community repository https://github.com/boourns/wam-community</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head></head><label></label><figDesc>OUR MAIN CONCERN NOW: grow adoption, more users, more developers! Things that will come soon: ○ The wam-community repo is growing every week :-) ○ The WAM SDK has been extended to support 3D WebGL/GLSL/Video extensions ○ A WAM based DAW has been released and is open source ○ More examples for developers: using WASM, in particular C++/WASM ○ Remote plugin server with API Join us on slack WebAudio channel / #webaudiomodules! • Renwick, Robin. (2012). "SOURCENODE: A NETWORK SOURCED APPROACH TO NETWORK MUSIC PERFORMANCE (NMP).hdl:2027/spo.bbp2372.2012.057. David Kim-Boyle (2009) Network Musics: Play, Engagement and the Democratization of Performance,Contemporary Music Review, 28:4-5, 363-375, DOI: 10.1080/07494460903422198 "the strategies employed in the work of these artists have helped redefine a new aesthetics of engagement in which play, spatial and temporal dislocation are amongst the genre's defining characteristics". digital creativity Tanzi, D. (2005) -'Musical objects and digital domains'. Proceedings of EMS-05 Conference. Montreal, Quebec, October 19-22, 2005</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head></head><label></label><figDesc>parameter info for the specified parameter ids, or omit argument to get info for all parameters. */ getParameterInfo(...parameterIdQuery: string[]): Promise&lt;WamParameterInfoMap&gt;; /** Get parameter values for the specified parameter ids, or omit argument to get values for all parameters. */ getParameterValues(normalized?: boolean, ...parameterIdQuery: string[]): Promise&lt;WamParameterDataMap&gt;; /** Set parameter values for the specified parameter ids. */ setParameterValues(parameterValues: WamParameterDataMap): Promise&lt;void&gt;; /** Returns an object (such as JSON or a serialized blob) that can be used to restore the WAM's state. a callback function so it will be called when matching events are processed. */ addEventListener&lt;K extends keyof WamEventMap&gt;(type: K, listener: (this: this, ev: CustomEvent&lt;WamEventMap[K]&gt;) =&gt; any, options?: boolean | AddEventListenerOptions): void; addEventListener(type: string, listener: (this: this, ev: CustomEvent) =&gt; any, options?: boolean | AddEventListenerOptions): void; addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void; /** Deregister a callback function so it will no longer be called when matching events are processed. */ removeEventListener&lt;K extends keyof WamEventMap&gt;(type: K, listener: (this: this, ev: CustomEvent&lt;WamEventMap[K]&gt;) =&gt; any, options?: boolean | EventListenerOptions): void; removeEventListener(type: string, listener: (this: this, ev: CustomEvent) =&gt; any, options?: boolean | AddEventListenerOptions): void; removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void; /** Schedule a WamEvent. Listeners will be triggered when the event is processed. an event output stream to another WAM. If no output index is given, assume output 0. */ connectEvents(to: WamNode, output?: number): void; /** Disconnect an event output stream from another WAM. If no arguments are given, all event streams will be disconnected. */ disconnectEvents(to?: WamNode, output?: number): void; /** Stop processing and remove the node from the graph. Stop processing and remove the node from the WAM event graph. */ destroy(): void; } WamEnv and WamGroup: manage plugin chains Send events downstream to a list of chained plugins…, manage group (states) etc.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0"><head></head><label></label><figDesc></figDesc><graphic coords="6,90.44,108.36,539.13,301.53" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0"><head></head><label></label><figDesc></figDesc><graphic coords="8,16.03,90.75,365.76,320.97" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0"><head></head><label></label><figDesc></figDesc><graphic coords="8,386.19,90.75,317.77,299.25" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0"><head></head><label></label><figDesc></figDesc><graphic coords="9,107.56,90.75,498.31,280.30" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0"><head></head><label></label><figDesc></figDesc><graphic coords="10,64.35,86.14,591.30,312.81" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0"><head></head><label></label><figDesc></figDesc><graphic coords="11,71.51,90.75,576.97,297.18" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0"><head></head><label></label><figDesc></figDesc><graphic coords="13,156.36,286.64,536.09,112.77" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0"><head></head><label></label><figDesc></figDesc><graphic coords="13,241.05,60.64,366.71,217.61" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0"><head></head><label></label><figDesc></figDesc><graphic coords="14,79.31,90.75,554.62,307.17" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0"><head></head><label></label><figDesc></figDesc><graphic coords="15,120.88,90.75,478.24,269.01" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0"><head></head><label></label><figDesc></figDesc><graphic coords="16,77.91,90.75,564.19,299.28" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0"><head></head><label></label><figDesc></figDesc><graphic coords="22,327.04,109.08,385.25,224.75" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0"><head></head><label></label><figDesc></figDesc><graphic coords="27,304.52,85.07,395.76,300.86" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0"><head></head><label></label><figDesc></figDesc><graphic coords="27,16.93,118.93,280.52,233.15" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0"><head></head><label></label><figDesc></figDesc><graphic coords="28,45.12,138.08,329.19,233.92" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0"><head></head><label></label><figDesc></figDesc><graphic coords="28,393.52,138.08,281.36,233.92" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0"><head></head><label></label><figDesc></figDesc><graphic coords="29,387.69,131.68,323.23,211.14" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0"><head></head><label></label><figDesc></figDesc><graphic coords="43,50.14,109.33,619.72,291.67" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>The official github repo is the regular webaudiomodules one: https://github.com/webaudiomodules.</head><label></label><figDesc></figDesc><table><row><cell>○</cell><cell>A WAM plugin can be loaded using a</cell></row><row><cell></cell><cell>simple URI!</cell></row><row><cell>○</cell><cell>A WAM plugin is a JavaScript module,</cell></row><row><cell cols="2">○ (2015), and WAM2 is the updated version: A WAM can be made of a single</cell></row><row><cell></cell><cell>AudioWorklet Node, or made of multiple</cell></row><row><cell cols="2">nodes, it will behave like a single • webaudiomodules.org will remain the home</cell></row><row><cell cols="2">AudioNode. Plugin parameters are handled by the WamParamMgr, of the project (not yet up to date! ○ How to start with WAMs! Soon with a section about WAM2!)</cell></row><row><cell cols="2">○ ○ ○ ○ ○ • • Everything is under MIT/MPL/Apache 2.0 Focus on performance (ring buffer, audio thread isolation) Plain modern JS or build systems for JS / TS / frameworks Support for C/C++ Support for DSL (Faust, CSound) Parameter Automation, MIDI support, ○ open source licence… host/plugin interaction as an API (+ rich SDK). The API can be entirely • Also available as npm modules</cell></row><row><cell></cell><cell>re-implemented for low-level plugins</cell></row></table><note><p>• 2021-2022: WebAudio Modules 2.0</p></note></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" xml:id="foot_0"><p>WebAudioModules (WAM) is an old standard</p></note>
		</body>
		<back>

			<div type="availability">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>WebAudioModule API WamNode API AudioWorklet Thread Host WamProcessor API WamEnv API GUI will return true after calling `initialize()`. */ initialized: boolean; /** The identifier of the current WAM, composed of vender + name */ readonly moduleId: string; /** The unique identifier of the current WAM instance. */ readonly instanceId: string; /** The values from `descriptor.json` */ readonly descriptor: WamDescriptor; /** The WAM's name */ readonly name: string; /** The WAM Vendor's name */ readonly vendor: string; /** * This async method must be redefined to get `AudioNode` that * will connected to the host. * It can be any object that extends `AudioNode` and implements `WamNode` The WAM devs can also fetch and preload the GUI Element in while initializing. Redefine this method to get the WAM's GUI as an HTML `Element`. */ createGui(): Promise&lt;Element&gt;; /** Clean up an element previously returned by</p></div>
			</div>

			<div type="references">

				<listBibl/>
			</div>
		</back>
	</text>
</TEI>
