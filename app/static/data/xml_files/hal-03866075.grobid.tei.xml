<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">CONNOR: Exploring Similarities in Graphs with Concepts of Neighbors</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Hugo</forename><surname>Ayats</surname></persName>
							<email>hugo.ayats@irisa.fr</email>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Univ Rennes</orgName>
								<orgName type="institution" key="instit2">INSA</orgName>
								<orgName type="institution" key="instit3">CNRS</orgName>
								<orgName type="institution" key="instit4">IRISA Campus de Beaulieu</orgName>
								<address>
									<postCode>35042</postCode>
									<settlement>Rennes</settlement>
									<country key="FR">France</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Peggy</forename><surname>Cellier</surname></persName>
							<email>peggy.cellier@irisa.fr</email>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Univ Rennes</orgName>
								<orgName type="institution" key="instit2">INSA</orgName>
								<orgName type="institution" key="instit3">CNRS</orgName>
								<orgName type="institution" key="instit4">IRISA Campus de Beaulieu</orgName>
								<address>
									<postCode>35042</postCode>
									<settlement>Rennes</settlement>
									<country key="FR">France</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Sébastien</forename><surname>Ferré</surname></persName>
							<email>sebastien.ferre@irisa.fr</email>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Univ Rennes</orgName>
								<orgName type="institution" key="instit2">INSA</orgName>
								<orgName type="institution" key="instit3">CNRS</orgName>
								<orgName type="institution" key="instit4">IRISA Campus de Beaulieu</orgName>
								<address>
									<postCode>35042</postCode>
									<settlement>Rennes</settlement>
									<country key="FR">France</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">CONNOR: Exploring Similarities in Graphs with Concepts of Neighbors</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">A6E45EDDC958C46A03459DC53E996A93</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.8.0" ident="GROBID" when="2024-04-12T14:52+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Since its first formalization, the Formal Concept Analysis (FCA) field has shown diverse extensions of the FCA paradigm. A recent example is Graph-FCA, an extension of FCA to graphs. In the context of Graph-FCA, a notion of concept of neighbors has been introduced to support a form of nearest neighbor search over the nodes of a graph. Concepts of neighbors have been used for diverse tasks, such as knowledge graph completion and relation classification in texts. In this paper, we present CONNOR, a Java library for the computation of concepts of neighbors on RDF graphs.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Introduced in the early 1980's, Formal Concept Analysis (FCA) enables to analyze a collection of objects and properties as a hierarchy of concepts. Several extensions of FCA have been proposed to handle more complex objects and properties, such as multi-relational data: e.g., Relational Concept Analysis (RCA) <ref type="bibr" target="#b7">[8]</ref> or Graph-FCA <ref type="bibr" target="#b2">[3]</ref>. In the context of Graph-FCA, the notion of concepts of neighbors <ref type="bibr" target="#b4">[5]</ref> has been introduced as a lazy learning approach to explore similarities between tuples of nodes in a graph.</p><p>Inspired by the work of Kuznetsov on Pattern Structures for classification <ref type="bibr" target="#b6">[7]</ref>, concepts of neighbors are only those concepts that result from the intersection of a given node (or tuple of nodes) with other (tuples of) nodes, in order to support a decision process about the given node. Compared to computing all concepts, this decreases the worst case number of concepts from exponential to linear. A parallel can also be made with the work of Codocedo et al. on cousin concepts <ref type="bibr" target="#b1">[2]</ref>, but instead of exploring concepts related to a given concept, we explore a more specific kind of concepts related to a given object. This can be seen as a form of conceptual k Nearest Neighbors (kNN) algorithm on graph nodes, and like for the kNN approach, possible applications are numerous. So far, concepts of neighbors have been applied to knowledge graph completion <ref type="bibr" target="#b4">[5]</ref>, query relaxation <ref type="bibr" target="#b3">[4]</ref>, and relation classification in texts <ref type="bibr" target="#b0">[1]</ref>.</p><p>This paper introduce CONNOR, a Java library for the computation of concepts of neighbors in the context of the semantic web. Based on the widelyused Apache Jena library, this library introduces data structures for representing Graph-FCA notions, concepts of neighbors included, and implements an efficient algorithm for computing concepts of neighbors on RDF graphs.  Definition 2. A graph pattern P ⊆ V * × A is a set of labeled directed edges and labeled nodes with variables as nodes and attributes as labels.</p><p>A projected graph pattern (PGP) is a couple Q = (x, P ) where P is a graph pattern and x ∈ V * a projection tuple. The arity of a PGP is the length of x. A PGP of arity k is also called a k-PGP.</p><p>Figure <ref type="figure" target="#fig_0">1</ref> (b) represents a 2-PGP defining the "sibling" binary relation (two persons sharing a male parent and a female parent). Projection variables are in bold. In practice, PGPs can be seen as queries on the graph context. In this paper we call set of answers of a k-PGP the set of the k-tuples of objects that are the answers of the PGP considered as a query.</p><p>A PGP inclusion relation (noted ⊆ Q ) can be defined to express the fact that a k-PGP Q 1 is more specific than another k-PGP Q 2 (i.e. by renaming the variables of Q 2 we can obtain a PGP having the same projection tuple than Q 1 and having its graph pattern included in the graph pattern of Q 1 ). In this case, we denote</p><formula xml:id="formula_0">Q 2 ⊆ Q Q 1 . If Q 1 ⊆ Q Q 2 and Q 2 ⊆ Q Q 1 , they are said equivalent (Q 1 ≡ Q Q 2 )</formula><p>. The most specific query for a given answer set is the query (under equivalency relation) that is more specific to every other queries having this set as answer set. </p><formula xml:id="formula_1">Definition 3. A graph concept of arity k (also called k-concept) is a pair (R, Q), R being a set of k-tuples of objects (called extension) and Q being a k-PGP (called intension), such that: -R is the set of answers of Q; -Q is the most specific k-PGP having R</formula><formula xml:id="formula_2">o 2 is the k-concept δ(o 1 , o 2 ) = (R, Q) where the extension Q is the most specific k-PGP such that the intension R contains o 1 and o 2 .</formula><p>It can be proven that this conceptual distance has properties similar to a numerical distance, such as positivity, symmetry and triangle inequality, by using the concept extension inclusion as a partial order and a notion of conceptual supremum as addition. The extensional distance d(o 1 , o 2 ) = |δ(o 1 , o 2 ).ext| can be used as a (degraded) numerical distance to evaluate the dissimilarity between o 1 and o 2 as the number of k-tuples between them.</p><formula xml:id="formula_3">Definition 5. The concepts of neighbours of a k-tuple o is the set of k- concepts C -N (o) = {δ(o , o)|o ∈ O k }.</formula><p>The proper extension of a concept δ.propExt for δ ∈ C -N (o) is the set of k-tuples of its extension that are not in the extension of a more specific concept. The set of proper extensions forms a partition of O k , and therefore the set of extensions forms a hierarchical clustering of O k .</p><p>Figure <ref type="figure" target="#fig_3">2</ref> presents the five concepts of neighbors of Charlotte in the graph context presented in Figure <ref type="figure" target="#fig_1">1 (a)</ref>. On the right, the extensions are presented as a Venn diagram, and on the left the intensions are expressed in plain English for simplicity. The first concept has for intension the whole graph centered on Charlotte and has only Chalotte in its extension. Then there are two larger concepts, one describing the children of Kate and William (Charlotte and George), and another one describing the women. Then there is an even larger concept describing the people having a father, a mother and a sibling (Harry, William, Charlotte, and George). Finally, there is the top concept, having an empty intension and O as extension. In this section we present CONNOR, a Java library for the computation of the Concepts of Neighbors. This library is a free and open-source software<ref type="foot" target="#foot_0">1</ref> , based on Apache Jena<ref type="foot" target="#foot_1">2</ref> , a well-known Java library for the Semantic Web. As the Semantic Web is based on the RDF standard, and as RDF graphs only represent labelled directed multigraphs, the library only handle graph contexts with unary relations (node labels) and binary relations (labelled directed edges). This library implements data structures for manipulating concepts of neighbors, as well as an algorithm for their computation. Table <ref type="table" target="#tab_1">1</ref> presents an example code for the computation of the concepts of neighbors of Charlotte in the graph context presented in Figure <ref type="figure" target="#fig_1">1 (a)</ref>. The CONNOR library is structured into four main classes, which are detailed below.</p><p>ConnorModel This class encapsulates an RDF model that represents a graph context. There are two ways to create a model using this class. The first way consists in creating an empty model and adding triples one by one. The second way consists in creating a model from a pre-existing RDF model. Section (1) of Table <ref type="table" target="#tab_1">1</ref> shows an example of creation of ConnorModel from a RDF graph.</p><p>ConceptOfNeighbors As its name tells, this class represents a concept of neighbors, and hence a graph concept too. As expected, an object of this class is characterized by its intension (decomposed into two attributes : the list of the projection variables and the graph pattern), its extension and its proper extension. Those elements can be accessed through the methods getProjectionVars(), getIntensionBody(), getExtension() and getProperExtension(). The creation of objects of this class is handled by the ConnorPartition class, and should not be done by library users.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>// ( 1 ) C r e a t i o n o f t h e model</head><p>ConnorModel model = new ConnorModel ( rdfModel ) ; // ( 2 ) C r e a t i o n o f t h e t a r g e t L i s t &lt;S t r i n g &gt; t a r g e t = new A r r a y L i s t &lt;&gt;({" h t t p : / / example . o r g / r o y a l / C h a r l o t t e " } ) ; // ( 3 ) C r e a t i o n o f t h e i n i t t a b l e Var var1 = Var . a l l o c ( " Neighbor_0 " ) ; ConnorPartition This class is central to the computation of concepts of neighbors. It takes its name from the fact that, as presented above, the proper extensions of the concepts of neighbors form a partition of the set of objects. This class contains all the information needed for the computations of concepts of neighbors, such as of course the graph context (represented by a ConnorModel), the concepts of neighbors once the computation is done (represented by a collection of ConceptOfNeighbors objects), but also the tuple of objects (called target) for which we want to compute the concepts of neighbors. A ConnorPartition object can be translated into JSON for serialization and further processing. An exemple of serialization in JSON is given by Section (6) of Table <ref type="table" target="#tab_1">1</ref>.</p><p>A key aspect of this class is that it implements an anytime algorithm for the computation of concepts of neighbors. Presented in <ref type="bibr" target="#b3">[4]</ref>, this algorithm starts with the top concept and, by successively trying to add elements to the intension, refines it in more specific concepts that still include the target. This way, the algorithm can be interrupted at each refinement step.</p><p>To use this class, the base constructor of this object takes as argument a ConnorModel object, the target (represented by a list of URIs), the partition domain and a maxDepth parameter. An example of usage is given by Section (4) of Table <ref type="table" target="#tab_1">1</ref>. The partitioning domain is called initializationTable, which is is a Table object which represents a set of tuples of entities. The role of this argument is to stipulate which set of tuples should appear in the extensions of the concepts. An example of construction of such a table is given in Section (5) of Table <ref type="table" target="#tab_1">1</ref>. Concerning the maxDepth parameter, its role is to set, if desired, a limit to the depth of the intension from the elements of the target. If set to zero, no limit is applied.</p><p>The class method to call in order to launch the computation of concepts of neighbors is called fullPartitioning(cut). Taking a mutable Boolean named cut as a parameter, it refines the partition until convergence or until cut is switched to true.</p><p>ConnorThread This class encapsulates the computation of concepts of neighbors using a ConnorPartition in a Java thread, so that the main thread just needs to launch this thread and switch cut to true when desired. An example of usage is given by Section (5) of Table <ref type="table" target="#tab_1">1</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Conclusion</head><p>This paper introduces CONNOR, a Java library for the computation of concepts of neighbors on RDF graphs. After having introduced the theoretical notions related to Graph-FCA (an extension of FCA to graphs) and to the concepts of neighbors, this paper presents the main classes of CONNOR, and details their working through an example code for the computation of concepts of neighbors.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 1 :</head><label>1</label><figDesc>Fig. 1: (a) Context graph representing the British royal family (b) PGP representing the sibling relationship between x and y</figDesc><graphic coords="3,172.83,115.83,269.70,172.80" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 1 (</head><label>1</label><figDesc>Figure 1 (a) shows the graph context representing a fragment of the family tree of the British royal family as a graph context. The boxes are the objects (e.g. Charlotte or Harry), the types inside boxes are unary attributes (e.g. man, woman) and the arrow labels are the binary attributes (e.g. parent).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head></head><label></label><figDesc>as set of answers (under the equivalence relation).For example, let us consider (R, Q) where Q is the PGP presented in Figure 1 (b) and R is the set of couples: {(Harry, W illiam), . . . , (Harry, Harry), (George, Charlotte), . . . , (Charlotte, Charlotte)}. This concept represents the notion of sibling: the intension is a PGP describing the couple of persons having a same mother and a same father, and the extension all the couples of entities respecting this pattern. Definition 4. The conceptual distance between two k-tuples of objects o 1 and</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fig. 2 :</head><label>2</label><figDesc>Fig. 2: Concepts of Neighbors of Charlotte</figDesc><graphic coords="5,191.33,115.84,232.69,102.75" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Table t</head><label>t</label><figDesc></figDesc><table><row><cell>a b l e = new Table (new L i s t &lt;Var&gt;({ var1 } ) ) ;</cell></row><row><cell>rdfModel . l i s t S u b j e c t s ( ) . forEachRemaining ( s u b j e c t -&gt;</cell></row><row><cell>t a b l e . addBinding (new Binding ( var1 , s u b j e c t ) ) ;</cell></row><row><cell>) ;</cell></row><row><cell>// ( 4 ) C r e a t i o n o f t h e p a r t i t i o n</cell></row><row><cell>C o n n o r P a r t i t i o n p a r t i t i o n = new C o n n o r P a r t i t i o n ( model ,</cell></row><row><cell>t a r g e t , t a b l e , 0 ) ;</cell></row><row><cell>// ( 5 ) C r e a t i o n o f t h e t h r e a d and c o m p u t a t i o n o f t h e C-N</cell></row><row><cell>AtomicBoolean c u t = new AtomicBoolean ( f a l s e ) ;</cell></row><row><cell>ConnorThread t h r e a d = new ConnorThread ( p a r t i t i o n , c u t ) ;</cell></row><row><cell>t h r e a d . s t a r t ( ) ;</cell></row><row><cell>t h r e a d . j o i n ( 2  *  1 0 0 0 ) ; // 2000ms = 2 s</cell></row><row><cell>c u t . s e t ( true ) ;</cell></row><row><cell>// ( 6 ) P r i n t o f t h e r e s u l t s</cell></row><row><cell>System . out . p r i n t ( p a r t i t i o n . t o J s o n ( ) ) ;</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>Table 1 :</head><label>1</label><figDesc>Example of usage of CONNOR</figDesc><table /></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1" xml:id="foot_0"><p>Accessible here: https://gitlab.inria.fr/hayats/CONNOR</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="2" xml:id="foot_1"><p>https://jena.apache.org/</p></note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">A Two-Step Approach for Explainable Relation Extraction</title>
		<author>
			<persName><forename type="first">H</forename><surname>Ayats</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Cellier</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Ferré</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Int. Symposium on Intelligence Data Analysis</title>
		<imprint>
			<date type="published" when="2022">2022</date>
			<biblScope unit="page" from="14" to="25" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">A contribution to semantic indexing and retrieval based on FCA -An application to song datasets</title>
		<author>
			<persName><forename type="first">V</forename><surname>Codocedo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Lykourentzou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Napoli</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on Concept Lattices anf Their Applications</title>
		<imprint>
			<date type="published" when="2012">2012</date>
			<biblScope unit="page">12</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">A Proposal for Extending Formal Concept Analysis to Knowledge Graphs</title>
		<author>
			<persName><forename type="first">S</forename><surname>Ferré</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on Formal Concept Analysis</title>
		<meeting><address><addrLine>Cham</addrLine></address></meeting>
		<imprint>
			<publisher>Springer International Publishing</publisher>
			<date type="published" when="2015">9113. 2015</date>
			<biblScope unit="page" from="271" to="286" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Answers Partitioning and Lazy Joins for Efficient Query Relaxation and Application to Similarity Search</title>
		<author>
			<persName><forename type="first">S</forename><surname>Ferré</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">The Semantic Web</title>
		<imprint>
			<publisher>Cham</publisher>
			<date type="published" when="2018">2018</date>
			<biblScope unit="page" from="209" to="224" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Application of Concepts of Neighbours to Knowledge Graph Completion</title>
		<author>
			<persName><forename type="first">S</forename><surname>Ferré</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Data Science Pre-press</title>
		<imprint>
			<date type="published" when="2020">2020</date>
			<biblScope unit="page" from="1" to="28" />
		</imprint>
	</monogr>
	<note>Pre-press</note>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Formal Concept Analysis: From Knowledge Discovery to Knowledge Processing</title>
		<author>
			<persName><forename type="first">S</forename><surname>Ferré</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Huchard</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Kaytoue</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">O</forename><surname>Kuznetsov</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Napoli</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">A Guided Tour of Artificial Intelligence Research</title>
		<imprint>
			<biblScope unit="volume">II</biblScope>
			<biblScope unit="page" from="411" to="445" />
			<date type="published" when="2020">2020</date>
		</imprint>
	</monogr>
	<note>AI Algorithms</note>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Fitting Pattern Structures to Knowledge Discovery in Big Data</title>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">O</forename><surname>Kuznetsov</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Int. Conf. on Formal Concept Analysis</title>
		<imprint>
			<date type="published" when="2013">2013</date>
			<biblScope unit="volume">7880</biblScope>
			<biblScope unit="page" from="254" to="266" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Relational concept analysis: mining concept lattices from multi-relational data</title>
		<author>
			<persName><forename type="first">M</forename><surname>Rouane-Hacene</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Huchard</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Napoli</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Valtchev</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Annals of Mathematics and Artificial Intelligence</title>
		<imprint>
			<biblScope unit="volume">67</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="81" to="108" />
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
