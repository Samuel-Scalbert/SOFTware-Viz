<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Core SBML and its Formal Semantics</title>
				<funder ref="#_vckHXsv">
					<orgName type="full">Agence Nationale de la Recherche</orgName>
					<orgName type="abbreviated">ANR</orgName>
				</funder>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Joachim</forename><surname>Niehren</surname></persName>
							<affiliation key="aff0">
								<orgName type="laboratory">BioComputing Team of CRIStAL Lab</orgName>
								<orgName type="institution">Université de Lille</orgName>
							</affiliation>
							<affiliation key="aff1">
								<orgName type="institution" key="instit1">Inria Center</orgName>
								<orgName type="institution" key="instit2">University of Lille</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Cédric</forename><surname>Lhoussaine</surname></persName>
							<affiliation key="aff0">
								<orgName type="laboratory">BioComputing Team of CRIStAL Lab</orgName>
								<orgName type="institution">Université de Lille</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Athénaïs</forename><surname>Vaginay</surname></persName>
							<affiliation key="aff2">
								<orgName type="institution" key="instit1">Université de Lorraine</orgName>
								<orgName type="institution" key="instit2">CNRS</orgName>
								<orgName type="institution" key="instit3">CRAN &amp; LORIA</orgName>
								<address>
									<postCode>F-54000</postCode>
									<settlement>Nancy</settlement>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Core SBML and its Formal Semantics</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">19867B807DEE4724D3388A436FA4FFC0</idno>
					<note type="submission">Submitted on 3 Jul 2023</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.8.0" ident="GROBID" when="2024-04-12T14:44+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract xml:lang="fr">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>de niveau recherche, publiés ou non, émanant des établissements d'enseignement et de recherche français ou étrangers, des laboratoires publics ou privés.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>The three most prominent formalisms to model the quantitative dynamical evolution of biological systems over time are differential equations, reaction networks <ref type="bibr" target="#b8">[9]</ref>, and hybrid networks <ref type="bibr" target="#b10">[11]</ref>. If all parameters and initial values are known, then such models can be simulated numerically over time by some variant of the Euler's algorithm for deterministic simulation <ref type="bibr" target="#b5">[6]</ref>. In practice, this is supported by various tools, including Copasi <ref type="bibr" target="#b11">[12]</ref> and BioCham <ref type="bibr" target="#b2">[3,</ref><ref type="bibr" target="#b7">8]</ref>.</p><p>All the formalisms mentioned above can be integrated into a unified framework, as provided by the Systems Biology Markup Language (SBML) <ref type="bibr" target="#b17">[18]</ref>. Each of these formalisms has variables for denoting real-valued functions. These values of these variables can be constrained in different manners, by chemical reactions, differential equations, algebraic equations, and events. For reaction networks, the species of chemical reactions are considered as variables for the species' concentrations. These must satisfy the ordinary differential equations (ODEs) inferred from the reaction network. These ODEs specify how the concentrations of the species evolve continuously over real time according to the kinetic laws of the reactions. In hybrid networks, the values of variables can be changed by assignments triggered by some events. An event is triggered at the first time points when some logical conditions becomes valid. In mathematical models, variables may be constrained by algebraic equations and differential equations respectively. When allowed to combine the four kinds of constraints for variables (reactions, events, algebraic equations, differential equations) and to use not only species but all kinds of variables in kinetic laws of reactions, then the integrated framework is obtained.</p><p>The concrete syntax of SBML is an instance of the Extendable Markup Language (XML) that is formally defined by an XML schema. However, the semantics of SBML models lacks a formal definition. In particular, its advanced concepts such as bound-aryConditions, assignment rules, rate rules, and events with and delays are often difficult to interpret unambiguously. In such cases, most users (even experts) have to consult the equations that are inferred from by some tool (e.g. Copasi <ref type="bibr" target="#b20">[21]</ref>) in order to understand the meaning of a given model. The lack of a formal semantics that is independent of any implementation also makes it difficult to design correct interfaces with large coverage between various tools in systems biology, while using SBML as an exchange format. It is also not clear how to specify fragments of SBML that can be compiled to other languages such as BioCham. Furthermore, the correctness of such compilers cannot even be stated formally, given that SBML doesn't come with a formal semantics.</p><p>In the present paper, we propose Core SBML, a novel language covering a large subset of SBML, while coming with a clear formal semantics. We base Core SBML on an abstract term syntax, enabling the definition of the formal semantics. We also provide a concrete XML syntax of Core SBML following its abstract syntax. As a consequence the concrete syntax of Core SBML becomes different from that of SBML. We define the XML syntax of Core SBML by an XML schema that is composed of a DTD and a Schematron <ref type="bibr" target="#b14">[15]</ref> (rather than in RelaxNG <ref type="bibr" target="#b29">[30]</ref> or XML Schema <ref type="bibr" target="#b26">[27]</ref> as for SBML on level 3 and respectively level 2). All Core SBML networks that we produced were validated with respect to our XML schema.</p><p>Second, we present a compiler of a large fragment of SBML to Core SBML. Besides some tedious semantic aspects, a trick is needed to deal with r¡compartment volumes in full generality: we introduce algebraic variables for concentrations of species, and link them to variables for the amount of species via an algebraic equation. A formal correctness result cannot be expected, given that SBML lacks a formal semantics. We have implemented our compiler and applied it to all SBML models of the curated part of the BioModels database <ref type="bibr" target="#b19">[20]</ref>. It turns out that the only aspects of SBML models that cannot be translated by our compiler are delays in differential equations and events. These occur in only 19 out of the 547 SBML networks, though. Adding delays to Core SBML is not difficult syntactically, but would require further efforts in semantics and implementation.</p><p>The third contribution is a compiler from Core SBML to BioCham. The abstract syntax of BioCham is a restriction of that of Core SBML. In particular, BioCham does neither support delays, nor in differential equation nor in events. BioCham's concrete syntax is not based on XML. Its conciseness increases the human readability but makes automatic processing more laborious. One concept missing in BioCham compared to Core SBML are differential variables, but these can be easily converted to species variables. Another difference is that BioCham does not permit to specify initial values of species by arithmetic expressions in dependence of the initial values of other species. Therefore, our compiler has to evaluate the arithmetic expressions for initial values in Core SBML networks statically. Finally, some arithmetic functions such as tanh are built in (Core) SBML, but need to be encoded explicitely in BioCham. In this way, our compiler from Core SBML to BioCham preserves the differential algebraic equations and the initial values up to logical equivalence. It also preserves the events. This implies its correctness with respect to the semantics of both languages. It should be noted that BioCham has its own function for importing SBML models and converting them into reaction networks in BioCham's format. A major difference to our compiler is that BioCham's import ignores compartment volumes all over, which is correct only if all volumes are equal to 1.</p><p>We implemented both compilers in the XML Stylesheet Transformation Language (XSLT) <ref type="bibr" target="#b30">[31]</ref> with the Saxon programming tool <ref type="bibr" target="#b16">[17]</ref>, and started testing it by comparing numerical simulations. We made all Core SBML and BioCham networks produced by our compilers from the SBML networks in the curated part of the BioModels database available at https://biocomputing.univ-lille.fr/core-sbml. Related Work. Reaction networks lay the foundation of all quantitative modeling frameworks in systems biology. They may be given different semantics besides the deterministic continuous based on ODEs <ref type="bibr" target="#b6">[7]</ref>. The non-deterministic rewrite semantics <ref type="bibr" target="#b18">[19]</ref> ignores the kinetic expressions, while the stochastic semantics uses them differently, for computing the probability of a reaction to happen. Reaction networks also have a Boolean semantics which abstracts from the rewrite semantics (rather than the ODE semantics <ref type="bibr" target="#b22">[23]</ref>) . This Boolean semantics serves in BioCham for model verification.</p><p>Qualitative logical reasoning in systems biology is usually supported by Boolean networks <ref type="bibr" target="#b9">[10,</ref><ref type="bibr" target="#b25">26,</ref><ref type="bibr" target="#b21">22,</ref><ref type="bibr" target="#b24">25]</ref>. Compilers from reaction networks to Boolean networks with correctness guarantees with respect to the ODE semantics were considered in <ref type="bibr" target="#b22">[23]</ref> and without in <ref type="bibr" target="#b27">[28]</ref>. Alternatively, reaction networks with partial kinetic information on reactions on inhibitors and activators were considered for quantitative reasoning <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b23">24,</ref><ref type="bibr" target="#b15">16]</ref>. SBML level 3 models can support some kinds of partial kinetic information too. In the present paper, however, we consider only models with complete kinetic information, as supported by SBML level 2 models. Neither do we consider models with missing kinetic parameters or missing initial concentrations. Outline. After preliminaries on arithmetic expressions and algebraic differential equations in Section 2, we discuss SMBL informally in Section 3. The language of Core SBML is contributed in Section 4. A compiler of a large fragment of SBML to Core SBML is described in Section 5. The compiler to BioCham is discussed in Section 6. The appendix contains supplementary material, including the Core SBML and BioCham networks obtained by our compilers from three SBML models in the BioModels database.</p><p>Let B = {0, 1} be the set of Booleans, N the set of natural numbers including 0, R the set of real numbers, and R + the set of positive real numbers including 0. Note that B ⊆ N ⊆ R + ⊆ R.</p><p>A partial function g : S → T is a binary relation g ⊆ S × T that is functional, i.e., for all s ∈ S there exists at most one t ∈ T such that (s, t) ∈ g. For any partial function g, we write g(s) = t if and only if (s, t) ∈ g. The domain of a partial function is dom(g) = {s ∈ S | ∃t ∈ T. g(s) = t}. A total function g : S → T is a partial function g : S → T with dom(g) = S . The restriction of g to some S ′ ⊆ dom(g) is written as g |S ′ .</p><p>A substitution g = [s 1 /t 1 , . . . , s n /t n ] is the finite function with domain {s 1 , . . . , s n } such that g(s i ) = t i for all 1 ≤ i ≤ n. We also write g ′ = g[s/t] for the function with g ′ (s) = t and g ′ (s ′ ) = g(s ′ ) for all s ′ s. If s 1 , . . . , s n ∈ R + then we sometimes write the substitution g as a formal sum: g = s 1 t 1 + . . . + s n t n . Such functions can be seen as chemical solutions that contain species t i at concentration s i for all 1 ≤ i ≤ n and all other species at concentration 0. If n = 0, then g is the empty chemical solution that we denote by 0.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Arithmetic and Boolean Expressions</head><p>We introduce arithmetic and Boolean expressions. They depend mutually recursively on each other, since Boolean expressions may occur in the conditionals of arithmetic expressions, while arithmetic expressions may occur in the comparisons of Boolean expressions. In SBML and BioCham, arithmetic expressions are used in kinetic laws of reactions, while Boolean expressions serve as conditions of events. Both kinds of expressions are also well-known from various programming languages, so their scope is more general than just systems biology.</p><p>We assume a set of variables x ∈ V and a collection F = (F (n) ) n∈N with sets of function symbols f ∈ F (n) each requiring n arguments. The set of arithmetic expressions e ∈ E V and boolean expressions b ∈ B V are the set of all terms with the following abstract syntax:</p><p>e, e ′ , e 1 , . . . , e n ∈ E V ::</p><formula xml:id="formula_0">= x | k | where x ∈ V, k ∈ R, | e + e ′ | e -e ′ | ee ′ | e/e ′ | f (e 1 , . . . , e n ) f ∈ F (n) , n ∈ N | if b then e else e ′ b, b ′ ∈ B V ::= e ≤ e ′ | ¬b | b ∧ b ′</formula><p>The set of free variables fv(e) is the set of all those variables that occur in e. The operators of addition +, multiplication ee ′ , and division / can be interpreted over the relational structure of the real numbers as usual. We will formally do it in Fig. <ref type="figure">1</ref>. Note that division by zero is undefined. For any symbols f ∈ F (n) we assume a real-valued function f R n →R : R n → R defined elsewhere. This permits to have other real-valued functions</p><formula xml:id="formula_1">⟦x⟧ η = η(x) ⟦e + e ′ ⟧ η = ⟦e⟧ η + R ⟦e ′ ⟧ η ⟦k⟧ η = k ⟦e -e ′ ⟧ η = ⟦e⟧ η -R ⟦e ′ ⟧ η ⟦ee ′ ⟧ η = ⟦e⟧ η * R ⟦e ′ ⟧ η ⟦e/e ′ ⟧ η = ⟦e⟧ η / R ⟦e ′ ⟧ η if ⟦e ′ ⟧ η 0 undef otherwise ⟦ f (e 1 , . . . , e n )⟧ η = f R n →R (⟦e 1 ⟧ η , . . . , ⟦e n ⟧ η ) ⟦if b then e else e ′ ⟧ η =          ⟦e⟧ η if ⟦b⟧ η = 1 ⟦e ′ ⟧ η if ⟦b⟧ η = 0 undef otherwise ⟦e ≤ e ′ ⟧ η =          1 if ⟦e⟧ η ≤ R ⟦e ′ ⟧ η 0 if ⟦e⟧ η &gt; R ⟦e ′ ⟧ η undef otherwise ⟦b ∧ b ′ ⟧ η = ⟦b⟧ η ∧ B ⟦b ′ ⟧ η ⟦¬b⟧ η = ¬ B (⟦b⟧ η )</formula><p>Fig. <ref type="figure">1</ref>: Interpretation of arithmetic and boolean expressions over the reals in environments η : V → R.</p><p>such as exponentiation √ ., . 2 , exp, sin, cos, etc. For instance, we can define for any arithmetic expression v 1 , v 2 , J 1 , J 2 another arithmetic expression as follows: Furthermore, we note that disjunctions b ∨ b ′ can be defined as usual by ¬(¬b ∧ ¬b ′ ).</p><formula xml:id="formula_2">goldbeter koshland(v 1 , v 2 , J 1 , J 2 ) = def 2v 1 J 2 v 2 -v 1 +J 1 v 2 +J 2 v 1 + √ (v 2 -v 1 +J 1 v 2 +J 2 v 1 ) 2 -4(v 2 -v 1 ) v 1 J 2 Arithmetic expressions</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Interpretation over the Reals</head><p>Let η : V → R be a real-valued variable assignment. For any arithmetic expression e with fv(e) ⊆ dom(η) we can define its interpretation ⟦e⟧ η as a real number or undefined in Fig. <ref type="figure">1</ref> Undefineness comes from undefined operations such as the division by zero mentioned previously. When interpreting an expression, the value undef for undefinedness propagates recursively. In mutual recursion, we define in Fig. <ref type="figure">1</ref> for any boolean expression b with fv(b) ⊆ dom(η) a boolean interpretation ⟦b⟧ η which may also be undefined.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Interpretation as Real-Valued Functions over Time</head><p>Since dynamical systems evolve over time, we are interested in interpreting arithmetic expressions as real-valued functions over time. We now define such an interpretation.</p><p>Let T ⊆ R + be a subset of time points. For any variable assignment α : V → (T → R), we can interpret any arithmetic expression e with fv(e) ⊆ dom(α) to a real-valued function of type ⟦e⟧ α : T → R or remain undefined. The interpretation of boolean expressions b as functions ⟦e⟧ α : T → B from time points to Booleans works in analogy.</p><p>For this, we define any time point t ∈ T the real-valued assignments α t : V → R such that α t (x) = α(x)(t). The interpretations over real functions then satisfies for all time points t ∈ T :</p><formula xml:id="formula_3">⟦e⟧ α (t) = ⟦e⟧ α t and ⟦b⟧ α (t) = ⟦b⟧ α t .</formula><p>Suppose that we are given a variable time whose interpretation α(time) is fixed as the identity function on R + , so that for all time points t ∈ R + :</p><formula xml:id="formula_4">α(time)(t) = t</formula><p>Arithmetic expressions can be used to define piecewise real-valued functions such as: </p><formula xml:id="formula_5">if 0 ≤ time ∧ time ≤ 2.</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.4">Differential Algebraic Equation Systems</head><p>We recall the syntax and semantics of systems of algebraic and differential equations. We use the standard framework of first-order logic. A differential algebraic system of equations is a first-order formula with the following abstract syntax, where x ∈ V and e ∈ E V :</p><p>S , S ′ ::= x</p><formula xml:id="formula_6">• = e | ẋ • = e | S ∧ S ′ | ∃x.S</formula><p>We can define inequations S ≥ 0 by the equation system ∃x. S</p><formula xml:id="formula_7">• = xx. An equation system is called algebraic if it contains no differential equation ẋ • = e. It is called an ordinary differential equation (ODE) if it contains no algebraic equation x • = e. Let T ⊆ R + and α : V → (T → R). We call α a solution of the algebraic equation x • = e if α(x) = ⟦e⟧ α . We call α a solution of a differential equation ẋ • = e if α(x) = ⟦e⟧ α .</formula><p>Note that the derivative of α(x) may be undefined, in which case the above equation does not hold. We call α a solution of S ∧ S ′ if it is a solution of both S and S ′ . And finally, α is a solution of ∃x.S if there exists a function f :</p><formula xml:id="formula_8">D → R such that α[x/ f ] is a solution of S .</formula><p>For algebraic equations x</p><p>• = e, we can define real-valued solutions η : V → R such that η(x) = ⟦e⟧ η . Note however, that the structure of real numbers cannot give interpretation to the derivative operator, so real-valued solutions do not make sense for differential equations.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.5">Adding Delays</head><p>For getting delay differential equations, it is sufficient to extend the set of arithmetic expressions E V with a delay operator. The abstract syntax becomes:</p><p>e ∈ E V (delay) ::= . . . | delay k (e)</p><p>where k ∈ R +</p><p>The semantics over real-valued functions is such that ⟦delay k (e)⟧ α (t) = ⟦e⟧ α (tk).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">SBML</head><p>The systems biology markup language (SBML) is widely used to represent models of dynamical systems in systems biology. SBML models subsume chemical reaction networks, algebraic equations, differential equations, and events. While systems biology is the main application domain of SBML, the scope of dynamical systems and thus SMBL is way larger (economics, weather forcast, etc). The BioModels database <ref type="bibr" target="#b3">[4]</ref> provides more than 500 curated SBML models for biological systems online, many of which were introduced in research papers. The prime tool for the numerical simulation of SBML models is Copasi <ref type="bibr" target="#b20">[21]</ref> but many other tools in systems biology have SBML interfaces.</p><p>In the present paper, we focus on complete SBML models that can be simulated numerically. Such models are available from SBML level 2 <ref type="bibr" target="#b13">[14]</ref>. SBML levels correspond to upward-compatible specifications that add features and expressive power.</p><p>Partial descriptions of complete models were added on level 3 of SBML <ref type="bibr" target="#b12">[13]</ref>. These are out of the scope of the present paper.</p><p>Inside a level, successive versions supersed one another. Each version has an XML syntax that is defined by some schema for XML documents. An SBML model is an XML document that is valid for the schema of the considered version. The schemas of the different versions of SBML on level 2 are defined in the language XML Schema <ref type="bibr" target="#b28">[29]</ref>, while the schemas of the versions of SBML on level 3 are defined in language RelaxNG <ref type="bibr" target="#b29">[30]</ref>.</p><p>We now present the concepts of the language SBML on level 2 informally, while focussing on their semantics. A formal semantic of SBML models, however, is missing. This is problematic since even experts often have difficulties to understand the precise meaning of an SBML model. The semantics is described by mixing algebraic and differential equations with events. Tools like Copasi <ref type="bibr" target="#b11">[12]</ref> and SBML2L A T E X <ref type="bibr" target="#b4">[5]</ref> permit to infer these equations from SBML models. These informal description of how this works may be insufficient to predict the precise equations manually.</p><p>SBML models describe the values of a finite set V of variables, such that each variable x ∈ V denotes some real valued function ⟦x⟧ : R + → R. The variables are constrained in different manners, by reactions, assignment rules, rate rules, and events.</p><p>Let e be an arithmetic expression in E V (delay). Assignment rules x</p><p>• = e make a direct assignment to the variable values, while rate rules ẋ • = e make a direct assignment to the rate of change of the variable x, denoted ẋ. The simplest events have the form b ⇒ x := e where b ∈ B V , x ∈ V and e ∈ E V . They change the value of a variable x to the current value of e at all earliest time point when condition b becomes true. But there are more complex forms of event with delays. Even events with priorities are pemitted, but these do not occur in the curated BioModels.</p><p>Variables may stand for various objects including kinetic parameters and compartment volumes. Some of the variables have a special role as they store the amount of the species of interest. In addition, for each such species variable x ∈ V there is a joined concentration variable denoted by [x] ∈ V, whose semantics is defined implicitly, as the amount of the species divided by the volume c of the compartment in wich the species is located, so [x] • = x/c. Reactions can only change the amount of species variables. They have the form:</p><formula xml:id="formula_9">k 1 x 1 + . . . + k n x n e - → k ′ 1 y 1 + . . . + k ′ m y m where k i , k ′ i ∈ R + , x i , y i ∈ V,</formula><p>and n, m ∈ N, while e is an arithmetic expression in E V (delay). Species on the left of the arrows are refered to as reactants and those on the right as products. Those species that appear in e but those amount is not changed by reaction are refered to as modifiers (of which some can be distinguished explicitely).</p><p>If the same variable is changed both by some rules and by some reactions, then the priority is given to the rules. Finally, all variables are given an initial values, either directly, or by the mean of an assignment rule.</p><p>In the present paper, SBML models are represented by graphically. The graphs are produced by converting SMBL to Core SBML and the applying BioComputing's Network-Graph tool. The newest version can chose x-y-coordinates automatically. But for producing nicer graphs in the paper, we have improved the layout semi-automatically for the examples with yet another tool of the BioComputing group.</p><formula xml:id="formula_10">R S 0 Ep Et-[E] E Et goldbeter koshland(k3,k4 [R],J3,J4) r0 env k0 [E] r2 env k2 [R] [S] r3 env k3 [Ep] Km3+[Ep] r4 env k4 [R] [E] Km4+[E] Parameters k0 • =1 k2 • =1 k3 • =0.5 J3 • =0.01 k4 • =1 J4 • =0.01 Et • =1 Km3 • =J3 Et Km4 • =J4 Et env • =1 Concentrations [R] • = R env [S] • = S env [Ep] • = Ep env [E] • = E env Initial values R • =0 S • =0</formula><p>Fig. <ref type="figure">2:</ref> A graphical illustration of the SBML model B309 of the BioModels database. The values of the species in the white circles are defined by algebraic equations Ep</p><formula xml:id="formula_11">• = Et -[E]</formula><p>and E • = goldbeter koshland(k3, k4 conc R , J3, J4) from assignment rules. Therefore, the species Ep and E are to be ignored as reactants and products of reactions r3 and r4. Species S has a default rate 0 yielding the ODE Ṡ • = 0. The kinetic law of reaction r4 is</p><formula xml:id="formula_12">env k3 [Ep]</formula><p>Km3+ <ref type="bibr">[Ep]</ref> . The parameters there are defined by the algebraic equations on the right. The dashed lines indicate modifiers of a reaction.</p><p>In the graphs of SBML models (see e.g. Fig. <ref type="figure">2</ref>) circles represent species variables and gray boxes represent reactions. Variables identifiers for species amount and concentration are in red, as well as the reaction name. Other parameters are in black. The kinetic expression of a reaction is annotated to its box. Its modifiers are indicated by dash edges. Plain directed edges from a species to a reaction, and from a reaction to a specie encode the reactants and the product of the reaction, respectively. These edges are annotated with the stoichiometric coefficients of the reaction k i , k ′ i if these are different from 1.</p><p>The products and reactants of reactions are drawn in yellow circles. A white circles indicates that the value of the corresponding species is defined by some assignment rules. The expression that is assigned is annotated to the circle. Similarly, a brown circle indicate that the rate of the variable is directly dependent of a rate rule. Here, the rate is annotated to the circle.</p><p>The SMBL model B309 of the BioModels database (called BIOMD0000000309 there) is presented graphically in Fig. <ref type="figure">2</ref>. This model is a toy example of homeostasis with negative feedback. It involves four reactions r0, r2, r3 and r4, ten parameters and four species (E, Ep, R and S). All species belong to the same compartment env with fixed volume 1. Only the value of the species R is actually modified by reactions. All the other species are in fact change by rules: assignment rule for Ep and E and a rate rule for Ṡ. These species are thus to be ignored as reactant and product of the reactions, even if they are listed such. Graphically, this is reflected by having a yellow circle for R, white circles for E and Ep, and a brown circle for S.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Core SBML</head><p>Reaction networks of Core SBML also contain reactions, equations and events. A main difference to SMBL is that each variable has a unique type, so that it cannot be constrained in contradictory manner a priori. So no priorities need to be formulated to rule out conflicting definitions.</p><p>In Core SBML it is optional to relate a species variable to some variable for its concentration and to another variable for its compartment volume. In SBML, in contrast, this is more mandatory. In case that the option is taken, the algebraic equation defining the concentration from the amount of the species and the volume must be stated explicitly in Core SBML. The consistency of this algebraic equation is then required by the schema of Core SBML networks.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Abstract Syntax and Semantics</head><p>We start the formal definition with a set V = S ⊎ V alg ⊎ V diff with three disjoints sets of variables: species in S, algebraic variables in V alg , and differential variables in V diff .</p><p>Definition 1. Let S ⊆ V be finite sets. A reaction of Core SBML with species in S and variables in V is a triple (R, P, e) where R, P : S → R + and e ∈ E V .</p><p>We denote reactions as R e -→ P instead of (R, P, e). The expression e ∈ E V is called the kinetic law of the reaction. The species A ∈ S with R(A) &gt; 0 are called the reactants of the reaction and the species with P(A) &gt; 0 are called its products. In contrast to SBML, the reactants and products in Core SBML do only permit variables in S. Other variables in V \ S are ruled out since these are constrained by equations or events. Furthermore, delays are not permitted in arithmetic expressions. An example for a Core SBML reaction with mass-action kinetics is:</p><formula xml:id="formula_13">2A + B 2.1xA 2 B ------→ A + 2.1C</formula><p>where A, B, C ∈ S and x ∈ V \ S. This reaction has the reactants A with coefficient 2 and B with coefficient 1. Its products are A with coefficient 1 and C with coefficient 2.1. Note that the kinetic expression does not only contain the reactants A and B but also the variable x ∈ V \ S, which can be used to model the volume of the compartment in which A and B reside.</p><p>Any species variable x ∈ S denotes a positive real numbers, which stands for the species' amount. All other kinds of variables y ∈ V \ S denote arbitrary real numbers. Algebraic variables z ∈ V alg can be used to define compartment values and species concentrations.</p><p>Definition 2. Let V alg ⊆ V. An event E with variables in V and algebraic variables in V alg has the following form: Intuitively, an event E is triggered at the earliest time point when its boolean condition b becomes true. In this case a sequence of updates u are executed from the left to the right. Any update x := e may change the value of some variable x ∈ V \ V alg to the value of the arithmetic expression e at the current time point.</p><p>Note that values of algebraic variables x ∈ V alg cannot be updated, since they always must satisfy x • = expr(x). In contrast, the values of differential variables y ∈ V diff may be updated while preserving its equation ẏ = expr(y) except for the time point of the update. Also, the values of species can be updated by events. Definition 3. A Core SBML network is a tuple N = (V, Reacts, expr, init, Evts) where V = S ⊎ V alg ⊎ V diff is a finite set of variables, Reacts is a finite set of Core SMBL reactions with species in S and variables in V and Evts a finite set of events with variables in V and algebraic variables in V alg . Furthermore:</p><formula xml:id="formula_14">expr : V \ S → E V , init : V \ V alg → E V .</formula><p>Any reaction network N of Core SBML defines a system of algebraic differential equations that we introduce next. The value of reaction species x ∈ S evolves over time according to the following ODE induced by the set of reactions of N:</p><formula xml:id="formula_15">ẋ • = (R,P,e)∈Reacts e(P(x) -R(x))</formula><p>Furthermore x ≥ 0 must hold for the trajectories of all species x ∈ S, so at all time points. Note that the kinetic expression e may depend on any kind of variables in V not only on species. The values of the algebraic variables x ∈ V alg are specified by the algebraic equation x • = expr(x). A differential variable y ∈ V diff comes with a differential equation ẏ • = expr(y). The differential-algebraic system of equations of a reaction network N, denoted dae(N), is defined by:</p><formula xml:id="formula_16">dae(N) = x∈S ẋ • = (R,P,e)∈Reacts e(P(x) -R(x)) ∧ x∈S x ≥ 0 ∧ x∈V alg x • = expr(x) ∧ x∈V diff ẋ • = expr(x)</formula><p>The function init defines the initial value of all variables that are not algebraic. The initial values at time point 0 must satisfy the following algebraic equations now interpreted over the reals.</p><formula xml:id="formula_17">initState(N) = x∈V\V alg x • = init(x) ∧ y∈V alg y • = expr(y)</formula><p>For instance, the reaction network with init(x) = 2.1 and expr(y) = x + 1 impose the algebraic equations to define the initial values at time 0:</p><formula xml:id="formula_18">x • = 2.1 ∧ y • = x + 1</formula><p>We make the additional assumption on all Core SBML networks that there is no cyclic dependency between algebraic equations and initializations. This makes it possible to evaluate init(x) for all nonalgebraic variables x. We note that this acyclicity assumption of of Core SBML is consistent with the SBML specification too.</p><p>For instance, the reaction network with init(y) = x and expr(x) = y is ill-formed where y ∈ V \ V alg and x ∈ V alg is an algebraic variable, since the initial values are required to have the following cyclic dependencies:</p><formula xml:id="formula_19">x • = y ∧ y • = x</formula><p>We note that Core SBML networks subsume differential algebraic equations. These can be expressed by using algebraic and differential variables. Core SBML also subsumes chemical reaction networks <ref type="bibr" target="#b8">[9]</ref>. Delays in differential equations or events are not supported though.</p><p>Core SBML networks may be enriched with extra information on top of Definition 3. The first kind concerns the definition of macros that will be discussed in Section 4.2 and the second how to represent compartments, volumes, and concentrations of species, see Section 4.4. The third kind concerns control parameters for events discussed in Section 4.5.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Macros</head><p>A subset V macros ⊆ V alg of macros may be distinguished. Given a macro x ∈ V macros we call the expr(x) the macros' definition. We assume that the definitions of macros are acyclic (in contast to more other algebraic equations). Therefore, all macros can be removed by exhaustively replacing them by their definitions. Macros can be used to represent SBML's parameters possibly with assignment rules. In graphs of Core SMBL networks, we show the macros definitions in a table while non-macro algebraic variables are drawn as nodes in white circles in the graphs of networks.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Example</head><p>We illustrate Core SBML at the networks in Fig. <ref type="figure">3</ref>; it captures the essence of the SBML model B309 in Fig. <ref type="figure">2</ref>. The Core SBML network has a single species S = {R}, the algebraic variables</p><formula xml:id="formula_20">V alg = {E, Ep} ∪ V macros , where V macros = {Et, k 3 , k 4 , J 3 , J 4 , . . .}, a single differential variable V diff = {S}.</formula><p>The definitions of the macros are given in Fig. <ref type="figure">3</ref>. The initial values are given there too. Note that algebraic values don't have initial values.</p><p>In contrast to the SBML model in Fig. <ref type="figure">2</ref>, there are no more variables for species' concentrations. This simplification makes sence given that the volume of compartment of all species was env = 1, so that concentrations and amounts did coincide anyway.</p><p>We note another differnce to the SBML model B309: the species Ep is no more a product of reaction r3 and the species E is no more a reactant of reaction r4. In SMBL they existed syntactically, but had no semantic effect on the equations. In Core SBML, such inconsistencies are forbidden a priori by Definition 1.</p><formula xml:id="formula_21">R S 0 Ep Et-E E Et goldbeter koshland(k3,k4 R,J3,J4) r0 k0 E r2 k2 R S r3 k3 Ep Km3+Ep r4 k4 R E Km4+E Macro definitions k0 • =1 k2 • =1 k3 • =0.5 J3 • =0.01 k4 • =1 J4 • =0.01 Et • =1 Km3 • =J3 Et Km4 • =J4 Et Initial values S • =0 R • =0</formula><p>Fig. <ref type="figure">3</ref>: Core SBML network capturing the essence of the SMBL model B309 in Fig. <ref type="figure">2</ref>. Note that the variables E and Ep were removed from the reactants and products of reactions r3 and r4 since irrelevant. There are macro definitions for representing the SMBL parameters. Irrelevant variables for concentrations and compartment volumes were eliminated. Initial values are not changed.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4">Concentrations, Compartments, and Volumes</head><p>The second kind of extra information of Core SBML networks serves for representing species's concentations, compartments, and volumes. This is done in such a way that all equations are made explicit, even though this may leads to redundant information. The consistency of this redudant information is verified by the schema of Core SBML.</p><p>For each species x, two algebraic variables may be specified optionally. The first variable y stands for the concentration of x, and the second variable c for its compartment. If both are present, then the volume of the compartment of x is vol = expr(c). The schema of Core SBML then imposes that expr(y) = x c . Hence, the equation system dae(N) of the network N contains the equations y</p><formula xml:id="formula_22">• = x c ∧ c • = vol.</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.5">Control Parameters</head><p>The third kind of extra information for Core SBML networks concerns variable that are controlled by events. A subset of control parameters V ctrl ⊆ V diff may be specified. Any control parameter x ∈ V ctrl is a differential variable with a fixed rate expr(x) = 0, so that it is constant over time (satisfying x • = 0) except for time points when events apply. The initial value init(x) remains to be specified by Core SBML models. In graphical representations, we will show a table with all control parameters and its initial values. In contrast to other differential variables, control parameters are not drawn as nodes of the network graph.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.6">XML Syntax</head><p>We propose a concrete XML syntax for Core SBML that follows its abstract syntax. As a consequence the concrete syntax of Core SMBL is not a fragment of the concrete syntax of SBML. Still the idea is that it captures most of the expressiveness of SBML. This is consistent with the usual role of core languages in the context of programming languages.</p><p>Each variable of Core SBML is equipped with its type as "species", "algebraic", "differential", or "control", in contrast to the untyped identifiers such as &lt;ci&gt; Ep &lt;/ci&gt; of SBML inherited from MathML. For instance, we can define an algebraic variable Ep for the SBML species with an assignment rule, a macro [Ep] for its concentration, and a macro env for its compartment as follows.</p><p>&lt;variable type="algebraic" id="Ep" concentration="conc_Ep" compartment="env"&gt; &lt;kinetic-expression&gt; &lt;minus&gt; &lt;expr id="Et"/&gt; &lt;expr id="conc_E"/&gt; &lt;/minus&gt; &lt;/kinetic-expression&gt; &lt;/variable&gt; &lt;expression id="conc_Ep" latex-look="[Ep]"&gt; &lt;divide&gt; &lt;var type="algebraic" id="Ep"/&gt; &lt;expr id="env"/&gt; &lt;/divide&gt; &lt;/expression&gt; &lt;expression id="env"&gt; &lt;constant value="1"/&gt; &lt;/expression&gt; Variable references such as &lt;var type="algebraic" id="Ep"/&gt; are typed too. Note that the attribute latex-look permits to display species more nicely while keeping their identifiers simple. Mathematical operators such as divide are named such as in MathML, but can be applied directly (without requiring an additional apply element).</p><p>For illustration, we present the Core SBML models for B309, B001, and B111 in our XML format in Sections A.4, B.3, and C.6 of the appendix.</p><p>We defined an XML schema for Core SBML documents based on a document type descriptor (DTD) and a Schematron <ref type="bibr" target="#b14">[15]</ref>. Compared to XML Schema <ref type="bibr" target="#b26">[27]</ref> or RelaxNG <ref type="bibr" target="#b29">[30]</ref>, our approach has the advantage to nicely localize errors in invalid documents. This enables informative error messages. The DTD defines the hierarchical structure of Core SBML networks. The Schematron ensures the consistency of concentrations, amounts, and compartment volumes. It also verifies that there are no dangling references, i.e. that there is a variable definition for any var references with the same identifier and the same type. The Schematron also rules out empty identifiers or forbidden symbols in identifiers.</p><p>We developed some additional tools for Core SBML networks by using XML technology. We developped a graph drawing tool mapping Core SBML networks to the format of BioComputing's NetworkGraph tool. We also have a script computing the algebraic differential equations of a Core SBML network in XML format. Last not least, we implemented an inverse compiler from Core SBML to SBML.</p><p>5 Compiler from a SBML Fragment to Core SBML Many concepts of SBML and Core SBML correspond in a direct manner. The main semantic difference are the permission of delays in ODEs and events of SMBL. These cannot be translated to Core SBML. Apart of this the syntax of Core SMBL (abstract and XML) is different from that of SMBL in order to guarantee the consistency of the equations. The compiler needs to identify the information in SBML models that is to be ignored in order to resolve inconsistencies based on SMBL's priorities.</p><p>Resolving inconsistencies is tedious given the informal character of the SBML specifications. In particular, it requires to precisely understand the relevance of species' attributes such as @boundaryCondition and @constant which interact in a complex manner. Selecting the right values from attributes @initialConcentration, @initialAmount and element &lt;initialAssignment&gt; is another issue. The details on these engineering aspects of the compiler cannot be presented in detail here.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Compartments, Volumes, and Concentrations</head><p>The proper treatment of compartments, volumes and concentration raises a non-obvious difficulty, given that Core SMBL does not reserve any extra treatment for them besides the consistency validation (see <ref type="bibr">Section 4.4)</ref>.</p><p>In order to explain this difficulty, let us first recall how compartment volumes and concentrations are treated in SBML. Each SBML species A is mapped to some compartment variable c, whose value is equal to that of some arithmetic expression vol standing for the compartments volume. The species A itself is used as a variable for the amount of A. SBML models may refer to a second variable [A] that stands for A's concentration. The ODE for a species A -as infered by Copasi <ref type="bibr" target="#b20">[21]</ref> or SBML2L A T E X <ref type="bibr" target="#b4">[5]</ref> as used by the BioModels database <ref type="bibr" target="#b19">[20]</ref> -then has the following form, where some other concentration variables such as [B] may occur on the right:</p><formula xml:id="formula_23">Ȧ • = . . . [A] . . . [B] . . . .</formula><p>The variables for the amount and the concentration are coupled via the volume vol of the compartment c of species A, as expressed by the following equation:</p><formula xml:id="formula_24">[A] • = A/c ∧ c • = vol If vol = 1 then [A]</formula><p>• = A so we can identify A and [A] so that a single variable is enough. That is why a single variable per species was enough in the Core SBML network for the essence of the SMBL model B309 in Fig. <ref type="figure">3</ref>.</p><p>Our idea for correctly compiling SBML models to Core SBML networks without restrictions on compartment volumes follows the two variable strategy of SBML. The compiler will introduce for any species variable A an algebraic variable [A] for its concentration and another algebraic variable c for its compartment, such that expr([A]) = A/c and expr(c) = vol where vol is the arithmetic expression for the volume of c. We can then use the variable [A] in the kinetic expressions of the reactions of Core SBML as done by SBML. The Core SBML networks produced by the compiler will use the option to store for each species A the relationship to the concentration variable [A], and the compartment variable c, so that expr(</p><formula xml:id="formula_25">[A]) = A/c is guaranteed by Core SMBL's schema. R S 0 Ep (Et-[E]) E Et goldbeter koshland(k3,k4 [R],J3,J4) r0 env k0 [E] r2 env k2 [R] [S] r3 env k3 [Ep] Km3+[Ep] r4 env k4 [R] [E] Km4+[E] Macro definitions [R] • = R env [S] • = S env [Ep] • = Ep env [E] • = E env k0 • =1 k2 • =1 k3 • =0.5 J3 • =0.01 k4 • =1 J4 • =0.01 Et • =1 Km3 • =J3 Et Km4 • =J4 Et env • =1 Initial values S • =0 R • =0</formula><p>Fig. <ref type="figure">4</ref>: The Core SBML network compiled from B309 in Fig. <ref type="figure">2</ref>.</p><p>Fig. <ref type="figure">5</ref>: Control variables, events, and initial values of B111.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Examples for the Compiler</head><p>The compiler applied to SBML model B309 yields the Core SBML network with the graph in Fig. <ref type="figure">4</ref>. By replacing the algebraic variables for the concentration by the amount variables (given that the volume of compartment env is equal to 1), we obtain the previous Core SBML network in Fig. <ref type="figure">3</ref>. We note that the compartment structure present in the SMBL network is made fully explicit by the Core SBML network produced by our compiler. This structure is consistent with the equations in Fig. <ref type="figure">4</ref>:</p><formula xml:id="formula_26">Amount concentration compartment R [R] env S [S] env Ep [Ep] env E [E] env</formula><p>We next consider an SBML model with events which is B111 from BioModels. This network has 2 control variables and 2 events for their update, 9 reaction species, and an algebraic species MPF defined by an assignment rule. The events for updating the control variables are given in Sections C.4 and C.5. The compiler yields the Core SBML network in Fig. ??. For each of the 9 reaction species it has a species variables and an algebraic variable for its concentration. Since the volume of compartment cell is equal to 1, the concentrationt variables must have the same value as the amount variables, so the network could be simplified. R1 The SMBL species MPF with an assignment rule becomes an algebraic variables in Core SMBL and yields another algebraic variable for the concentration <ref type="bibr">[MPF]</ref>. We note that some modifiers of reactions R3, R4, and R17 are hidden in the definition of the macros TF, k 25 and kwee, see Section C.2.</p><formula xml:id="formula_27">k1 [CellMass] R2 (k2 ′ +k2 ′′ [ste9]+k2 ′′′ [slp1]) [Totalcdc13] R3 kwee ([Totalcdc13]-[preMPF]) R4 k25 [preMPF] R5 (k2 ′ +k2 ′′ [ste9]+k2 ′′′ [slp1]) [preMPF] R6 (k3 ′ +k3 ′′ [slp1]) (1-[ste9]) (J3+1-[ste9]) R7 (k4 ′ [SK]+k4 [MPF]) [ste9] J4+[ste9] R8 k5 ′ + k5 ′′ ([MPF]) 4 (J5)4 +([MPF])4 R9 k6 [slp1T] R10 k7 [IEP] ([slp1T]-[slp1]) (J7+[slp1T]-[slp1]) R11 k8 [slp1] J8+[slp1] R12 k6 [slp1] R13 k9 [MPF] (1-[IEP]) (J9+1-[IEP]) R14 k10 [IEP] J10+[IEP] R15 k11 R16 (k12+k12 ′ [SK]+k12 ′′ [MPF]) [rum1T] R17 k13 TF R18 k14 [SK] R19 mu [CellMass]</formula><p>An SMBL model where the compartment size matters is the BioModel BIMOD00000001 that we call B001 for short. The compartment of its species has a very small volume comp1 = 1e -16. See Section B for the details.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3">Implementation</head><p>We implemented our compiler from a large fragment of SBmML to Core SBML in the XML stylesheet transformation language (XSLT) <ref type="bibr" target="#b30">[31]</ref>. We also implemented a straightforward inverse compiler to SBML. Based thereon, we can obtain simulation trajectories for Core SBML networks via Copasi. This permits us to compare the trajectories of the Core SBML networks obtained by our compiler to those of the original SBML model. On few tests on SBML models with dynamic compartment changes, we observed equal trajectories, confirming the correctness of our treatment of compartment volumes.</p><p>We applied our compiler to the 548 SBML models in the curated BioModels database. The compilation results are available at https://biocomputing.univ-lille.fr/core-sbml. Out of the 548 curated SBML models, all but 19 could be compiled to Core SBML. Of these 13 contain delays in events and 6 delays in differential equations. Adding these two features to our formal treatment of Core SBML is easy, but practically it would require 2 more days of implementation. We also note that 56 curated BioModels contain piecewise linear functions, that we compiled to conditionals while using the constant time.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.4">Limitations</head><p>Another issue is that the SMBL specification supports events with priorities. On the one hand side, the semantics of event priorities is quite complicated, on the other hand side they are not used in any SBML model of curated part of the BioModels database. Therefore we decided to not add any event priorities to Core SBML.</p><p>A limitation of the current compiler is that it ignores most aspects of SBML irrelevant for the dynamic semantics. In particular, this applies to units like mol per liter, but also to the information on the reversibility of reactions (which only talks about the motivation of the kinetic law of the reaction). Furthermore, all XML elements for annotation and notes are ignored too.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Compiler of Core SBML to BioCham</head><p>BioCham supports pure chemical reaction networks with kinetic expressions and events, while ruling out arithmetic and differential variables. When ignoring its analysis and verification facilities, the abstract syntax of BioCham's modeling language is basically the same as that of Core SBML without algebraic and algebraic variable. Macros for expressions and function definitions are equally available.</p><p>Note that the import of SBML models by BioCham 4 follows the single variable approach where [A] • = A is valid for all species A. Compartment volumes are ignored all over. This is correct for compartments with fixed volume equal to 1, but incorrect otherwise. The compilation of SBML to Core SBML, in contrast, introduces two different variables for A and [A] and then imposed the expected relationship. In this way, even dynamical changes of compartment volumes can be modeled correctly.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.1">Compiler</head><p>We next show how to map Core SBML networks to BioCham 4. In combination with our compiler from SMBL to Core SBML from Section 5, this can be used to improve on BioCham current SBML import.</p><p>First, we notice that our set of arithmetic expression E V coincides with that of BioCham 4. In particular, conditionals are supported there but no delays. However, not all build-in functions of SBML coming via MathML are natively supported by BioCham 4. A counter example is tanh. But we found BioCham definitions for all those used in the SBML models of the Curated part of the BioModels database.</p><p>In particular we can define tanh as follows:</p><formula xml:id="formula_28">function(sinh(x) = (((2.71828ˆx) -(2.71828ˆ(0 -x))) / 2)). function(cosh(x) = (((2.71828ˆx) + (2.71828ˆ(0 -x))) / 2)). function(tanh(x) = (sinh(x) / cosh(x))). function(coth(x) = (cosh(x) / sinh(x)))</formula><p>Second notice, that BioCham can express any chemical reactions R e -→ P of Core SBML by the statement: e for R =&gt; P. Third, BioCham 4 can express any algebraic equation x • = e by the statement function(x=e). Fourth, differential variables of Core SBML can be eliminated at beforehand: It is sufficient to turn any differential variable x into a species, that is produced by an artificial reaction with kinetic expression expr(x) and not consumed by any other reaction. Fifth, the events of Core SBML coincide with those of BioCham 4 up to details of their concrete syntax. For instance the event of B001 can be written as follows in BioCham 4:</p><p>add_event((t2&lt;Time), kf_0 = 0, kf_3 = 0, kf_7 = 0, kf_12 = 0, kf_1 = 0, kf_4 = 0, kf_8 = 0, kf_13 = 0). % reaction for species variable Time 1 for _ =&gt; Time.</p><p>Sixth, initial values in BioCham must be specified by reals: they cannot be specified by arithmetic expressions, so that BioCham could compute them from other initial values. Therefore, the compiler has to evaluate the arithmetic expressions init(x) to some real number for any x ∈ V \ V alg . The evaluation cannot loop, since we assumed that there are no cyclic dependency between algebraic equations and initializations.</p><p>Our compiler from Core SBML to BioCham is correct in that maintains the differential algebraic equations of the network and its initial conditions up to equivalence, and also the events of the network. The correctness could be stated and proven formally. We note that BioCham cannot represent compartment structures. Our compiler can safely ignore Core SBML's logical information relating amounts, compartments, and concentrations, since consistency with the equations is garanteed anyway.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.2">Implementation</head><p>We implemented our compiler from Core SBML to BioCham 4 in XSLT. We notice that the concrete syntax varies with the version of BioCham. The concrete syntax of the BioCham 4 networks for the SBML models B309, B001, and B111 can be found in Sections A.3, B.4, and C.7 of the appendix. The full collection of BioCham networks for all curated BioModels is available online at https://biocomputing.univ-lille.fr/coresbml. In this way, we obtained a second method to simulate Core SBML networks via BioCham. In particular, we could sucessfully simulate some SMBL models with dynamic compartment volumes via BioCham.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Conclusion</head><p>We presented the Core SBML, an exchange format for systems biology, which, in contrast to SBML, has a clear formal semantics based on differential algebraic equations. We argued that Core SBML covers a large part of the curated BioModels. In order to cover all of them, it is sufficient to add delays in differential equations and events. Conceptually this is not difficult, but it requires some more implementation efforts. In any case, delays are shown to make the only true difference in expressiveness between SBML and BioCham. We believe that Core SBML can help to reduce the difficulties to bridge the various tools in systems biology. A good next step could be to use Core SBML to revise the SMBL import of the scientific computing language Julia <ref type="bibr" target="#b1">[2]</ref>. On this way, we hope that Core SBML will find a large acceptance for tools in systems biology eventually.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A Example of BioModel B309</head><p>A.1 Graph of Core SBML network for B309</p><p>The compiler converts the SBML model B309 with the graph from Fig. <ref type="figure">2</ref> to the Core SBML network with the graph in Fig. <ref type="figure">4</ref>. Given that the volume of compartment env is equal to 1, it can be simplified to the Core SBML network discussed earlier in Fig. <ref type="figure">3</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A.2 XML Syntax of Core SBML Network B309</head><p>The Core SBML network in Fig. <ref type="figure">4</ref> has the following concrete XML syntax.</p><p>&lt;?xml version="1.0" encoding="utf-8"?&gt; &lt;network id="Tyson2003_NegFB_Homeostasis" name="Tyson2003_NegFB_Homeostasis" version="2.1"&gt;&lt;!--+++ start species +++++ --&gt;&lt;!--species without initial assignment --&gt; &lt;variable type="species" id="R" latex-look="R" initial="0" concentration="conc_R" compartment="env"/&gt; &lt;expression id="conc_R" latex-look="[R]"&gt; &lt;divide&gt; &lt;var type="species" id="R"/&gt; &lt;expr id="env"/&gt; &lt;/divide&gt; &lt;/expression&gt; &lt;!--species with rateRule --&gt; &lt;variable type="differential" id="S" compartment="env" latex-look="S" initial="0" concentration="conc_S"&gt; &lt;kinetic-expression&gt; &lt;constant value="0"/&gt; &lt;/kinetic-expression&gt; &lt;/variable&gt; &lt;expression id="conc_S" latex-look="[S]"&gt; &lt;divide&gt; &lt;var type="differential" id="S"/&gt; &lt;expr id="env"/&gt; &lt;/divide&gt; &lt;/expression&gt; &lt;!--species with assignmentRule --&gt; &lt;variable type="algebraic" id="Ep" latex-look="Ep" concentration="conc_Ep" compartment="env"&gt; &lt;kinetic-expression&gt; &lt;minus&gt; &lt;expr id="Et"/&gt; &lt;expr id="conc_E"/&gt; &lt;/minus&gt; &lt;/kinetic-expression&gt; &lt;/variable&gt; &lt;expression id="conc_Ep" latex-look="[Ep]"&gt; &lt;divide&gt; &lt;var type="algebraic" id="Ep"/&gt; &lt;expr id="env"/&gt; &lt;/divide&gt; &lt;/expression&gt; &lt;!--species with assignmentRule --&gt; &lt;variable type="algebraic"</p><p>id="E" latex-look="E" concentration="conc_E" compartment="env"&gt; &lt;kinetic-expression&gt; &lt;times&gt; &lt;expr id="Et"/&gt; &lt;apply fun="goldbeter_koshland"&gt; &lt;expr id="k3"/&gt; &lt;times&gt; &lt;expr id="k4"/&gt; &lt;expr id="conc_R"/&gt; &lt;/times&gt; &lt;expr id="J3"/&gt; &lt;expr id="J4"/&gt; &lt;/apply&gt; &lt;/times&gt; &lt;/kinetic-expression&gt; &lt;/variable&gt; &lt;expression id="conc_E" latex-look="[E]"&gt; &lt;divide&gt; &lt;var type="algebraic" id="E"/&gt; &lt;expr id="env"/&gt; &lt;/divide&gt; &lt;/expression&gt; &lt;!--+++ start reactions +++++--&gt; &lt;reaction id="r0"&gt; &lt;kinetic-expression&gt; &lt;times&gt; &lt;expr id="env"/&gt; &lt;expr id="k0"/&gt; &lt;expr id="conc_E"/&gt; &lt;/times&gt; &lt;/kinetic-expression&gt; &lt;product spec="R"/&gt; &lt;modifier spec="E"/&gt; &lt;/reaction&gt; &lt;reaction id="r2"&gt; &lt;kinetic-expression&gt; &lt;times&gt; &lt;expr id="env"/&gt; &lt;expr id="k2"/&gt; &lt;expr id="conc_R"/&gt; &lt;expr id="conc_S"/&gt; &lt;/times&gt; &lt;/kinetic-expression&gt; &lt;reactant spec="R"/&gt; &lt;modifier spec="S"/&gt; &lt;/reaction&gt; &lt;reaction id="r3"&gt; &lt;kinetic-expression&gt; &lt;divide&gt; &lt;times&gt; &lt;expr id="env"/&gt; &lt;expr id="k3"/&gt; &lt;expr id="conc_Ep"/&gt; &lt;/times&gt; &lt;plus&gt;&lt;!-nonconstant parameter without rule nor event--&gt; &lt;expr id="Km3"/&gt; &lt;expr id="conc_Ep"/&gt; &lt;/plus&gt; &lt;/divide&gt; &lt;/kinetic-expression&gt; &lt;/reaction&gt; &lt;reaction id="r4"&gt; &lt;kinetic-expression&gt; &lt;divide&gt; &lt;times&gt; &lt;expr id="env"/&gt; &lt;expr id="k4"/&gt; &lt;expr id="conc_R"/&gt; &lt;expr id="conc_E"/&gt; &lt;/times&gt; &lt;plus&gt;&lt;!-nonconstant parameter without rule nor event--&gt; &lt;expr id="Km4"/&gt; &lt;expr id="conc_E"/&gt; &lt;/plus&gt; &lt;/divide&gt; &lt;/kinetic-expression&gt; &lt;modifier spec="R"/&gt; &lt;/reaction&gt; &lt;!--+++ start functionDefinitions +++++ --&gt; &lt;function id="goldbeter_koshland"&gt; &lt;lambda&gt; &lt;bvar id="v1"/&gt; &lt;bvar id="v2"/&gt; &lt;bvar id="J1"/&gt; &lt;bvar id="J2"/&gt; &lt;divide&gt; &lt;times&gt; &lt;constant value="2"/&gt; &lt;var id="v1"/&gt; &lt;var id="J2"/&gt; &lt;/times&gt; &lt;plus&gt; &lt;minus&gt; &lt;var id="v2"/&gt; &lt;var id="v1"/&gt; &lt;/minus&gt; &lt;times&gt; &lt;var id="J1"/&gt; &lt;var id="v2"/&gt; &lt;/times&gt; &lt;times&gt; &lt;var id="J2"/&gt; &lt;var id="v1"/&gt; &lt;/times&gt; &lt;power&gt; &lt;minus&gt; &lt;power&gt; &lt;plus&gt; &lt;minus&gt; &lt;var id="v2"/&gt; &lt;var id="v1"/&gt; &lt;/minus&gt; &lt;times&gt; &lt;var id="J1"/&gt; &lt;var id="v2"/&gt; &lt;/times&gt; &lt;times&gt; &lt;var id="J2"/&gt; &lt;var id="v1"/&gt; &lt;/times&gt; &lt;/plus&gt; &lt;constant value="2"/&gt; &lt;/power&gt; &lt;times&gt; &lt;constant value="4"/&gt; &lt;minus&gt; &lt;var id="v2"/&gt; &lt;var id="v1"/&gt; &lt;/minus&gt; &lt;var id="v1"/&gt; &lt;var id="J2"/&gt; &lt;/times&gt; &lt;/minus&gt; &lt;divide&gt; &lt;constant value="1"/&gt; &lt;constant value="2"/&gt; &lt;/divide&gt; &lt;/power&gt; &lt;/plus&gt; &lt;/divide&gt; &lt;/lambda&gt; &lt;/function&gt; &lt;!--+++ start parameters +++++ --&gt; &lt;expression id="k0" latex-look="k0"&gt; &lt;constant value="1"/&gt; &lt;/expression&gt; &lt;expression id="k2" latex-look="k2"&gt; &lt;constant value="1"/&gt; &lt;/expression&gt; &lt;expression id="k3" latex-look="k3"&gt; &lt;constant value="0.5"/&gt; &lt;/expression&gt; &lt;expression id="J3" latex-look="J3"&gt; &lt;constant value="0.01"/&gt; &lt;/expression&gt; &lt;expression id="k4" latex-look="k4"&gt; &lt;constant value="1"/&gt; &lt;/expression&gt; &lt;expression id="J4" latex-look="J4"&gt; &lt;constant value="0.01"/&gt; &lt;/expression&gt; &lt;expression id="Et" latex-look="Et"&gt; &lt;constant value="1"/&gt; &lt;/expression&gt; &lt;!--with assignment rule --&gt; &lt;expression id="Km3" latex-look="Km3"&gt; &lt;times&gt; &lt;expr id="J3"/&gt; &lt;expr id="Et"/&gt; &lt;/times&gt; &lt;/expression&gt; &lt;!--with assignment rule --&gt; &lt;expression id="Km4" latex-look="Km4"&gt; &lt;times&gt; &lt;expr id="J4"/&gt; &lt;expr id="Et"/&gt; &lt;/times&gt; &lt;/expression&gt; &lt;!--+++ start compartments --&gt; &lt;!--constant compartment --&gt; &lt;expression id="env" latex-look="env"&gt; &lt;constant value="1"/&gt; &lt;/expression&gt; &lt;/network&gt; \end{minited} &lt;?xml version="1.0" encoding="utf-8"?&gt; &lt;network id="Tyson2003_NegFB_Homeostasis" name="Tyson2003_NegFB_Homeostasis" version="2.1"&gt;&lt;!--+++ start species +++++ --&gt;&lt;!--species without initial assignment --&gt; &lt;variable type="species" id="R" latex-look="R" initial="0" concentration="conc_R" compartment="env"/&gt; &lt;expression id="conc_R" latex-look="[R]"&gt; &lt;divide&gt; &lt;var type="species" id="R"/&gt; &lt;!--compartment without rateRule nor event --&gt; &lt;expr id="env"/&gt; &lt;/divide&gt; &lt;/expression&gt; &lt;!--rateRule for object S which is neither a compartment nor a parameter--&gt; &lt;variable type="differential" id="S" compartment="env" latex-look="S" initial="0"&gt; &lt;kinetic-expression&gt; &lt;constant value="0"/&gt; &lt;/kinetic-expression&gt; &lt;/variable&gt; &lt;expression id="conc_S" latex-look="[S]"&gt; &lt;divide&gt; &lt;var type="differential" id="S"/&gt; &lt;!--compartment without rateRule nor event --&gt; &lt;expr id="env"/&gt; &lt;/divide&gt; &lt;/expression&gt; &lt;!--species with assignmentRule --&gt; &lt;variable type="algebraic" id="Ep" latex-look="Ep" concentration="conc_Ep" compartment="env"&gt; &lt;kinetic-expression&gt; &lt;minus&gt; &lt;expr id="Et"/&gt; &lt;expr id="conc_E"/&gt; &lt;/minus&gt; &lt;/kinetic-expression&gt; &lt;/variable&gt; &lt;expression id="conc_Ep" latex-look="[Ep]"&gt; &lt;divide&gt; &lt;var type="algebraic" id="Ep"/&gt; &lt;!--compartment without rateRule nor event --&gt; &lt;expr id="env"/&gt; &lt;/divide&gt; &lt;/expression&gt; &lt;!--species with assignmentRule --&gt; &lt;variable type="algebraic"</p><p>id="E" latex-look="E" concentration="conc_E" compartment="env"&gt; &lt;kinetic-expression&gt; &lt;times&gt; &lt;expr id="Et"/&gt; &lt;apply fun="goldbeter_koshland"&gt; &lt;expr id="k3"/&gt; &lt;times&gt; &lt;expr id="k4"/&gt; &lt;expr id="conc_R"/&gt; &lt;/times&gt; &lt;expr id="J3"/&gt; &lt;expr id="J4"/&gt; &lt;/apply&gt; &lt;/times&gt; &lt;/kinetic-expression&gt; &lt;/variable&gt; &lt;expression id="conc_E" latex-look="[E]"&gt; &lt;divide&gt; &lt;var type="algebraic" id="E"/&gt; &lt;!--compartment without rateRule nor event --&gt; &lt;expr id="env"/&gt; &lt;/divide&gt; &lt;/expression&gt; &lt;!--+++ start reactions +++++--&gt; &lt;reaction id="r0"&gt; &lt;kinetic-expression&gt; &lt;times&gt;&lt;!-compartment without assignmentRule --&gt; &lt;expr id="env"/&gt; &lt;expr id="k0"/&gt; &lt;expr id="conc_E"/&gt; &lt;/times&gt; &lt;/kinetic-expression&gt; &lt;product spec="R"/&gt; &lt;modifier spec="E"/&gt; &lt;/reaction&gt; &lt;reaction id="r2"&gt; &lt;kinetic-expression&gt; &lt;times&gt;&lt;!-compartment without assignmentRule --&gt; &lt;expr id="env"/&gt; &lt;expr id="k2"/&gt; &lt;expr id="conc_R"/&gt; &lt;expr id="conc_S"/&gt; &lt;/times&gt; &lt;/kinetic-expression&gt; &lt;reactant spec="R"/&gt; &lt;modifier spec="S"/&gt; &lt;/reaction&gt; &lt;reaction id="r3"&gt; &lt;kinetic-expression&gt; &lt;divide&gt; &lt;times&gt;&lt;!-compartment without assignmentRule --&gt; &lt;expr id="env"/&gt; &lt;expr id="k3"/&gt; &lt;expr id="conc_Ep"/&gt; &lt;/times&gt; &lt;plus&gt;&lt;!-nonconstant parameter without rule nor event--&gt; &lt;expr id="Km3"/&gt; &lt;expr id="conc_Ep"/&gt; &lt;/plus&gt; &lt;/divide&gt; &lt;/kinetic-expression&gt; &lt;/reaction&gt; &lt;reaction id="r4"&gt; &lt;kinetic-expression&gt; &lt;divide&gt; &lt;times&gt;&lt;!-compartment without assignmentRule --&gt; &lt;expr id="env"/&gt; &lt;expr id="k4"/&gt; &lt;expr id="conc_R"/&gt; &lt;expr id="conc_E"/&gt; &lt;/times&gt; &lt;plus&gt;&lt;!-nonconstant parameter without rule nor event--&gt; &lt;expr id="Km4"/&gt; &lt;expr id="conc_E"/&gt; &lt;/plus&gt; &lt;/divide&gt; &lt;/kinetic-expression&gt; &lt;modifier spec="R"/&gt; &lt;/reaction&gt; &lt;!--+++ start functionDefinitions +++++ --&gt; &lt;function id="goldbeter_koshland"&gt; &lt;lambda&gt; &lt;bvar id="v1"/&gt; &lt;bvar id="v2"/&gt; &lt;bvar id="J1"/&gt; &lt;bvar id="J2"/&gt; &lt;divide&gt; &lt;times&gt; &lt;constant value="2"/&gt; &lt;var id="v1"/&gt; &lt;var id="J2"/&gt; &lt;/times&gt; &lt;plus&gt; &lt;minus&gt; &lt;var id="v2"/&gt; &lt;var id="v1"/&gt; &lt;/minus&gt; &lt;times&gt; &lt;var id="J1"/&gt; &lt;var id="v2"/&gt; &lt;/times&gt; &lt;times&gt; &lt;var id="J2"/&gt; &lt;var id="v1"/&gt; &lt;/times&gt; &lt;power&gt; &lt;minus&gt; &lt;power&gt; &lt;plus&gt; &lt;minus&gt; &lt;var id="v2"/&gt; &lt;var id="v1"/&gt; &lt;/minus&gt; &lt;times&gt; &lt;var id="J1"/&gt; &lt;var id="v2"/&gt; &lt;/times&gt; &lt;times&gt; &lt;var id="J2"/&gt; &lt;var id="v1"/&gt; &lt;/times&gt; &lt;/plus&gt; &lt;constant value="2"/&gt; &lt;/power&gt; &lt;times&gt; &lt;constant value="4"/&gt; &lt;minus&gt; &lt;var id="v2"/&gt; &lt;var id="v1"/&gt; &lt;/minus&gt; &lt;var id="v1"/&gt; &lt;var id="J2"/&gt; &lt;/times&gt; &lt;/minus&gt; &lt;divide&gt; &lt;constant value="1"/&gt; &lt;constant value="2"/&gt; &lt;/divide&gt; &lt;/power&gt; &lt;/plus&gt; &lt;/divide&gt; &lt;/lambda&gt; &lt;/function&gt; &lt;!--+++ start parameters +++++ --&gt; &lt;expression id="k0"&gt; &lt;constant value="1"/&gt; &lt;/expression&gt; &lt;expression id="k2"&gt; &lt;constant value="1"/&gt; &lt;/expression&gt; &lt;expression id="k3"&gt; &lt;constant value="0.5"/&gt; &lt;/expression&gt; &lt;expression id="J3"&gt; &lt;constant value="0.01"/&gt; &lt;/expression&gt; &lt;expression id="k4"&gt; &lt;constant value="1"/&gt; &lt;/expression&gt; &lt;expression id="J4"&gt; &lt;constant value="0.01"/&gt; &lt;/expression&gt; &lt;expression id="Et"&gt; &lt;constant value="1"/&gt; &lt;/expression&gt; &lt;!--with assignment rule --&gt; &lt;expression id="Km3" latex-look="Km3"&gt; &lt;times&gt; &lt;expr id="J3"/&gt; &lt;expr id="Et"/&gt; &lt;/times&gt; &lt;/expression&gt; &lt;!--with assignment rule --&gt; &lt;expression id="Km4" latex-look="Km4"&gt; &lt;times&gt; &lt;expr id="J4"/&gt; &lt;expr id="Et"/&gt; &lt;/times&gt; &lt;/expression&gt; &lt;!--+++ start compartments +++ --&gt; &lt;!--constant compartment --&gt; &lt;expression id="env" latex-look="env"&gt; &lt;constant value="1"/&gt; &lt;/expression&gt; &lt;/network&gt;</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A.3 Compilation to BioCham</head><p>From the Core SBML model of B309 we obtain the following network of BioCham (version 4) by our compiler. &lt;unitDefinition id="time" metaid="_1f68b21e-950d-4a11-8db0-a76699ead661" name="s"&gt; &lt;listOfUnits&gt; &lt;unit kind="second" metaid="_067a2aff-e5bd-4ba1-98cb-0b707de517e1"/&gt; &lt;/listOfUnits&gt; &lt;/unitDefinition&gt; &lt;unitDefinition id="substance" metaid="a11b8c1c-ea6a-4be4-a15b-dd180add236b" name="mole"&gt; &lt;listOfUnits&gt; &lt;unit kind="mole" metaid="_56d5798a-0737-4803-bd11-dbba0905306a"/&gt; &lt;/listOfUnits&gt; &lt;/unitDefinition&gt; &lt;unitDefinition id="per_s" metaid="_3cb5fe4b-0a06-4817-999d-44baface77a1" name="per_s"&gt; &lt;listOfUnits&gt; &lt;unit exponent="-1" kind="second" metaid="_4b1d24ff-10c7-4a9d-b110-520d30defd43"/&gt; &lt;/listOfUnits&gt; &lt;/unitDefinition&gt; &lt;unitDefinition id="M_per_s" metaid="_5012ac45-6837-4b95-856d-9f7c6cdc4298" name="M_per_s"&gt; &lt;listOfUnits&gt; &lt;unit kind="mole" metaid="ae9afbf7-6d4b-4aad-a672-a488d0efd0e9"/&gt; &lt;unit exponent="-1" kind="second" metaid="f757ee55-401c-4ccd-88b3-cc5cd9e58545"/&gt; &lt;unit exponent="-1" kind="litre" metaid="b2bc9896-5431-4525-873a-f4cd846cc38c"/&gt; &lt;/listOfUnits&gt; &lt;/unitDefinition&gt; &lt;unitDefinition id="M" metaid="acfbc63d-c7be-4ddd-859f-67253cf77434" name="M"&gt; &lt;listOfUnits&gt; &lt;unit kind="mole" metaid="_3d00cb92-ab57-453d-a281-fc7b168d545b"/&gt; &lt;unit exponent="-1" kind="litre" metaid="_43d0c259-16f1-411f-9066-a58a0611058d"/&gt; &lt;/listOfUnits&gt; &lt;/unitDefinition&gt; &lt;unitDefinition id="per_M_per_s" metaid="_2de6849f-8d39-4e46-97b3-8265dda6a80f" name="per_M_per_s"&gt; &lt;listOfUnits&gt; &lt;unit exponent="-1" kind="mole" metaid="b5d48f92-49dd-4b0f-9f10-8dc4e9a5b7b3"/&gt; &lt;unit kind="litre" metaid="_99822380-2ea1-41a2-8f00-deddc82b66e4"/&gt; &lt;unit exponent="-1" kind="second" metaid="_4d5f5779-88d0-4a2f-babb-62c6d4e5a53b"/&gt; &lt;/listOfUnits&gt; &lt;/unitDefinition&gt; &lt;/listOfUnitDefinitions&gt; &lt;listOfCompartments&gt; &lt;compartment id="env" metaid="_466213" sboTerm="SBO:0000290" size=" &lt;parameter id="k0" metaid="_466243" sboTerm="SBO:0000035" units="per_s" value="1"/&gt; &lt;parameter id="k2" metaid="_466244" sboTerm="SBO:0000036" units="per_M_per_s" value="1"/&gt; &lt;parameter id="k3" metaid="_466245" sboTerm="SBO:0000186" units="M_per_s" value="0.5"/&gt; &lt;parameter id="J3" metaid="_466248" sboTerm="SBO:0000002" units="dimensionless" value="0.01"/&gt; &lt;parameter id="k4" metaid="_466251" sboTerm="SBO:0000025" units="per_s" value="1"/&gt; &lt;parameter id="J4" metaid="_466254" sboTerm="SBO:0000002" units="dimensionless" value="0.01"/&gt; &lt;parameter id="Et" metaid="_466257" sboTerm="SBO:0000196" units="M" value="1"/&gt; &lt;parameter constant="false" id="Km3" metaid="_466260" sboTerm="SBO:0000027" units="M"/&gt; &lt;parameter constant="false" id="Km4" metaid="_466263" sboTerm="SBO:0000027" units="M"/&gt; &lt;/listOfParameters&gt; &lt;listOfRules&gt; &lt;assignmentRule metaid="_466232" variable="Km3 &lt;reaction id="r0" metaid="_466220" reversible="false" sboTerm="SBO:0000176"&gt; &lt;annotation&gt; &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:bqmodel="http://biomodels.net/model-qualifiers/" xmlns:bqbiol="http://biomodels.net/biology-qualifiers/"&gt; &lt;rdf:Description rdf:about="#_466220"&gt; &lt;bqbiol:isVersionOf&gt; &lt;rdf:Bag&gt; &lt;rdf:li rdf:resource="http://identifiers.org/go/GO:0009058"/&gt; &lt;/rdf:Bag&gt; &lt;/bqbiol:isVersionOf&gt; &lt;/rdf:Description&gt; &lt;/rdf:RDF&gt; &lt;/annotation&gt; &lt;listOfProducts&gt; &lt;speciesReference metaid="_024e533e-e719-4fa9-b98a-7a3f250e4482" species="R"/&gt; &lt;/listOfProducts&gt; &lt;listOfModifiers&gt; &lt;modifierSpeciesReference metaid="_0f58e551-3ae6-4274-a879-62d8c6612dc6" sboTerm="SBO:0000461" species="E"/&gt; &lt;/listOfModifiers&gt; &lt;kineticLaw metaid="bf538c71-85b1-4de9-aeb2-ba76e5a755bf" sboTerm="SBO:0000049"&gt; &lt;math xmlns="http://www.w3.org/1998/Math/MathML"&gt; &lt;apply&gt; &lt;times/&gt; &lt;ci&gt; env &lt;/ci&gt; &lt;ci&gt; k0 &lt;/ci&gt; &lt;ci&gt; E &lt;/ci&gt; &lt;/apply&gt; &lt;/math&gt; &lt;/kineticLaw&gt; &lt;/reaction&gt; &lt;reaction id="r2" metaid="_466221" reversible="false" sboTerm="SBO:0000179"&gt; &lt;annotation&gt; &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:bqmodel="http://biomodels.net/model-qualifiers/" xmlns:bqbiol="http://biomodels.net/biology-qualifiers/"&gt; &lt;rdf:Description rdf:about="#_466221"&gt; &lt;bqbiol:isVersionOf&gt; &lt;rdf:Bag&gt; &lt;rdf:li rdf:resource="http://identifiers.org/go/GO:0009056"/&gt; &lt;/rdf:Bag&gt; &lt;/bqbiol:isVersionOf&gt; &lt;/rdf:Description&gt; &lt;/rdf:RDF&gt; &lt;/annotation&gt; &lt;listOfReactants&gt; &lt;speciesReference metaid="_108012dd-11ba-4eb8-b8e4-9597bf2476ca" species="R"/&gt; &lt;/listOfReactants&gt; &lt;listOfModifiers&gt; &lt;modifierSpeciesReference metaid="_4ca109bf-58ac-42e3-94c7-cbe8dad04767" sboTerm="SBO:0000461" species="S"/&gt; &lt;/listOfModifiers&gt; &lt;kineticLaw metaid="c171bdcb-e165-4c1b-940a-f055e99eed93" sboTerm="SBO:0000054"&gt; &lt;math xmlns="http://www.w3.org/1998/Math/MathML"&gt; &lt;apply&gt; &lt;times/&gt; &lt;ci&gt; env &lt;/ci&gt; &lt;ci&gt; k2 &lt;/ci&gt; &lt;ci&gt; R &lt;/ci&gt; &lt;ci&gt; S &lt;/ci&gt; &lt;/apply&gt; &lt;/math&gt; &lt;/kineticLaw&gt; &lt;/reaction&gt; &lt;reaction id="r3" metaid="_466224" reversible="false" sboTerm="SBO:0000330"&gt; &lt;annotation&gt; &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:bqmodel="http://biomodels.net/model-qualifiers/" xmlns:bqbiol="http://biomodels.net/biology-qualifiers/"&gt; &lt;rdf:Description rdf:about="#_466224"&gt; &lt;bqbiol:isVersionOf&gt; &lt;rdf:Bag&gt; &lt;rdf:li rdf:resource="http://identifiers.org/go/GO:0006470"/&gt; &lt;/rdf:Bag&gt; &lt;/bqbiol:isVersionOf&gt; &lt;/rdf:Description&gt; &lt;/rdf:RDF&gt; &lt;/annotation&gt; &lt;listOfReactants&gt; &lt;speciesReference metaid="_2286d738-1a95-4676-8e71-bbde5b3adb09" species="Ep"/&gt; &lt;/listOfReactants&gt; &lt;listOfProducts&gt; &lt;speciesReference metaid="e7d81429-959f-47ee-94eb-47ed2c986168" species="E"/&gt; &lt;/listOfProducts&gt; &lt;kineticLaw metaid="_69717de2-7efe-4f71-a406-48b934fbe87b" sboTerm="SBO:0000029"&gt; &lt;math xmlns="http://www.w3.org/1998/Math/MathML"&gt; &lt;apply&gt; &lt;divide/&gt; &lt;apply&gt; &lt;times/&gt; &lt;ci&gt; env &lt;/ci&gt; &lt;ci&gt; k3 &lt;/ci&gt; &lt;ci&gt; Ep &lt;/ci&gt; &lt;/apply&gt; &lt;apply&gt; &lt;plus/&gt; &lt;ci&gt; Km3 &lt;/ci&gt; &lt;ci&gt; Ep &lt;/ci&gt; &lt;/apply&gt; &lt;/apply&gt; &lt;/math&gt; &lt;/kineticLaw&gt; &lt;/reaction&gt; &lt;reaction id="r4" metaid="_466227" reversible="false" sboTerm="SBO:0000216"&gt; &lt;annotation&gt; &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:bqmodel="http://biomodels.net/model-qualifiers/" xmlns:bqbiol="http://biomodels.net/biology-qualifiers/"&gt; &lt;rdf:Description rdf:about="#_466227"&gt; &lt;bqbiol:isVersionOf&gt; &lt;rdf:Bag&gt; &lt;rdf:li rdf:resource="http://identifiers.org/go/GO:0006468"/&gt; &lt;/rdf:Bag&gt; &lt;/bqbiol:isVersionOf&gt; &lt;/rdf:Description&gt; &lt;/rdf:RDF&gt; &lt;/annotation&gt; &lt;listOfReactants&gt; &lt;speciesReference metaid="_08a384e3-bc10-447d-bba6-77c8979320a5" species="E"/&gt; &lt;/listOfReactants&gt; &lt;listOfProducts&gt; &lt;speciesReference metaid="_93eeb224-faac-4b56-9dd6-52e91de8dbce" species="Ep"/&gt; &lt;/listOfProducts&gt; &lt;listOfModifiers&gt; &lt;modifierSpeciesReference metaid="_1b8a0dfc-2ed2-4bd6-b6f2-eff149e5bed9" sboTerm="SBO:0000460" species="R"/&gt; &lt;/listOfModifiers&gt; &lt;kineticLaw metaid="_0ec5b1b0-c47f-42ef-b403-654a6a1e18da" sboTerm="SBO:0000029"&gt; &lt;math xmlns="http://www. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B Example of BioModel B001</head><p>The BioModel B001 is an example of a network with a nontrivial cell volume. It also has an event depending on real time while updating control parameters.</p><p>[BasalACh2]    concentration="conc_BLL" compartment="comp1"/&gt; &lt;expression id="conc_BLL" latex-look="[BasalACh2]"&gt; &lt;divide&gt; &lt;var type="species" id="BLL"/&gt; &lt;expr id="comp1"/&gt; &lt;/divide&gt; &lt;/expression&gt; &lt;!--species without initial assignment --&gt; &lt;variable type="species" id="IL" latex-look="IntermediateACh" initial="0" concentration="conc_IL" compartment="comp1"/&gt; &lt;expression id="conc_IL" latex-look="[IntermediateACh]"&gt; &lt;divide&gt; &lt;var type="species" id="IL"/&gt; &lt;expr id="comp1"/&gt; &lt;/divide&gt; &lt;/expression&gt; &lt;!--species without initial assignment --&gt; &lt;variable type="species" id="AL" latex-look="ActiveACh" initial="0" concentration="conc_AL" compartment="comp1"/&gt; &lt;expression id="conc_AL" latex-look="[ActiveACh]"&gt; &lt;divide&gt; &lt;var type="species" id="AL"/&gt; &lt;expr id="comp1"/&gt; &lt;/divide&gt; &lt;/expression&gt; &lt;!--species without initial assignment --&gt; &lt;variable type="species" id="A" latex-look="Active" initial="0" concentration="conc_A" compartment="comp1"/&gt; &lt;expression id="conc_A" latex-look="[Active]"&gt; &lt;divide&gt; &lt;var type="species" id="A"/&gt; &lt;expr id="comp1"/&gt; &lt;/divide&gt; &lt;/expression&gt; &lt;!--species without initial assignment --&gt; &lt;variable type="species" id="BL" latex-look="BasalACh" initial="0" concentration="conc_BL" compartment="comp1"/&gt; &lt;expression id="conc_BL" latex-look="[BasalACh]"&gt; &lt;divide&gt; &lt;var type="species" id="BL"/&gt; &lt;expr id="comp1"/&gt; &lt;/divide&gt; &lt;/expression&gt; &lt;!--species without initial assignment --&gt; &lt;variable type="species" id="B" latex-look="Basal" initial="1.66057788110262e-21" concentration="conc_B" compartment="comp1"/&gt; &lt;expression id="conc_B" latex-look="[Basal]"&gt; &lt;divide&gt; &lt;var type="species" id="B"/&gt; &lt;expr id="comp1"/&gt; &lt;/divide&gt; &lt;/expression&gt; &lt;!--species without initial assignment --&gt; &lt;variable type="species" id="DLL" latex-look="DesensitisedACh2" initial="0" concentration="conc_DLL" compartment="comp1"/&gt; &lt;expression id="conc_DLL" latex-look="[DesensitisedACh2]"&gt; &lt;divide&gt; &lt;var type="species" id="DLL"/&gt; &lt;expr id="comp1"/&gt; &lt;/divide&gt; &lt;/expression&gt; &lt;!--species without initial assignment --&gt; &lt;variable type="species" id="D" latex-look="Desensitised" initial="0" concentration="conc_D" compartment="comp1"/&gt; &lt;expression id="conc_D" latex-look="[Desensitised]"&gt; &lt;divide&gt; &lt;var type="species" id="D"/&gt; &lt;expr id="comp1"/&gt; &lt;/divide&gt; &lt;/expression&gt; &lt;!--species without initial assignment --&gt; &lt;variable type="species" id="ILL" latex-look="IntermediateACh2" initial="0" concentration="conc_ILL" compartment="comp1"/&gt; &lt;expression id="conc_ILL" latex-look="[IntermediateACh2]"&gt; &lt;divide&gt; &lt;var type="species" id="ILL"/&gt; &lt;expr id="comp1"/&gt; &lt;/divide&gt; &lt;/expression&gt; &lt;!--species without initial assignment --&gt; &lt;variable type="species" id="DL" latex-look="DesensitisedACh" initial="0" concentration="conc_DL" compartment="comp1"/&gt; &lt;expression id="conc_DL" latex-look="[DesensitisedACh]"&gt; &lt;divide&gt; &lt;var type="species" id="DL"/&gt; &lt;expr id="comp1"/&gt; &lt;/divide&gt; &lt;/expression&gt; &lt;!--species without initial assignment --&gt; &lt;variable type="species" id="I" latex-look="Intermediate" initial="0" concentration="conc_I" compartment="comp1"/&gt; &lt;expression id="conc_I" latex-look="[Intermediate]"&gt; &lt;divide&gt; &lt;var type="species" id="I"/&gt; &lt;expr id="comp1"/&gt; &lt;/divide&gt; &lt;/expression&gt; &lt;!--species without initial assignment --&gt; &lt;variable type="species" id="ALL" latex-look="ActiveACh2" initial="0" concentration="conc_ALL" compartment="comp1"/&gt; &lt;expression id="conc_ALL" latex-look="[ActiveACh2]"&gt; &lt;divide&gt; &lt;var type="species" id="ALL"/&gt; &lt;expr id="comp1"/&gt; &lt;/divide&gt; &lt;/expression&gt; &lt;!--+++ start reactions +++++--&gt; &lt;reaction id="React0"&gt; &lt;kinetic-expression&gt; &lt;times&gt; &lt;expr id="comp1"/&gt; &lt;minus&gt; &lt;times&gt;&lt;!-control parameter --&gt; &lt;var type="control" id="kf_0"/&gt; &lt;expr id="conc_B"/&gt; &lt;/times&gt; &lt;times&gt; &lt;expr id="kr_0"/&gt; &lt;expr id="conc_BL"/&gt; &lt;/times&gt; &lt;/minus&gt; &lt;/times&gt; &lt;/kinetic-expression&gt; &lt;reactant spec="B"/&gt; &lt;product spec="BL"/&gt; &lt;modifier spec="BL"/&gt; &lt;/reaction&gt; &lt;reaction id="React1"&gt; &lt;kinetic-expression&gt; &lt;times&gt; &lt;expr id="comp1"/&gt; &lt;minus&gt; &lt;times&gt;&lt;!-control parameter --&gt; &lt;var type="control" id="kf_1"/&gt; &lt;expr id="conc_BL"/&gt; &lt;/times&gt; &lt;times&gt; &lt;expr id="kr_1"/&gt; &lt;expr id="conc_BLL"/&gt; &lt;/times&gt; &lt;/minus&gt; &lt;/times&gt; &lt;/kinetic-expression&gt; &lt;reactant spec="BL"/&gt; &lt;product spec="BLL"/&gt; &lt;modifier spec="BLL"/&gt; &lt;/reaction&gt; &lt;reaction id="React2"&gt; &lt;kinetic-expression&gt; &lt;times&gt; &lt;expr id="comp1"/&gt; &lt;minus&gt; &lt;times&gt; &lt;expr id="kf_2"/&gt; &lt;expr id="conc_BLL"/&gt; &lt;/times&gt; &lt;times&gt; &lt;expr id="kr_2"/&gt; &lt;expr id="conc_ALL"/&gt; &lt;/times&gt; &lt;/minus&gt; &lt;/times&gt; &lt;/kinetic-expression&gt; &lt;reactant spec="BLL"/&gt; &lt;product spec="ALL"/&gt; &lt;modifier spec="ALL"/&gt; &lt;/reaction&gt; &lt;reaction id="React3"&gt; &lt;kinetic-expression&gt; &lt;times&gt; &lt;expr id="comp1"/&gt; &lt;minus&gt; &lt;times&gt;&lt;!-control parameter --&gt; &lt;var type="control" id="kf_3"/&gt; &lt;expr id="conc_A"/&gt; &lt;/times&gt; &lt;times&gt; &lt;expr id="kr_3"/&gt; &lt;expr id="conc_AL"/&gt; &lt;/times&gt; &lt;/minus&gt; &lt;/times&gt; &lt;/kinetic-expression&gt; &lt;reactant spec="A"/&gt; &lt;product spec="AL"/&gt; &lt;modifier spec="AL"/&gt; &lt;/reaction&gt; &lt;reaction id="React4"&gt; &lt;kinetic-expression&gt; &lt;times&gt; &lt;expr id="comp1"/&gt; &lt;minus&gt; &lt;times&gt;&lt;!-control parameter --&gt; &lt;var type="control" id="kf_4"/&gt; &lt;expr id="conc_AL"/&gt; &lt;/times&gt; &lt;times&gt; &lt;expr id="kr_4"/&gt; &lt;expr id="conc_ALL"/&gt; &lt;/times&gt; &lt;/minus&gt; &lt;/times&gt; &lt;/kinetic-expression&gt; &lt;reactant spec="AL"/&gt; &lt;product spec="ALL"/&gt; &lt;modifier spec="ALL"/&gt; &lt;/reaction&gt; &lt;reaction id="React5"&gt; &lt;kinetic-expression&gt; &lt;times&gt; &lt;expr id="comp1"/&gt; &lt;minus&gt; &lt;times&gt; &lt;expr id="kf_5"/&gt; &lt;expr id="conc_B"/&gt; &lt;/times&gt; &lt;times&gt; &lt;expr id="kr_5"/&gt; &lt;expr id="conc_A"/&gt; &lt;/times&gt; &lt;/minus&gt; &lt;/times&gt; &lt;/kinetic-expression&gt; &lt;reactant spec="B"/&gt; &lt;product spec="A"/&gt; &lt;modifier spec="A"/&gt; &lt;/reaction&gt; &lt;reaction id="React6"&gt; &lt;kinetic-expression&gt; &lt;times&gt; &lt;expr id="comp1"/&gt; &lt;minus&gt; &lt;times&gt; &lt;expr id="kf_6"/&gt; &lt;expr id="conc_BL"/&gt; &lt;/times&gt; &lt;times&gt; &lt;expr id="kr_6"/&gt; &lt;expr id="conc_AL"/&gt; &lt;/times&gt; &lt;/minus&gt; &lt;/times&gt; &lt;/kinetic-expression&gt; &lt;reactant spec="BL"/&gt; &lt;product spec="AL"/&gt; &lt;modifier spec="AL"/&gt; &lt;/reaction&gt; &lt;reaction id="React7"&gt; &lt;kinetic-expression&gt; &lt;times&gt; &lt;expr id="comp1"/&gt; &lt;minus&gt; &lt;times&gt;&lt;!-control parameter --&gt; &lt;var type="control" id="kf_7"/&gt; &lt;expr id="conc_I"/&gt; &lt;/times&gt; &lt;times&gt; &lt;expr id="kr_7"/&gt; &lt;expr id="conc_IL"/&gt; &lt;/times&gt; &lt;/minus&gt; &lt;/times&gt; &lt;/kinetic-expression&gt; &lt;reactant spec="I"/&gt; &lt;product spec="IL"/&gt; &lt;modifier spec="IL"/&gt; &lt;/reaction&gt; &lt;reaction id="React8"&gt; &lt;kinetic-expression&gt; &lt;times&gt; &lt;expr id="comp1"/&gt; &lt;minus&gt; &lt;times&gt;&lt;!-control parameter --&gt; &lt;var type="control" id="kf_8"/&gt; &lt;expr id="conc_IL"/&gt; &lt;/times&gt; &lt;times&gt; &lt;expr id="kr_8"/&gt; &lt;expr id="conc_ILL"/&gt; &lt;/times&gt; &lt;/minus&gt; &lt;/times&gt; &lt;/kinetic-expression&gt; &lt;reactant spec="IL"/&gt; &lt;product spec="ILL"/&gt; &lt;modifier spec="ILL"/&gt; &lt;/reaction&gt; &lt;reaction id="React9"&gt; &lt;kinetic-expression&gt; &lt;times&gt; &lt;expr id="comp1"/&gt; &lt;minus&gt; &lt;times&gt; &lt;expr id="kf_9"/&gt; &lt;expr id="conc_A"/&gt; &lt;/times&gt; &lt;times&gt; &lt;expr id="kr_9"/&gt; &lt;expr id="conc_I"/&gt; &lt;/times&gt; &lt;/minus&gt; &lt;/times&gt; &lt;/kinetic-expression&gt; &lt;reactant spec="A"/&gt; &lt;product spec="I"/&gt; &lt;modifier spec="I"/&gt; &lt;/reaction&gt; &lt;reaction id="React10"&gt; &lt;kinetic-expression&gt; &lt;times&gt; &lt;expr id="comp1"/&gt; &lt;minus&gt; &lt;times&gt; &lt;expr id="kf_10"/&gt; &lt;expr id="conc_AL"/&gt; &lt;/times&gt; &lt;times&gt; &lt;expr id="kr_10"/&gt; &lt;expr id="conc_IL"/&gt; &lt;/times&gt; &lt;/minus&gt; &lt;/times&gt; &lt;/kinetic-expression&gt; &lt;reactant spec="AL"/&gt; &lt;product spec="IL"/&gt; &lt;modifier spec="IL"/&gt; &lt;/reaction&gt; &lt;reaction id="React11"&gt; &lt;kinetic-expression&gt; &lt;times&gt; &lt;expr id="comp1"/&gt; &lt;minus&gt; &lt;times&gt; &lt;expr id="kf_11"/&gt; &lt;expr id="conc_ALL"/&gt; &lt;/times&gt; &lt;times&gt; &lt;expr id="kr_11"/&gt; &lt;expr id="conc_ILL"/&gt; &lt;/times&gt; &lt;/minus&gt; &lt;/times&gt; &lt;/kinetic-expression&gt; &lt;reactant spec="ALL"/&gt; &lt;product spec="ILL"/&gt; &lt;modifier spec="ILL"/&gt; &lt;/reaction&gt; &lt;reaction id="React12"&gt; &lt;kinetic-expression&gt; &lt;times&gt; &lt;expr id="comp1"/&gt; &lt;minus&gt; &lt;times&gt;&lt;!-control parameter --&gt; &lt;var type="control" id="kf_12"/&gt; &lt;expr id="conc_D"/&gt; &lt;/times&gt; &lt;times&gt; &lt;expr id="kr_12"/&gt; &lt;expr id="conc_DL"/&gt; &lt;/times&gt; &lt;/minus&gt; &lt;/times&gt; &lt;/kinetic-expression&gt; &lt;reactant spec="D"/&gt; &lt;product spec="DL"/&gt; &lt;modifier spec="DL"/&gt; &lt;/reaction&gt; &lt;reaction id="React13"&gt; &lt;kinetic-expression&gt; &lt;times&gt; &lt;expr id="comp1"/&gt; &lt;minus&gt; &lt;times&gt;&lt;!-control parameter --&gt; &lt;var type="control" id="kf_13"/&gt; &lt;expr id="conc_DL"/&gt; &lt;/times&gt; &lt;times&gt; &lt;expr id="kr_13"/&gt; &lt;expr id="conc_DLL"/&gt; &lt;/times&gt; &lt;/minus&gt; &lt;/times&gt; &lt;/kinetic-expression&gt; &lt;reactant spec="DL"/&gt; &lt;product spec="DLL"/&gt; &lt;modifier spec="DLL"/&gt; &lt;/reaction&gt; &lt;reaction id="React14"&gt; &lt;kinetic-expression&gt; &lt;times&gt; &lt;expr id="comp1"/&gt; &lt;minus&gt; &lt;times&gt; &lt;expr id="kf_14"/&gt; &lt;expr id="conc_I"/&gt; &lt;/times&gt; &lt;times&gt; &lt;expr id="kr_14"/&gt; &lt;expr id="conc_D"/&gt; &lt;/times&gt; &lt;/minus&gt; &lt;/times&gt; &lt;/kinetic-expression&gt; &lt;reactant spec="I"/&gt; &lt;product spec="D"/&gt; &lt;modifier spec="D"/&gt; &lt;/reaction&gt; &lt;reaction id="React15"&gt; &lt;kinetic-expression&gt; &lt;times&gt; &lt;expr id="comp1"/&gt; &lt;minus&gt; &lt;times&gt; &lt;expr id="kf_15"/&gt; &lt;expr id="conc_IL"/&gt; &lt;/times&gt; &lt;times&gt; &lt;expr id="kr_15"/&gt; &lt;expr id="conc_DL"/&gt; &lt;/times&gt; &lt;/minus&gt; &lt;/times&gt; &lt;/kinetic-expression&gt; &lt;reactant spec="IL"/&gt; &lt;product spec="DL"/&gt; &lt;modifier spec="DL"/&gt; &lt;/reaction&gt; &lt;reaction id="React16"&gt; &lt;kinetic-expression&gt; &lt;times&gt; &lt;expr id="comp1"/&gt; &lt;minus&gt; &lt;times&gt; &lt;expr id="kf_16"/&gt; &lt;expr id="conc_ILL"/&gt; &lt;/times&gt; &lt;times&gt; &lt;expr id="kr_16"/&gt; &lt;expr id="conc_DLL"/&gt; &lt;/times&gt; &lt;/minus&gt; &lt;/times&gt; &lt;/kinetic-expression&gt; &lt;reactant spec="ILL"/&gt; &lt;product spec="DLL"/&gt; &lt;modifier spec="DLL"/&gt; &lt;/reaction&gt; &lt;!--+++ start parameters +++++ --&gt; &lt;variable type="control" id="kf_0" latex-look="kf\_0" initial="3000"/&gt; &lt;expression id="kr_0" latex-look="kr\_0"&gt; &lt;constant value="8000"/&gt; &lt;/expression&gt; &lt;variable type="control" id="kf_1" latex-look="kf\_1" initial="1500"/&gt; &lt;expression id="kr_1" latex-look="kr\_1"&gt; &lt;constant value="16000"/&gt; &lt;/expression&gt; &lt;expression id="kf_2" latex-look="kf\_2"&gt; &lt;constant value="30000"/&gt; &lt;/expression&gt; &lt;expression id="kr_2" latex-look="kr\_2"&gt; &lt;constant value="700"/&gt; &lt;/expression&gt; &lt;variable type="control" id="kf_3" latex-look="kf\_3" initial="3000"/&gt; &lt;expression id="kr_3" latex-look="kr\_3"&gt; &lt;constant value="8.64"/&gt; &lt;/expression&gt; &lt;variable type="control" id="kf_4" latex-look="kf\_4" initial="1500"/&gt; &lt;expression id="kr_4" latex-look="kr\_4"&gt; &lt;constant value="17.28"/&gt; &lt;/expression&gt; &lt;expression id="kf_5" latex-look="kf\_5"&gt; &lt;constant value="0.54"/&gt; &lt;/expression&gt; &lt;expression id="kr_5" latex-look="kr\_5"&gt; &lt;constant value="10800"/&gt; &lt;/expression&gt; &lt;expression id="kf_6" latex-look="kf\_6"&gt; &lt;constant value="130"/&gt; &lt;/expression&gt; &lt;expression id="kr_6" latex-look="kr\_6"&gt; &lt;constant value="2740"/&gt; &lt;/expression&gt; &lt;variable type="control" id="kf_7" latex-look="kf\_7" initial="3000"/&gt; &lt;expression id="kr_7" latex-look="kr\_7"&gt; &lt;constant value="4"/&gt; &lt;/expression&gt; &lt;variable type="control" id="kf_8" latex-look="kf\_8" initial="1500"/&gt; &lt;expression id="kr_8" latex-look="kr\_8"&gt; &lt;constant value="8"/&gt; &lt;/expression&gt; &lt;expression id="kf_9" latex-look="kf\_9"&gt; &lt;constant value="19.7"/&gt; &lt;/expression&gt; &lt;expression id="kr_9" latex-look="kr\_9"&gt; &lt;constant value="3.74"/&gt; &lt;/expression&gt; &lt;expression id="kf_10" latex-look="kf\_10"&gt; &lt;constant value="19.85"/&gt; &lt;/expression&gt; &lt;expression id="kr_10" latex-look="kr\_10"&gt; &lt;constant value="1.74"/&gt; &lt;/expression&gt; &lt;expression id="kf_11" latex-look="kf\_11"&gt; &lt;constant value="20"/&gt; &lt;/expression&gt; &lt;expression id="kr_11" latex-look="kr\_11"&gt; &lt;constant value="0.81"/&gt; &lt;/expression&gt; &lt;variable type="control" id="kf_12" latex-look="kf\_12" initial="3000"/&gt; &lt;expression id="kr_12" latex-look="kr\_12"&gt; &lt;constant value="4"/&gt; &lt;/expression&gt; &lt;variable type="control" id="kf_13" latex-look="kf\_13" initial="1500"/&gt; &lt;expression id="kr_13" latex-look="kr\_13"&gt; &lt;constant value="8"/&gt; &lt;/expression&gt; &lt;expression id="kf_14" latex-look="kf\_14"&gt; &lt;constant value="0.05"/&gt; &lt;/expression&gt; &lt;expression id="kr_14" latex-look="kr\_14"&gt; &lt;constant value="0.0012"/&gt; &lt;/expression&gt; &lt;expression id="kf_15" latex-look="kf\_15"&gt; &lt;constant value="0.05"/&gt; &lt;/expression&gt; &lt;expression id="kr_15" latex-look="kr\_15"&gt; &lt;constant value="0.0012"/&gt; &lt;/expression&gt; &lt;expression id="kf_16" latex-look="kf\_16"&gt; &lt;constant value="0.05"/&gt; &lt;/expression&gt; &lt;expression id="kr_16" latex-look="kr\_16"&gt; &lt;constant value="0.0012"/&gt; &lt;/expression&gt; &lt;expression id="t2" latex-look="t2"&gt; &lt;constant value="20"/&gt; &lt;/expression&gt; &lt;!--+++ start compartments --&gt; &lt;!--constant compartment --&gt; &lt;expression id="comp1" latex-look="comp1"&gt; &lt;constant value="1e-16"/&gt; &lt;/expression&gt; &lt;!--+++ start events --&gt; &lt;event id="RemovalACh"&gt; &lt;condition&gt; &lt;lt&gt; &lt;expr id="t2"/&gt; &lt;time/&gt; &lt;/lt&gt; &lt;/condition&gt; &lt;update&gt;&lt;!-no rule but event --&gt; &lt;var type="control" id="kf_0"/&gt; &lt;constant value="0"/&gt; &lt;/update&gt; &lt;update&gt;&lt;!-no rule but event --&gt; &lt;var type="control" id="kf_3"/&gt; &lt;constant value="0"/&gt; &lt;/update&gt; &lt;update&gt;&lt;!-no rule but event --&gt; &lt;var type="control" id="kf_7"/&gt; &lt;constant value="0"/&gt; &lt;/update&gt; &lt;update&gt;&lt;!-no rule but event --&gt; &lt;var type="control" id="kf_12"/&gt; &lt;constant value="0"/&gt; &lt;/update&gt; &lt;update&gt;&lt;!-no rule but event --&gt; &lt;var type="control" id="kf_1"/&gt; &lt;constant value="0"/&gt; &lt;/update&gt; &lt;update&gt;&lt;!-no rule but event --&gt; &lt;var type="control" id="kf_4"/&gt; &lt;constant value="0"/&gt; &lt;/update&gt; &lt;update&gt;&lt;!-no rule but event --&gt; &lt;var type="control" id="kf_8"/&gt; &lt;constant value="0"/&gt; &lt;/update&gt; &lt;update&gt;&lt;!-no rule but event --&gt; &lt;var type="control" id="kf_13"/&gt; &lt;constant value="0"/&gt; &lt;/update&gt; &lt;/event&gt; &lt;/network&gt;</p><formula xml:id="formula_29">• = BasalACh2 comp1 [IntermediateACh] • = IntermediateACh comp1 [ActiveACh] • = ActiveACh comp1 [Active] • = Active comp1 [BasalACh] • = BasalACh comp1 [Basal] • = Basal comp1 [DesensitisedACh2] • = DesensitisedACh2 comp1 [Desensitised] • = Desensitised comp1 [IntermediateACh2] • = IntermediateACh2 comp1 [DesensitisedACh] • = DesensitisedACh comp1 [Intermediate] • = Intermediate comp1 [ActiveACh2] • = ActiveACh2 comp1 kr 0 • =8000 kr 1 • =16000 kf 2 • =30000 kr 2 • =700 kr 3 • =8.64 kr 4 • =17.28 kf 5 • =0.54 kr 5 • =10800 kf 6 • =130 kr 6 • =2740 kr 7 • =4 kr 8 • =8 kf 9 • =19.7</formula><formula xml:id="formula_30">0 • =3000 kf 1 • =1500 kf 3 • =3000 kf 4 • =1500 kf 7 • =3000 kf 8 • =1500 kf 12 • =3000 kf 13 • =1500 Fig. 9: Initial values of control parameters of B001. BasalACh2 • =0 IntermediateACh • =0 ActiveACh • =0 Active • =0 BasalACh • =0 Basal • =1.66057788110262e-21 DesensitisedACh2 • =0 Desensitised • =0 IntermediateACh2 • =0 DesensitisedACh • =0 Intermediate • =0 ActiveACh2 • =0</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B.4 Compilation of B001 to BioCham</head><p>From the Core SBML model we obtain the following BioCham 4 network by our compiler. %%%% events %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% add_event((t2&lt;RealTime),kf_0=0,kf_3=0,kf_7=0, kf_12=0,kf_1=0,kf_4=0,kf_8=0,kf_13=0).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C Example of BioModel B111</head><p>C.1 Graph of Core SBML Network for B111</p><p>The Core SBML network for B111 has two events that update control parameters as well as the amounts of species. For short we will write MPF instead of the algebraic species M-phasePromotingFactor. The graph of the network is given in Fig. <ref type="figure" target="#fig_3">6</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C.2 Macro Definitions</head><p>The of macro definitions of the Core SBML network are given below.</p><p>[Totalcdc13]</p><formula xml:id="formula_31">• = Totalcdc13 cell [preMPF] • = preMPF cell [ste9] • = ste9 cell [slp1T] • = slp1T cell [slp1] • = slp1 cell [IEP] • = IEP cell [rum1T] • = rum1T cell [SK] • = SK cell [CellMass] • = CellMass cell [MPF] • = MPF cell s • =[Totalcdc13] + [rum1T] + Kdiss Kdiss • =0.001 Trimer • = 2 [Totalcdc13] [rum1T] s+ √ ((s) 2 -4 [Totalcdc13] [rum1T]) TF 1 • =(k16 ′ + k16 ′′ [MPF] -k15 [CellMass])+ (k16 ′ + k16 ′′ [MPF]) J15 + k15 [CellMass] J16 TF • = 2 k15 [CellMass] J16 TF 1 + √ (TF 1 ) 2 -4 (k16 ′ +k16 ′′ [MPF]-k15 [CellMass]) k15 [CellMass] J16 k15 • =1.5 J16 • =0.01 k16 ′ • =1</formula><p>+++ start species +++++ --&gt;&lt;!--species without initial assignment --&gt; &lt;variable type="species" id="cdc13T" latex-look="Total cdc13" initial="0.2" concentration="conc_cdc13T" compartment="cell"/&gt; &lt;expression id="conc_cdc13T" latex-look="[Total cdc13]"&gt; &lt;divide&gt; &lt;var type="species" id="cdc13T"/&gt; &lt;expr id="cell"/&gt; &lt;/divide&gt; &lt;/expression&gt; &lt;!--species without initial assignment --&gt; &lt;variable type="species" id="preMPF" latex-look="preMPF" initial="0" concentration="conc_preMPF" compartment="cell"/&gt; &lt;expression id="conc_preMPF" latex-look="[preMPF]"&gt; &lt;divide&gt; &lt;var type="species" id="preMPF"/&gt; &lt;expr id="cell"/&gt; &lt;/divide&gt; &lt;/expression&gt; &lt;!--species without initial assignment --&gt; &lt;variable type="species" id="ste9" latex-look="ste9" initial="1" concentration="conc_ste9" compartment="cell"/&gt; &lt;expression id="conc_ste9" latex-look="[ste9]"&gt; &lt;divide&gt; &lt;var type="species" id="ste9"/&gt; &lt;expr id="cell"/&gt; &lt;/divide&gt; &lt;/expression&gt; &lt;!--species without initial assignment --&gt; &lt;variable type="species" id="slp1T" latex-look="slp1T" initial="0" concentration="conc_slp1T" compartment="cell"/&gt; &lt;expression id="conc_slp1T" latex-look="[slp1T]"&gt; &lt;divide&gt; &lt;var type="species" id="slp1T"/&gt; &lt;expr id="cell"/&gt; &lt;/divide&gt; &lt;/expression&gt; &lt;!--species without initial assignment --&gt; &lt;variable type="species" id="slp1" latex-look="slp1" initial="2.2" concentration="conc_slp1" compartment="cell"/&gt; &lt;expression id="conc_slp1" latex-look="[slp1]"&gt; &lt;divide&gt; &lt;var type="species" id="slp1"/&gt; &lt;expr id="cell"/&gt; &lt;/divide&gt; &lt;/expression&gt; &lt;!--species without initial assignment --&gt; &lt;variable type="species" id="IEP" latex-look="IEP" initial="0" concentration="conc_IEP" compartment="cell"/&gt; &lt;expression id="conc_IEP" latex-look="[IEP]"&gt; &lt;divide&gt; &lt;var type="species" id="IEP"/&gt; &lt;expr id="cell"/&gt; &lt;/divide&gt; &lt;/expression&gt; &lt;!--species without initial assignment --&gt; &lt;variable type="species" id="rum1T" latex-look="rum1T" initial="0" concentration="conc_rum1T" compartment="cell"/&gt; &lt;expression id="conc_rum1T" latex-look="[rum1T]"&gt; &lt;divide&gt; &lt;var type="species" id="rum1T"/&gt; &lt;expr id="cell"/&gt; &lt;/divide&gt; &lt;/expression&gt; &lt;!--species without initial assignment --&gt; &lt;variable type="species" id="SK" latex-look="SK" initial="0" concentration="conc_SK" compartment="cell"/&gt; &lt;expression id="conc_SK" latex-look="[SK]"&gt; &lt;divide&gt; &lt;var type="species" id="SK"/&gt; &lt;expr id="cell"/&gt; &lt;/divide&gt; &lt;/expression&gt; &lt;!--species without initial assignment --&gt; &lt;variable type="species" id="M" latex-look="Cell Mass" initial="1" concentration="conc_M" compartment="cell"/&gt; &lt;expression id="conc_M" latex-look="[Cell Mass]"&gt; &lt;divide&gt; &lt;var type="species" id="M"/&gt; &lt;expr id="cell"/&gt; &lt;/divide&gt; &lt;/expression&gt; &lt;!--species with assignmentRule --&gt; &lt;variable type="algebraic" id="MPF" latex-look="M-phase promoting factor" concentration="conc_MPF" compartment="cell"&gt; &lt;kinetic-expression&gt; &lt;divide&gt; &lt;times&gt; &lt;minus&gt; &lt;expr id="conc_cdc13T"/&gt; &lt;expr id="conc_preMPF"/&gt; &lt;/minus&gt; &lt;minus&gt; &lt;expr id="conc_cdc13T"/&gt; &lt;!--nonconstant parameter without rule nor event--&gt; &lt;expr id="Trimer"/&gt; &lt;/minus&gt; &lt;/times&gt; &lt;expr id="conc_cdc13T"/&gt; &lt;/divide&gt; &lt;/kinetic-expression&gt; &lt;/variable&gt; &lt;expression id="conc_MPF" latex-look="[M-phase promoting factor]"&gt; &lt;divide&gt; &lt;var type="algebraic" id="MPF"/&gt; &lt;expr id="cell"/&gt; &lt;/divide&gt; &lt;/expression&gt; &lt;!--+++ start reactions +++++--&gt; &lt;reaction id="R1"&gt; &lt;kinetic-expression&gt; &lt;times&gt; &lt;expr id="k1"/&gt; &lt;expr id="conc_M"/&gt; &lt;/times&gt; &lt;/kinetic-expression&gt; &lt;product spec="cdc13T"/&gt; &lt;modifier spec="M"/&gt; &lt;/reaction&gt; &lt;reaction id="R2"&gt; &lt;kinetic-expression&gt; &lt;times&gt; &lt;plus&gt; &lt;expr id="k2_prime"/&gt; &lt;times&gt; &lt;expr id="k2_double_prime"/&gt; &lt;expr id="conc_ste9"/&gt; &lt;/times&gt; &lt;times&gt; &lt;expr id="k2_triple_prime"/&gt; &lt;expr id="conc_slp1"/&gt; &lt;/times&gt; &lt;/plus&gt; &lt;expr id="conc_cdc13T"/&gt; &lt;/times&gt; &lt;/kinetic-expression&gt; &lt;reactant spec="cdc13T"/&gt; &lt;modifier spec="ste9"/&gt; &lt;modifier spec="slp1"/&gt; &lt;/reaction&gt; &lt;reaction id="R3"&gt; &lt;kinetic-expression&gt; &lt;times&gt;&lt;!-nonconstant parameter without rule nor event--&gt; &lt;expr id="kwee"/&gt; &lt;minus&gt; &lt;expr id="conc_cdc13T"/&gt; &lt;expr id="conc_preMPF"/&gt; &lt;/minus&gt; &lt;/times&gt; &lt;/kinetic-expression&gt; &lt;product spec="preMPF"/&gt; &lt;modifier spec="cdc13T"/&gt; &lt;/reaction&gt; &lt;reaction id="R4"&gt; &lt;kinetic-expression&gt; &lt;times&gt;&lt;!-nonconstant parameter without rule nor event--&gt; &lt;expr id="k25"/&gt; &lt;expr id="conc_preMPF"/&gt; &lt;/times&gt; &lt;/kinetic-expression&gt; &lt;reactant spec="preMPF"/&gt; &lt;/reaction&gt; &lt;reaction id="R5"&gt; &lt;kinetic-expression&gt; &lt;times&gt; &lt;plus&gt; &lt;expr id="k2_prime"/&gt; &lt;times&gt; &lt;expr id="k2_double_prime"/&gt; &lt;expr id="conc_ste9"/&gt; &lt;/times&gt; &lt;times&gt; &lt;expr id="k2_triple_prime"/&gt; &lt;expr id="conc_slp1"/&gt; &lt;/times&gt; &lt;/plus&gt; &lt;expr id="conc_preMPF"/&gt; &lt;/times&gt; &lt;/kinetic-expression&gt; &lt;reactant spec="preMPF"/&gt; &lt;modifier spec="ste9"/&gt; &lt;modifier spec="slp1"/&gt; &lt;/reaction&gt; &lt;reaction id="R6"&gt; &lt;kinetic-expression&gt; &lt;divide&gt; &lt;times&gt; &lt;plus&gt; &lt;expr id="k3_prime"/&gt; &lt;times&gt; &lt;expr id="k3_double_prime"/&gt; &lt;expr id="conc_slp1"/&gt; &lt;/times&gt; &lt;/plus&gt; &lt;minus&gt; &lt;constant value="1"/&gt; &lt;expr id="conc_ste9"/&gt; &lt;/minus&gt; &lt;/times&gt; &lt;minus&gt; &lt;plus&gt; &lt;expr id="J3"/&gt; &lt;constant value="1"/&gt; &lt;/plus&gt; &lt;expr id="conc_ste9"/&gt; &lt;/minus&gt; &lt;/divide&gt; &lt;/kinetic-expression&gt; &lt;product spec="ste9"/&gt; &lt;modifier spec="slp1"/&gt; &lt;/reaction&gt; &lt;reaction id="R7"&gt; &lt;kinetic-expression&gt; &lt;divide&gt; &lt;times&gt; &lt;plus&gt; &lt;times&gt; &lt;expr id="k4_prime"/&gt; &lt;expr id="conc_SK"/&gt; &lt;/times&gt; &lt;times&gt; &lt;expr id="k4"/&gt; &lt;expr id="conc_MPF"/&gt; &lt;/times&gt; &lt;/plus&gt; &lt;expr id="conc_ste9"/&gt; &lt;/times&gt; &lt;plus&gt; &lt;expr id="J4"/&gt; &lt;expr id="conc_ste9"/&gt; &lt;/plus&gt; &lt;/divide&gt; &lt;/kinetic-expression&gt; &lt;reactant spec="ste9"/&gt; &lt;modifier spec="SK"/&gt; &lt;modifier spec="MPF"/&gt; &lt;/reaction&gt; &lt;reaction id="R8"&gt; &lt;kinetic-expression&gt; &lt;plus&gt; &lt;expr id="k5_prime"/&gt; &lt;divide&gt; &lt;times&gt; &lt;expr id="k5_double_prime"/&gt; &lt;power&gt; &lt;expr id="conc_MPF"/&gt; &lt;constant value="4"/&gt; &lt;/power&gt; &lt;/times&gt; &lt;plus&gt; &lt;power&gt; &lt;expr id="J5"/&gt; &lt;constant value="4"/&gt; &lt;/power&gt; &lt;power&gt; &lt;expr id="conc_MPF"/&gt; &lt;constant value="4"/&gt; &lt;/power&gt; &lt;/plus&gt; &lt;/divide&gt; &lt;/plus&gt; &lt;/kinetic-expression&gt; &lt;product spec="slp1T"/&gt; &lt;modifier spec="MPF"/&gt; &lt;/reaction&gt; &lt;reaction id="R9"&gt; &lt;kinetic-expression&gt; &lt;times&gt; &lt;expr id="k6"/&gt; &lt;expr id="conc_slp1T"/&gt; &lt;/times&gt; &lt;/kinetic-expression&gt; &lt;reactant spec="slp1T"/&gt; &lt;/reaction&gt; &lt;reaction id="R10"&gt; &lt;kinetic-expression&gt; &lt;divide&gt; &lt;times&gt; &lt;expr id="k7"/&gt; &lt;expr id="conc_IEP"/&gt; &lt;minus&gt; &lt;expr id="conc_slp1T"/&gt; &lt;expr id="conc_slp1"/&gt; &lt;/minus&gt; &lt;/times&gt; &lt;minus&gt; &lt;plus&gt; &lt;expr id="J7"/&gt; &lt;expr id="conc_slp1T"/&gt; &lt;/plus&gt; &lt;expr id="conc_slp1"/&gt; &lt;/minus&gt; &lt;/divide&gt; &lt;/kinetic-expression&gt; &lt;product spec="slp1"/&gt; &lt;modifier spec="IEP"/&gt; &lt;modifier spec="slp1T"/&gt; &lt;/reaction&gt; &lt;reaction id="R11"&gt; &lt;kinetic-expression&gt; &lt;divide&gt; &lt;times&gt; &lt;expr id="k8"/&gt; &lt;expr id="conc_slp1"/&gt; &lt;/times&gt; &lt;plus&gt; &lt;expr id="J8"/&gt; &lt;expr id="conc_slp1"/&gt; &lt;/plus&gt; &lt;/divide&gt; &lt;/kinetic-expression&gt; &lt;reactant spec="slp1"/&gt; &lt;/reaction&gt; &lt;reaction id="R12"&gt; &lt;kinetic-expression&gt; &lt;times&gt; &lt;expr id="k6"/&gt; &lt;expr id="conc_slp1"/&gt; &lt;/times&gt; &lt;/kinetic-expression&gt; &lt;reactant spec="slp1"/&gt; &lt;/reaction&gt; &lt;reaction id="R13"&gt; &lt;kinetic-expression&gt; &lt;divide&gt; &lt;times&gt; &lt;expr id="k9"/&gt; &lt;expr id="conc_MPF"/&gt; &lt;minus&gt; &lt;constant value="1"/&gt; &lt;expr id="conc_IEP"/&gt; &lt;/minus&gt; &lt;/times&gt; &lt;minus&gt; &lt;plus&gt; &lt;expr id="J9"/&gt; &lt;constant value="1"/&gt; &lt;/plus&gt; &lt;expr id="conc_IEP"/&gt; &lt;/minus&gt; &lt;/divide&gt; &lt;/kinetic-expression&gt; &lt;product spec="IEP"/&gt; &lt;modifier spec="MPF"/&gt; &lt;/reaction&gt; &lt;reaction id="R14"&gt; &lt;kinetic-expression&gt; &lt;divide&gt; &lt;times&gt; &lt;expr id="k10"/&gt; &lt;expr id="conc_IEP"/&gt; &lt;/times&gt; &lt;plus&gt; &lt;expr id="J10"/&gt; &lt;expr id="conc_IEP"/&gt; &lt;/plus&gt; &lt;/divide&gt; &lt;/kinetic-expression&gt; &lt;reactant spec="IEP"/&gt; &lt;/reaction&gt; &lt;reaction id="R15"&gt; &lt;kinetic-expression&gt; &lt;expr id="k11"/&gt; &lt;/kinetic-expression&gt; &lt;product spec="rum1T"/&gt; &lt;/reaction&gt; &lt;reaction id="R16"&gt; &lt;kinetic-expression&gt; &lt;times&gt; &lt;plus&gt; &lt;expr id="k12"/&gt; &lt;times&gt; &lt;expr id="k12_prime"/&gt; &lt;expr id="conc_SK"/&gt; &lt;/times&gt; &lt;times&gt; &lt;expr id="k12_double_prime"/&gt; &lt;expr id="conc_MPF"/&gt; &lt;/times&gt; &lt;/plus&gt; &lt;expr id="conc_rum1T"/&gt; &lt;/times&gt; &lt;/kinetic-expression&gt; &lt;reactant spec="rum1T"/&gt; &lt;modifier spec="SK"/&gt; &lt;modifier spec="MPF"/&gt; &lt;/reaction&gt; &lt;reaction id="R17"&gt; &lt;kinetic-expression&gt; &lt;times&gt; &lt;expr id="k13"/&gt; &lt;!--nonconstant parameter without rule nor event--&gt; &lt;expr id="TF"/&gt; &lt;/times&gt; &lt;/kinetic-expression&gt; &lt;product spec="SK"/&gt; &lt;/reaction&gt; &lt;reaction id="R18"&gt; &lt;kinetic-expression&gt; &lt;times&gt; &lt;expr id="k14"/&gt; &lt;expr id="conc_SK"/&gt; &lt;/times&gt; &lt;/kinetic-expression&gt; &lt;reactant spec="SK"/&gt; &lt;/reaction&gt; &lt;reaction id="R19"&gt; &lt;kinetic-expression&gt; &lt;times&gt; &lt;expr id="mu"/&gt; &lt;expr id="conc_M"/&gt; &lt;/times&gt; &lt;/kinetic-expression&gt; &lt;product spec="M"/&gt; &lt;/reaction&gt; &lt;!--+++ start parameters +++++ --&gt; &lt;variable type="control" id="flag_MPF" latex-look="flag\_MPF" initial="0"/&gt; &lt;!--with assignment rule --&gt; &lt;expression id="sigma" latex-look="\sigma"&gt; &lt;plus&gt; &lt;expr id="conc_cdc13T"/&gt; &lt;expr id="conc_rum1T"/&gt; &lt;expr id="Kdiss"/&gt; &lt;/plus&gt; &lt;/expression&gt; &lt;expression id="Kdiss"&gt; &lt;constant value="0.001"/&gt; &lt;/expression&gt; &lt;!--with assignment rule --&gt; &lt;expression id="Trimer" latex-look="Trimer"&gt; &lt;divide&gt; &lt;times&gt; &lt;constant value="2"/&gt; &lt;expr id="conc_cdc13T"/&gt; &lt;expr id="conc_rum1T"/&gt; &lt;/times&gt; &lt;plus&gt;&lt;!-nonconstant parameter without rule nor event--&gt; &lt;expr id="sigma"/&gt; &lt;power&gt; &lt;minus&gt; &lt;power&gt;&lt;!-nonconstant parameter without rule nor event--&gt; &lt;expr id="sigma"/&gt; &lt;constant value="2"/&gt; &lt;/power&gt; &lt;times&gt; &lt;constant value="4"/&gt; &lt;expr id="conc_cdc13T"/&gt; &lt;expr id="conc_rum1T"/&gt; &lt;/times&gt; &lt;/minus&gt; &lt;constant value="0.5"/&gt; &lt;/power&gt; &lt;/plus&gt; &lt;/divide&gt; &lt;/expression&gt; &lt;!--with assignment rule --&gt; &lt;expression id="TF" latex-look="TF"&gt; &lt;divide&gt; &lt;times&gt; &lt;constant value="2"/&gt; &lt;expr id="k15"/&gt; &lt;expr id="conc_M"/&gt; &lt;expr id="J16"/&gt; &lt;/times&gt; &lt;plus&gt; &lt;minus&gt; &lt;plus&gt; &lt;expr id="k16_prime"/&gt; &lt;times&gt; &lt;expr id="k16_double_prime"/&gt; &lt;expr id="conc_MPF"/&gt; &lt;/times&gt; &lt;/plus&gt; &lt;times&gt; &lt;expr id="k15"/&gt; &lt;expr id="conc_M"/&gt; &lt;/times&gt; &lt;/minus&gt; &lt;times&gt; &lt;plus&gt; &lt;expr id="k16_prime"/&gt; &lt;times&gt; &lt;expr id="k16_double_prime"/&gt; &lt;expr id="conc_MPF"/&gt; &lt;/times&gt; &lt;/plus&gt; &lt;expr id="J15"/&gt; &lt;/times&gt; &lt;times&gt; &lt;expr id="k15"/&gt; &lt;expr id="conc_M"/&gt; &lt;expr id="J16"/&gt; &lt;/times&gt; &lt;power&gt; &lt;minus&gt; &lt;power&gt; &lt;plus&gt; &lt;minus&gt; &lt;plus&gt; &lt;expr id="k16_prime"/&gt; &lt;times&gt; &lt;expr id="k16_double_prime"/&gt; &lt;expr id="conc_MPF"/&gt; &lt;/times&gt; &lt;/plus&gt; &lt;times&gt; &lt;expr id="k15"/&gt; &lt;expr id="conc_M"/&gt; &lt;/times&gt; &lt;/minus&gt; &lt;times&gt; &lt;plus&gt; &lt;expr id="k16_prime"/&gt; &lt;times&gt; &lt;expr id="k16_double_prime"/&gt; &lt;expr id="conc_MPF"/&gt; &lt;/times&gt; &lt;/plus&gt; &lt;expr id="J15"/&gt; &lt;/times&gt; &lt;times&gt; &lt;expr id="k15"/&gt; &lt;expr id="conc_M"/&gt; &lt;expr id="J16"/&gt; &lt;/times&gt; &lt;/plus&gt; &lt;constant value="2"/&gt; &lt;/power&gt; &lt;times&gt; &lt;constant value="4"/&gt; &lt;minus&gt; &lt;plus&gt; &lt;expr id="k16_prime"/&gt; &lt;times&gt; &lt;expr id="k16_double_prime"/&gt; &lt;expr id="conc_MPF"/&gt; &lt;/times&gt; &lt;/plus&gt; &lt;times&gt; &lt;expr id="k15"/&gt; &lt;expr id="conc_M"/&gt; &lt;/times&gt; &lt;/minus&gt; &lt;expr id="k15"/&gt; &lt;expr id="conc_M"/&gt; &lt;expr id="J16"/&gt; &lt;/times&gt; &lt;/minus&gt; &lt;constant id="div-degree" value="0.5"/&gt; &lt;/power&gt; &lt;/plus&gt; &lt;/divide&gt; &lt;/expression&gt; &lt;expression id="k15"&gt; &lt;constant value="1.5"/&gt; &lt;/expression&gt; &lt;expression id="J16"&gt; &lt;constant value="0.01"/&gt; &lt;/expression&gt; &lt;expression id="k16_prime"&gt; &lt;constant value="1"/&gt; &lt;/expression&gt; &lt;expression id="k16_double_prime"&gt; &lt;constant value="2"/&gt; &lt;/expression&gt; &lt;expression id="J15"&gt; &lt;constant value="0.01"/&gt; &lt;/expression&gt; &lt;!--with assignment rule --&gt; &lt;expression id="kwee" latex-look="kwee"&gt; &lt;plus&gt; &lt;expr id="kwee_prime"/&gt; &lt;times&gt; &lt;minus&gt; &lt;expr id="kwee_double_prime"/&gt; &lt;expr id="kwee_prime"/&gt; &lt;/minus&gt; &lt;divide&gt; &lt;times&gt; &lt;constant value="2"/&gt; &lt;expr id="Vawee"/&gt; &lt;expr id="Jiwee"/&gt; &lt;/times&gt; &lt;plus&gt; &lt;minus&gt; &lt;times&gt; &lt;expr id="Viwee"/&gt; &lt;expr id="conc_MPF"/&gt; &lt;/times&gt; &lt;expr id="Vawee"/&gt; &lt;/minus&gt; &lt;times&gt; &lt;expr id="Viwee"/&gt; &lt;expr id="conc_MPF"/&gt; &lt;expr id="Jawee"/&gt; &lt;/times&gt; &lt;times&gt; &lt;expr id="Vawee"/&gt; &lt;expr id="Jiwee"/&gt; &lt;/times&gt; &lt;power&gt; &lt;minus&gt; &lt;power&gt; &lt;plus&gt; &lt;minus&gt; &lt;times&gt; &lt;expr id="Viwee"/&gt; &lt;expr id="conc_MPF"/&gt; &lt;/times&gt; &lt;expr id="Vawee"/&gt; &lt;/minus&gt; &lt;expr id="conc_MPF"/&gt; &lt;expr id="Ji25"/&gt; &lt;/times&gt; &lt;/plus&gt; &lt;constant value="2"/&gt; &lt;/power&gt; &lt;times&gt; &lt;constant value="4"/&gt; &lt;minus&gt; &lt;expr id="Vi25"/&gt; &lt;times&gt; &lt;expr id="Va25"/&gt; &lt;expr id="conc_MPF"/&gt; &lt;/times&gt; &lt;/minus&gt; &lt;expr id="Va25"/&gt; &lt;expr id="conc_MPF"/&gt; &lt;expr id="Ji25"/&gt; &lt;/times&gt; &lt;/minus&gt; &lt;constant id="div-degree" value="0.5"/&gt; &lt;/power&gt; &lt;/plus&gt; &lt;/divide&gt; &lt;/times&gt; &lt;/plus&gt; &lt;/expression&gt; &lt;expression id="k25_prime"&gt; &lt;constant value="0.05"/&gt; &lt;/expression&gt; &lt;expression id="k25_double_prime"&gt; &lt;constant value="5"/&gt; &lt;/expression&gt; &lt;expression id="Va25"&gt; &lt;constant value="1"/&gt; &lt;/expression&gt; &lt;expression id="Ji25"&gt; &lt;constant value="0.01"/&gt; &lt;/expression&gt; &lt;expression id="Vi25"&gt; &lt;constant value="0.25"/&gt; &lt;/expression&gt; &lt;expression id="Ja25"&gt; &lt;constant value="0.01"/&gt; &lt;/expression&gt; &lt;expression id="k1"&gt; &lt;constant value="0.03"/&gt; &lt;/expression&gt; &lt;expression id="k2_prime"&gt; &lt;constant value="0.03"/&gt;</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><label></label><figDesc>support conditionals if b then e else e ′ which use a boolean expression b as condition and arithmetic subexpressions e and e ′ as branches. The set of free variables of boolean expression fv(b) is the set of those variables that occur in b. A boolean expression can test two arithmetic expressions for inequality e ≤ e ′ while being closed under the boolean operators of conjunction b ∧ b ′ and negation ¬b. Equality and strict inequality tests can be defined as boolean expressions too: e • = e ′ = def e ≤ e ′ ∧ e ′ ≤ e and e &lt; e ′ = def e ≤ e ′ ∧ ¬e • = e ′</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head></head><label></label><figDesc>events E ::= b ⇒ u where b ∈ B V updates u, u ′ ::= x := e | u; u ′ where e ∈ E V and x ∈ V \ V alg</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head></head><label></label><figDesc>]-[preMPF]) ([Totalcdc13]-Trimer) [Totalcdc13]</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fig. 6 :</head><label>6</label><figDesc>Fig. 6: Graph of the Core SBML network for B111. See Section C.2 for the macro definitions Section C.3 for the initial values of the species, Section C.4 for the control parameters, and Section C.5 for the events.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>16 Fig. 8 :</head><label>168</label><figDesc>Fig. 8: Macro definitions of B001.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head></head><label></label><figDesc>kf</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Fig. 10 :Fig. 11 :</head><label>1011</label><figDesc>Fig. 10: Initial values of species of B001. Event Condition Updates RemovalACh t2 &lt; time kf 0 := 0 kf 3 := 0 kf 7 := 0 kf 12 := 0 kf 1 := 0 kf 4 := 0 kf 8 := 0 kf 13 := 0</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Fig. 12 :</head><label>12</label><figDesc>Fig. 12: Remaining specification of B001.</figDesc></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div><head>Acknowledgements</head><p>We thank <rs type="person">Sylvain Soliman</rs> and <rs type="person">Franc ¸ois Fages</rs> for their unfailable and timely support with BioCham questions. We also enjoyed efficient support from the Copasi people. Finally, this work was supported by the <rs type="funder">French National Research Agency (ANR)</rs>, by funding the project <rs type="projectName">MIGAD</rs> (<rs type="grantNumber">ANR-21-CE45-0017</rs>).</p></div>
			</div>
			<listOrg type="funding">
				<org type="funded-project" xml:id="_vckHXsv">
					<idno type="grant-number">ANR-21-CE45-0017</idno>
					<orgName type="project" subtype="full">MIGAD</orgName>
				</org>
			</listOrg>

			<div type="availability">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>%%%% parameters %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% function(kr_0=8000). function(kr_1=16000). function(kf_2=30000). function(kr_2=700</head><p>). function(kr_3=8.64). function(kr_4=17.28). function(kf_5=0.54). function(kr_5=10800). function(kf_6=130). function(kr_6=2740). function(kr_7=4). function(kr_8=8). function(kf_9=19.7). function(kr_9=3.74). function(kf_10=19.85). function(kr_10=1.74). function(kf_11=20). function(kr_11=0.81). function(kr_12=4). function(kr_13=8). function(kf_14=0.05). function(kr_14=0.0012). function(kf_15=0.05). function(kr_15=0.0012). function(kf_16=0.05).</p><p>(4 * ((Viwee * conc_MPF) -Vawee) * Vawee * Jiwee)))))))). function(kwee_prime=0.15). function(kwee_double_prime=1.3). function(Vawee=0.25). function(Jiwee=0.01). function(Viwee=1). function(Jawee=0.01). function(k25=(k25_prime + ((k25_double_prime -k25_prime) * ((2 * Va25 * conc_MPF * Ji25) / ((Vi25 -(Va25 * conc_MPF)) + (Vi25 * Ja25)+ (Va25 * conc_MPF * Ji25) + sqrt(((((Vi25 -(Va25 * conc_MPF)) + (Vi25 * Ja25) + (Va25 * conc_MPF * Ji25))ˆ2) -(4 * (Vi25 -(Va25 * conc_MPF)) * Va25 * conc_MPF * Ji25)))))))</p><p>). function(k25_prime=0.05). function(k25_double_prime=5). function(Va25=1). function(Ji25=0.01). function(Vi25=0.25). function(Ja25=0.01). function(k1=0.03). function(k2_prime=0.03). function(k2_double_prime=1). function(k2_triple_prime=0.1). function(k3_prime=1). function(k3_double_prime=10). function(J3=0.01). function(k4_prime=2). function(k4=35). function(J4=0.01). function(k5_prime=0.005). function(k5_double_prime=0.3). function(J5=0.3). function(k6=0.1). function(k7=1). function(J7=0.001). function(k8=0.25). function(J8=0.001). function(k9=0.1). function(J9=0.01). function(k10=0.04). function(J10=0.01). function(k11=0.1). function(k12=0.01). function(k12_prime=1). function(k12_double_prime=3).</p></div>
			</div>

			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B.1 Graph of Core SBML Networks for B001</head><p>The graph of the Core SBML network for B001 obtained by our compiler is given in Fig. <ref type="figure">7</ref>. For short we write MPF instead of M -phrasePromotingFactor.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B.2 Macro Definitions, Initial Values, and Events</head><p>The macro definitions, initial values, and events of the BioModel BIOMD000000001 are listed in Fig. <ref type="figure">12</ref>. They are extracted automatically from the Core SBML network in XML format in Section B.3.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B.3 XML Syntax of Core SBML Network for B001</head><p>The graph of the Core SBML network B001 in Fig. <ref type="figure">7</ref> was obtained by our compiler was resented in Fig. <ref type="figure">7</ref>. Here comes the Core SBML model in XML syntax.</p><p>&lt;?xml version="1.0" encoding="utf-8"?&gt; &lt;network id="BIOMD0000000001" name="Edelstein1996 -EPSP ACh event" version="2.1"&gt;&lt;!--+++ start species +++++ --&gt;&lt;!--species without initial assignment --&gt; &lt;variable type="species" id="BLL" latex-look="BasalACh2" initial="0"  Here comes the Core SBML network for B111 in XML syntax.</p><p>&lt;?xml version="1.0" encoding="utf-8"?&gt; &lt;network id="Novak2001_FissionYeast_CellCycle" name="Novak2001_FissionYeast_CellCycle" version="2.1"&gt;&lt;!--&lt;times&gt; &lt;expr id="Viwee"/&gt; &lt;expr id="conc_MPF"/&gt; &lt;expr id="Jawee"/&gt; &lt;/times&gt; &lt;times&gt; &lt;expr id="Vawee"/&gt; &lt;expr id="Jiwee"/&gt; &lt;/times&gt; &lt;/plus&gt; &lt;constant value="2"/&gt; &lt;/power&gt; &lt;times&gt; &lt;constant value="4"/&gt; &lt;minus&gt; &lt;times&gt; &lt;expr id="Viwee"/&gt; &lt;expr id="conc_MPF"/&gt; &lt;/times&gt; &lt;expr id="Vawee"/&gt; &lt;/minus&gt; &lt;expr id="Vawee"/&gt; &lt;expr id="Jiwee"/&gt; &lt;/times&gt; &lt;/minus&gt; &lt;constant id="div-degree" value="0.5"/&gt; &lt;/power&gt; &lt;/plus&gt; &lt;/divide&gt; &lt;/times&gt; &lt;/plus&gt; &lt;/expression&gt; &lt;expression id="kwee_prime"&gt; &lt;constant value="0.15"/&gt; &lt;/expression&gt; &lt;expression id="kwee_double_prime"&gt; &lt;constant value="1.3"/&gt; &lt;/expression&gt; &lt;expression id="Vawee"&gt; &lt;constant value="0.25"/&gt; &lt;/expression&gt; &lt;expression id="Jiwee"&gt; &lt;constant value="0.01"/&gt; &lt;/expression&gt; &lt;expression id="Viwee"&gt; &lt;constant value="1"/&gt; &lt;/expression&gt; &lt;expression id="Jawee"&gt; &lt;constant value="0.01"/&gt; &lt;/expression&gt; &lt;!--with assignment rule --&gt; &lt;expression id="k25" latex-look="k25"&gt; &lt;plus&gt; &lt;expr id="k25_prime"/&gt; &lt;times&gt; &lt;minus&gt; &lt;expr id="k25_double_prime"/&gt; &lt;expr id="k25_prime"/&gt; &lt;/minus&gt; &lt;divide&gt; &lt;times&gt; &lt;constant value="2"/&gt; &lt;expr id="Va25"/&gt; &lt;expr id="conc_MPF"/&gt; &lt;expr id="Ji25"/&gt; &lt;/times&gt; &lt;plus&gt; &lt;minus&gt; &lt;expr id="Vi25"/&gt; &lt;times&gt; &lt;expr id="Va25"/&gt; &lt;expr id="conc_MPF"/&gt; &lt;/times&gt; &lt;/minus&gt; &lt;times&gt; &lt;expr id="Vi25"/&gt; &lt;expr id="Ja25"/&gt; &lt;/times&gt; &lt;times&gt; &lt;expr id="Va25"/&gt; &lt;expr id="conc_MPF"/&gt; &lt;expr id="Ji25"/&gt; &lt;/times&gt; &lt;power&gt; &lt;minus&gt; &lt;power&gt; &lt;plus&gt; &lt;minus&gt; &lt;expr id="Vi25"/&gt; &lt;times&gt; &lt;expr id="Va25"/&gt; &lt;expr id="conc_MPF"/&gt; &lt;/times&gt; &lt;/minus&gt; &lt;times&gt; &lt;expr id="Vi25"/&gt; &lt;expr id="Ja25"/&gt; &lt;/times&gt; &lt;times&gt; &lt;expr id="Va25"/&gt; &lt;/expression&gt; &lt;expression id="k2_double_prime"&gt; &lt;constant value="1"/&gt; &lt;/expression&gt; &lt;expression id="k2_triple_prime"&gt; &lt;constant value="0.1"/&gt; &lt;/expression&gt; &lt;expression id="k3_prime"&gt; &lt;constant value="1"/&gt; &lt;/expression&gt; &lt;expression id="k3_double_prime"&gt; &lt;constant value="10"/&gt; &lt;/expression&gt; &lt;expression id="J3"&gt; &lt;constant value="0.01"/&gt; &lt;/expression&gt; &lt;expression id="k4_prime"&gt; &lt;constant value="2"/&gt; &lt;/expression&gt; &lt;expression id="k4"&gt; &lt;constant value="35"/&gt; &lt;/expression&gt; &lt;expression id="J4"&gt; &lt;constant value="0.01"/&gt; &lt;/expression&gt; &lt;expression id="k5_prime"&gt; &lt;constant value="0.005"/&gt; &lt;/expression&gt; &lt;expression id="k5_double_prime"&gt; &lt;constant value="0.3"/&gt; &lt;/expression&gt; &lt;expression id="J5"&gt; &lt;constant value="0.3"/&gt; &lt;/expression&gt; &lt;expression id="k6"&gt; &lt;constant value="0.1"/&gt; &lt;/expression&gt; &lt;expression id="k7"&gt; &lt;constant value="1"/&gt; &lt;/expression&gt; &lt;expression id="J7"&gt; &lt;constant value="0.001"/&gt; &lt;/expression&gt; &lt;expression id="k8"&gt; &lt;constant value="0.25"/&gt; &lt;/expression&gt; &lt;expression id="J8"&gt; &lt;constant value="0.001"/&gt; &lt;/expression&gt; &lt;expression id="k9"&gt; &lt;constant value="0.1"/&gt; &lt;/expression&gt; &lt;expression id="J9"&gt; &lt;constant value="0.01"/&gt; &lt;/expression&gt; &lt;expression id="k10"&gt; &lt;constant value="0.04"/&gt; &lt;/expression&gt; &lt;expression id="J10"&gt; &lt;constant value="0.01"/&gt; &lt;/expression&gt; &lt;expression id="k11"&gt; &lt;constant value="0.1"/&gt; &lt;/expression&gt; &lt;expression id="k12"&gt; &lt;constant value="0.01"/&gt; &lt;/expression&gt; &lt;expression id="k12_prime"&gt; &lt;constant value="1"/&gt; &lt;/expression&gt; &lt;expression id="k12_double_prime"&gt; &lt;constant value="3"/&gt; &lt;/expression&gt; &lt;expression id="k13"&gt; &lt;constant value="0.1"/&gt; &lt;/expression&gt; &lt;expression id="k14"&gt; &lt;constant value="0.1"/&gt; &lt;/expression&gt; &lt;expression id="mu"&gt; &lt;constant value="0.005"/&gt; &lt;/expression&gt; &lt;!--+++ start compartments --&gt; &lt;!--constant compartment --&gt; &lt;expression id="cell" latex-look="cell"&gt; &lt;constant value="1"/&gt; &lt;/expression&gt; &lt;!--+++ start events --&gt; &lt;event id="event_0000001"&gt; &lt;condition&gt; &lt;and&gt; &lt;leq&gt; &lt;expr id="conc_MPF"/&gt; &lt;constant value="0.1"/&gt; &lt;/leq&gt; &lt;eq&gt;&lt;!-control parameter --&gt; &lt;var type="control" id="flag_MPF"/&gt; &lt;constant value="1"/&gt; &lt;/eq&gt; &lt;/and&gt; &lt;/condition&gt; &lt;update&gt;&lt;!-species without boundaryCondition--&gt; &lt;var type="species" id="M"/&gt; &lt;divide&gt; &lt;expr id="conc_M"/&gt; &lt;constant value="2"/&gt; &lt;/divide&gt; &lt;/update&gt; &lt;update&gt;&lt;!-no rule but event --&gt; &lt;var type="control" id="flag_MPF"/&gt; &lt;constant value="0"/&gt; &lt;/update&gt; &lt;/event&gt; &lt;event id="event_0000002"&gt; &lt;condition&gt; &lt;lt&gt; &lt;constant value="0.1"/&gt; &lt;expr id="conc_MPF"/&gt; &lt;/lt&gt; &lt;/condition&gt; &lt;update&gt;&lt;!-no rule but event --&gt; &lt;var type="control" id="flag_MPF"/&gt; &lt;constant value="1"/&gt; &lt;/update&gt; &lt;/event&gt; &lt;/network&gt;</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C.7 Compilation of B111 to BioCham</head><p>From the Core SBML model for B111 we obtain the following BioCham 4 network by our compiler.  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</head></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Computing difference abstractions of metabolic networks under kinetic constraints</title>
		<author>
			<persName><forename type="first">E</forename><surname>Allart</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Niehren</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Versari</surname></persName>
		</author>
		<idno type="DOI">10.1007/978-3-030-31304-3_14</idno>
		<ptr target="https://doi.org/10.1007/978-3-030-31304-3_14" />
	</analytic>
	<monogr>
		<title level="m">Computational Methods in Systems Biology -17th International Conference, CMSB 2019</title>
		<title level="s">Proceedings. Lecture Notes in Computer Science</title>
		<editor>
			<persName><forename type="first">L</forename><surname>Bortolussi</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">G</forename><surname>Sanguinetti</surname></persName>
		</editor>
		<meeting><address><addrLine>Trieste, Italy</addrLine></address></meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2019">September 18-20, 2019. 2019</date>
			<biblScope unit="volume">11773</biblScope>
			<biblScope unit="page" from="266" to="285" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Julia: A fresh approach to numerical computing</title>
		<author>
			<persName><forename type="first">J</forename><surname>Bezanson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Edelman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Karpinski</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><forename type="middle">B</forename><surname>Shah</surname></persName>
		</author>
		<idno type="DOI">10.1137/141000671</idno>
		<ptr target="https://doi.org/10.1137/141000671" />
	</analytic>
	<monogr>
		<title level="j">SIAM Review</title>
		<imprint>
			<biblScope unit="volume">59</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="65" to="98" />
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">BIOCHAM: an environment for modeling biological systems and formalizing experimental knowledge</title>
		<author>
			<persName><forename type="first">L</forename><surname>Calzone</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Fages</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Soliman</surname></persName>
		</author>
		<idno type="DOI">10.1093/bioinformatics/btl172</idno>
		<ptr target="http://dx.doi.org/10.1093/bioinformatics/btl172" />
	</analytic>
	<monogr>
		<title level="j">Bioinformatics</title>
		<imprint>
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="issue">14</biblScope>
			<biblScope unit="page" from="1805" to="1807" />
			<date type="published" when="2006-07">Jul 2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">BioModels: ten-year anniversary</title>
		<author>
			<persName><forename type="first">V</forename><surname>Chelliah</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Juty</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Ajmera</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Ali</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Dumousseau</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Glont</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Hucka</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Jalowicki</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Keating</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Knight-Schrijver</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Lloret-Villas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Nath Natarajan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">B</forename><surname>Pettit</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Rodriguez</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Schubert</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">M</forename><surname>Wimalaratne</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Zhao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Hermjakob</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Le Novère</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Laibe</surname></persName>
		</author>
		<idno type="DOI">10.1093/nar/gku1181</idno>
		<ptr target="https://doi.org/10.1093/nar/gku1181" />
	</analytic>
	<monogr>
		<title level="j">Nucl. Acids Res</title>
		<imprint>
			<date type="published" when="2015">2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Sbml2latex: conversion of sbml files into humanreadable reports</title>
		<author>
			<persName><forename type="first">A</forename><surname>Dräger</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Planatscher</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Motsou Wouamba</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Schröder</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Hucka</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Endler</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Golebiewski</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Müller</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Zell</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Bioinformatics</title>
		<imprint>
			<biblScope unit="volume">25</biblScope>
			<biblScope unit="issue">11</biblScope>
			<biblScope unit="page" from="1455" to="1456" />
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Institutionum Calculi Integralis</title>
		<author>
			<persName><forename type="first">L</forename><surname>Euler</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Institutionum Calculi Integralis, imp. Acad. imp. Saènt</title>
		<imprint>
			<date type="published" when="1768">1768</date>
			<biblScope unit="volume">1</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Abstract interpretation and types for systems biology</title>
		<author>
			<persName><forename type="first">F</forename><surname>Fages</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Soliman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Theor. Comput. Sci</title>
		<imprint>
			<biblScope unit="volume">403</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="52" to="70" />
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Inferring reaction systems from ordinary differential equations</title>
		<author>
			<persName><forename type="first">F</forename><surname>Fages</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Gay</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Soliman</surname></persName>
		</author>
		<idno type="DOI">10.1016/j.tcs.2014.07.032</idno>
		<ptr target="http://dx.doi.org/10.1016/j.tcs.2014.07.032" />
	</analytic>
	<monogr>
		<title level="j">Theor. Comput. Sci</title>
		<imprint>
			<biblScope unit="volume">599</biblScope>
			<biblScope unit="page" from="64" to="78" />
			<date type="published" when="2015">2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Chemical reaction network structure and the stability of complex isothermal reactors-I. the deficiency zero and deficiency one theorems</title>
		<author>
			<persName><forename type="first">M</forename><surname>Feinberg</surname></persName>
		</author>
		<idno type="DOI">10.1016/0009-2509(87)80099-4</idno>
		<ptr target="http://www.sciencedirect.com/science/article/pii/0009250987800994" />
	</analytic>
	<monogr>
		<title level="j">Chemical Engineering Science</title>
		<imprint>
			<biblScope unit="volume">42</biblScope>
			<biblScope unit="issue">10</biblScope>
			<biblScope unit="page" from="2229" to="2268" />
			<date type="published" when="1987">1987</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">The logical analysis of continuous, non-linear biochemical control networks</title>
		<author>
			<persName><forename type="first">L</forename><surname>Glass</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">A</forename><surname>Kauffman</surname></persName>
		</author>
		<idno type="DOI">10.1016/0022-5193(73)90208-7</idno>
		<ptr target="https://www.sciencedirect.com/science/article/pii/0022519373902087" />
	</analytic>
	<monogr>
		<title level="j">Journal of Theoretical Biology</title>
		<imprint>
			<biblScope unit="volume">39</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="103" to="129" />
			<date type="published" when="1973">1973</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Statecharts: a visual formalism for complex systems</title>
		<author>
			<persName><forename type="first">D</forename><surname>Harel</surname></persName>
		</author>
		<idno type="DOI">10.1016/0167-6423(87)90035-9</idno>
		<ptr target="http://dx.doi.org/10.1016/0167-6423(87)90035-9" />
	</analytic>
	<monogr>
		<title level="j">Science of Computer Programming</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="231" to="274" />
			<date type="published" when="1987-06">Jun 1987</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Copasi-a complex pathway simulator</title>
		<author>
			<persName><forename type="first">S</forename><surname>Hoops</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Sahle</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Gauges</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Pahle</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Simus</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Singhal</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Mendes</surname></persName>
		</author>
		<author>
			<persName><forename type="first">U</forename><surname>Kummer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Bioinformatics</title>
		<imprint>
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="issue">24</biblScope>
			<biblScope unit="page" from="3067" to="3074" />
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">The Systems Biology Markup Language (SBML): Language specification for Level 3 Version 2 Core Release 2</title>
		<author>
			<persName><forename type="first">M</forename><surname>Hucka</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><forename type="middle">T</forename><surname>Bergmann</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Chaouiya</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Dräger</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Hoops</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">M</forename><surname>Keating</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>König</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Le Novère</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">J</forename><surname>Myers</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><forename type="middle">G</forename><surname>Olivier</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Sahle</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">C</forename><surname>Schaff</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Sheriff</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><forename type="middle">P</forename><surname>Smith</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Waltemath</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">J</forename><surname>Wilkinson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Zhang</surname></persName>
		</author>
		<idno type="DOI">10.1515/jib-2019-0021</idno>
		<ptr target="https://www.degruyter.com/view/j/jib.ahead-of-print/jib-2019-0021/jib-2019-0021.xml" />
	</analytic>
	<monogr>
		<title level="j">Journal of Integrative Bioinformatics</title>
		<imprint>
			<biblScope unit="volume">16</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page">20190021</biblScope>
			<date type="published" when="2019">2019</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Systems Biology Markup Language (SBML) Level 2 Version 5: Structures and facilities for model definitions</title>
		<author>
			<persName><forename type="first">M</forename><surname>Hucka</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><forename type="middle">T</forename><surname>Bergmann</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Dräger</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Hoops</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">M</forename><surname>Keating</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Le Novère</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">J</forename><surname>Myers</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><forename type="middle">G</forename><surname>Olivier</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Sahle</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">C</forename><surname>Schaff</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><forename type="middle">P</forename><surname>Smith</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Waltemath</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">J</forename><surname>Wilkinson</surname></persName>
		</author>
		<idno type="DOI">10.2390/biecoll-jib-2015-271</idno>
		<ptr target="http://dx.doi.org/10.2390/biecoll-jib-2015-271" />
	</analytic>
	<monogr>
		<title level="j">Journal of Integrative Bioinformatics</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page">271</biblScope>
			<date type="published" when="2015-09">Sep 2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<author>
			<persName><forename type="first">R</forename><surname>Jelliffe</surname></persName>
		</author>
		<idno>iSO/IEC 19757-3</idno>
		<title level="m">Schematron</title>
		<imprint>
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Knockout Prediction for Reaction Networks with Partial Kinetic Information</title>
		<author>
			<persName><forename type="first">M</forename><surname>John</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Nebut</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Niehren</surname></persName>
		</author>
		<ptr target="http://hal.inria.fr/hal-00692499" />
	</analytic>
	<monogr>
		<title level="m">14th International Conference on Verification, Model Checking, and Abstract Interpretation</title>
		<meeting><address><addrLine>Italy</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2013-01">Jan 2013</date>
			<biblScope unit="page" from="355" to="374" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<author>
			<persName><forename type="first">M</forename><surname>Kay</surname></persName>
		</author>
		<ptr target="https://www.saxonica.com" />
		<title level="m">The saxon xslt and xquery processor</title>
		<imprint>
			<date type="published" when="2004">2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">SBML Level 3 Community members: SBML Level 3: An extensible format for the exchange and reuse of biological models</title>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">M</forename><surname>Keating</surname></persName>
		</author>
		<idno type="DOI">10.15252/msb.20199110</idno>
		<ptr target="https://doi.org/10.15252/msb.20199110" />
	</analytic>
	<monogr>
		<title level="j">Molecular Systems Biology</title>
		<imprint>
			<biblScope unit="volume">16</biblScope>
			<biblScope unit="issue">8</biblScope>
			<biblScope unit="page">9110</biblScope>
			<date type="published" when="2020-08">Aug 2020</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Attractor Equivalence: An Observational Semantics for Reaction Networks</title>
		<author>
			<persName><forename type="first">G</forename><surname>Madelaine</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Lhoussaine</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Niehren</surname></persName>
		</author>
		<ptr target="https://hal.archives-ouvertes.fr/hal-00990924" />
	</analytic>
	<monogr>
		<title level="m">First International Conference on Formal Methods in Macro-Biology</title>
		<title level="s">Lecture Notes in Bioinformatics</title>
		<meeting><address><addrLine>Nouméa, New Caledonia</addrLine></address></meeting>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="2014-09">Sep 2014</date>
			<biblScope unit="page" from="82" to="101" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">BioModels-15 years of sharing computational models in life science</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">S</forename><surname>Malik-Sheriff</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Glont</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">V N</forename><surname>Nguyen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Tiwari</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">G</forename><surname>Roberts</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Xavier</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">T</forename><surname>Vu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Men</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Maire</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Kananathan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">L</forename><surname>Fairbanks</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">P</forename><surname>Meyer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Arankalle</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">M</forename><surname>Varusai</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Knight-Schrijver</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Dueñas-Roca</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Dass</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">M</forename><surname>Keating</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><forename type="middle">M</forename><surname>Park</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Buso</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Rodriguez</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Hucka</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Hermjakob</surname></persName>
		</author>
		<idno type="DOI">10.1093/nar/gkz1055</idno>
		<ptr target="https://doi.org/10.1093/nar/gkz1055" />
	</analytic>
	<monogr>
		<title level="j">Nucleic Acids Research</title>
		<imprint>
			<biblScope unit="volume">48</biblScope>
			<biblScope unit="issue">D1</biblScope>
			<biblScope unit="page" from="407" to="D415" />
			<date type="published" when="2020">2020</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Computational modeling of biochemical networks using copasi</title>
		<author>
			<persName><forename type="first">P</forename><surname>Mendes</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Hoops</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Sahle</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Gauges</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Dada</surname></persName>
		</author>
		<author>
			<persName><forename type="first">U</forename><surname>Kummer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Methods in molecular biology</title>
		<imprint>
			<biblScope unit="volume">500</biblScope>
			<biblScope unit="page" from="17" to="59" />
			<date type="published" when="2009-02">02 2009</date>
			<pubPlace>Clifton, N.J.</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Taming asynchrony for attractor detection in large boolean networks</title>
		<author>
			<persName><forename type="first">A</forename><surname>Mizera</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Pang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Qu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Q</forename><surname>Yuan</surname></persName>
		</author>
		<idno type="DOI">10.1109/TCBB.2018.2850901</idno>
		<ptr target="https://doi.org/10.1109/TCBB.2018.2850901" />
	</analytic>
	<monogr>
		<title level="j">IEEE/ACM Transactions on Computational Biology and Bioinformatics</title>
		<imprint>
			<biblScope unit="volume">16</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="31" to="42" />
			<date type="published" when="2019">2019</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Abstract simulation of reaction networks via boolean networks</title>
		<author>
			<persName><forename type="first">J</forename><surname>Niehren</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Vaginay</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Versari</surname></persName>
		</author>
		<idno type="DOI">10.1007/978-3-031-15034-0_2</idno>
		<ptr target="https://doi.org/10.1007/978-3-031-15034-0_2" />
	</analytic>
	<monogr>
		<title level="m">Computational Methods in Systems Biology -20th International Conference, CMSB 2022</title>
		<title level="s">Proceedings. Lecture Notes in Computer Science</title>
		<editor>
			<persName><forename type="first">I</forename><surname>Petre</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">A</forename><surname>Paun</surname></persName>
		</editor>
		<meeting><address><addrLine>Bucharest, Romania</addrLine></address></meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2022">September 14-16, 2022. 2022</date>
			<biblScope unit="volume">13447</biblScope>
			<biblScope unit="page" from="21" to="40" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Predicting Changes of Reaction Networks with Partial Kinetic Information</title>
		<author>
			<persName><forename type="first">J</forename><surname>Niehren</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Versari</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>John</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Coutte</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Jacques</surname></persName>
		</author>
		<ptr target="https://hal.inria.fr/hal-01239198" />
	</analytic>
	<monogr>
		<title level="j">BioSystems</title>
		<imprint>
			<biblScope unit="volume">149</biblScope>
			<biblScope unit="page" from="113" to="124" />
			<date type="published" when="2016-07">Jul 2016</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Reconciling Qualitative, Abstract, and Scalable Modeling of Biological Networks</title>
		<author>
			<persName><forename type="first">L</forename><surname>Paulevé</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Kolc ¸à</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Chatain</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Haar</surname></persName>
		</author>
		<idno type="DOI">10.1038/s41467-020-18112-5</idno>
		<ptr target="https://hal.archives-ouvertes.fr/hal-02518582" />
	</analytic>
	<monogr>
		<title level="j">Nature Communications</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<date type="published" when="2020">2020</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Boolean formalization of genetic control circuits</title>
		<author>
			<persName><forename type="first">R</forename><surname>Thomas</surname></persName>
		</author>
		<idno type="DOI">10.1016/0022-5193(73)90247-6</idno>
		<ptr target="https://www.sciencedirect.com/science/article/pii/0022519373902476" />
	</analytic>
	<monogr>
		<title level="j">Journal of Theoretical Biology</title>
		<imprint>
			<biblScope unit="volume">42</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="563" to="585" />
			<date type="published" when="1973">1973</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<monogr>
		<author>
			<persName><forename type="first">H</forename><forename type="middle">S</forename><surname>Thompson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Beech</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Maloney</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Mendelsohn</surname></persName>
		</author>
		<ptr target="http://www.w3.org/TR/xmlschema-1/" />
		<title level="m">Xml schema part 1: Structures second edition</title>
		<imprint>
			<date type="published" when="2004">2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">From quantitative SBML models to boolean networks</title>
		<author>
			<persName><forename type="first">A</forename><surname>Vaginay</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Boukhobza</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Smaïl-Tabbone</surname></persName>
		</author>
		<idno type="DOI">10.1007/s41109-022-00505-8</idno>
		<ptr target="https://doi.org/10.1007/s41109-022-00505-8" />
	</analytic>
	<monogr>
		<title level="j">Appl. Netw. Sci</title>
		<imprint>
			<biblScope unit="volume">7</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page">73</biblScope>
			<date type="published" when="2022">2022</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<monogr>
		<title level="m" type="main">XML Schema. O&apos;Reilly</title>
		<author>
			<persName><forename type="first">E</forename><surname>Van Der Vlist</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2003">2003</date>
			<pubPlace>Beijing</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">RELAX NG: A Simpler Schema Language for XML</title>
		<author>
			<persName><forename type="first">E</forename><surname>Van Der Vlist</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">O&apos;Reilly &amp; Assoc</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<date type="published" when="2004">2004</date>
		</imprint>
	</monogr>
	<note>aufl edn</note>
</biblStruct>

<biblStruct xml:id="b30">
	<monogr>
		<ptr target="https://www.w3.org/TR/xslt-30function(k13=0.1" />
		<title level="m">W3C: XSL transformations</title>
		<imprint>
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
	<note>XSLT) version 3.0. 14=0.1). function(mu=0.005)</note>
</biblStruct>

<biblStruct xml:id="b31">
	<monogr>
		<title level="m" type="main">%%%% events %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% add_event(((conc_MPF&lt;=0.1) and (flag_MPF=1)), M=(conc_M / 2), flag_MPF=0)</title>
		<imprint/>
	</monogr>
	<note>0.1&lt;conc_MPF), flag_MPF=1</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
