<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">A Grammatical Model for the Specification of Administrative Workflow using Scenario as Modelling Unit</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Milliam</forename><surname>Maxime</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Zekeng</forename><surname>Ndadji</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Mathematics and Computer Science</orgName>
								<orgName type="institution">University of Dschang</orgName>
								<address>
									<postBox>PO Box 67</postBox>
									<settlement>Dschang</settlement>
									<country key="CM">Cameroon</country>
								</address>
							</affiliation>
							<affiliation key="aff1">
								<orgName type="institution">FUCHSIA Research Associated Team</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Maurice</forename><forename type="middle">Tchoupé</forename><surname>Tchendji</surname></persName>
							<email>maurice.tchoupe@univ-dschang.org</email>
							<affiliation key="aff0">
								<orgName type="department">Department of Mathematics and Computer Science</orgName>
								<orgName type="institution">University of Dschang</orgName>
								<address>
									<postBox>PO Box 67</postBox>
									<settlement>Dschang</settlement>
									<country key="CM">Cameroon</country>
								</address>
							</affiliation>
							<affiliation key="aff1">
								<orgName type="institution">FUCHSIA Research Associated Team</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Clémentin</forename><forename type="middle">Tayou</forename><surname>Djamegni</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Mathematics and Computer Science</orgName>
								<orgName type="institution">University of Dschang</orgName>
								<address>
									<postBox>PO Box 67</postBox>
									<settlement>Dschang</settlement>
									<country key="CM">Cameroon</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Didier</forename><surname>Parigot</surname></persName>
							<email>didier.parigot@inria.fr</email>
							<affiliation key="aff3">
								<orgName type="institution">Inria</orgName>
								<address>
									<settlement>Sophia Antipolis</settlement>
									<country key="FR">France</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff2">
								<orgName type="department">project.inria.fr</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">A Grammatical Model for the Specification of Administrative Workflow using Scenario as Modelling Unit</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">BDE90279A8E2C31D6B361F43D6CD129B</idno>
					<idno type="DOI">10.1007/978-3-030-61702-8_10</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.8.0" ident="GROBID" when="2024-04-12T14:52+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Administrative Process Modelling</term>
					<term>Workflow Language</term>
					<term>Grammars</term>
					<term>Artifact</term>
					<term>Accreditation</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Process modelling is a crucial phase of Business Process Management (BPM). Despite the many efforts made in producing process modelling tools, existing tools (languages) are not commonly accepted. They are mainly criticised for their inability to specify both the tasks making up the processes and their scheduling (their lifecycle models), the data they manipulate (their information models) and their organizational models. Process modelling in these languages often results in a single task graph; such a graph can quickly become difficult to read and maintain. Moreover, these languages are often too general (they have a very high expressiveness); this makes their application to specific types of processes complex: especially for administrative processes. In this paper, we present a new language for administrative processes modelling that allows designers to specify the lifecycle, information and organizational models of such processes using a mathematical tool based on a variant of attributed grammars. The approach imposed by the new language requires the designer to subdivide his process into scenarios, then to model each scenario individually using a simple task graph (an annotated tree) from which a grammatical model is further derived. At each moment then, the designer manipulates only a scenario of the studied process: this approach is more intuitive and modular; it allows to produce task graphs that are more refined and therefore, more readable and easier to maintain.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Workflow technology aim at automating business processes <ref type="foot" target="#foot_0">4</ref> . To do so, it provides a clear framework composed of two major entities: (1) a workflow language for the description of such processes in a (generally graphical) format that can be interpreted by (2) a software system called Workflow Management System (WfMS). The role of WfMS is to facilitate collaboration and coordination of various actors involved in the distributed execution of processes' tasks: in this way, workflow reduces the automation of business processes to their modelling in workflow languages; process modelling (specification) is therefore a crucial phase of workflow management <ref type="foot" target="#foot_1">5</ref> .</p><p>Several tools have been developed to address process modelling. Among the most well-known are the BPMN standard (Business Process Model and Notation<ref type="foot" target="#foot_2">6</ref> ) <ref type="bibr" target="#b12">[13]</ref> based on statecharts, and the YAWL language (Yet Another Workflow Language) <ref type="bibr" target="#b0">[1]</ref> which uses a formalism derived from that of Petri nets. Despite the significant research progress around these tools (often qualified as "traditional tools"), they are not commonly accepted. Indeed, they are often criticized for not being based on solid mathematical foundations <ref type="bibr" target="#b7">[8]</ref>, for having a much too great expressiveness compared to the needs of professionals in the field <ref type="bibr" target="#b21">[22]</ref> and/or for not being intuitive <ref type="bibr" target="#b7">[8]</ref>.</p><p>Another important criticism often levelled at traditional workflow languages is the fact that they treat data (process information model) and users (part of process organizational model) as second-class citizens by highlighting tasks and their routing (process lifecycle model). To precisely remedy this, researchers have developed over the last two decades and under the initiative of IBM, the artifact-centric <ref type="bibr" target="#b14">[15]</ref> approach to the design and execution of business processes. This one, revisited in several works <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b8">9,</ref><ref type="bibr" target="#b9">10,</ref><ref type="bibr" target="#b10">11,</ref><ref type="bibr" target="#b2">3,</ref><ref type="bibr" target="#b3">4,</ref><ref type="bibr" target="#b6">7]</ref>, proposes a new approach to workflow management by focusing on both automated processes and data manipulated using the concept of "business artifact" or "artifact" in short. An artifact is considered as a document that conveys all the information concerning a particular case of execution of a given business process, from its inception in the system to its termination. A major shortcoming of artifactcentric models is that, after designing a given business process, it's difficult to manage it out of the context for which it was designed: specification and execution context (the WfMS on which it must be executed) are strongly coupled. In fact, in artifact-centric approaches the process specification is done with artifact modelling and artifacts are usually tailored to dedicated collaborative systems; process designers are then obliged to take into account certain details related to the workflow execution technique during the modelling phase: it is therefore difficult to consider these approaches exclusively as business process modelling tools since they are context dependant.</p><p>Another mentioned shortcoming of existing process modelling approaches is that they concentrate the modelling of a given process into a single task graph. Not only does this not allow designers to explicitly express the entire control flow of certain types of processes, but the resulting specifications are generally not easy to read, to maintain and to evolve. These concerns were first raised by Wil M. P. van der Aalst et al. <ref type="bibr" target="#b18">[19,</ref><ref type="bibr" target="#b20">21]</ref>. They provide a solution to this by introducing the concept of proclet; they thus propose to deal with several levels of granularity assigned to lightweight workflow processes (proclets) in charge of orchestrating their execution. The modelling of each level of granularity is therefore done using a smaller task graph. We find this vision very interesting. However, the notion of granularity manipulated in <ref type="bibr" target="#b18">[19]</ref> is not very intuitive and seems, as for artifact-centric models, intimately linked to the execution model of proclets. In the case of an administrative process<ref type="foot" target="#foot_3">7</ref> P op , we think it would be more affordable to partition its task graph according to a characteristic that is natural to it. Knowing that such a process is naturally composed of a set of execution scenarios and can be represented by a finite set S 1 op , . . . , S k op of representative scenarios<ref type="foot" target="#foot_4">8</ref> (see sec. 3.2) known in advance, we propose to use the "scenario" as the modelling unit".</p><p>All the above-mentioned shortcomings of traditional workflow languages confirm that there is still a need of scientific innovation in the field of business process modelling. This paper presents a new Language for the Specification of Administrative Workflow Processes (LSAWfP) based on the concept of attributed grammars (a specification of business processes by the means of attributed grammars is also presented in <ref type="bibr" target="#b4">[5]</ref>). LSAWfP is built in a more traditional way and then, unlike the artifact-centric approaches, it allows process modelling independently of a workflow execution technique. Opposed to traditional workflow languages, LSAWfP provides coherent tools to model both processes' lifecycle model, information model and organizational model. Additionally, LSAWfP uses the "scenario" as the modelling unit: a given process modelling consists to the modelling of each of its representative scenario. Designers can thus focus on the modelling and the maintenance of process' parts rather than handling the whole process at a time: this seems to be more intuitive, modular and easier, and can also be further well composed with the level of granularity splitting approach proposed by <ref type="bibr" target="#b18">[19]</ref>.</p><p>LSAWfP is especially tailored for administrative processes modelling: its expressiveness is then built to fit the needs of such processes. Its modelling approach can be described as follow: from the observation that one can analyse the textual description of a given administrative process to exhibit all its possible representative execution scenarios leading to its business goals, LSAWfP propose to model each of these scenarios by an annotated tree called a representative artifact in which, each node corresponds to a task of the process, and each hierarchical decomposition (a node and its sons) represents a scheduling of these tasks. From these representative artifacts, are derived an attributed grammar G called the Grammatical Model of Workflow (GMWf). The symbols of a given GMWf represent the process tasks and each of its productions represents a scheduling of a subset of these tasks; intuitively, a production given by its left and right hand sides, specifies how the task on the left hand side precedes (must be executed before) those on the right hand side. Thus, the GMWf of a process contains both its information model (modelled by its attributes) and its lifecycle model (thanks to the set of its productions). Once the GMWf is obtained, LSAWfP propose to add organizational information (organizational model) modelled by two lists: L P k which contains actors involved in the process and L A k which contains their accreditations. These lists aim at modelling actors, their roles and the different perceptions they have on a given process. Thus, with LSAWfP, the model (subsequently called a Grammatical Model of Administrative Workflow Process -GMAWfP -) of a given administrative process P op is an executable grammatical specification given by a triplet</p><formula xml:id="formula_0">W f = G, L P k , L A k .</formula><p>The rest of this manuscript is organised as follows: after describing a running example (the peer-review process) in section 2, we present more formally and with illustrations, the proposed language in section 3. A discussion on its expressiveness and on some ongoing works is conducted in section 4. Finally, section 5 is devoted to the conclusion.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">A Running Example: the Peer-Review Process</head><p>As running example, we will use the peer-review process. A brief description of it inspired by those made in <ref type="bibr" target="#b18">[19]</ref>, can be the following one: -The process starts when the editor in chief (EC) receives a paper for validation; -Then, the EC performs a pre-validation after which he can accept or reject the submission for various reasons (subject of minor interest, submission not within the journal scope, non-compliant format, etc.); let us call this task "A"; -If he rejects the submission, he writes a report (task "B") then notifies the corresponding author (task "D") and the process ends; -Otherwise, he chooses an associated editor (AE) and sends him the paper for the continuation of its validation; -The AE prepares the manuscript (task "C") and contacts simultaneously two experts for the evaluation of the paper (tasks "E1" and "E2"); if a contacted expert refuses to participate, the AE contacts another one (iteration on task "E1" or "E2"). Otherwise, the expert (referee) can start the evaluation; -Each referee reads, seriously evaluates the paper (tasks "G1" and "G2") and sends back a report (tasks "H1" and "H2") and a message (tasks "I1" and "I2") to the AE; -After receiving reports from all referees, the AE takes a decision and informs the EC (task "F") who sends the final decision to the corresponding author (task "D").</p><p>From the description above, one can identify all the tasks to be executed, their sequencing, actors involved and the tasks assigned to them. For this case, four actors are involved: an editor in chief (EC) which is responsible for initiating the process, an associated editor (AE) and two referees (R1 and R2). Figure <ref type="figure" target="#fig_0">1</ref> shows the orchestration diagrams corresponding to the graphical description of this peer-review process using the widely used process-centric notations BPMN (Business Process Model and Notation) and WF-Net (Workflow Net). As usual, tasks are ordered using sequential flow, {And, Or}-Splits and {And, Or}-Joins. Each diagram resumes the main scenarios of the studied process.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">A Language for the Specification of Administrative Workflow Processes (LSAWfP)</head><p>In this section, we present the new language LSAWfP that allows to specify administrative workflow processes independently of a workflow execution technique. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Artifacts as Control Flow Graphs</head><p>Let's consider an administrative process P op to be modelled. By definition (of administrative process), its set T n = {X 1 , . . . , X n } of tasks is known in advance. In traditional workflow languages like BPMN or WF-Net, the control flow between its tasks is represented using a directed graph that can contain cycles (see fig. <ref type="figure" target="#fig_0">1</ref>). Such a graph allows the modelling of the potentially infinite set<ref type="foot" target="#foot_5">9</ref> of P op 's execution scenarios. Let's note however that each P op 's execution scenario can also be modelled using an annotated tree t i called artifact. Indeed, starting from the fact that a given scenario S i op consists of a subset T m ⊆ T n of m ≤ n tasks to be executed in a specific order (in parallel or in sequence), one can represent S i op as a tree t i in which each node (labeled X i ) potentially corresponds to a task X i ∈ T m of S i op and each hierarchical decomposition (a node and its sons) corresponds to a scheduling: the task associated with the parent node must be executed before those associated with the son nodes; the latter must be executed according to an order -parallel or sequential -that can be specified by particular annotations " " (is sequential to) and " " (is parallel to) which will be applied to each hierarchical decomposition. The annotation " " (resp. " ") reflects the fact that the tasks associated with the son nodes of the decomposition must (resp. can) be executed in sequence (resp. in parallel). To model iteration, nodes can be recursive in an artifact: i.e a node labelled X i may appear in subtrees rooted by a node having the same label X i .</p><p>Considering the running example (the peer-review process), two of its execution scenarios can be modelled using the two artifacts art 1 and art 2 in figure <ref type="figure" target="#fig_1">2</ref>. In particular, we can see that art 1 shows how the task "Receipt and pre-validation of a submitted paper" assigned to the EC, and associated with the symbol A (see sec. 2), must be executed before tasks associated with the symbols B and D that are to be executed in sequence. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Representative Artifacts and Grammatical Model of Workflow</head><p>Representative Artifacts As mentioned earlier (see sec. 3.1), the set of execution scenarios for a given administrative process can be infinite. This is the case of our running example process in which we can iterate on tasks E1 and E2 without limit and thus generate an infinite set of execution scenarios. In these cases, the designer cannot list this set of scenarios in order to model each of them. It is then necessary to substitute this one by a finite set S 1 op , . . . , S k op of scenarios said to be representative. Each representative scenario can then be modelled by a so called representative artifact.</p><p>For a given process, the set of its representative artifacts is obtained by adding to the finite set of artifacts modelling its nominal scenarios (those leading to its different business goals without iteration), those representing the modelling of its alternative scenarios (these are scenarios in which at least one iteration have been made). Operationally, when designing an alternative scenario artifact, the designer must prune it at each first iteration encountered: i.e the designer must prune each branch of an alternative scenario artifact as soon as he encounters a node labelled for the second time by a same label along a path starting from the root. In fact, one could assume that to design the representative artifacts of a given business process, the designer begins by identifying the initial tasks of it (i.e., the tasks that can start one of its execution scenarios); each of these tasks will thus constitute the root of several representative artifacts. To construct the set arts X 0 i of representative artifacts rooted in a given initial task X 0 i , the designer will:</p><p>(1) Construct an artifact art having X 0 i as the single node (root);</p><p>(2) Then, he will determine the set f ollow = X 1 i 1 , . . . , X m1 i 1 , . . . , X 1 in , . . . , X mn in of task combinations (each combination is either sequential or parallel 10 ) that can be immediately executed after the execution of X 0 i . For each combination X 1 i j , . . . , X m j i j , the designer will create a new artifact art j by expanding the node X 0 i of art such that in art j , the tasks X 1 i j , . . . , X m j i j are the child nodes of X 0 i .</p><p>(3) It will then only remain to recursively develop (using the principle of ( <ref type="formula">2</ref>)) each leaf node of the new artifacts until representative artifacts (those that describe an execution scenario in its entirety) are obtained.</p><p>This construction principle emphasizes the fact that one does not loose information by pruning an artifact when encountering a given node X for the second time in the same branch. In such a case, it is not necessary to develop X a second time since the designer has enumerated (in several artifacts) all the possibilities (scenarios) of continuing the execution of the process after the execution of the task associated with X. As we will see in section 3.2, these possibilities will be coded in a grammar and thus, the execution scenarios characterized by several iterations on X, will indeed be specified in the language. When constructing a representative artifact, the pruning of a branch is therefore systematic when a node is encountered for the second time; no matter how many nodes generate an iteration in the same branch.</p><p>Figure <ref type="figure" target="#fig_1">2</ref> presents the five representative artifacts of our running example process. The artifacts art 1 and art 2 model the two nominal scenarios: art 1 models the scenario in which the EC directly rejects the paper while art 2 models the case where the paper is evaluated by referees (R1 and R2) without the AE having to contact more than two experts (no iteration on tasks E1 and E2). The artifacts art 3 , art 4 and art 5 represent the infinite set of alternative scenarios in this example. In art 3 in particular, we can see that the designer has pruned at node E2 which appeared for the second time in the same branch.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Grammatical Model of Workflow</head><p>From the finite set of representative artifacts of a given process, it is possible to extract an abstract grammar 11 that represents the underlying process's lifecycle model : it is this grammar that we designate by the expression</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Grammatical Model of Workflow (GMWf).</head><p>Let's consider the set {t 1 , . . . ,t k } of representative artifacts modelling the k representative execution scenarios of a given process P op of n tasks (T n = {X 1 , . . . , X n }). Each t i is a derivation tree for an abstract grammar (a GMWf) G = (S , P , A) whose set of symbols is S = T n (all process tasks) and each production p ∈ P reflects a hierarchical 10 If a given combination X 1 i j , . . . , X m j i j is sequential (resp. parallel), its tasks are to be (resp. can be) executed sequentially (resp. in parallel). 11 It is enough to consider the set of representative artifacts as a regular tree language: there is therefore an (abstract) grammar to generate them.</p><p>decomposition contained in at least one of the representative artifacts. Each production is therefore exclusively of one of the following two forms: p : X 0 → X 1 . . . X n or p : X 0 → X 1 . . . X n . The first form p : X 0 → X 1 . . . X n (resp. the second form p : X 0 → X 1 . . . X n ) means that task X 0 must be executed before tasks {X 1 , . . . , X n } and these must be (resp. that can be) executed in sequence (resp. in parallel). A GMWf can therefore be formally defined as follows:</p><formula xml:id="formula_1">Definition 1. A Grammatical Model of Workflow (GMWf) is defined by G = (S , P , A)</formula><p>where :</p><p>-S is a finite set of grammatical symbols or sorts corresponding to various tasks to be executed in the studied business process;</p><p>-A ⊆ S is a finite set of particular symbols called axioms, representing tasks that can start an execution scenario (roots of representative artifacts), and -P ⊆ S × S * is a finite set of productions decorated by the annotations " " (is sequential to) and " " (is parallel to): they are precedence rules. A production P = X P(0) , X P(1) , • • • X P(|P|) is either of the form P : X 0 → X 1 . . . X |P| , or of the form P : X 0 → X 1 . . . X |P| and |P| designates the length of P right-hand side. A production with the symbol X as left-hand side is called a X-production.</p><p>Let's illustrate the notion of GMWf by considering the one generated from an analysis of the representative artifacts obtained in the case of the peer-review process (see fig. <ref type="figure" target="#fig_1">2</ref>): the derived GMWf is G = (S , P , A) in which the set S of grammatical symbols is S = {A, B,C, D, S1, E1, E2, F, G1, G2, H1, H2, I1, I2} (see sec 2); the only initial task (axiom) is A (then A = {A}) and the set P of productions is: There may be special cases where it is not possible to schedule the tasks of a scenario using the two (only) forms of production selected for GMWf. For example, this is the case for the peer-review process wherein task C precedes tasks E1, E2 and F, tasks E1 and E2 can be executed in parallel and precede F (see sec. 2). In such cases, the introduction of a few new symbols known as (re)structuring symbols (not associated with tasks) can make it possible to produce a correct scheduling. For the peer-review process example, the introduction of a new symbol S1 allows us to obtain the following productions: P 3 : C → S1 F and P 4 : S1 → E1 E2 which properly model the required scheduling and avoid the usage of the malformed production p : C → E1 E2 F (see in fig. <ref type="figure" target="#fig_1">2</ref>, art 2 , the node S1 -in gray -). To deal with such cases, the previously given GMWf definition (definition 1) is slightly adapted by integrating the (re)structuring symbols; the resulting definition is as follows: Definition 2. A Grammatical Model of Workflow (GMWf) is defined by G = (S , P , A) wherein P and A refer to the same purpose as in definition 1, S = T ∪ T Struc is a finite set of grammatical symbols or sorts in which, those of T correspond to tasks of the studied business process, while those of T Struc are (re)structuring symbols.</p><formula xml:id="formula_2">P 1 : A →</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Modelling the Information Model of Processes with GMWf</head><p>As formalized in definition 2, a GMWf perfectly models the tasks and control flow of administrative processes (lifecycle model). In this section we discuss the specification of processes-related data (the information model) in LSAWfP.</p><p>It is not easy to model the structure of business processes data using a general type as they differ from one process to another. For the current work, tackling the automated processes data structure has no proven interest because it does not bring any added value to the proposed model: a representation of these data using a set of variables associated with tasks is largely sufficient. However, it should be noted that in existing data-driven modelling approaches like the Guarded Attribute Grammar (GAG) model <ref type="bibr" target="#b4">[5]</ref>, these variables typically have two parts to allow designers to model each task's (1) preconditions or input data required for its actual execution, and (2) post-conditions or output data produced during its execution. In addition, dependency relationships between data are often modelled.</p><p>In this work, the potential manipulated data by a given process task is represented using an attribute embedded in the nodes associated with it. To materialise this adjustment, we update for the last time the definition of GMWf. We thus associate with each symbol, an attribute named status allowing to store all the data of the associated task; its precise type is left to the discretion of the process designer. The new definition of GMWf is thus the following one: <ref type="bibr">Workflow (GMWf)</ref> is defined by G = (S , P , A) wherein S, P and A refer to the same purpose as in definition 2. Each grammatical symbol X ∈ S is associated with an attribute named status, that can be updated when tasks are executed; X.status provides access (read and write) to its content.</p><formula xml:id="formula_3">Definition 3. A Grammatical Model of</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">An Organizational Model for LSAWfP</head><p>Because business processes are generally carried out collectively, it is important to model actors an to set up mechanisms to ensure better coordination between them and to eventually guarantee the confidentiality of certain actions and data: this is the purpose of accreditation. The accreditation of a given actor provides information on its rights (permissions) relatively to each sort (task) of the studied process's GMWf. We propose here, a simple but non-exhaustive nomenclature of rights. It is inspired by the one used in UNIX-like operating systems. Three types of accreditation are therefore defined: accreditation in reading (r), writing (w) and execution (x). 1. The accreditation in reading (r): an actor accredited in reading on sort X must be informed of the execution of the associated task; he must also have free access to its execution state (data generated during its execution). We call an actor's view, the set of sorts on which he is accredited in reading.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">The accreditation in writing (w):</head><p>an actor accredited in writing on sort X can execute the associated task. To be simple, any actor accredited in writing on a sort must necessarily be accredited in reading on it.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">The accreditation in execution (x):</head><p>an actor accredited in execution on sort X is allowed to ask the actor who is accredited in writing in it, to execute it (realization of the associated task). More formally, an accreditation is defined as follows: Definition 4. An accreditation A A i defined on the set S of grammatical symbols for an actor A i , is a triplet</p><formula xml:id="formula_4">A A i = A A i (r) , A A i (w) , A A i (x) such that, A A i (r) ⊆ S also called view of actor A i , is the set of symbols on which A i is accredited in reading, A A i (w) ⊆ A A i (r)</formula><p>is the set of symbols on which A i is accredited in writing and A A i (x) ⊆ S is the set of symbols on which A i is accredited in execution.</p><p>The accreditations of various actors must be produced by the workflow designer just after modelling the scenarios in the form of representative artifacts. From the task assignment for the peer-review process in the running example (see sec. 2), it follows that the accreditation in writing of the EC is A EC(w) = {A, B, D}, that of the AE is A AE(w) = {C, S1, E1, E2, F} and that of the first (resp. the second) referee is A R 1 (w) = {G1, H1, I1} (resp. A R 2 (w) = {G2, H2, I2}). Since the EC can only execute the task D if the task C is already executed (see fig. <ref type="figure" target="#fig_1">2</ref>), in order for the EC to be able to ask the AE to execute this task, he must be accredited in execution on it; so we have A EC(x) = {C}. Moreover, in order to be able to access all the information on the peer-review evaluation of a paper (task C) and to summarize the right decision to send to the author, the EC must be able to consult the reports (tasks I1 and I2) and the messages (tasks H1 and H2) of the different referees, as well as the final decision taken by the AE (task F). These tasks, added to A EC(w) 12 constitute the set A EC(r) = V EC = {A, B,C, D, H1, H2, I1, I2, F} of tasks on which it is accredited in reading. By doing so for each of other actors, we deduce the accreditations represented in table <ref type="table">1</ref>. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Actor</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>R2</head><p>A R2 = ({C, G2, H2, I2}, {G2, H2, I2}, / 0) Table <ref type="table">1</ref>. Accreditations of the different actors taking part in the peer-review process.</p><p>Since the (re)structuring symbols are not associated with tasks and were only introduced to adjust the control flow, their execution neither requires nor produces data. Therefore, the accreditation in writing and execution on them may be best left to the designer's appreciation; he will then make the assignment by referring to the execution model he will use later. To this end, he could use the same principle for the assignment of these accreditations in the case of concrete process' tasks. However, one could by default consider that all actors are accredited in reading on (re)structuring symbols; this would make these symbols visible to all of them and would guarantee that the adjustment of the control flow will be effective for all of them even if they have partial perceptions of the process.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.5">Summary: definition of LSAWfP</head><p>To summarise, we state that in LSAWfP, an administrative process P op is specified using a triplet W f = G, L P k , L A k called a Grammatical Model of Administrative Workflow Process (GMAWfP) and composed of: a GMWf, a list of actors and a list of their accreditations. The GMWf is used to describe all the tasks of the studied process and their scheduling, while the list of accreditations provides information on the role played by each actor involved in the process execution. A GMAWfP can then be formally defined as follows:</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Definition 5. A Grammatical Model of Administrative Workflow Process (GMAWfP)</head><p>W f for a given business process, is a triplet W f = G, L P k , L A k wherein G is the studied process (global) GMWf, L P k is the set of k actors taking part in its execution and L A k represents the set of these actors accreditations.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Ongoing and Perspective Work on LSAWfP</head><p>In this section, we present some of the work being currently done on LSAWfP while assessing what has already been done and presented in this paper.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">On the Expressiveness of LSAWfP</head><p>Let's consider a specification W f = G, L P k , L A k of a given business process P op . As described above, its organizational model that expresses and classifies/assigns the resources that must execute its tasks is given by the couple L P k , L A k of W f . Its in- formational model that describes the data structure being manipulated is given by the type of the attribute status associated with each task. Its lifecycle model that provides information on tasks and their sequencing (coordination) is given by the GMWf G of W f . Thus, we can conclude that LSAWfP has the major expected characteristics of a workflow language according to <ref type="bibr" target="#b0">[1]</ref>.</p><p>The GMWf effectively allows the designers to specify all the basic control flows (sequential, parallel, alternative and iterative) which can be found in traditional workflow languages. Figure <ref type="figure" target="#fig_3">3</ref> gives for each type of basic control flow its BPMN notation and the corresponding notations (artifact and associated productions) in LSAWfP as described below: -the sequential flow between two tasks A and B can be expressed either by a production p of the form p : A → B, or by a production q of the form q : S → A B in which S is a (re)structuring symbol (see fig. <ref type="figure" target="#fig_3">3(a)</ref>); -the parallel flow between two tasks A and B is expressed using a production p of the form p : S → A B (see fig. <ref type="figure" target="#fig_3">3(b)</ref>); -the alternative flow (choice) between two tasks A1 and A2 is expressed using two productions p1 and p2 such that p1 : S → A1 and p2 : S → A2; S is a (re)structuring symbol expressing the fact that after "execution" of S, one must execute either task A1 or task A2 (see fig. <ref type="figure" target="#fig_3">3(c)</ref>).</p><p>-iterative routing (repetition) is expressed using recursive symbols. Thus the productions p1 : A → B, p2 : B → C and p3 : B → A express a potentially (transitive) iterative flow on the task A (see fig. <ref type="figure" target="#fig_3">3(d)</ref>); P 7 : E1 → E1 in the running example also expresses a direct iterative flow on E1 (see fig. <ref type="figure" target="#fig_1">2</ref>).</p><p>One avenue we are currently exploring is that of measuring the expressiveness of LSAWfP in relation to workflow patterns <ref type="bibr" target="#b19">[20]</ref>. This will allow us to characterize precisely the class of processes that this language can model.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Towards an Artifact-Centric Model of Processes Design and Distributed Execution Based on Cooperative Edition of a Mobile Artifact</head><p>We are also working to produce an artifact-centric model of business process management. In this model inspired by the work of Badouel et al. on cooperative editing <ref type="bibr" target="#b5">[6,</ref><ref type="bibr" target="#b15">16,</ref><ref type="bibr" target="#b16">17,</ref><ref type="bibr" target="#b17">18,</ref><ref type="bibr" target="#b13">14]</ref>, the process tasks are executed by the various actors with the help of software agents that they pilot. These software agents are autonomous, reactive and communicate in peer to peer mode by exchanging an artifact (considered as "mobile") edited cooperatively. This mobile artifact is an annotated tree that represents the execution status of the process at each moment. For this purpose, it contains information on the tasks already executed, on the data produced during these executions and on the tasks ready to be executed. When the mobile artifact is received at a given execution site, the local agent executes an update protocol whose purpose is to reveal the tasks ready to be executed locally by the local actor. The execution of the tasks by the local actor is done using a specialized editor and can be assimilated to the edition of a structured document since its actions cause the received mobile artifact (the tree) to be updated, by expanding some of its leaf nodes into sub-trees and by assigning values to the "status" attributes of some other nodes. When all the tasks ready to be locally executed have been executed, the artifact is sent to other agents for further execution of the process if necessary.</p><p>To run the peer-review process described in section 2 with the artifact-centric model being built, four agents controlled by four actors (the EC, the AE, the R1 and the R agents) will be deployed. Figure <ref type="figure" target="#fig_4">4</ref> sketches an overview of exchanges that can take place between those four agents. The scenario presented there corresponds to the nominal one in which the paper is pre-validated by the EC and therefore, is analysed by a peer review committee. The artifact-centric execution is triggered on the EC's site by introducing (in this site) an artifact reduced to its root node. During its transit through the system, this artifact grows. Note that there may be situations where multiple copies of the artifact are updated in parallel; this is notably the case when they are present on site 3 (first referee) and 4 (second referee).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Conclusion</head><p>In this paper, we have proposed a new workflow language called LSAWfP which allows, through a simple grammar-based formalism, to specify administrative business processes. Like any traditional workflow language, LSAWfP allows to specify basic flows (sequential, parallel, alternative and iterative) that are generally found in workflow models; particularly, it focuses on the modelling of each of the process scenario using an artifact. Moreover, LSAWfP allows to model the main characteristics of business processes (their lifecycle, their informational and their organizational aspects). We also presented some of the work associated with LSAWfP that are currently in progress.</p><p>In our opinion, an other work that can be done following the one presented in this paper, is the production of a software tool to assist in the specification of business processes in the LSAWfP language. Such a tool, in addition to providing interfaces for the graphic design of scenario graphs (representative artifacts), will allow designers to check the correctness of the produced specifications and ensure their conversion to other formats (BPMN and YAWL for example).</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 1 .</head><label>1</label><figDesc>Fig. 1. Orchestration diagrams of the peer-review process.</figDesc><graphic coords="6,46.78,166.05,521.76,227.89" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 2 .</head><label>2</label><figDesc>Fig. 2. Representative artifacts of a paper validation process in a peer-review journal.</figDesc><graphic coords="7,50.30,260.78,514.82,154.96" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head></head><label></label><figDesc>Accreditation EC A EC = ({A, B,C, D, H1, H2, I1, I2, F}, {A, B, D}, {C}) AE A AE = ({A,C, S1, E1, E2, F, H1, H2, I1, I2}, {C, S1, E1, E2, F }, {G1, G2}) R1 A R1 = ({C, G1, H1, I1}, {G1, H1, I1}, / 0)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fig. 3 .</head><label>3</label><figDesc>Fig. 3. Illustrating basic control flows with LSAWfP.</figDesc><graphic coords="13,169.43,165.96,276.54,302.85" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Fig. 4 .</head><label>4</label><figDesc>Fig. 4. An overview of the artifact-centric execution of the peer-review process.</figDesc><graphic coords="14,105.96,215.01,403.36,271.67" type="bitmap" /></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="4" xml:id="foot_0"><p>A business process is a set of tasks that follow a specific pattern and are executed to achieve a specific goal<ref type="bibr" target="#b0">[1]</ref>. When such processes are managed electronically, they are called workflows.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="5" xml:id="foot_1"><p>The Workflow Management Coalition (it is the organization responsible for developing standards in workflow) defines workflow management as the modelling and computer management of all the tasks and different actors involved in executing a business process<ref type="bibr" target="#b0">[1]</ref>.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="6" xml:id="foot_2"><p><ref type="bibr" target="#b5">6</ref> BPMN was initiated by the Business Process Management Initiative (BPMI) which merged with Object Management Group (OMG) in 2005.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="7" xml:id="foot_3"><p>According to the classification framework of<ref type="bibr" target="#b11">[12]</ref>, administrative processes are those for which all cases are known; tasks are predictable and their sequencing rules are simple and clear.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="8" xml:id="foot_4"><p>We refer to a representative scenario as any execution scenario that, in combination with other representative scenarios, can generate a (potentially infinite) set of other scenarios.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="9" xml:id="foot_5"><p>This is the case when there is one or more iterative routing (materialized by cycles in the task graph) on tasks.</p></note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Business process management: a comprehensive survey</title>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">M</forename><surname>Van Der Aalst</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ISRN Software Engineering</title>
		<imprint>
			<biblScope unit="page">2013</biblScope>
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Towards an integration system for artifact-centric processes</title>
		<author>
			<persName><forename type="first">M</forename><surname>Abi Assaf</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2016 on SIGMOD&apos;16 PhD Symposium</title>
		<meeting>the 2016 on SIGMOD&apos;16 PhD Symposium</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2016">2016</date>
			<biblScope unit="page" from="2" to="6" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">A continuous query language for stream-based artifacts</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">A</forename><surname>Assaf</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Badr</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Amghar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on Database and Expert Systems Applications</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2017">2017</date>
			<biblScope unit="page" from="80" to="89" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Generating database schemas from business artifact models</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">A</forename><surname>Assaf</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Badr</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>El Khoury</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Barbar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">I.J. Information Technology and Computer Science</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="page" from="10" to="17" />
			<date type="published" when="2018">2018</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Active workspaces: distributed collaborative systems based on guarded attribute grammars</title>
		<author>
			<persName><forename type="first">E</forename><surname>Badouel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Hélouët</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">E</forename><surname>Kouamou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Morvan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><forename type="middle">R</forename><surname>Fondze</surname><genName>Jr</genName></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM SIGAPP Applied Computing Review</title>
		<imprint>
			<biblScope unit="volume">15</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="6" to="34" />
			<date type="published" when="2015">2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Merging Hierarchically-Structured Documents in Workflow Systems</title>
		<author>
			<persName><forename type="first">E</forename><surname>Badouel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">T</forename><surname>Tchendji</surname></persName>
		</author>
		<idno type="DOI">10.1016/j.entcs.2008.05.017</idno>
		<ptr target="https://doi.org/10.1016/j.entcs.2008.05.017" />
	</analytic>
	<monogr>
		<title level="j">Electronic Notes in Theoretical Computer Science</title>
		<imprint>
			<biblScope unit="volume">203</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="3" to="24" />
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">Bizartifact: Artifactcentric business process management</title>
		<author>
			<persName><forename type="first">D</forename><surname>Boaz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Limonad</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Gupta</surname></persName>
		</author>
		<ptr target="https://sourceforge.net/projects/bizartifact/" />
		<imprint>
			<date type="published" when="2013-06">june 2013. 2013. 12December2019</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Approaches to modeling business processes: a critical analysis of bpmn, workflow patterns and yawl</title>
		<author>
			<persName><forename type="first">E</forename><surname>Börger</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Software &amp; Systems Modeling</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="305" to="318" />
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Automatic verification of database-centric systems</title>
		<author>
			<persName><forename type="first">A</forename><surname>Deutsch</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Hull</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Vianu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM SIGMOD Record</title>
		<imprint>
			<biblScope unit="volume">43</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="5" to="17" />
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Facilitating workflow interoperation using artifactcentric hubs</title>
		<author>
			<persName><forename type="first">R</forename><surname>Hull</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><forename type="middle">C</forename><surname>Narendra</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Nigam</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Service-Oriented Computing</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2009">2009</date>
			<biblScope unit="page" from="1" to="18" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Artifact-centric choreographies</title>
		<author>
			<persName><forename type="first">N</forename><surname>Lohmann</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Wolf</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on Service-Oriented Computing</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2010">2010</date>
			<biblScope unit="page" from="32" to="46" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">There is more than one Kind of Workflow Software</title>
		<author>
			<persName><forename type="first">S</forename><surname>Mccready</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computerworld</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<date type="published" when="1992">1992</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Notation (BPMN) version 2.0. OMG Specification</title>
		<author>
			<persName><forename type="first">B</forename><forename type="middle">P</forename><surname>Model</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="s">Object Management Group</title>
		<imprint>
			<biblScope unit="page" from="22" to="31" />
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">A Software Architecture for Centralized Management of Structured Documents in a Cooperative Editing Workflow</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">M Z</forename><surname>Ndadji</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">T</forename><surname>Tchendji</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Innovation and Interdisciplinary Solutions for Underserved Areas</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2018">2018</date>
			<biblScope unit="page" from="279" to="291" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Business artifacts: An approach to operational specification</title>
		<author>
			<persName><forename type="first">A</forename><surname>Nigam</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><forename type="middle">S</forename><surname>Caswell</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IBM Systems Journal</title>
		<imprint>
			<biblScope unit="volume">42</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="428" to="445" />
			<date type="published" when="2003">2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<author>
			<persName><forename type="first">M</forename><surname>Tchoupe Tchendji</surname></persName>
		</author>
		<title level="m">Une Approche Grammaticale pour la Fusion des Réplicats Partiels d&apos;un Document Structuré: Application à l&apos;Édition Coopérative Asynchrone</title>
		<meeting><address><addrLine>Cameroun</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2009">2009</date>
		</imprint>
		<respStmt>
			<orgName>Université de Rennes I (France) ; Université de Yaoundé I</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Ph.D. thesis</note>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">A Stable and Consistent Document Model Suitable for Asynchronous Cooperative Edition</title>
		<author>
			<persName><forename type="first">M</forename><surname>Tchoupé Tchendji</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">D</forename><surname>Djeumen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">T</forename><surname>Atemkeng</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Computer and Communications</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="issue">08</biblScope>
			<biblScope unit="page">69</biblScope>
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Tree Automata for Extracting Consensus from Partial Replicas of a Structured Document</title>
		<author>
			<persName><forename type="first">M</forename><surname>Tchoupé Tchendji</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">M</forename><surname>Zekeng Ndadji</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Software Engineering and Applications</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="issue">05</biblScope>
			<biblScope unit="page">432</biblScope>
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Proclets: A framework for lightweight interacting workflow processes</title>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">M</forename><surname>Van Der Aalst</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Barthelmess</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">A</forename><surname>Ellis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Wainer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">International Journal of Cooperative Information Systems</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="issue">04</biblScope>
			<biblScope unit="page" from="443" to="481" />
			<date type="published" when="2001">2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Workflow patterns put into context</title>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">M</forename><surname>Van Der Aalst</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">H</forename><surname>Ter Hofstede</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Software &amp; Systems Modeling</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="319" to="323" />
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Workflow support using proclets: Divide, interact, and conquer</title>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">M</forename><surname>Van Der Aalst</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Mans</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><forename type="middle">C</forename><surname>Russell</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Data Eng. Bull</title>
		<imprint>
			<biblScope unit="volume">32</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="16" to="22" />
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">How much language is enough? theoretical and practical use of the business process modeling notation</title>
		<author>
			<persName><forename type="first">M</forename><surname>Zur Muehlen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Recker</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Seminal Contributions to Information Systems Engineering</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2013">2013</date>
			<biblScope unit="page" from="429" to="443" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
