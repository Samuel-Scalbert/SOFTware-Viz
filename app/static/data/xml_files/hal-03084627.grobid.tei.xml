<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">REMI: Mining Intuitive Referring Expressions on Knowledge Bases</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Luis</forename><surname>Galárraga</surname></persName>
							<email>luis.galarraga@inria.fr</email>
							<affiliation key="aff0">
								<orgName type="institution">Inria</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Julien</forename><surname>Delaunay</surname></persName>
							<email>juliendelaunay35000@gmail.com</email>
							<affiliation key="aff1">
								<orgName type="institution">University of Rennes I</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Jean-Louis</forename><surname>Dessalles</surname></persName>
							<email>dessalles@telecom-paristech.fr</email>
							<affiliation key="aff2">
								<orgName type="institution">Télécom ParisTech</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">REMI: Mining Intuitive Referring Expressions on Knowledge Bases</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">AD91F0C847DC1525A585F58334F8029E</idno>
					<idno type="DOI">10.5441/002/edbt.2020.39</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.8.0" ident="GROBID" when="2024-04-12T14:52+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>A referring expression (RE) is a description that identifies a set of instances unambiguously. Mining REs from data finds applications in natural language generation, algorithmic journalism, and data maintenance. Since there may exist multiple REs for a given set of entities, it is common to focus on the most concise and informative (i.e., intuitive) ones. We present REMI, a method to mine intuitive REs on large knowledge bases. Our experimental evaluation shows that REMI finds REs deemed intuitive by users. Moreover we show that REMI is several orders of magnitude faster than an approach based on inductive logic programming.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>A referring expression (RE) is a description that identifies a set of entities unambiguously. For instance, the expression "x is the capital of France" is an RE for Paris, because no other city holds this title. The automatic construction of REs is a central task in natural language generation (NLG). The goal of NLG is to describe concepts in an accurate and compact manner from structured data such as a knowledge base (KB). REs also find applications in automatic data summarization, algorithmic journalism, virtual smart assistants, and KB maintenance, e.g., in query generation. Quality criteria for REs is context-dependent. For instance, NLG and data summarization aim at intuitive, i.e., short and informative descriptions. In this vibe, it may be more intuitive to describe Paris as "the city of the Eiffel Tower" than as "the resting place of Victor Hugo". Indeed, the world-wide prominence of the Eiffel Tower makes the first RE more informative to an average user.</p><p>Some approaches can mine intuitive REs from semantic data <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b3">[4]</ref><ref type="bibr" target="#b4">[5]</ref><ref type="bibr" target="#b5">[6]</ref>. Conceived at the dawn of the Semantic Web, these methods are not suitable for current KBs for three main reasons. Firstly, they cannot handle current KBs because they were designed to mine REs on scenes <ref type="foot" target="#foot_0">1</ref> for the sake of NLG. Scenes have much fewer predicates and instances than today's KBs. Secondly, most existing approaches are limited to conjunctive expressions on the attributes of the entities, e.g., is(x, City) ∧ country(x, France). However, our experience with today's KBs suggests that this language bias does not encompass all possible intuitive expressions. For instance, to describe Johann J. Müller, we could resort to the fact that he was the supervisor of the supervisor of Albert Einstein, i.e., supervisor(x, y) ∧ supervisor(y, Einstein), which goes beyond the traditional language bias due to the existentially quantified variable y. Thirdly, state-of-the-art RE miners define intuitiveness for REs in terms of number of atoms. In that spirit, the singleatom REs capitalOf(x, France) and restingPlaceOf(x, V. Hugo) are equally concise and desirable as descriptions for Paris, even though the latter may not be informative to users outside France.</p><p>The approach in <ref type="bibr" target="#b5">[6]</ref> overcomes this limitation to some extent, by allowing users to provide a ranking of preference for the attributes used in the description. Nevertheless, providing such a ranking can be tedious for KBs with thousands of predicates.</p><p>We tackle the aforementioned limitations with a solution to mine intuitive REs on large KBs. How to use such REs is beyond the scope of this work, however we provide hints about potential use cases. In summary, our contributions are:</p><p>• A scheme based on information theory to quantify the intuitiveness of entity descriptions extracted from a KB. • REMI, an algorithm to mine intuitive REs on large KBs. REMI extends the state-of-the-art language bias for REs and allows for expressions such as mayor(x, y) ∧ party(y, Socialist). This design choice increases the chances of finding intuitive REs for a set of target entities. • A user study to assess the intuitiveness of REMI's descriptions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">PRELIMINARIES 2.1 RDF Knowledge Bases</head><p>This work focuses on mining REs on RDF knowledge bases (KBs). A KB K is a set of assertions in the form of facts p(s, o) with predicate p ∈ P, subject s ∈ I ∪ B, and object o ∈ I ∪ L ∪ B. In this formulation, I is a set of entities such as London, P is a set of predicates, e.g., cityIn, L is a set of literal values such as strings or numbers, and B is a set of blank nodes, i.e., anonymous entities. An example of an RDF triple is cityIn(London, UK). KBs often include assertions that state the class of an entity, e.g., is(UK, Country).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Referring Expressions</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>2.2.1</head><p>Atoms. An atom p(X , Y ) is an expression such that p is a predicate and X , Y are either variables or constants. We say an atom has matches in a KB K if there exists a function σ ⊂ V × (I ∪ L ∪ B) from the variables V of the atom to constants in the KB such that µ σ (p(X , Y )) ∈ K . The operator µ σ returns a new atom such that the constants in the input atom are untouched, and variables are replaced by their corresponding mappings according to σ . We call µ σ (p(X , Y )) a bound atom and σ a matching assignment. We extend the notion of matching assignment to conjunctions of atoms, i.e., σ is a matching assignment for 1≤i ≤n p</p><formula xml:id="formula_0">i (X i , Y i ) iff µ σ (p i (X i , Y i )) ∈ K for 1 ≤ i ≤ n.</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>2.2.2</head><p>Expressions &amp; Language Bias. Atoms are traditionally the building blocks of referring expressions. We say that two atoms are connected if they share at least one variable argument. Most approaches for RE mining define REs as conjunctions of connected atoms with bound objects. We call this language bias, the state-of-the-art language bias. We extend this language by allowing atoms with additional existentially quantified variables. For this purpose, we propose subgraph expressions as the new building blocks for REs. A subgraph expression ρ = p 1 (x, Y 1 ) ∧ 1&lt;i ≤n p i (X i , Y i ), rooted at variable x, is a conjunction of connected atoms such that for i &gt; 1, atoms are 1 atom p 0 (x, I 0 ) Path p 0 (x, y) ∧ p 1 (y, I 1 ) Path + star p 0 (x, y) ∧ p 1 (y, I 1 ) ∧ p 2 (y, I 2 ) 2 closed atoms p 0 (x, y) ∧ p 1 (x, y) 3 closed atoms p 0 (x, y) ∧ p 1 (x, y) ∧ p 2 (x, y) transitively connected to p 1 (x, Y 1 ) via at least another variable besides x. Examples are: (i) cityIn(x, France), and (ii) cityIn(x, y) ∧ officialLang(y, z) ∧ langFamily(z, Romance). An expression e = 1≤j ≤m ρ j is a conjunction of subgraph expressions rooted at the same variable x such that they have only x-the root variableas common variable. Finally, we say e is a referring expression (RE) for a set of target entities T ⊆ I in a KB K iff:</p><p>(1) ∀t ∈ T : ∃σ : (x → t ) ∈ σ , i.e., for every target entity t, there exists a matching assignment σ in K that binds the root variable</p><formula xml:id="formula_1">x to t. (2) ∄σ ′ , t ′ : (x → t ′ ) ∈ σ ′ ∧ t ′ T ,</formula><p>in other words, no matching assignment binds the root variable to entities outside the set T of target entities.</p><p>For example, consider a complete and accurate KB K as well as the following conjunction of two subgraph expressions: e = in(x, S. America)∧officialLang(x, y)∧langFamily(y, Germanic)</p><p>We say that e is an RE for T = {Guyana, Suriname} in K because matching assignments can only bind x to these two countries. While we do not limit the number of subgraph expressions in REs, we do not allow more than one variable and three atoms in individual subgraph expressions, leading to the expressions in Table <ref type="table" target="#tab_0">1</ref>. This design decision aims at keeping both the search space and the complexity of the REs under control. Indeed, expressions with multiple non-root variables make comprehension and translation to natural language more effortful.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">REMI</head><p>Given an RDF KB K and a set of target entities T , REMI returns an intuitive RE-a conjunction of subgraph expressions-that describes unambiguously the input entities T in K . Intuitive REs are concise and resort to concepts that users are likely to understand. We first show how to quantify intuitiveness in Section 3.1. We then elaborate on REMI's algorithm in Section 3.2.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Quantifying intuitiveness</head><p>There may be multiple ways to describe a set of entities uniquely. For example, capitalOf(x, France) and birthPlaceOf(x, Voltaire) are both REs for Paris. Our goal is therefore to quantify the intuitiveness of such expressions without human intervention. We say that an RE e is more intuitive than an RE e ′ , if C (e) &lt; C (e ′ ), where C denotes the Kolmogorov complexity. The Kolmogorov complexity C (e) of a string e (e.g., an expression) is a measure of the absolute amount of information conveyed by e and is defined as the length in bits of e's shortest effective binary description <ref type="bibr" target="#b7">[8]</ref>. Our proposed encoding builds upon the observation that intuitive expressions resort to prominent concepts. For example, it is natural and informative to describe Paris as the capital of France, because the concept of capital is well understood and France is a very salient entity. In contrast, it would be more complex to describe Paris in terms of less prominent concepts, let us say, its twin cities. In this spirit, we devise a code for concepts as follows:</p><p>The code for a predicate p (entity I ) is the binary representation of its position k in a ranking by prominence. This way, prominent concepts can be rewarded with shorter codes. We can now define the estimated Kolmogorov complexity Ĉ of a single-atom subgraph expression p(x, I ) as:</p><formula xml:id="formula_2">Ĉ (p(x, I )) = l (k (p)) + l (k (I | p))</formula><p>In the formula, l (•) = log 2 (•)+1, k (p) is p's position in the ranking of predicates of the KB, and k (I | p) is I 's conditional rank given p, i.e., I 's rank among all objects of p. The latter term follows from the chain rule of the Kolmogorov complexity. For instance, if p is the predicate city mayor, the chain rule models the fact that once the concept of mayor has been conveyed, the context becomes narrower and the user needs to rank fewer concepts, in this example, only city mayors. The chain rule also applies to subgraph expressions with multiple atoms. For instance, the complexity of ρ = mayor(x, y) ∧ party(y, Socialist) is:</p><formula xml:id="formula_3">Ĉ (ρ) = l (k (mayor)) + l (k (party(y, z) | mayor(x, y))) + l (k (Socialist | mayor(x, y) ∧ party(y, z)))</formula><p>The second term in the sum amounts to the code length of the rank of predicate party among those predicates that allow for subject-to-object joins with mayor in the KB. Likewise, the complexity of the Socialist party in the third term depends on the ranking of parties with mayors among their members, i.e., the bindings for z in mayor(x, y) ∧ party(y, z). If a city can be unambiguously described as mayor (x, I ) for a non-prominent mayor I , we may achieve a shorter code length if we replace I by a variable y, an additional predicate, and a well-known party.</p><p>In line with other works that quantify prominence for concepts in KBs <ref type="bibr" target="#b6">[7]</ref>, we rank concepts by frequency (fr), and Wikipedia's page rank (pr). We denote the resulting complexity measures using these prominence metrics by Ĉfr and Ĉpr respectively.</p><p>Finally, we can estimate the Kolgomorov complexity of an RE e = 1≤i ≤m ρ i as the sum of the complexities of its individual subgraph expressions, i.e., Ĉ (e) = 1≤i ≤m Ĉ (ρ i ).  </p><formula xml:id="formula_4">𝝆1 ∧ 𝝆2 (7) 𝝆1 ∧ 𝝆3 (8) 𝝆1 ∧ 𝝆2 ∧ 𝝆3 (12) 𝝆2 ∧ 𝝆3 (9) 𝝆1 (3) 𝝆2 (4) 𝝆3<label>(5)</label></formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Algorithm</head><p>REMI implements a depth-first search (DFS) on conjunctions of the subgraph expressions common to all the target entities. Let us assume the KB knows only three common subgraph expressions ρ 1 , ρ 2 , and ρ 3 for the entities Rennes and Nantes, such that Ĉ (ρ 1 ) ≤ Ĉ (ρ 2 ) ≤ Ĉ (ρ 3 ) as illustrated in Figure <ref type="figure" target="#fig_2">1</ref>. Each node in the tree is an expression, i.e., a conjunction of subgraph expressions and its complexity Ĉ is in parentheses. When visiting a node, DFS must test whether the corresponding expression is an RE, i.e., whether the expression describes exclusively the target entities. If the test fails, the strategy should move to the node's first child. If the test succeeds, DFS must verify whether the expression is less complex than the least complex RE seen so far. If it is the case, this RE should be remembered, and DFS can prune the search space by backtracking. To see why, imagine that ρ 1 ∧ ρ 2 in Figure <ref type="figure" target="#fig_2">1</ref> is an RE. In this case, all REs prefixed with this expression (the node's descendants) will also be REs. However, all these REs are more complex. This means that we can stop descending in the tree and prune the node ρ 1 ∧ ρ 2 ∧ ρ 3 in Figure <ref type="figure" target="#fig_2">1</ref>.</p><p>We call this step a pruning by depth. We can do further pruning if we leverage the order of the entities. In our example, if ρ 1 ∧ ρ 2 is an RE, any expression prefixed with ρ 1 ∧ ρ i for i &gt; 2 must be more complex and can be therefore skipped. We call this a side pruning. All these ideas are formalized by Algorithm 1 that takes as input a KB K as well as the entities to describe, and returns an RE of minimal complexity according to Ĉ. For each of the target entities, line 1 calculates (in a BFS fashion) its matching subgraph expressions, and takes those common to all the target entities.</p><p>The expressions are then sorted by increasing complexity in a priority queue (line 2), which is processed as follows: At each iteration, the least complex subgraph expression ρ is dequeued (line 5) and sent to the subroutine DFS-REMI (line 6) with the rest of the queue. This subroutine explores the subtree rooted at ρ and returns the most intuitive RE e ′ prefixed with ρ. If e ′ is less complex than the best solution found so far (line 7), we remember it 2 . If DFS-REMI returns an empty expression, we can conclude that there is no RE for the target entities T (line 8). To see why, recall that DFS will, in the worst case, combine ρ with all remaining expressions ρ ′ that are more complex. If none of such combinations is an RE, there is no solution for T in K . We implemented Algorithm 1 in Java 8, including a parallel version called P-REMI (detailed in our technical report <ref type="bibr" target="#b2">[3]</ref>).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">EXPERIMENTAL EVALUATION</head><p>We evaluated REMI along two dimensions: output quality, and runtime. The evaluation was conducted on two popular KBs, namely DBpedia and Wikidata 3 . Our technical report <ref type="bibr" target="#b2">[3]</ref> offers details about the experimental datasets, as well as a more extensive qualitative evaluation of REMI. 2 We define Ĉ (⊤) = ∞ We carried out three user studies in order to evaluate REMI's descriptions on instances of the classes person, settlement, album, film, and organization. The cohort consisted mainly of computer science students, researchers, and university staff. It also included some of their friends and family members.</p><p>4.1.1 Evaluation of Ĉ. Subgraph expressions are the building blocks of REs, thus intuitive REs should make use of concise and informative pieces. We measure to which extent the function Ĉ captures intuitiveness by asking the participants to rank a set of 5 subgraph expressions by simplicity and comparing this ranking with the ranking provided by Ĉ. The expressions come from the common subgraph expressions ranked by Alg. 1 (line 2) using Ĉ, and include the top 3 as well as a baseline defined by (i) the worst ranked, and (ii) a random subgraph expression. We manually translated the subgraph expressions to natural language statements in the shortest possible way using the textual descriptions (predicate rdfs:label) of the concepts when available. We show the results of our findings on 24 sets of entities in Table <ref type="table" target="#tab_1">2</ref> for our two variants of Ĉ. We observe that precision@1 is low. This happens because people usually deem the predicate type the simplest whereas REMI often ranks it second or third (16 times for Ĉfr ). This shows the need of special treatment for the type predicate as suggested by <ref type="bibr" target="#b5">[6]</ref>. Nevertheless, the high values for the other metrics show a positive correlation between the preferences of the users and the function Ĉ. In 88% of the cases, the three simplest subgraph expressions according to Ĉ are among the three simplest ones according to users.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1.2">Evaluation of REMI's output.</head><p>A second study requested users to rank by simplicity the answer of REMI and a baseline consisting of 2 to 4 additional REs (solutions encountered during search space traversal). The entities were hand-picked to guarantee the existence of at least two REs sufficiently different from each other. Based on our previous findings, we used fr as notion of prominence. We report an average MAP (mean average precision) of 0.64±0.17 for this task on 20 sets of entities with 51 answers each, if we assume REMI's solution as the only relevant answer. We recall that a MAP of 1 denotes full agreement between REMI and the users, while a MAP of 0.5 means that REMI's solution is always among the user's top 2 answers. 4.1.3 User's perceived quality. In order to measure the perceived quality of the reported REs, we requested 86 participants to grade the interestingness of 35 Wikidata REs in a scale from 1 to 5, where 5 means the user deems the description interesting based on her personal judgment. Our results exhibit an average score of 2.65±0.71, with 11 descriptions scoring at least 3. During the exchanges with the participants, some of them made explicit their preference for short but at the same time informative REs. The latter dimension is related to the notions of pertinence of concepts and narrative interest. For instance, when asked to select between the REs country(x, N . Zealand) ∧ actor (x, C.Lee) and country(x, N . Zealand) ∧ actor (x, y) ∧ religion(x, Buddhism) for two movies, 95% of the users preferred the first one. had more or less the same length when translated to natural language, but the second one conveys less information and resorts to a domain-unrelated entity (i.e., Buddhism). These observations suggest that prominence captures the notion of simplicity, but it does not always accurately model the dimension of informativeness. While these examples might discourage the use of existential variables in descriptions, we remark that users also liked REs such as in(x, Brittany) ∧ mayor (x, y) ∧ party(y, Socialist) (DBpedia) for Rennes and Nantes, or actor (x, y) ∧ leader (y, Pisa) for the Italian movie "Altri templi" (Wikidata), as they deemed the first one quite pertinent, and the second one narratively interesting.</p><p>Other interesting REs from DBpedia include "she died of aplastic anemia" for Marie Curie, and "they were both places of the Inca Civil War" for Ecuador and Peru. Finally, we highlight the impact of noise and incompleteness in the quality of the solutions. For instance, REMI cannot describe France as the country with capital Paris, because Paris is also the capital of the former Kingdom of France in DBpedia.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Runtime Evaluation</head><p>4.2.1 Opponent. RE mining can be conceptually formulated as a rule mining task. Hence, we compare the runtime of REMI and a state-of-the-art rule miner designed for large KBs, namely AMIE+ <ref type="bibr" target="#b1">[2]</ref>. Given thresholds on support and confidence, AMIE+ mines Horn rules of the form p(X , Y ) ⇐ 1≤i ≤n p i (X i , Y i ), such as speaks(x, English) ⇐ livesIn(x, UK ), on RDF KBs . The support of a rule is the number of facts correctly predicted by the rule. If we normalize this measure by the total number of predictions made by the rule, we obtain its confidence. RE mining for a target entity set T is equivalent to rule mining with AMIE+, if we instruct the system to find rules of the form ψ (x, True) ⇐ 1≤i ≤n p i (X i , Y i ), where ψ is a surrogate predicate with facts ψ (t, True) for all t ∈ T . In this case, the right-hand side of the rule becomes our RE. We set thresholds of |T | and 1.0 for support and confidence respectively. This is because an RE should predict the exact set of target entities, neither subsets nor supersets. AMIE+ does not define a complexity score for rules and outputs all REs for the target entities, thus we use Ĉfr to rank AMIE's output and return the least complex RE.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2.2">Results</head><p>. We compared the runtimes of REMI and AMIE+ on a server with 48 cores (Intel Xeon E2650 v4), 192GB of RAM 4 , and 1.2T of disk space (10K SAS). We tested the systems on 100 sets of DBpedia and Wikidata entities taken from the same classes used in the qualitative evaluation. Small sets of entities are challenging in our setting, so we picked random sets of 1, 2, and 3 entities of the same class in proportions of 50%, 30%, and 20%. We mined REs for those sets of entities according to (i) the standard language bias of conjunctions of bounded atoms, and (ii) REMI's language of conjunctions of subgraph expressions. We show the total runtime among all sets for AMIE+ and REMI in Table <ref type="table" target="#tab_2">3</ref>. The values in red account for the number of timeouts (for a limit of 2 hours), thus cells with red superscripts define 4 AMIE assumes the entire KB fits to main memory runtime lower bounds. We observe that AMIE+ already timed out 23 times with the state-of-the-art language. In particular, AMIE+ is optimized for rules without constant arguments in atoms, such as livesIn(x, y) ⇐ citizenOf (x, y), thus its performance is heavily affected when bound variables are allowed in atoms. In contrast REMI and P-REMI are on average 3 and 4 orders of magnitude (up to 142k times) faster than AMIE+ in this language. In the worst case REMI was confronted with a space of 62 subgraph expressions for the state-of-the-art language bias. For REMI's language bias, however, this number increased to 25.2k, which is challenging even for REMI (8 timeouts in total). Despite this boost in complexity, multithreading makes it manageable: P-REMI can be at least 4.7x on average faster than REMI for the extended language bias and at least 21x faster for the state-ofthe-art language, allowing for real-time RE mining. Finally, we observe that the extended language bias slightly increases the chances of finding a solution (column #solutions in Table <ref type="table" target="#tab_2">3</ref>) in DBpedia. This phenomenon is more common among sets with more than one entity.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">CONCLUSION AND FUTURE WORK</head><p>In this work we have presented REMI, a method to mine intuitive referring expressions on large RDF KBs. REMI builds upon the observation that users prefer prominent entities in descriptions and leverages this fact to quantify the intuitiveness of descriptions in bits. Our results show that (1) real-time RE generation is possible in large KBs and (2) a KB-based frequency ranking can provide intuitive descriptions despite the noise in KBs. This latter factor impedes the fully automatic generation of intuitive REs for NLG purposes, however our descriptions are applicable to scenarios such as computer-aided journalism and query generation. As future work we aim to investigate if external sources-such as search engines or external localized corpora-can yield even more intuitive REs that model users' background more accurately. We also envision to relax the unambiguity constraint to mine REs with exceptions. We provide the source code of REMI as well as the experimental data at https://gitlab.inria.fr/lgalarra/remi.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><label></label><figDesc>If e b denotes such binary description and M is the program that can decode e b into e, C (e) = l (e b ) + l (M ) where l (•) denotes length in bits. Due to C's intractability, applications can only approximate it via suboptimal encodings and programs ( ê b , M), hence C (e) ≈ Ĉ (e) = l ( ê b ) + l ( M ) with C (e) ≤ Ĉ (e).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>∅</head><label></label><figDesc>belongedTo(x, Brittany) mayor(x, y) ∧ party(y, Socialist) placeOf(x, Epitech)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Search space example.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Algorithm 1 : 5 ρ 6 e</head><label>156</label><figDesc>REMI Input: a KB: K , the target entities: T Output: an RE of minimal complexity: e 1 G := t ∈T subgraphs-expressions(t ) 2 create priority queue from G in ascending order by Ĉ 3 e := ⊤ 4 while |G | &gt; 0 do := G.dequeue() ′ :=DFS-REMI (ρ, G, T , K ) 7 if Ĉ (e ′ ) &lt; Ĉ (e) then e := e ′ 8 if e = ⊤ then return ⊤ 9 return e</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Table 1 :</head><label>1</label><figDesc>REMI's subgraph expressions.</figDesc><table /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>Table 2 :</head><label>2</label><figDesc>Average precision@k and standard deviation for Ĉ's ranking of subgraph expressions in DBpedia 4.1 Qualitative Evaluation</figDesc><table><row><cell>3 http://dbpedia.org, http://wikidata.org</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head>Table 3 :</head><label>3</label><figDesc>REMI's runtime (in seconds) on DBpedia and Wikidata. Speed-ups are provided for P-REMI w.r.t. AMIE and REMI.</figDesc><table><row><cell>Both REs</cell></row></table></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1" xml:id="foot_0"><p>The exhaustive description of a place and its objects ©</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="2020" xml:id="foot_1"><p>Copyright held by the owner/author(s). Published in Proceedings of the 23rd International Conference on Extending Database Technology (EDBT), March 30-April 2, 2020, ISBN 978-3-89318-083-7 on OpenProceedings.org. Distribution of this paper is permitted under the terms of the Creative Commons license CC-by-nc-nd 4.0.</p></note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Generating Referring Expressions: Constructing Descriptions in a Domain of Objects and Processes</title>
		<author>
			<persName><forename type="first">Robert</forename><surname>Dale</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">A Bradford Book</title>
		<imprint>
			<date type="published" when="1992">1992</date>
		</imprint>
		<respStmt>
			<orgName>MIT</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Fast Rule Mining in Ontological Knowledge Bases with AMIE+</title>
		<author>
			<persName><forename type="first">Luis</forename><surname>Galárraga</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Christina</forename><surname>Teflioudi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Katja</forename><surname>Hose</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Fabian</forename><forename type="middle">M</forename><surname>Suchanek</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">The VLDB Journal</title>
		<imprint>
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="707" to="730" />
			<date type="published" when="2015">2015. 2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">REMI: Mining Intuitive Referring Expressions on Knowledge Bases</title>
		<author>
			<persName><forename type="first">Luis</forename><surname>Galárraga</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Julien</forename><surname>Delaunay</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jean-Louis</forename><surname>Dessalles</surname></persName>
		</author>
		<idno>arXiv:cs.AI/1911.01157</idno>
		<imprint>
			<date type="published" when="2019">2019</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">A Best-first Search Algorithm for Generating Referring Expressions</title>
		<author>
			<persName><forename type="first">Helmut</forename><surname>Horacek</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Conference on European Chapter of the Association for Computational Linguistics (EACL)</title>
		<imprint>
			<date type="published" when="2003">2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Graph-based Generation of Referring Expressions</title>
		<author>
			<persName><forename type="first">Emiel</forename><surname>Krahmer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Sebastiaan</forename><surname>Van Erk</surname></persName>
		</author>
		<author>
			<persName><forename type="first">André</forename><surname>Verleg</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computational Linguistics</title>
		<imprint>
			<biblScope unit="volume">29</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="53" to="72" />
			<date type="published" when="2003">2003. 2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">A Fast Algorithm for the Generation of Referring Expressions</title>
		<author>
			<persName><forename type="first">Ehud</forename><surname>Reiter</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Robert</forename><surname>Dale</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Conference on Computational Linguistics (COLING)</title>
		<imprint>
			<date type="published" when="1992">1992</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">LinkSUM: Using Link Analysis to Summarize Entity Data</title>
		<author>
			<persName><forename type="first">Andreas</forename><surname>Thalhammer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Nelia</forename><surname>Lasierra</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Achim</forename><surname>Rettinger</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on Web Engineering (ICWE)</title>
		<imprint>
			<date type="published" when="2016">2016</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<author>
			<persName><forename type="first">Arnold</forename><surname>Zellner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Hugo</forename><forename type="middle">A</forename><surname>Keuzenkamp</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Michael</forename><surname>Mcaleer</surname></persName>
		</author>
		<title level="m">Simplicity, Inference and Modelling: Keeping it Sophisticatedly Simple</title>
		<imprint>
			<publisher>Cambridge Univ. Press</publisher>
			<date type="published" when="2001">2001</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
