<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Modernized Toolchains to Create JSPatcher Objects and WebAudioModules from Faust Code</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Shihong</forename><surname>Ren</surname></persName>
							<email>shihong.ren@univ-st-etienne.fr</email>
						</author>
						<author>
							<persName><forename type="first">Stéphane</forename><surname>Letz</surname></persName>
							<email>letz@grame.fr</email>
						</author>
						<author>
							<persName><forename type="first">Yann</forename><surname>Orlarey</surname></persName>
							<email>orlarey@grame.fr</email>
						</author>
						<author>
							<persName><forename type="first">Dominique</forename><surname>Fober</surname></persName>
							<email>fober@grame.com</email>
						</author>
						<author>
							<persName><forename type="first">Romain</forename><surname>Michon</surname></persName>
							<email>romain.michon@inria.fr</email>
						</author>
						<author>
							<persName><forename type="first">Michel</forename><surname>Buffa</surname></persName>
							<email>michel.buffa@univ-cotedazur.fr</email>
						</author>
						<author>
							<persName><forename type="first">Laurent</forename><surname>Pottier</surname></persName>
							<email>laurent.pottier@univ-st-etienne.fr</email>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">Shanghai Conservatory of Music</orgName>
								<orgName type="department" key="dep2">SKLMA</orgName>
								<orgName type="laboratory">ECLLA Lab</orgName>
								<orgName type="institution">Univ Jean Monnet</orgName>
								<address>
									<country>China, France</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<orgName type="department">GRAME-CNCM</orgName>
								<orgName type="institution">Univ Lyon</orgName>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff2">
								<orgName type="institution" key="instit1">INSA Lyon</orgName>
								<orgName type="institution" key="instit2">INRIA</orgName>
								<orgName type="institution" key="instit3">CITI</orgName>
								<address>
									<postCode>EA3720, 69621</postCode>
									<settlement>Villeurbanne</settlement>
									<country key="FR">France</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff3">
								<orgName type="department">GRAME-CNCM</orgName>
								<address>
									<addrLine>11, cours de Verdun (gensoul) Lyon</addrLine>
									<postCode>69002</postCode>
									<country key="FR">France</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff4">
								<orgName type="institution" key="instit1">INRIA</orgName>
								<orgName type="institution" key="instit2">INSA Lyon</orgName>
								<orgName type="institution" key="instit3">Univ Lyon</orgName>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff5">
								<orgName type="institution">CITI</orgName>
								<address>
									<postCode>EA3720, 69621</postCode>
									<settlement>Villeurbanne</settlement>
									<country key="FR">France</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff6">
								<orgName type="laboratory">I3S Lab</orgName>
								<orgName type="institution">Univ Côte d&apos;Azur</orgName>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff7">
								<orgName type="institution">INRIA</orgName>
								<address>
									<country key="FR">France</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff8">
								<orgName type="laboratory">ECLLA Lab</orgName>
								<orgName type="institution">Univ Jean Monnet</orgName>
								<address>
									<country key="FR">France</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Modernized Toolchains to Create JSPatcher Objects and WebAudioModules from Faust Code</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">7642133163D1196DAB3BF103ED9C1184</idno>
					<idno type="DOI">10.5281/zenodo.6767596</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.8.0" ident="GROBID" when="2024-04-12T14:47+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Faust, as an audio domain specific language (DSL) for DSP, has different compilation targets including WebAudio nodes [7, 4]. An AudioWorklet [2] processor wrapping a WebAssembly DSP can be generated statically from native platform compilers as a JavaScript module with wasm files, or dynamically in a browser using a WebAssembly version of the compiler [5]. The WebAssembly compiler has been used in various WebAudio projects through a JavaScript module faust2webaudio, such as the Faust IDE [6] and JSPatcher [8].</p><p>In the paper, we present recent work on a new version of the Faust WebAssembly compiler for the WebAssembly target and its JavaScript wrapper module: faustwasm. Using modern JavaScript tools, the module is designed to be crossplatform and runnable under both Node.js and browser environment to generate, compile, and instantiate WebAssembly binary code from Faust code and wrap the binary as an AudioWorkletProcessor. Based on this module, we created faust2wam, a WebAudio plugin generator for the WebAu-dioModule standard with an automatically generated user interface. We also created a tool as an external package for JSPatcher to generate JSPatcher DSP objects in bulk.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">INTRODUCTION</head><p>Since the support of the WebAssembly features in the AudioWorklet, high performance DSPs can be programmed using low-level code in a WebAudio processor running in a dedicated thread. Despite the complexity of the workflow and the implementation of the JavaScript-side interface, the possibilities of bringing DSP modules from C/C++ code to the Web becomes a hot research topic, as these DSPs initially written for native platforms can be ported to the web using cross-compiler systems like Emscripten [11]. To provide maximum cross-platform compatibility, developers of audio domain specific languages (DSLs), such as Csound [3, 9, 10], Faust or Soul<ref type="foot" target="#foot_0">1</ref> contributed tools, compilers, and IDEs to facilitate the compilation of code from these DSLs to web platforms based on WebAssembly and AudioWorklet.</p><p>The Faust language has started to support asm.js as a compiler backend since 2015, allowing developers to compile Faust DSPs to JavaScript binary code. Using Emscripten, the Faust compiler itself is also transpiled to a JavaScript module that can dynamically compile and run Faust DSP in the browser. In 2017, a WebAssembly backend has been added in the compiler (libfaust) and additional glue code to transform the DSP to fully functional WebAudio nodes has been developed. faust2webaudio, a modularized version of the Faust WebAssembly compiler and the WebAudio node wrapper written in TypeScript, has been designed in 2019. It is used in multiple Faust projects such as the Faust IDE and JSPatcher.</p><p>In this paper, we will present three JavaScript modules related to the Faust language: an updated version of the Faust WebAssembly compiler faustwasm,<ref type="foot" target="#foot_1">2</ref> and two DSP generation tools based on this compiler faust2wam<ref type="foot" target="#foot_2">3</ref> and @jspatcher/package-dsp. <ref type="bibr" target="#b3">4</ref> faustwasm is an updated version of the previous JavaScript interface of the Faust WebAssembly compiler faust2webaudio. The structure of the module -classes and functions that are usable in the WebAssembly compileris refactored and aligned with the Faust C++ compiler. Thanks to the version 2 of the Emscripten tools, the compiler is now compatible with both Node.js and the web environment, while faustwasm provides a more flexible solution for DSP compilation, packaging, and executing in different contexts and scenarios. The faustwasm module is presented in §2.</p><p>faust2wam is a JavaScript tool to generate WebAudio plugins in the WebAudioModules format, with an automatically-generated user interface, supporting parameter automation, and MIDI messages. Additional information on this topic can be found in §3.1. @jspatcher/package-dsp (The DSP package of JSPatcher) contains a large set of modular DSPs allowing programming audio processor graphically in JSPatcher web application. All the DSPs in the package are in static WebAssembly file format generated using a build system with faustwasm (see §3.2).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">THE FAUSTWASM MODULE</head><p>A complete rewrite of the WebAssembly libfaust glue code has been started at GRAME at the end of 2020 with the following design principles:</p><p>1. using a cleaned version of the C++ low-level interface to be compiled by the Emscripten compiler;</p><p>2. using TypeScript as the implementation language, to be directly used by TypeScript-based projects, or compiled as a JavaScript library used by JavaScript-based projects;</p><p>3. allowing for a pure static model, where the DSP code is separately precompiled as wasm and JSON files by the Faust compiler, then loaded and instantiated using the WebAssembly APis, or dynamically compiled with the libfaust library and then instantiated;</p><p>4. allowing the Faust DSP wasm module to be used completely outside of the WebAudio model, for example as a DSP processing piece of code used in a non-real-time context (like processing an audio file) or wrapped as a WebAudio node, 5. allowing for monophonic and polyphonic MIDI controllable nodes;</p><p>6. providing some additional capabilities like SVG diagram rendering, for instance.</p><p>The new design will help WebAudio and JavaScript developers to easily create audio effects or instruments from Faust source code. The generated DSPs are fully modularized and suitable for various JavaScript environments. The generation is platform-independent and only relies on the browser or Node.js.</p><p>faustwasm is a JavaScript module compatible with recent Node.js versions and web browsers. The majority of the codes has been taken from the GRAME branch wasm2 from another JavaScript package @grame/libfaust<ref type="foot" target="#foot_4">5</ref> from the Faust repository, <ref type="bibr" target="#b5">6</ref> revised to have more compatibility on different environments. Multiple classes are provided to cover complete workflows from the import of the Faust We-bAssembly compiler files generated from Emscripten, to the generation of WebAudio nodes or WebAssembly DSP files.</p><p>To cite some important classes, FaustCompiler can use the Faust WebAssembly compiler to generate a Faust DSP binary code from its source code. The binary code can be wrapped with the FaustWebAudioDsp class for audio processing in different contexts. A utility class FaustDspGenerator can be used to quickly obtain processors from the Faust code or from a precompiled WebAssembly DSP. Figure <ref type="figure" target="#fig_0">1</ref> shows the workflow of the compilation with or without FaustDspGenerator. Table <ref type="table" target="#tab_0">1</ref> shows the description of these classes. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>FaustWasm-Instantiator</head><p>A helper class instantiating DSP instances from its WebAssembly binary code.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>FaustWeb-AudioDsp</head><p>A higher-level class wraping one or more FaustDspInstances, providing more detailed descriptor on the user interface, and features for JavaScript callbacks, MIDI messages, and parameters.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>FaustOffline-Processor</head><p>The class provides a render method for processing "offline" (as fast as possible) an audio buffer through a Faust DSP.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>FaustDsp-Generator</head><p>The class provides a nearly one-stop solution providing functions to create WebAssembly binary DSP codes from Faust source codes, and generating WebAudio AudioWorkletNodes or ScriptorProcessorNodes using WebAu-dioDsp interface.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>FaustSvg-Diagrams</head><p>A utility class that can be used to generate Faust DSP block diagrams from source code.</p><p>The module distribution contains a version of the original Faust WebAssembly compiler emitted from Emscripten, which includes a JavaScript wrapper file libfaust-wasm.js, a WebAssembly binary file libfaust-wasm.wasm and a complete Faust standard library that is loaded at initialization and accessible in the compiler's in-memory file system libfaust-wasm.data.</p><p>Due to a compatibility issue <ref type="bibr" target="#b6">7</ref> with Emscripten and its 1. CommonJS for legacy Node.js packages. With the same format as the libfaust-wasm.js file, it is meant to be used under legacy Node.js environment. When imported in the web environment using the &lt;script&gt; tag, it will automatically assign the module under the faustwasm object in the global scope.</p><p>2. ECMAScript (ES) module for both Node.js and the web environment. It includes an adapter to load the libfaust-wasm.js file.</p><p>3. ES module bundled with the three files that Emscripten emitted. It is easier to use compared to the previous module, but the file size is larger.</p><p>In addition, a command line interface (CLI) is provided for Node.js, the following subsections demonstrate different usages of the module according to Faust's various use cases and scenarios in JavaScript environments.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Static WebAssembly DSP Generation in</head><p>Node.js</p><p>Before this project, static DSP in WebAssembly format could only be generated using a native distribution of the Faust compiler. Now, it can be done also using faustwasm's Node.js CLI scripts/faust2wasm.js under the project repository, which emits wasm files along with DSP metadata within json files.</p><p>The CLI accepts an input source code file path &lt;input.dsp&gt; and an output directory path &lt;output&gt; with two possible options [-poly] and [-standalone]: node scripts/faust2wasm.js &lt;input.dsp&gt; &lt;output&gt; [poly] [-standalone]</p><p>• [-poly] option activates the polyphonic mode of the DSP (instrument) and emits additional WebAssembly files that include a voice mixer and a global effect DSP after mixing if it is specified in the DSP source code.</p><p>• [-standalone] option puts HTML-related files in the output directory including a UI module faust-ui and a faustwasm distribution to make it independently runnable as a WebAudio node on a web page. The user can open the emitted index.js to test the DSP.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Process Audio Using Faust DSP in Node.js</head><p>The scripts/faust2sndfile.js CLI can be used to process or generate audio files in Node.js using Faust DSPs by specifying an input source code file path &lt;input.dsp&gt; and an output wav file path &lt;output.wav&gt;. More options can be added to the command using the syntax: node scripts/faust2sndfile.js &lt;input.dsp&gt; &lt;output.</p><p>wav&gt;</p><formula xml:id="formula_0">[-bs &lt;buffer\_size&gt;] [-bd 16|24|32] [-c &lt; samples&gt;] [-in &lt;input.wav&gt;] [-sr &lt;sample\_rate &gt;]</formula><p>• [-bs &lt;buffer_size&gt;] option specifies the buffer size in samples (64 by default).</p><p>• [-bd 16|24|32] option determines the encoding bit depth of the output wav file, possible values are 16, 24 and 32 (16 by default).</p><p>• [-c &lt;samples&gt;] determines the final length of the audio file generated in samples, (5 * sample_rate by default).</p><p>• [-in &lt;input.wav&gt;] allows us to specify an input audio file in wav format that can be processed using the DSP.</p><p>• [-sr &lt;sample_rate&gt;] option determines the encoding sample rate of the output wav file (44100 by default).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Generate Block Diagram Files in Node.js</head><p>The scripts/faust2svg.js CLI can be used to generate Faust block diagram files in svg format. The syntax is as follows:</p><p>node scripts/faust2svg.js &lt;input.dsp&gt; &lt;output&gt; where &lt;input.dsp&gt; is the input Faust DSP source code and the &lt;output&gt; is the output directory for the svg files.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.4">Statically or Dynamically Generate Faust DSPs on the Web</head><p>With faustwasm, we can generate statically WebAudio nodes from the precompiled WebAssembly DSP binary code, or dynamically generate these nodes starting from compiling the Faust DSP source code.</p><p>Once a FaustDspGenerator instance is initialized using the compiler's WebAssembly files, a Faust DSP source code can be compiled into a WebAssembly binary code. Still using the FaustDspGenerator, the binary code -provided either from ArrayBuffers or from precompiled wasm files with its json metadata -can be used to create higher-level DSPs (WebAudio nodes or FaustOfflineProcessors) runnable in the web environment.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">USAGES AND EXAMPLES</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">The faust2wam Module</head><p>WebAudioModule (WAM) standard is a web-based audio plugin format first released in 2015. In 2021, a new version of the WAM standard has been redesigned to reflect recent technological developments [1]. A WAM plugin can be fetched from the web using a URI, and initialized using the current WebAudio context. The plugin comes with a standardized API that can create a user interface, get or adjust parameters, schedule events such as parameter automation or MIDI messages, and connect with other WAMs or native WebAudio nodes.</p><p>The faustwasm and the faust-ui modules already provide the interface needed for a WAM. Using these modules, we created the faust2wam module to automatically generate a WAM from a Faust code. For any web-based DAW with WAM support, a large amount of audio plugins can be quickly integrated with less effort.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1.1">Faust WAM Structure</head><p>Figure <ref type="figure" target="#fig_1">2</ref> shows the structure of a WAM plugin, in which the AudioNode of the WAM should be able to interact with the host in both the main and the audio thread. Since the WamNode API is different from the Au-dioWorkletNode API -especially for event handling and parameter automation -it needs to be implemented separately. From the WAM SDK, we imported the Parameter Manager (ParamMgr) and the CompositeNode as a WamNode API proxy to wrap the FaustAudioWorkletNode. The Param-Mgr will be able to automate AudioParams inside the Faus-tAudioWorkletNode, and to send MIDI messages from the WAM API. The node is generated from precompiled static WebAssembly Faust DSP or from Faust source code in the WAM's initialization phase using faustwasm. The WAM also provides a user interface generated using the faust-ui modules.</p><p>The system actually produces an extended version of the standalone DSP on the web runtime presented in the Subsection 2.1. During the initialization phase, the WAM will execute the following steps to construct an AudioNode that conforms the required WAM API (Figure <ref type="figure">3</ref>):</p><p>1. json and wasm files containing the DSP's metadata and binary codes will be fetched and compiled to We-bAssembly Modules.</p><p>2. A FaustAudioWorkletNode (FaustNode) will be created using the FaustDspGenerator.</p><p>3. The node's parameters will be used to initialize a ParamMgr that proxies the WamNode API.</p><p>4. The FaustCompositeNode that wraps the ParamMgr and the FaustNode will be created as the "main" node of the WAM to connect with other AudioNodes.</p><p>In addition, a function that can create a user interface from the DSP's metadata using faust-ui in a WebComponent is attached to the WAM. The generated files inside the output directory will be selfcontained, including all the modules required by the WAM.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1.3">Generate on the Web</head><p>Thanks to the Faust WebAssembly compiler in the faustwasm module, it is possible to generate a Faust WAM directly in the web environment.</p><p>A compile function is provided in the faust2wam package to compile Faust code to the WebAssembly binary code with the DSP metadata. Then, users can call the generateWam function to generate the FaustAudioWorkletNode and wrap it into a WAM, which will be the same as from static files.</p><p>Figure <ref type="figure" target="#fig_3">4</ref> shows a WAM generated by faust2wam module. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">The DSP Package of JSPatcher</head><p>JSPatcher is a visual programming language (VPL) on the web written in TypeScript in the style of Max or PureData allowing users to create interactive online applications by building a graph -connecting ports (inlets and outlets) of the "box objects" with virtual patch chords.</p><p>A box object can be functional, accepting data as function inputs from its inlets connected from other box objects. Then, after applying the function to the input, it will output data to other box objects from its connected outlets.</p><p>Meanwhile, if supported, a box object can be used as a WebAudio DSP node, while its ports represent audio connections as in a WebAudio graph. Cables will be colored in this case.</p><p>Since an SDK for creating third-party box objects is available publicly, based on the faustwasm module, a set of JS-Patcher DSP objects for basic signal calculations is created as a package that is added into JSPatcher, to extend its possibilities for real-time signal processing.</p><p>In the design, this statically compiled Faust DSP box object can have several options during runtime, including setting initial values of most of the inputs and setting interpolation time when these inputs are changed by messages (which is 0.01 second by default).</p><p>A Faust library maxmsp.lib 8 has implemented in the 8 https://github.com/grame-cncm/faustlibraries/blob/ Faust language a part of the DSPs in Max. Our work reused some functions from the library and quickly prepared for each DSP box object a dedicated Faust source code file. For example, to prepare the source code of the low-pass filter (LPF), we only need to write the following:</p><p>declare argsOffset "1"; declare description "Low Pass Filter"; declare inputsDescription "['','f0','gain','Q']"; import("maxmsp.lib"); // Import the Library process = LPF; // Set as the main process</p><p>Here, the first three lines allow providing additional metadata with the compiled DSP, to be injected into the JS-Patcher box object. argsOffset is declared to be 1, which means that the arguments of the resulting box object will be applied to the inputs with an offset of 1 (i.e., the first argument to the second input). The description and the inputsDescription will be showed with the box object as its metadata. Due to the limitations of the compiler, in inputsDescription, backquotes are used as delimiters for strings and will be replaced as quotes in order to be parsed as a JSON array.</p><p>To support the initial input value when the box object's inlet is not connected, we may also need to declare the value through the metadata. The code below is another example showing how we declare initial input values in the Faust source code. declare defaultInputs "[0, 0.5]"; declare description "Sawtooth waveform oscillator between 0 and 1 with phase control"; declare inputsDescription "['freq', 'phase']"; import("stdfaust.lib"); process = os.lf_sawpos_phase;</p><p>The defaultInputs indicates (in order) the default input values as a JSON array of numbers.</p><p>Once the source files are prepared, we use the faustwasm CLI to compile all the files to its WebAssembly binary and JSON metadata files.</p><p>Then, a prototype JSPatcher box object is created as a class that extends (DefaultObject). It includes the FaustD-spGenerator for compiling the WebAssembly binary to the FaustAudioWorkletNode, taking into account the metadata declared in the source code. In fact, to implement the default argument values, for each Faust DSP input (which is actually different FaustAudioWorkletNode channels of its first input), a ConstantSourceNode is initialized with the declared value as its offset AudioParam value and connected to a ChannelMergerNode which connected to the FaustAu-dioWorkletNode. To allow us to separate connections from each DSP output, a ChannelSplitterNode is connected to the first output of the Faust node. (Figure <ref type="figure">5</ref>)</p><p>With this setup, the box object's inlets can be connected with audio connections for a-rate parameter changes on the offset AudioParam, which is eventually treated as signal inputs. Without audio connections, they can also handle data messages to set discretely input values with a smooth factor, which can be set through the box object's smoothInput property.</p><p>Figure <ref type="figure">6</ref> shows that when the user added a Faust DSP box object in JSPatcher, the detailed descriptions declared master/maxmsp.lib in the metadata will show up. In this case, a simple phasor waveform generator is created using the phasor~box object. It has two inputs, freq and phase, which can be initialized with arguments. Figure <ref type="figure" target="#fig_5">7</ref> shows the output signal or the phasor~box object with the frequency set to 110Hz. We connect the output to another Faust DSP box object subtracting the signal by 0.5, then to an oscilloscope to visualize the signal.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">DISCUSSION</head><p>The faustwasm module uses several recently implemented Web APIs, including ES module, WebAssembly, Au-dioWorklet, etc. Its browser compatibility need to be investigated. According to caniuse.com, WebAssembly and ES modules with dynamic import support are available on popular browsers (Chromium, Firefox, and Safari) since May 2020. AudioWorklet API is supported on Chromium since 2018, on Firefox 2020. Safari started supporting since 2021, but not allowing passing constructor options to the processor. In 2022, Safari's Technology Preview has full support for AudioWorklet.</p><p>After releasing the first version of faustwasm, we have a feature request for sample-accurate handling for MIDI messages and parameter changes. A solution is proposed by the community and will be addressed soon. We are also expecting to see more use cases from the Faust community. In theory, multi-rate audio processing or non-audio data stream processing (i.e. frequency domain data calculation) will be possible using this module on the web. We will keep the module up to date to keep the Faust language usable in new audio projects and new web technologies. Cross-platform compatibility is one of the main design features of the Faust language. It is also one of the capabilities provided by the web standards and browsers. Different modern Web APIs and web-related programming workflows, including new languages, building systems, and rendering frameworks require the Faust compiler and DSPs to be highly flexible and modularized for easier integration into third-party projects.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">CONCLUSION</head><p>Both faust2wam and the DSP package for JSPatcher are proofs of concept of using faustwasm as a NPM (Node Package Manager) module for WebAudio related projects. We are going to merge the module into Faust official repository and replace old web compilers in our online tools such as the Faust Editor, the Faust Playground and the Faust IDE. With the next iteration of these tools, the Faust compilation service on a remote server is no longer needed for JavaScript targets, WAMs with a UI can be efficiently generated in a browser.</p><p>Web-based audio application like JSPatcher often need a set of DSPs implemented as AudioWorkletNodes. faustwasm could help developers in this case concentrate on the DSP algorithm and realize the JavaScript programs for them. With less coding efforts, we successfully created around 50 DSPs for JSPatcher and will add more in the future.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">ADDITIONAL AUTHORS</head><p>Additional author: Yang Yu (Shanghai Conservatory of Music, SKLMA, China, email: yuyang@shcmusic.edu.cn).</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: The complete workflow to generate Faust WebAudio nodes from source code using faustwasm.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: The WebAudioModule API structure.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 : 2</head><label>32</label><figDesc>Figure 3: The FaustCompositeNode structure.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 4 :</head><label>4</label><figDesc>Figure 4: A Faust polyphonic WAM generated by faust2wam and loaded in JSPatcher, connected with a virtual keyboard and an oscilloscope.</figDesc><graphic coords="6,53.80,53.80,239.10,316.58" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 5 :Figure 6 :</head><label>56</label><figDesc>Figure 5: The internal WebAudio graph in a Faust DSP box object.Object Inlets</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 7 :</head><label>7</label><figDesc>Figure 7: The signal that the phasor box object generated.</figDesc><graphic coords="7,316.81,53.80,239.11,175.01" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Table 1 : Classes and their description in faustwasm</head><label>1</label><figDesc></figDesc><table><row><cell>Class</cell><cell>Description</cell></row><row><cell>FaustModule</cell><cell>The class exported from the Em-</cell></row><row><cell></cell><cell>scripten compiler, containing raw</cell></row><row><cell></cell><cell>memory states, function callers and</cell></row><row><cell></cell><cell>an in-memory file system aligned with</cell></row><row><cell></cell><cell>C/C++ interface.</cell></row><row><cell>LibFaust</cell><cell>A simple JavaScript wrapper class</cell></row><row><cell></cell><cell>around FaustModule containing only</cell></row><row><cell></cell><cell>necessary methods.</cell></row><row><cell cols="2">FaustCompiler An important class handling the full</cell></row><row><cell></cell><cell>lifecycle of a Faust DSP binary code</cell></row><row><cell></cell><cell>generation process from its source</cell></row><row><cell></cell><cell>code, including caching, error han-</cell></row><row><cell></cell><cell>dling, cleanups, and providing poly-</cell></row><row><cell></cell><cell>phonic instrument mixers.</cell></row><row><cell>FaustDsp-</cell><cell>A class interfacing single Faust DSP</cell></row><row><cell>Instance</cell><cell>instance processing audio buffers, pro-</cell></row><row><cell></cell><cell>viding information, and handling pa-</cell></row><row><cell></cell><cell>rameter changes.</cell></row></table></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1" xml:id="foot_0"><p>https://soul.dev/</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="2" xml:id="foot_1"><p>https://github.com/Fr0stbyteR/faustwasm</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="3" xml:id="foot_2"><p>https://github.com/Fr0stbyteR/faust2wam</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="4" xml:id="foot_3"><p>https://github.com/jspatcher/package-dsp</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="5" xml:id="foot_4"><p>https://www.npmjs.com/package/@grame/libfaust</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="6" xml:id="foot_5"><p>https://github.com/grame-cncm/faust</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="7" xml:id="foot_6"><p>https://github.com/emscripten-core/emscripten/issues/</p></note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Web Audio Modules 2.0: an Open Web Audio Plugin Standard</title>
		<author>
			<persName><forename type="first">M</forename><surname>Buffa</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Ren</surname></persName>
		</author>
		<author>
			<persName><forename type="first">O</forename><surname>Campbell</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Burns</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Yi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Kleimola</surname></persName>
		</author>
		<author>
			<persName><forename type="first">O</forename><surname>Larkin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Companion Proceedings of the Web Conference</title>
		<meeting><address><addrLine>Lyon, France</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2022-04">Apr. 2022</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Audioworklet: the future of web audio</title>
		<author>
			<persName><forename type="first">H</forename><surname>Choi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the International Computer Music Conference</title>
		<meeting>the International Computer Music Conference<address><addrLine>Daegu, South Korea</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2018-08">Aug. 2018</date>
			<biblScope unit="page" from="110" to="116" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">Csound: A Sound and Music Computing System</title>
		<author>
			<persName><forename type="first">V</forename><surname>Lazzarini</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Yi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Ffitch</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Heintz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">O</forename><surname>Brandtsegg</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Mccurdy</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2016">2016</date>
			<publisher>Springer Publishing Company, Incorporated</publisher>
		</imprint>
	</monogr>
	<note>1st edition</note>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Faust audio DSP language in the Web</title>
		<author>
			<persName><forename type="first">S</forename><surname>Letz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Denoux</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Orlarey</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Fober</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Linux Audio Conference</title>
		<meeting>the Linux Audio Conference<address><addrLine>Mainz, Germany</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2015-04">Apr. 2015</date>
			<biblScope unit="page" from="29" to="36" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Compiling faust audio dsp code to webassembly</title>
		<author>
			<persName><forename type="first">S</forename><surname>Letz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Orlarey</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Fober</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the International Web Audio Conference</title>
		<editor>
			<persName><forename type="first">F</forename><surname>Thalmann</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">S</forename><surname>Ewert</surname></persName>
		</editor>
		<meeting>the International Web Audio Conference<address><addrLine>London, United Kingdom</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2017-08">Aug. 2017</date>
		</imprint>
		<respStmt>
			<orgName>Queen Mary University of London, Queen Mary University of London</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Faust online ide: dynamically compile and publish faust code as webaudio plugins</title>
		<author>
			<persName><forename type="first">S</forename><surname>Letz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Ren</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Orlarey</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Michon</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Fober</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Aamari</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Buffa</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Lebrun</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the International Web Audio Conference, WAC &apos;19</title>
		<editor>
			<persName><forename type="first">A</forename><surname>Xambó</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">S</forename><forename type="middle">R</forename><surname>Martín</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">G</forename><surname>Roma</surname></persName>
		</editor>
		<meeting>the International Web Audio Conference, WAC &apos;19<address><addrLine>Trondheim, Norway</addrLine></address></meeting>
		<imprint>
			<publisher>NTNU</publisher>
			<date type="published" when="2019-12">December 2019</date>
			<biblScope unit="page" from="71" to="76" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">FAUST : an Efficient Functional Approach to DSP Programming</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Orlarey</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Fober</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Letz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">New Computational Paradigms for Computer Music</title>
		<editor>
			<persName><forename type="first">E</forename><forename type="middle">D</forename><surname>France</surname></persName>
		</editor>
		<meeting><address><addrLine>Paris, France</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2009-01">Jan. 2009</date>
			<biblScope unit="page" from="65" to="96" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Build webaudio and javascript web applications using jspatcher: A web-based visual programming editor</title>
		<author>
			<persName><forename type="first">S</forename><surname>Ren</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Pottier</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Buffa</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the International Web Audio Conference, WAC &apos;21</title>
		<editor>
			<persName><forename type="first">L</forename><surname>Joglar-Ongay</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">X</forename><surname>Serra</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">F</forename><surname>Font</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">P</forename><surname>Tovstogan</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">A</forename><surname>Stolfi</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">A</forename><forename type="middle">A</forename><surname>Correya</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">A</forename><surname>Ramires</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">D</forename><surname>Bogdanov</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">A</forename><surname>Faraldo</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">X</forename><surname>Favory</surname></persName>
		</editor>
		<meeting>the International Web Audio Conference, WAC &apos;21<address><addrLine>Barcelona, Spain</addrLine></address></meeting>
		<imprint>
			<publisher>UPF</publisher>
			<date type="published" when="2021-07">July 2021</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Webassembly audioworklet csound</title>
		<author>
			<persName><forename type="first">S</forename><surname>Yi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Lazzarini</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Costello</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the International Web Audio Conference, WAC &apos;18</title>
		<editor>
			<persName><forename type="first">J</forename><surname>Monschke</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">C</forename><surname>Guttandin</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">N</forename><surname>Schnell</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">T</forename><surname>Jenkinson</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">J</forename><surname>Schaedler</surname></persName>
		</editor>
		<meeting>the International Web Audio Conference, WAC &apos;18<address><addrLine>Berlin, Germany; TU Berlin</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2018-09">September 2018</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Csound web-ide</title>
		<author>
			<persName><forename type="first">S</forename><surname>Yi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Sigurðsson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Costello</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the International Web Audio Conference</title>
		<meeting>the International Web Audio Conference<address><addrLine>Trondheim Norway</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2019">2019</date>
			<biblScope unit="page" from="92" to="97" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Emscripten: an llvm-to-javascript compiler</title>
		<author>
			<persName><forename type="first">A</forename><surname>Zakai</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the ACM international conference companion on Object oriented programming systems languages and applications companion</title>
		<meeting>the ACM international conference companion on Object oriented programming systems languages and applications companion</meeting>
		<imprint>
			<date type="published" when="2011">2011</date>
			<biblScope unit="page" from="301" to="312" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
