<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">A FAUST-BASED RE -CREATION OF THE POWER AMP STAGE FOR W EB A UDIO -BASED SIMULATIONS OF GUITAR TUBE AMPLIFIERS</title>
				<funder ref="#_C8KRZaE">
					<orgName type="full">Agence Nationale de la Recherche</orgName>
					<orgName type="abbreviated">ANR</orgName>
				</funder>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Michel</forename><surname>Buffa</surname></persName>
							<email>michel.buffa@univ-cotedazur.fr</email>
						</author>
						<author>
							<persName><forename type="first">Jerome</forename><surname>Lebrun</surname></persName>
							<email>lebrun@i3s.unice.fr</email>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Université Côte d&apos;Azur</orgName>
								<orgName type="institution" key="instit2">CNRS</orgName>
								<orgName type="institution" key="instit3">INRIA Université Côte d&apos;Azur</orgName>
								<orgName type="institution" key="instit4">CNRS Sophia Antipolis</orgName>
								<address>
									<country key="FR">France</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<orgName type="institution">Sophia Antipolis</orgName>
								<address>
									<country key="FR">France</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">A FAUST-BASED RE -CREATION OF THE POWER AMP STAGE FOR W EB A UDIO -BASED SIMULATIONS OF GUITAR TUBE AMPLIFIERS</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">112F3869F689B84443113A1AAB909850</idno>
					<idno type="DOI">10.13140/RG.2.2.23416.11521</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.8.0" ident="GROBID" when="2024-04-12T14:48+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>BSTRACT</head><p>In this paper, we detail our on-going browser-based re-creations of famous tube guitar amplifiers and describe the JavaScript implementations we have been developing using the WebAudio API. The tricky part of such amplifiers is the power stage (Power Amp) which contains a parametric negative feedback loop. We show the limits of the high-level WebAudio API layer, and how FAUST allows us to re-implement the Power Amp part more faithfully. Finally we also compare FAUST vs JavaScript development, and mention future optimizations.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">I NTRODUCTION</head><p>Since 2015, we have been designing and developing faithful simulations of iconic tube guitar amplifiers like the Marshall JCM 800 or the Mesa-Boogie 2:90, used by many famous artists (AC/DC, Guns and Roses, Deep Purple, Metallica, etc.), that can run in a web browser <ref type="bibr" target="#b0">[1]</ref>. This work consisted in emulating the different parts of the electronic circuit of this amplifier using WebAudio, implementing the necessary signal processing algorithms using the available API, and finding adequate solutions to circumvent some limitations specific to the web browser environment (thread priority, latency, JavaScript API limitations).</p><p>Finally, we extensively compared (quantitatively and qualitatively) our realization with the state of the art, i.e. native simulations, mostly commercial, written in C++, and not having the constraints of webapps. The results exceeded our expectations. Since then, we have continued this work by refining the models used in the simulation, and we designed a framework to reproduce different electronic architectures present in various other tube amplifiers found in many musicians' equipment <ref type="bibr" target="#b1">[2]</ref>. We can now simulate for example a Fender, a Vox or a Mesa Boogie amplifier, etc. or even create new original designs. These customizable simulations have been tested by professional guitarists, are being used by music schools on an experimental basis and are the subject of a marketing contract by the CNRS in order to be included as plugins <ref type="bibr" target="#b2">[3,</ref><ref type="bibr" target="#b3">4]</ref> in an online commercial digital audio workstation. So far, our simulations were fully developed in JavaScript and based on the WebAudio API.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">W EB A UDIO</head><p>WebAudio is a W3C-standard JavaScript API that relies on 1 building an "audio graph" by connecting processing nodes one to another. The signal is sequentially processed through the block diagram where each node crossed can modify the signal (e.g. a filter node may be used to remove high-pitched sounds, etc ...). Some particular nodes can also be used as a sound source (audio file, wave generator, link to an HTML5 element &lt;audio&gt; or &lt;video&gt;). Fig. <ref type="figure">1</ref>. High level simulation. The lamps and filters are identified and simulated part by part using the WebAudio API.</p><p>To our knowledge, there is no previous research work that has tried to simulate a complete guitar amplifier using WebAudio. When we started, we made the choice of relying on higher level psycho-acoustic emulations, in which the "logical" parts are well identified (filters, lamps, etc.) and perceptually emulated using separate templates for each part (Fig. <ref type="figure">1</ref>). This work has been presented in <ref type="bibr" target="#b0">[1]</ref> and validated by professional guitar players during different campaigns of user tests. This may be in theory less accurate than a 'global' physical simulation because some effects and interactions such as feedback loops from overloaded tubes or the damping factor of the loudspeaker impedance on the power amplifier may not be precisely taken into account. However, this approach is much simpler and more tunable.</p><p>It can be implemented real-time within a browser and is surely more adapted to WebAudio, its ecosystem and its limitations.</p><p>In our approach, we precisely analyzed the electronic schematics of amplifiers: lamps, filters structures, power supply, output transformers were identified and simulated part by part by JavaScript code relying on the WebAudio API. WebAudio provides a set of "high-level" nodes (such as the WaveShaper node and the BiquadFilter node) that can be used to model the lamps and filters, and it has been shown that when properly used, waveshaping techniques , 2 combined with proper oversampling and filtering, can give quite good results <ref type="bibr" target="#b4">[5]</ref>.</p><p>One big advantage of JavaScript/WebAudio API is the really flexible and dynamic way you can manipulate the audiograph (by changing its topology in real-time, even while playing guitar) or the parameters of the different nodes, in particular, you can reshape in real-time the transfer functions used by the waveshaper nodes. Another advantage of using WebAudio high level nodes, is that most of the audio processing is done in their C++ implementation that lies in the web browser internals, so performance is generally not an issue. Our simulation has a very low CPU impact and runs audio processing threads with the highest priority. On a MacBook Pro from 2016, we could run up to 15 amp simulations in parallel (all stages: preamp, tonestack, power amp, speaker simulation), in a DAW, without noticing any glitche and with a CPU stress level of less than 50%.</p><p>However, until recently, one main limitation of the WebAudio API design was that default signal processing is constrained to block-processing of chunks of 128 samples at a time, and until very recently it was not possible to do stream processing at the sample-wise level without introducing glitches and latency. Not being able to perform processing with time-granularity below this 3ms limit caused a lot of issues in the implementation of the PowerAmp part of the amplifier schematic. Indeed, in its classic Push/Pull configuration, the power stage includes a crucial negative feedback loop that could not be faithfully simulated without introducing customized solutions to mitigate this major limitation. This issue has been recently partially solved with the arrival of the AudioWorklet node and a new WebAssembly standard in 2018 . Writing custom DSP code in JavaScript, 3 or coding in WebAssembly by hand, is nevertheless quite tedious.</p><p>Fortunately, FAUST quickly proposed WebAudio/WebAssembly as a compilation target and proved to be an ideal framework for developing powerful custom code (we even did some personal contributions to FAUST's WebAudio support) <ref type="bibr" target="#b5">[6]</ref>.</p><p>In this paper, we will detail how a PowerAmp works (Section 3), introduce our initial solution to mitigate the block-processing limitations of WebAudio (Section 4), and devote the rest of the article to detail our FAUST and WebAssembly-based approaches to achieve more faithful low-latency simulations (Section 5). We will conclude by comparing the advantages and disadvantages of the two approaches (JavaScript + WebAudio high level nodes vs. FAUST/WebAssembly) with special care on the performance measurements (latency, cpu usage, etc.) (Section 6).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">T UBE GUITAR AMPLIFIER DESIGN</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1.">Overview</head><p>A guitar amplifier is composed of different parts: usually, a preamplifier stage, a so-called "tonestack" stage that includes bass, midrange and treble controls, and a power stage (the Power Amp). See Figure <ref type="figure" target="#fig_1">2</ref>   The preamplifier beefs up the high-impedance low-level signal coming from the guitar pickup microphones to a lower impedance mid voltage signal that can drive the power stage. The preamplifier also shapes the tone of the signal; high settings of the preamplifier lead to 'overload' that creates crunch/distorted sounds. The power amplifier with the help of the output transformer outputs a very low impedance, high current signal adequate to efficiently drive a loudspeaker and to produce loud amplified sounds. Another clear aim of guitar amps is of course to create desirable distortions too.</p><p>Fig. <ref type="figure">3</ref>. The back of a Marshall JCM800 power head. We can see the two amplification stages.</p><p>To get a finer understanding of this critical stage, we will further detail how a PowerAmp works, its role in the signal chain and why the power amplifier is so tricky to emulate due to the presence of some feedback loop in the circuitry.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.">The PowerAmp stage</head><p>Usually solely controlled by the Master Volume and Presence knobs (Fig 4 .), the Power Amp stage has a profound impact on the sound and overall dynamics. Indeed, the type of sound you can get from the preamp stage alone remains on the lean side in terms of distortions. Referring to Kuehnel <ref type="bibr" target="#b6">[7]</ref> and Denton <ref type="bibr" target="#b7">[8]</ref>, when you turn up the volume of a tube amp using the Master Volume knob, the power tubes get more and more distorted and the sound gets thicker and thicker, and also less controlled. And as you get closer to power saturation (i.e. clipping the power tubes and/or saturating the output transformer core causing the famous grinding effect, a mixture of saturation/oscillations, but also possibly starving the power supply -more about this later in this section), the output dynamics get tighter, resulting in muddy distortions with a heavier sound. The English slang to characterize these sounds is difficult to translate: in French, one would speak of "thick", "heavy", "metallic", "abrasive" (translation of gritty), "rich" sounds.  In Power Amps, the Negative Feedback Loop (NFB)/Presence control (see Figs. <ref type="figure" target="#fig_3">5</ref> and<ref type="figure" target="#fig_4">6</ref>) are typically introduced to extend the usable frequency bandwidth by limiting/reshaping the unwanted distortions originating from the non-linearities of the output transformer at the price of a slightly lower total gain. The negative feedback loop (NFB) takes a portion of the signal from the output transformer secondary winding, dephasing it with a 180 degree phase shift and re-injects it back into the splitter stage (see the highlighted plot in Fig. <ref type="figure" target="#fig_3">5</ref> and the "Feedback" loop in Fig. <ref type="figure" target="#fig_4">6</ref>). Amplifiers without NFBs are usually more powerful (higher gain) with more distortion, but their coloration also tends to become rougher and unpredictable when pushed into saturation. The NFB loop smoothes out the sound by reducing the level of distortion in the parts of the spectrum where it is most disturbing (typ. mid-range ) <ref type="bibr" target="#b6">[7]</ref>.</p><p>Unknown to concert stage or HiFi power amps, a 'Presence' control is added to the NFB loop of guitar amps to allow control on the coloration of the NFB and thus to provide a simple but efficient way of adjusting the brightness and sharpness of the sound at the Power Amp stage. The Presence may be looked at as a global time/frequency control on the brightness of timbre by 4 altering the signal fed back from the negative feedback loop. The effects of negative feedback can be reduced for certain frequencies as the Presence knob controls the resistor part of a RC network, hence a tunable filter made of Resistors and Capacitors (RC) in the loop. With less negative feedback in the high frequencies, the sound becomes brighter, louder, more vivid and dynamic. The behavior of this control is very different from those of the tonestack (bass, midrange, treble), which merely equalizes the output of the preamp. Namely, unlike conventional treble control which is mainly subtractive, Presence control is pseudo-additive in that it limits the fundamental subtractive aspect of the NFB loop. It should be noticed also that the NFB/Presence has a major influence at the temporal level <ref type="bibr" target="#b8">[9]</ref> as the RC networks controlled by the Presence knob induce some frequency-dependent group-delay in the NFB loop. This may explain the blurring/sharpening effect that Presence has on the attack slopes of the notes played, acting as a "softening/anti-softening" pedal. This clearly motivates our introduction of a curve-based parametric Presence control to choose in which frequency band one wants its brightness.</p><p>To design properly a NFB/Presence circuit, lots of parameters are involved and a lot of care must be taken when adjusting them. With real amplifiers' power amps, manufacturers are very conservative: the allowed range of Presence control is restricted so as to avoid unwanted oscillations that may be destructive to the speaker/cabinet. As a consequence, only subtle alterations (mostly upper-mids/lower-high range brightness) are possible, the sound signature being mainly carved through the preamp settings. In our simulations, the curve-based parametric Presence control allows us to fully carve the time/frequency coloration at the Power Amp level to add punch or special effects to the output from the Preamp and Tonestack. Some other important controls on the Power Amp are the Master volume to adapt gain with the Preamp output level, and the Bias setting of the tubes may be changed to introduce some light non-linearities/asymmetries in the tube response curves. In real-world tube Power Amps, Bias allows us to change the class of operation of the tubes (typ. class AB for push-pull) from almost class A to almost class B. And of course the Presence setting for adjusting the overall tone/brightness is quite important and can lead to destructive positive feedback if not designed correctly (freq ranges, etc.). Historically, some amps have a Power Amp section which is more important in their sound signature, in general they are the most "vintage" ones, think of the Fenders, the first Marshalls, the Vox AC30 … Improving the real-time dynamics in simulations is crucial to get them more realistic . Namely, when pushed to their 5 limits by large transients, classic guitar tube amplifiers (esp. with tube rectifiers based power supply) have a tendency towards harmonic saturation with typical dynamic range compression/expansion effects (known as 'sag' and 'bloom'), temporal lag (known as 'squish') or spatialisation artifacts (known as 'swirl') . Sag is consecutive to some 6 drooping of the supply voltage in the Preamp stage in response to large transients. The recovery from Sag as voltage supply returns to normal is coined as 'Bloom' and is again a well appreciated effect. Now, Squish is linked to some temporal hysteresis induced by some increased time lag in the feedback loop -also in response to large transients. Finally, Swirl is linked to saturation of the core in the output transformer from overload, leading to phase inconsistencies and spatial blurring of the chord played (ala Univox Uni-Vibe pedal effect). All those effects proved to be quite tricky to emulate in real-time . <ref type="bibr" target="#b6">7</ref> We introduced a dedicated method to approximate these advanced temporal, nonlinear behaviours of tubes (typ. 'sag'/'bloom', 'squish'/'swirl' effects). Namely, in the WebAudio API, the slope of the tube transfer function curves can be driven real-time by the power of input signal enveloppe emulating hysteresis phenomena. Consequently, to mimic this hysteresis and the sag in the response of a tube Preamp stage, we implemented it with simple dynamical real-time changes in the slopes of the transfer functions in our preamp simulation . By properly adjusting the threshold at which we get the squish, only the higher power transients from the envelope amplitude will trigger controlled change of slope. This is still an experimental feature that needs to be properly adjusted and evaluated. Figure <ref type="figure" target="#fig_5">7</ref> shows a curve animated in real time with hysteresis behaviour in the transfer function triggered by the input signal envelope. 5 Video: https://www.youtube.com/watch?v=zBhn7odezUQ 6 More details on: http://www.aikenamps.com/index.php/what-is-sag 7 Some examples at: http://www.diale.org/tube_emulation.html  The Bias control corresponds to the idle voltage around which the tubes are amplifying signals and thus controls their linearity/asymmetry characteristics . With Bias, one 10 can change the amount of (negative) voltage offset applied to the signal at the grid of the tubes. Colder settings will make the pentodes/tetrodes draw less current, decreasing the overall output volume and potentially introducing cross-over distortion due to the class AB getting closer to class B (which may be what a guitarist looks after to achieve a more dirty/loose tone). Hotter settings will make the pentodes/tetrodes draw more current moving closer to class A, with a thicker, louder perceived output level and eventually up to power supply "sagging" (depending on the Sagging control setting), adding compression or, in extreme cases, saturation and cleaning up the tone from potential cross-over distortion.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">-I MPLEMENTING THE P OWER A MP STAGE WITH W EB A UDIO HIGH LEVEL NODES , DEALING WITH LIMITATIONS</head><p>In the current implementation, the presence filter is fully customizable and can be controlled in real time using a graphic equalizer (Fig. <ref type="figure" target="#fig_7">8</ref>) to select the frequency range of the filter. The min and max values of the negative gain in the NFB can also be adjusted using a slider. These tools (NFB and Presence) are quite sensitive (at the edge of creating positive feedback with oscillations and Larsen effects so we provide controls in the GUI to adjust/restrict the admissible range) but this novel presence control provides an utterly powerful and spectacular tool to shape the final sound.</p><p>Being able to adjust all the parameters (gains, filter parameters, transfer function of the waveshaper, etc.) is crucial to fine tune this stage using WebAudio nodes. We strongly advise the player to watch this YouTube video 11  which shows the differences in sound and dynamics with and without this loop (Power Amp on / off) in our simulation. It sounds and plays very well (we made several user evaluations <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b1">2]</ref> that showed that guitarists, even professional ones, liked the way the dynamics of a real amp was simulated). As said in previous sections, we simulate tubes using filters and waveshaper nodes with properly adjusted transfer functions. As shown in Fig 8 . The green transfer function curve on the left of the graphic EQ (presence bank of filters) is rather linear, meaning that only little distortion is added to the signal, and only at high amplitudes. Being able to adjust this function is also crucial to avoid oscillations. On top of that, the Bias control has to be properly adapted to the selected tube transfer functions to guarantee coherent coloration/output volume (making it easier to compare different tubes and choose the right one).</p><p>Nevertheless, we encountered many issues in the implementation of our signal loops in WebAudio. Proper simulations of NFB and Presence have been quite difficult to achieve due to some limitations of the WebAudio API and divergences/bugs in how browsers generally parse the WebAudio graphs with loops. In the WebAudio API specs, loops in the graph are required to include at least one delay node. Without this delay node, Firefox stops rendering the graph, while Chrome does not complain but adds, behind the scenes, a 3 ms delay (the minimal delay from a frame audio buffer of 128 sample-frames as within WebAudio API, the signal is always processed in packets of 128 samples, which means that the minimum value for a delay is 128 / sample rate, i.e. about 128/44100 = 3ms). With the current limitations in WebAudio, and quite strangely, this 3ms delay in the loop to conform to the specs, brings slightly different coloring of the amps between FF and Chrome. We have reported these errors and discussed them with the implementers (Raymond Toy from Google and Paul Adenot from Firefox) but so far, nothing has been fixed (September 2020). For a good implementation of NFB, a stable delay of fewer samples would have been preferable (higher delays increase latency and the softening of attacks). Now, to faithfully implement loops like the NFB with its RC networks inducing shorter delays, finer precision at the level of some sample-frames is required. To circumvent these limitations and allow a proper sample-wise accuracy in the processing of loops, we decided to re-implement the NFB loop (and other critical parts in general) in FAUST as AudioWorklets, ending up re-implementing all the processing nodes present in the circuit: filters, gain and wave shaper, in this language.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">FAUST IMPLEMENTATION OF THE P OWER A MP STAGE</head><p>A guitar amplifier is composed of different parts: usually, a Preamplifier stage, a so-called "Tonestack" stage that includes bass, midrange and treble controls, and a Power stage (the Power Amp). Our general approach consisted in looking at the different parts we needed to re-create. However, as mentioned in the previous section, the poweramp stage is quite tricky to implement as it includes a negative feedback loop. In our initial purely WebAudio implementation [1, 2], we were using a bank of biquad filters in series (for the presence implementation), a waveshaper node with appropriate biquad filters (for simulating tubes), some gain nodes (master volume at the input of the stage, negative gain in the NFB loop and a few others for fine tuning the signal level at different locations in the audio graph), and a delay node (in the NFB loop). Aware of the great difficulties encountered in simulating the power amp in JavaScript/WebAudio, we first tried to re-create as faithfully as possible the signal chain that gave good results. For example, using the same types of filters with the same parameters, the same transfer function with the core issue of simulating properly a waveshaper in FAUST, the same gain values, etc. And of course, we looked closely at the behavior of the NFB loop whose delay hopefully should be lower than the 3ms barrier imposed by the previous implementation. This way, we can replace the current power amp implementation (made of a dozen of high level WebAudio nodes) with a single FAUST generated AudioWorklet node .</p><p>12 WebAudio comes with a set of classic biquad filters types: lowpass, highpass, bandpass, lowshelf, highshelf, peaking, notch and allpass. All these filters have a fixed set of parameters: frequency, gain, Q and detune, whereas some of these parameters are not relevant to some type of filters (as Q for lowshelf/highshelf). FAUST does not come with similar filters out of the box. After trying to adapt existing FAUST filters to behave like WebAudio filter ones, and after talking with FAUST and WebAudio implementers the conclusion was that for a really faithfull behavior, it would be better to start from the original C++ implementation of the WebAudio filter API, taken from the Chromium browser source code. The FAUST team did the port and provided us with the so-called webaudio.lib that is now available in the FAUST distribution.</p><p>For the power amp tubes, we looked at the way FAUST developers simulated tubes (e.g. in the Guitarix project <ref type="foot" target="#foot_10">13</ref>source repository, in particular in the guitarix.lib file), or waveshapers (as in several distortion plugins such as the ones by Oleg Kapitonov or by Nick Thompson's Creative 14 Intent Temper Distortion plugin ). We found out that most 15 tube simulations relied on C/C++ code and could not be used out of the box (typ. guitarix tube simulations), as we must be able to run these in a Web browser, and the FAUST toolchain still does not support hybrid FAUST/C source code when the compilation target is set to WebAudio/WebAssembly. The Temper distortion simulation, however, used a 100% FAUST based implementation of a simple waveshaper that produced a warm, adjustable, distortion sound that could easily fit our needs. We used it as a starting point. Furthermore, the code contained the definition of a transfer function curve that could be adjusted (i.e using a more subtle/less aggressive curve). Fig. <ref type="figure" target="#fig_6">9</ref> shows the transfer function from the Temper Distortion waveshaper code, that is very close to the one we used in our JavaScript implementation (see Fig. <ref type="figure">10</ref>. for comparisons), the parameter k driving the S shape of the curve.   Finally we added GUI elements (knobs) in order to fine tune in real time different parameters (Fig. <ref type="figure" target="#fig_11">13</ref>), in particular the ones that control the waveshaper (drive, curve, distorsion), the NFB gain and the Presence filters.</p><p>The current implementation (mainly based on the code from the Temper Distortion) of the waveshaper does not rely on pre-calculated point tables, but on a transfer function applied to each sound sample, which leaves room for optimization. The dynamic time response of the tubes is approximated using an amplitude follower placed in the signal chain just before the waveshaper that drives an allpass filter (and which aims at modifying the DC offset, and thus the slope of the curve). We still have to evaluate whether this approach is as efficient or flexible as the method we used previously in the JavaScript implementation, which changes the slope but also the S-shape of the curve (see section 3, Fig. <ref type="figure" target="#fig_5">7</ref>).</p><p>Once our FAUST-based Power Amp re-creation was functional and adjustable, we could proceed to the evaluation phase.  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">E VALUATION</head><p>The first step of the evaluation was to listen to the global overall sound when we used the Power Amp in standalone mode, tweaking the different parameters (Master volume, Presence, negative gain, transfer function parameters), and to check its behavior compared to our previous WebAudio/JavaScript implementation. We did some trials using dry guitar sound samples, but also with a real guitar as inputs. The general feeling is that the two main settings, Master volume and Presence, reacted very closely with both implementations. In addition, the classic effects of oscillation and positive feedback could be obtained again when pushing some parameters close to the limit values (Presence, NFB gain).</p><p>In a second step we used the FAUST IDE to create a WebAudio plugin from the FAUST implementation of the Power Amp (Fig. <ref type="figure" target="#fig_12">14</ref>) and we chained a special version of our tube guitar amplifier simulations in which we bypassed the embedded power amp and cabinet simulation stages (Fig. <ref type="figure" target="#fig_13">15</ref>), and compared with the full featured, JavaScript based simulations. Results can be seen/heard in a video we published online , or in the online pedalboard WebAudio 18 application .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>19</head><p>The differences in terms of sound/timbre and playing dynamics are small and subtle. However, we noticed that the FAUST implementation was much more stable and versatile when adjusting the internal parameters of the feedback loop. The processing in our JavaScript implementation was based on blocks of 128 samples, inducing an undesirable delay of 3ms in the back-fed signal as opposed to only two samples with the FAUST loop . In the FAUST implementation, the measurement 20 tools (Fig. <ref type="figure" target="#fig_4">16</ref>) proved the sample-wise nature of the processing with a delay of just one-sample for the NFB/Presence loop. This also explains the increased 21 stability of this loop. Now, in terms of aggregated latency 18 https://youtu.be/uNp-0hzveeo 19 https://mainline.i3s.unice.fr/Wasabi-Pedalboard/# , check the PowerAmp tab at bottom, drag'n'drop in the main area. 20 As measured in the FAUST IDE, using process = button("gate") &lt;: ((poweramp), _); style code and the embedded visualization tools. 21 As measured in the FAUST IDE, using process = button("gate") &lt;: ((poweramp), _); style code and the embedded visualisation tools.</p><p>for the Power Amp, we did measurements of the "end-to-end" latency, from guitar to cabinet and obtained consistently better values for latency with the new FAUST implementation: around 20-21 ms compared to the 23-24 ms latency of our previous finely-tuned JavaScript implementation (both using a Firefox Nightly 75.0a1 browser with an external Focusrite Scarlett and a Macbook Pro 16 under 10.14). This confirms a saving of 3ms in accordance with the difference of processing of loops between FAUST (sample-wise) and WebAudio API/JavaScript (block based). Fig. <ref type="figure" target="#fig_4">16</ref>: The latency can be measured achieving sample-wise accuracy using the tools embedded in the IDE. Yellow: a gate signal, Pink: the output from the PowerAmp. X-axis is in samples.</p><p>In addition, the use of the FAUST IDE for coding, debugging and profiling this Power Amp plugin has been evaluated by six audio plugin developers with different levels of expertise with the FAUST language. They had to follow a tutorial that guided them and after that, they had to answer a detailed survey. The IDE has been considered as "very useful" for prototyping rapidly an audio plugin, prior to polishing its GUI by hand, editing the HTML/CSS code. Details of this evaluation are available in <ref type="bibr" target="#b12">[13]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.">P ERSPECTIVES AND CONCLUSIONS</head><p>FAUST has proven to be particularly suitable for porting the JavaScript code of an existing Power Amp in a very similar way, freeing it from the limitations, inconsistencies and constraints of the WebAudio API. We performed preliminary qualitative measurements and measured the latency of the processing, which proved to be almost identical. We did not investigate some aspects that can still be improved/optimized, such as the implementation of a full-featured waveshaper in FAUST (based on pre-calculated tables and interpolation to describe the transfer function, for example), or on more complex tube models. At the evaluation level, additional systematic measurements have to be made and the power amp behavior should also be compared with native implementations, for example, those of the TPA-1 by Ignit Amps plugins, or the TSE X50 by TSE audio (in which the poweramp stage can be isolated).</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><label></label><figDesc>and 3 below..</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 2 .</head><label>2</label><figDesc>Fig. 2. The typical stages of guitar amplifiers and their associated signal paths. Some brands (as Fender) may switch the PreAmp and the Tonestack stages.</figDesc><graphic coords="3,330.28,308.51,216.93,93.83" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig 4 .</head><label>4</label><figDesc>Fig 4. The Power Amp stage is controlled by the Master Volume and Presence knobs.</figDesc><graphic coords="4,51.04,183.90,216.93,87.07" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fig 5 .</head><label>5</label><figDesc>Fig 5. For illustration, the Power Amp stage of a Mesa/Boogie 2:90. The Negative Feedback Loop (NFB)/Presence with its RC network is highlighted. The JCM 800 has similar topology.</figDesc><graphic coords="4,51.04,463.89,216.93,123.85" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Fig 6 .</head><label>6</label><figDesc>Fig 6. An abstraction of a classic Push/Pull Power Amp.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Fig 7 .</head><label>7</label><figDesc>Fig 7. A tool we developed in order to adjust the real-time dynamics of the tube simulation based on waveshapers .</figDesc><graphic coords="5,330.28,99.83,216.93,117.85" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>9</head><label>9</label><figDesc></figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Fig 8 .</head><label>8</label><figDesc>Fig 8. The settings of the NFB power amplifier can be changed/adjusted dynamically on the fly, even while playing, without generating any audio glitches/dropouts.</figDesc><graphic coords="6,51.04,89.32,216.93,84.07" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Fig. 9 :Fig. 10 :</head><label>910</label><figDesc>Fig. 9: FAUST transfer function, uses an approximation of tanh for computational improvements .16</figDesc><graphic coords="7,159.13,196.66,99.83,99.08" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Figs. 11</head><label>11</label><figDesc>Figs. 11 and 12 show the final diagram of the FAUST implementation of the PowerAmp based on the Temper Distortion source code. Differences from the Temper Distortion source code are mainly the introduction of the Presence (made of two peaking filters, at 2kHz and 4kHz) in the feedback loop, the introduction of an adjustable negative feedback gain, the removing of some unnecessary elements (i.e. a resonant lowpass filter at the beginning of our signal chain).</figDesc><graphic coords="7,51.04,562.22,216.93,57.05" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Fig. 11 :Fig. 12 :</head><label>1112</label><figDesc>Fig. 11: Diagrams of the final implementation.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>Fig. 13 :</head><label>13</label><figDesc>Fig. 13: GUI generated by the FAUST IDE, some extra parameters (negative feedback gain, waveshaper; drive, curve, saturation) are tweakable, enabling fine tuning of the NFB loop.</figDesc><graphic coords="7,330.28,210.93,216.93,56.30" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_12"><head>Fig. 14 :</head><label>14</label><figDesc>Fig. 14: For testing purposes, we created a WebAudio plugin from the FAUST code: using the WAP GUI Builder we developed, integrated in the FAUST IDE.</figDesc><graphic coords="7,330.28,554.72,216.93,137.37" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_13"><head>Fig. 15 :</head><label>15</label><figDesc>Fig. 15: The PowerAmp plugin in our pedalboard application, with a version of our AmpSim in which we bypassed our Power Amp pure-JavaScript version and the cabinet simulator stages.</figDesc><graphic coords="8,51.04,89.32,216.93,116.35" type="bitmap" /></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1" xml:id="foot_0"><p>https://www.w3.org/TR/webaudio/</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="2" xml:id="foot_1"><p>The most straightforward method for obtaining signal distortion with digital devices is to apply an instantaneous nonlinear transformation, using a so-called "transfer function" from the input signal to the output variable. This type of timbre alteration is coined waveshaping<ref type="bibr" target="#b10">[11,</ref><ref type="bibr" target="#b11">12]</ref>.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="3" xml:id="foot_2"><p>WebAssembly is a W3C standard: a portable binary-code format for executable programs, firstly to be used on the Web, but also on native environments. WebAssembly aims to execute at native speed by taking advantage of common hardware capabilities available on a wide range of platforms. See https://webassembly.org .</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" xml:id="foot_3"><p>Proceedings of the 2 nd International Faust Conference (IFC-20), Maison des Sciences de l'Homme Paris Nord, Saint-Denis, France, December<ref type="bibr" target="#b0">[1]</ref><ref type="bibr" target="#b1">[2]</ref> 2020   </p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="4" xml:id="foot_4"><p>Fender: Be in the Moment: The Presence Control Explained: What is it and how can it help energize your live sound? ( https://www.fender.com/articles/tech-talk/be-in-the-moment-the-presence-c ontrol-explained )</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="8" xml:id="foot_5"><p>See this in our amp simulation in this video: https://www.youtube.com/watch?v=zBhn7odezUQ</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="9" xml:id="foot_6"><p>https://jsbin.com/zotaver/edit</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="10" xml:id="foot_7"><p>Aiken -The last word on Biasing: https://www.aikenamps.com/the-last-word-on-biasing</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" xml:id="foot_8"><p>WebAudio implementation demo of the PowerAmp stage: https://www.youtube.com/watch?v=-NdMdJQx2Bw</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="12" xml:id="foot_9"><p>We already did that in the past by replacing the tonestack stage by some FAUST implementations<ref type="bibr" target="#b1">[2]</ref>.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="13" xml:id="foot_10"><p>http://guitarix.org/</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="14" xml:id="foot_11"><p>https://github.com/olegkapitonov/Kapitonov-Plugins-Pack</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="15" xml:id="foot_12"><p>https://github.com/creativeintent/temper</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="22" xml:id="foot_13"><p>http://www.igniteamps.com/#tpa-1</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="23" xml:id="foot_14"><p>https://www.tseaudio.com/software/x50v2</p></note>
		</body>
		<back>

			<div type="acknowledgement">
<div><head>ACKNOWLEDGMENTS</head><p>This work was partially supported by the <rs type="funder">French Research National Agency (ANR)</rs> and the <rs type="projectName">WASABI [21</rs>] team (contract <rs type="grantNumber">ANR-16-CE23-0017-01</rs>).</p></div>
			</div>
			<listOrg type="funding">
				<org type="funded-project" xml:id="_C8KRZaE">
					<idno type="grant-number">ANR-16-CE23-0017-01</idno>
					<orgName type="project" subtype="full">WASABI [21</orgName>
				</org>
			</listOrg>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Real Time Tube Guitar Amplifier Simulation using WebAudio</title>
		<author>
			<persName><forename type="first">M</forename><surname>Buffa</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Lebrun</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 3rd Web Audio Conference (WAC&apos;17)</title>
		<meeting>3rd Web Audio Conference (WAC&apos;17)<address><addrLine>London, UK</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">WebAudio Virtual Tube Guitar Amps and Pedal Board Design</title>
		<author>
			<persName><forename type="first">M</forename><surname>Buffa</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Lebrun</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 4th Web Audio Conference (WAC&apos;18)</title>
		<meeting>4th Web Audio Conference (WAC&apos;18)<address><addrLine>Berlin, Germany</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2018">2018</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Towards an Open Web Audio Plug-in Standard</title>
		<author>
			<persName><forename type="first">M</forename><surname>Buffa</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Lebrun</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Kleimola</surname></persName>
		</author>
		<author>
			<persName><forename type="first">O</forename><surname>Larkin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Letz</surname></persName>
		</author>
		<idno type="DOI">10.1145/3184558.3188737</idno>
	</analytic>
	<monogr>
		<title level="m">Companion Proc. The Web Conference 2018 (WWW &apos;18)</title>
		<meeting><address><addrLine>Lyon, France</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2018-04-23">2018. April 23--27, 2018</date>
			<biblScope unit="page" from="759" to="766" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">WAP: Ideas for a Web Audio Plug-in Standard</title>
		<author>
			<persName><forename type="first">M</forename><surname>Buffa</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Lebrun</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Kleimola</surname></persName>
		</author>
		<author>
			<persName><forename type="first">O</forename><surname>Larkin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Pellerin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Letz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 4th Web Audio Conference (WAC&apos;18)</title>
		<meeting>4th Web Audio Conference (WAC&apos;18)<address><addrLine>Berlin, Germany</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2018">2018</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">A Review of Digital Techniques for Modeling Vacuum-Tube Guitar Amplifiers</title>
		<author>
			<persName><forename type="first">J</forename><surname>Pakarinen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">T</forename><surname>Yeh</surname></persName>
		</author>
		<idno type="DOI">10.1162/comj.2009.33.2.85</idno>
	</analytic>
	<monogr>
		<title level="j">Computer Music Journal</title>
		<imprint>
			<biblScope unit="volume">33</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="85" to="100" />
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">FAUST online IDE: dynamically compile and publish FAUST code as WebAudio Plugins</title>
		<author>
			<persName><forename type="first">S</forename><surname>Ren</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Letz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Orlarey</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Michon</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Fober</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 5th Web Audio Conference (WAC&apos;19)</title>
		<meeting>5th Web Audio Conference (WAC&apos;19)<address><addrLine>Trondheim, Norway</addrLine></address></meeting>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">Circuit Analysis of a Legendary Tube Amplifier: The Fender Bassman 5F6-A</title>
		<author>
			<persName><forename type="first">R</forename><surname>Kuehnel</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2005">2005. 2005</date>
			<publisher>Pentode Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">Electronics for Guitarists</title>
		<author>
			<persName><forename type="first">D</forename><surname>Denton</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2013">2013</date>
			<publisher>Springer-Verlag</publisher>
			<biblScope unit="volume">201</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Compiling Faust Audio DSP Code to WebAssembly</title>
		<author>
			<persName><forename type="first">S</forename><surname>Letz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Orlarey</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Fober</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 3rd Web Audio Conference (WAC&apos;17)</title>
		<meeting>3rd Web Audio Conference (WAC&apos;17)<address><addrLine>London, UK</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">On the Effect of Time Delays in Negative Feedback Amplifiers</title>
		<author>
			<persName><forename type="first">L</forename><forename type="middle">N</forename><surname>Alves</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">L</forename><surname>Aguiar</surname></persName>
		</author>
		<idno type="DOI">10.1109/ISCAS.2005.1464755</idno>
	</analytic>
	<monogr>
		<title level="m">Proc. 2005 IEEE Int. Symp. Circuits and Systems (IEEE ISCAS 2005)</title>
		<meeting>2005 IEEE Int. Symp. Circuits and Systems (IEEE ISCAS 2005)<address><addrLine>Kobe, Japan</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Digital Synthesis of Complex Spectra by Means of Multiplication of Nonlinear Distorted Sine Waves</title>
		<author>
			<persName><forename type="first">D</forename><surname>Arfib</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. AES</title>
		<imprint>
			<biblScope unit="volume">27</biblScope>
			<biblScope unit="issue">10</biblScope>
			<biblScope unit="page" from="757" to="768" />
			<date type="published" when="1979">1979</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Digital Waveshaping Synthesis</title>
		<author>
			<persName><forename type="first">M</forename><surname>Lebrun</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. AES</title>
		<imprint>
			<biblScope unit="volume">27</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="250" to="266" />
			<date type="published" when="1979">1979</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Using Faust DSL to Develop Custom, Sample Accurate DSP Code and Audio Plugins for the Web Browser</title>
		<author>
			<persName><forename type="first">S</forename><surname>Ren</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Letz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Orlarey</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Michon</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Fober</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Buffa</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Lebrun</surname></persName>
		</author>
		<idno type="DOI">10.17743/jaes.2020.0014</idno>
	</analytic>
	<monogr>
		<title level="j">J. AES</title>
		<imprint>
			<date type="published" when="2020">2020</date>
			<publisher>Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
