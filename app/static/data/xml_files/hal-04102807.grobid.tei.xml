<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="fr">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">More power to SPARQL: From paths to trees</title>
				<funder ref="#_28XRvHu">
					<orgName type="full">Agence Nationale de la Recherche</orgName>
					<orgName type="abbreviated">ANR</orgName>
				</funder>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Christos</forename><surname>Angelos</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Ioana</forename><surname>Anadiotis</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Madhulika</forename><surname>Manolescu</surname></persName>
						</author>
						<author>
							<persName><surname>Mohanty</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Angelos</forename><forename type="middle">Christos</forename><surname>Anadiotis</surname></persName>
							<email>angelos.anadiotis@oracle.com</email>
							<affiliation key="aff0">
								<address>
									<settlement>Oracle</settlement>
									<country key="CH">Switzerland</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Ioana</forename><surname>Manolescu</surname></persName>
							<email>ioana.manolescu@inria.fr</email>
							<affiliation key="aff1">
								<orgName type="institution" key="instit1">Inria</orgName>
								<orgName type="institution" key="instit2">Institut Polytechnique de Paris</orgName>
								<address>
									<country key="FR">France</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Madhulika</forename><surname>Mohanty</surname></persName>
							<email>madhulika.mohanty@inria.fr</email>
							<affiliation key="aff1">
								<orgName type="institution" key="instit1">Inria</orgName>
								<orgName type="institution" key="instit2">Institut Polytechnique de Paris</orgName>
								<address>
									<country key="FR">France</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">More power to SPARQL: From paths to trees</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">F8BBAEF4AC986B7E61A13F809A04C89C</idno>
					<note type="submission">Submitted on 22 May 2023</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.8.0" ident="GROBID" when="2024-04-12T14:51+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Graph Queries</term>
					<term>Keyword Search</term>
					<term>Exploratory Search</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>come from teaching and research institutions in France or abroad, or from public or private research centers. L'archive ouverte pluridisciplinaire HAL, est destinée au dépôt et à la diffusion de documents scientifiques de niveau recherche, publiés ou non, émanant des établissements d'enseignement et de recherche français ou étrangers, des laboratoires publics ou privés.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="fr">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Knowledge Graphs (KGs) like Yago, DBPedia and Freebase form the backbone of many applications ranging from search engines, business intelligence to question answering. The RDF data model is the most common way to represent the KGs. They comprise subject-predicate-object (SPO) triples where subjects and predicates are resources, while objects are either resources, e.g., ElvisPresley, or literal values like strings, numbers, and dates. Thus, a KG has subjects and objects as its nodes, connected by relations as directed edges. KGs can be queried using SPARQL, with Basic Graph Patterns (BGPs) at its core. As RDF graphs typically lack a prescriptive schema, their structure may be complex. This makes it difficult for users to query KGs when they ignore the structure of the relationships between node groups that interest them. For example, consider the KG in Figure <ref type="figure" target="#fig_0">1</ref>. A journalist may be interested in finding the connections between three groups of nodes: (i) US entrepreneurs, (ii) French entrepreneurs and (iii) French politicians, regardless of the structure and directionality of these connections. Current graph query languages, e.g., SPARQL, do not support expressing such a query, which is however useful when combining some criteria users have in mind ("US entrepreneurs", etc.) with graph structure discovery.</p><p>We propose to demonstrate the RelSearch system, enabling users to explore a KG, even when they cannot specify the exact labels or structure of these connections. RelSearch (i) extends the SPARQL syntax to support Connecting Tree Patterns (CTPs) alongside BGPs, (ii) efficiently executes the extended queries, and (iii) allows users to customize results by freely choosing the scoring function to use for ranking CTP results (thus, the extended query results), and several filters on their results. Scoring is important, because some paths are much more interesting than others, e.g., the journalist asking the above query is more interested to find that "Elon" is a parent of "Doug", than to find both are French (which was specified in the query). Being orthogonal wrt the score function is important, since it has been shown <ref type="bibr" target="#b3">[4]</ref> that different applications and information needs are best served by different functions. These may privilege: node closeness, semantic coherence (or, on the contrary, diversity) on the edge labels in the connection, ranks of nodes along the connections, etc.</p><p>2 Framework: extending SPARQL for connection search SPARQL queries may contain BGPs and/or Property Path Queries (PPQs). A BGP is a set of triple patterns, each of whose components may be a variable or a constant (URI or literal); BGP triples are connected by shared variables. A PPQ is a regular path query over the RDF graph; it allows checking (only) the presence of paths whose labels (property) match a regular expression, between query variables. Note that a PPQ does not allow the any regular expression, and can only combine user-specified properties. We extend SPARQL as follows: CT Pattern A connecting tree pattern (CTP, in short) is a tuple of the form: g = (g 1 , g 2 , . . . , g m , v m+1 ) where each g i , 1≤i≤m is an URI or a variable and v m+1 is a variable. All variables g 1 , . . . , g m , v m+1 are pairwise distinct.</p><p>CTPs are used to find connections among nodes: when replacing each g i with a graph node, v m+1 is bound to a subtree of G, having the g i s as leaves. Formally: Set-based CTP result Let g = (g 1 , . . . , g m , v m+1 ) be a CTP pattern and S 1 , . . . , S m be sets of G nodes, called seed sets. The result of g based on S 1 , . . . , S m , denoted g(S 1 , . . . , S m ), is the set of all (s 1 , . . . , s m , t) tuples such that s 1 ∈ S 1 , . . ., s m ∈ S m and t is a minimal subtree of G containing the nodes s 1 , . . . , s m . Here, minimal means: (i) removing any edge from t disconnects it and/or removes some s i from t, and (ii) t contains only one node from each S i .</p><p>Extended Query An extended query (EQ) consists of SPARQL BGPs, PPQs and/or CTPs. Its semantics is as follows. (i) When a g i variable from a CTP appears also in some BGPs and/or PPQs, the respective seed set S i is formed of all the nodes that (as per SPARQL semantics) match, simultaneously, the respective BGPs and PPQs. If a CTP variable g j does not appear in any other place in the query, S j consists of all the nodes in the KG. (ii) The EQ result is obtained by joining the BGP/PPQ results (seen as a table, binding variable to nodes) with the set-based results of all the CTPs in the EQ. For example, Figure <ref type="figure" target="#fig_0">1</ref> shows the EQ seeking the connections between US entrepreneurs, French entrepreneurs and French politicians (at the top right). On the KG shown at left, the RelSearch screenshot in Fig. <ref type="figure" target="#fig_0">1</ref> also shows a sample connecting tree, matching the variable ?w.</p><p>Our CTPs consider the graph undirected. This ensures that we do not miss any connections just because edge directions are not aligned. In our example, the CTP result connecting "Alice", "Falcon" and "Carole" via "National Liberal Party" and "OrgC" can only be found by considering edges in both directions.</p><p>CTP filters A CTP can have a very large number of results. Consider a KG of 2N triples over N + 1 nodes (labeled 1, 2, and so on). Each node i is connected to i + 1 by a triple whose property is a, and to the node i -1 through a property b. If v 1 is bound to 1 and v 2 to N+1, the CTP (v 1 , v 2 , v 3 ), asking for all the connections between the end nodes, has 2 N solutions, or 2 |E|/2 , which grows exponentially in |E| = 2N , the number of KG triples. Observe that if we allowed only unidirectional paths, there would be only N +1 results, rooted at each node. Thus, matching CTPs regardless of the edge direction may drastically increase the number of CTP results; in some cases, computing all the CTP results may be unfeasible. To control the amount of effort spent evaluating CTPs, we also provide a set of orthogonal filters which allow to restrict set-based CTP results. Specifically, adding UNI for a CTP indicates that only unidirectional trees are sought, that is: a tree t, as in Def. 2, must have a root node, from which a directed path goes to each seed node in t. Specifying a set of labels {l 1 , l 2 , . . . , l k } for a CTP indicates that the edges in any result of that CTP must have labels from the given set. Indicating a MAX n for a CTP indicates that only trees of at most n edges are sought. Further, a score function σ can be used to assign a real number σ(t) (the higher, the better) to each connecting tree, measuring their interestingness to users. Using TOP k, one can restrict the CTP result to those having the k-highest σ scores. Finally, a practical way to limit the evaluation of a CTP is to specify a timeout T , that is, a maximum allowed evaluation time.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">System and Demonstration Scenario</head><p>RelSearch relies on the ConnectionLens <ref type="bibr" target="#b2">[3]</ref> system for storing the KG in a PostgreSQL table graph(gID, s, p, o), heavily indexed. RelSearch extends a SPARQL parser to incorporate the CTP atoms. The query execution engine is implemented in Java 11; the CTP evaluation algorithms <ref type="bibr" target="#b1">[2]</ref> are integrated within ConnectionLens; BGPs are evaluated within Postgres.</p><p>We demonstrate RelSearch over two real-world datasets, a 6M edges subset of YAGO3, and a 18M edges subset of DBPedia. Users write their own queries and inspect the results, including connections shown as trees in the GUI. They can also select multiple filters for the CTPs -changing the number of results shown, the score function to be used to rank the trees, any specifications of permitted labels, direction of edges in the results and also limit the size of the results. https://team.inria.fr/cedar/projects/relsearch/ outlines our demo.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Related Work</head><p>Many works address KG exploration; a recent categorization can be found in <ref type="bibr" target="#b6">[7]</ref>. Such works have focused on: graph summarization, query by example, query suggestion and refinement, etc. Keyword search systems over KGs <ref type="bibr" target="#b7">[8,</ref><ref type="bibr" target="#b8">9]</ref> return trees connecting nodes matching user-specified keywords. However, users cannot specify more conditions on nodes to be connected, e.g., "is of type Person, has age &lt; 20, and their name matches Jane'". Symmetrically, query languages do not currently support searching for connecting trees. SPARQL allows checking for (but not returning) paths connecting nodes; property graph languages such as GPML (not implemented) <ref type="bibr" target="#b4">[5]</ref> and Neo4j's Cypher return paths, however, the latter does not scale <ref type="bibr" target="#b1">[2]</ref>. RPQProv <ref type="bibr" target="#b5">[6]</ref> uses recursive SQL to return path labels; JEDI <ref type="bibr" target="#b0">[1]</ref> returns unidirectional paths (only). Going beyond paths, RelSearch combines SPARQL's expressive power with the ability to return trees connecting an arbitrary number of node sets, traversing edges in any direction, independent of a scoring function.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 1 .</head><label>1</label><figDesc>Fig. 1. Sample KG (left), and RelSearch demo screenshot (right).</figDesc><graphic coords="3,134.77,115.84,350.17,136.21" type="bitmap" /></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div><p>Acknowledgments This work has been funded by the <rs type="funder">AI Chair SourcesSay</rs> (<rs type="grantNumber">ANR-20-CHIA-0015-01</rs>) project.</p></div>
			</div>
			<listOrg type="funding">
				<org type="funding" xml:id="_28XRvHu">
					<idno type="grant-number">ANR-20-CHIA-0015-01</idno>
				</org>
			</listOrg>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Top-k diversification for path queries in knowledge graphs</title>
		<author>
			<persName><forename type="first">C</forename><surname>Aebeloe</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Setty</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Montoya</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Hose</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ISWC</title>
		<imprint>
			<date type="published" when="2018">2018</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Integrating connection search in graph queries</title>
		<author>
			<persName><forename type="first">A</forename><surname>Anadiotis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Manolescu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Mohanty</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICDE</title>
		<imprint>
			<date type="published" when="2023">2023</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">ConnectionLens: Finding connections across heterogeneous data sources (demonstration)</title>
		<author>
			<persName><forename type="first">C</forename><surname>Chanial</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Dziri</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Galhardas</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">PVLDB</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="issue">12</biblScope>
			<date type="published" when="2018">2018</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">An empirical performance evaluation of relational keyword search techniques</title>
		<author>
			<persName><forename type="first">J</forename><surname>Coffman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">C</forename><surname>Weaver</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE TKDE</title>
		<imprint>
			<biblScope unit="volume">26</biblScope>
			<biblScope unit="issue">1</biblScope>
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">Graph pattern matching in GQL and SQL/PGQ</title>
		<author>
			<persName><forename type="first">A</forename><surname>Deutsch</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Francis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Green</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Hare</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Libkin</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2022">2022</date>
			<publisher>SIGMOD</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">On implementing provenanceaware regular path queries with relational query engines</title>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">C</forename><surname>Dey</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Cuevas-Vicenttín</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Köhler</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">EDBT</title>
		<imprint>
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Knowledge graph exploration systems: are we lost?</title>
		<author>
			<persName><forename type="first">M</forename><surname>Lissandrini</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Mottin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Hose</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">B</forename><surname>Pedersen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">CIDR</title>
		<imprint>
			<date type="published" when="2022">2022</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">A survey of algorithms for keyword search on graph data</title>
		<author>
			<persName><forename type="first">H</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">C</forename><surname>Aggarwal</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Managing and Mining Graph Data</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2010">2010</date>
			<biblScope unit="volume">40</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Keyword search on large graphs: A survey</title>
		<author>
			<persName><forename type="first">J</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Yao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Data Sci. Eng</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="142" to="162" />
			<date type="published" when="2021">2021</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
