<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Poster: Reducing Data Leakage on Personal Data Management Systems</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Robin</forename><surname>Carpentier</surname></persName>
							<email>robin.carpentier@uvsq.fr</email>
							<affiliation key="aff0">
								<orgName type="institution">Univ. Versailles St-Q</orgName>
								<address>
									<settlement>-en-Yvelines</settlement>
									<country key="FR">France</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Sandu</forename><surname>Iulian</surname></persName>
							<email>iulian.sandu-popa@uvsq.fr</email>
							<affiliation key="aff1">
								<orgName type="institution">Univ. Versailles St-Q</orgName>
								<address>
									<settlement>-en-Yvelines</settlement>
									<country key="FR">France</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><surname>Popa</surname></persName>
							<affiliation key="aff1">
								<orgName type="institution">Univ. Versailles St-Q</orgName>
								<address>
									<settlement>-en-Yvelines</settlement>
									<country key="FR">France</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Nicolas</forename><surname>Anciaux</surname></persName>
							<email>nicolas.anciaux@inria.fr</email>
							<affiliation key="aff2">
								<orgName type="institution">Inria Saclay</orgName>
								<address>
									<country key="FR">France</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Poster: Reducing Data Leakage on Personal Data Management Systems</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">D84A719AA4ED158C6257665B5128350C</idno>
					<idno type="DOI">10.1109/EuroSP51992.2021.00057</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.8.0" ident="GROBID" when="2024-04-12T14:48+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract/>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Introduction</head><p>Over the past decade, successive steps have been taken to empower individuals with new legal and technical means, from smart disclosure initiatives to the right to data portability of the GDPR and the new notion of data altruism enacted in the EU <ref type="bibr" target="#b4">[5]</ref>. The ultimate goal is to enable individuals to collect and share their personal information, for their own good and broader societal benefits, unlocking innovative usages when crossing multiple data sources from one or many users. The technical corollary of this movement is the emergence of personal data management systems (PDMS) that allow individuals to assemble their personal data under their control, with products such as Digi.me, Cozy Cloud or Solid/PODS, as well as initiatives like Mydata.org, supported by data protection agencies.</p><p>A viable PDMS solution needs to fulfill two major (but conflicting) objectives: security and extensiveness. Indeed, given the particular ecosystem that the PDMS paradigm creates by concentrating all personal data on the user's side, security is of paramount importance. PDMS must protect data from typical privacy threats (e.g., data snooping and secondary uses of data). As well, an important specificity of PDMS is that applications "move" to the data, as opposed to personal data migrating to remote services -as in existing cloud services-which also raises security concerns since leakages of personal data by malicious applications on end-users devices are common.</p><p>Extensiveness is equally important, as a viable PDMS solution should cover all major functionalities of the personal data life cycle, from collection to storage, retrieval, individual and collective exploitation of personal data. Extensiveness should also allow individuals to benefit from novel and advanced data-driven processing. Big personal data computing lies in the cross-analysis of various types of personal data (e.g., data series -location and quantifiedself data-, images) by means of data mining, machine learning and artificial intelligence algorithms. Hence the need to support an open ecosystem of applications running on a potentially untrusted environment.</p><p>On the bright side, one can leverage Trusted Execution Environments (TEEs) to achieve a trustworthy platform. With their recent democratization (e.g., Intel SGX, ARM TrustZone, AMD SEV), TEEs are prime candidates for building an extensive and secure PDMS <ref type="bibr" target="#b0">[1]</ref>, on which trusted user-side processing can be established, particularly due to the security properties they offer in terms of isolation <ref type="bibr" target="#b6">[7]</ref>. Recent solutions have been proposed to preserve TEE isolation for data-intensive computations in the presence of side channels (e.g., memory, timing) attacks, resorting to oblivious memory access structures (e.g., <ref type="bibr" target="#b7">[8]</ref>) or differential privacy (e.g., <ref type="bibr" target="#b8">[9]</ref>). As well, several SQL database engines have recently been adapted to SGX enclaves (e.g., EnclaveDB <ref type="bibr" target="#b5">[6]</ref>, StealthDB <ref type="bibr" target="#b3">[4]</ref>) to provide data confidentiality, integrity and freshness. In our work, we also assume a basic data management engine to store personal data and regulate the access and the data flow based on simple access control policies.</p><p>However, there are important limitations since these works assume that the code running inside the TEE is trusted, which contradicts with an extensible platform. Our goal is to control the potential information leakage in the legitimate query results, computed by untrusted code extensions running data-oriented functions with access to large portions of the personal database. We favor a generic approach, independent of any semantic analysis of the processing code used or the result produced.</p><p>In Section 2, we propose an architecture dealing with the tension between security and extensiveness and formulate the security hypotheses and the corresponding threat model. Different from existing SGX-based solutions, we achieve extensiveness for advanced data processing through code extensions running inside other enclaves under the control of a trusted core engine.</p><p>Our second contribution, in Section 3, is to discuss possible security mechanisms that can be automatized within a PDMS platform to further reduce the private data leakage through legitimate computation results with basic aggregate computations, and analyze their security benefits, limitations and cost with an SGX implementation. To our knowledge, this is the first work to propose such solutions which are complementary to solutions based on code or application auditing. Finally, Section 4 proposes some further work stemming from our current results.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">PDMS Architecture and Trust Model</head><p>Designing an extensive and secure PDMS architecture preserving usage and compliant with the expected security properties defined above is a significant challenge, given the fundamental tension between security (small trusted code base) and extensiveness (rich data-driven tasks). In particular, the code extensions cannot be part of a trusted code base (TCB) for the PDMS. To solve this problem, we propose a three-layer architecture where Untrusted Apps on which no security assumption is made, communicate with a minimal Secure Core implementing basic operations on personal data extended with Isolated Data Tasks.</p><p>Secure Core. The Core is a secure subsystem that constitutes a TCB. It is ideally minimal, inextensible (po-tentially proven correct by formal methods) and isolated from the rest of the system. It must provide all basic operations required to ensure the confidentiality, integrity, and resilience of PDMS data. It must be the sole entry point to manipulate data. The Core must thus implement a data storage module, a policy enforcement module to control access to data by other layers of the architecture and a communication manager for securing data exchanges between layers, with Apps and third parties. Isolated Data Tasks. Data tasks are introduced as a means to support code extensions needed to deal with application-specific personal data management outside of the Core. The idea is to control the execution of extensions by <ref type="bibr" target="#b0">(1)</ref> splitting their execution into different isolated Data tasks to maintain control on the data accessed by the Core and the results delivered to the Apps to limit side effects in terms of data leakage, and (2) scheduling and verifying the execution of the different Data tasks by the Core so that security and privacy can be enforced globally.</p><p>Untrusted Apps. The need to run a wide and diverse range of applications in user environments (e.g., a web browser), leads to not making any security assumptions on the applications. They consequently only manipulate authorized data resulting from Data tasks, but have no privilege on raw personal data.</p><p>Security hypotheses. To ensure the security of our architecture, we make three hypotheses.</p><p>H1. Isolated enclave execution. All architecture components manipulating sensitive data (i.e., the Core and all Data tasks) run inside TEE enclaves.</p><p>H2. Confined Data task execution. Besides running in an isolated enclave, the Data task programs are confined using an in-enclave sandbox which prevents voluntary data leakages from the Data task to the untrusted execution environment. Such in-enclave sandbox can be obtained using existing software such as Ryoan <ref type="bibr" target="#b1">[2]</ref> or SGXJail <ref type="bibr" target="#b9">[10]</ref> which provide means to restrict enclave operations (bounded address space and filtered syscalls).</p><p>H3. Secure data exchange. Each Data task program is authenticated by the Core using TEE attestation ensuring that the Core communicates only with the expected Data task running within a sandboxed enclave.</p><p>H1 prevents the untrusted environment from accessing sensitive PDMS data at runtime. H2 prevents a malicious Data task from any voluntary -direct-information disclosure outside the PDMS (e.g., by writing to untrusted memory). H1, H2 and H3 ensure that the only channel between the PDMS and Apps is through the Core.</p><p>Thus, the Core is the only module capable of declassifying the result of a Data task's computation. However, given the minimality requirement, we cannot assume the Core is capable of checking code or results semantics.</p><p>Threat model. We consider an attacker, controlling the untrusted execution environment and the code of Apps and Data tasks, whose goal is to obtain the maximum amount of personal database objects from a PDMS. Since the only data communication channel is through results declassification, the attacker will exploit it as a secondary channel to conduct the attack.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">Proposed Solution for Reducing Leakage</head><p>Our goal is to provide techniques for reducing the attack surface of the legitimate declassification channel of results between the Core and Apps. We do not impose any usage limitations (e.g., obfuscated results or fixing a query budget for Apps), but for simplicity we focus on the case of functions producing fixed-size results like aggregates.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1.">Computation Model</head><p>The personal database securely hosted by the Core is a set O of data objects of any type (tabular, time series, GPS traces, documents, images). Applications are granted results of aggregate functions evaluated over O according to predefined access control policies {&lt; a, f, σ &gt;} accepted by the PDMS owner and enforced by the Core, where a is a given App with granted execution on a given aggregate function f on a subset O σ ⊆ O of database objects. σ stands for a selection predicate on objects metadata, e.g., date/type, evaluated by the Core access control module. To evaluate f , the Core launches a Data task DT f running the code of f and provides it with O σ . DT f achieves the computation and returns a result r to the Core which can be declassified to a.</p><p>The aggregate functions f that we consider can be represented by f (O σ ) = agg {cmp(o)} o∈Oσ , where cmp is a potentially complex computation applied on each object of O σ and agg is an aggregate (or similar) function that produces fixed-length results. For instance, cmp can compute the length of a GPS trace or the integral of a time series indicating the electricity consumption, while agg can be a typical aggregate function (sum, average, min) or similar (top-k or k-means). Although basic, the considered computation covers interesting use cases in the PDMS context, e.g., computing the user's electricity bill, statistics concerning physical activities, etc.</p><p>We consider aggregates producing results of n bits with n |O| b , where |O| b is the size of any object in bits. Hence, an attacker has to access (many) successive results to obtain large sets of private database objects.</p><p>In the basic approach, cmp and agg are evaluated by a single Data task DT agg,cmp receiving O σ as input. A leak occurs each time DT agg,cmp produces a result deemed legitimate by the Core -then sent to aand from which objects in O σ can be deduced. Since the attacker controls the function code, instead of expected comp and agg, a leakage function f leak can be implemented, to maximize the leakage produced by consecutive queries. For example, f leak can (i) sort the input set O σ , (ii) identify the n bits next to the -previous-leak and consider them as thenew-leak; (iii) send leak as the result to the Core. The attacker then reconstructs O σ by assembling the received leak resulting form consecutive evaluations.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.">Security Building Blocks</head><p>We introduce three security elements for a comprehensive solution to prevent leakage of large data sets.</p><p>Stateless Data tasks. An important lever that a malicious Data task can exploit is data persistency, as keeping a "state" between successive executions maximizes leakage -in the example above leak is kept to avoid leaking the same data twice-. In our system, persistent states can be stored without hurting the security hypotheses, e.g., via the PDMS database or secure file system.</p><p>A first element is to rely on stateless Data taskswithout negative impact on usage as database queries are evaluated independently-. Stateless nature extends confinement (see H2) by preventing access to the PDMS database or secure storage (e.g., SGX protected file system library). A stateless Data task is instantiated for the sole purpose of answering a specific function call/query, after which it must be terminated and its RAM wiped. On SGX, this can be achieved by destroying the Data task's enclave.</p><p>Deterministic Data tasks. An attacker can also exploit randomness to increase leakage. For example, at each execution, f leak can select a random fragment of O σ to produce a new leak with high probability -even if the same query is run on the same input-.</p><p>A second element is thus to impose reproducible Data tasks, i.e., producing the same result for the same function code (agg and cmp) run on the same input (O σ ). The in-enclave sandbox can be leveraged to provide this property by preventing access to any source of randomness, e.g., syscalls to random APIs or timer/date. Virtual random APIs are provided to preserve legitimate uses, e.g., the need for sampling, and are "reproducible", e.g., random numbers are forged in the Core using a seed based on function code and input set (seed = hash(agg||cmp||O σ For efficiency, the Core could store results of Data task calls to respond to subsequent invocations of the same Data tasks on the same inputs.</p><p>Circumscribed leakage at objects level. Since the same function can be evaluated on different inputs by changing the selection predicate σ, the attacker can leak new data with each new query, regardless if Data tasks are stateless or deterministic. To preclude this kind of attack, we enforce a deterministic leakage at the object level.</p><p>A third security element is to split the execution into several Data tasks scheduled by the Core. First, a set of Data tasks DT i cmp = DT cmp (P i ), i ∈ [1, m], are instantiated and each evaluates cmp on one partition</p><formula xml:id="formula_0">{P i } i∈[1,m] of O σ . Each DT i cmp produces a result set res i cmp = {cmp(o)} o∈Pi . We suppose that |cmp(o)| b &lt; |o| b . Second, a Data task DT agg is used to aggregate ∪ i∈[1,m]</formula><p>res i cmp . The remaining question is how many partitions m to create. Reducing m leads to fewer Data tasks which improves performances (see Section 3.3). On the other hand, increasing m leads to smaller partitions thus smaller leakage "surface". In the most secure scenario, each DT i cmp receives a single object o i and produces res i cmp = cmp(o i ). In this case the leak: (i) is a fixed value for each object since DT i cmp is deterministic; (ii) no object can be leaked entirely since |cmp(o i )| b &lt; |o| b .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3.">Performance Assessment</head><p>The proposed PDMS architecture provides increased security and extensiveness, but with the security building blocks, it introduces performance overheads. Our goal is to provide an initial assessment. We implement a PDMS platform on Intel SGX using OpenEnclave SDK <ref type="bibr" target="#b2">[3]</ref>, using SQLite as personal database hold in the Core. Figure <ref type="figure" target="#fig_0">1</ref> shows execution times for a typical aggregation query on tabular data with different data set sizes. As baseline, we use a single enclave running agg, cmp and the Core. This is an unrealistic approach as it assumes trusted code for the extensions agg and cmp. The other three implementations correspond to our approach which separates extensions from the trusted Core, within one or more untrusted Data tasks. The results indicate that: (i) the separation between Core and Data tasks introduces a relatively small overhead (25% on average); (ii) the execution time is largely dominated by the database query execution at the Core level, followed by the secure data transmission between Core and Data tasks; (iii) the use of more Data tasks slightly increases the cost of data transmission, but not the overall computation time. Our conclusion is that the overhead remains acceptable compared to the security benefits, which validates our approach.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">Conclusion and Roadmap</head><p>The next step is to quantify the potential leakage and explore performance trade-offs related to partition size, number of enclaves allocated at query time and reuse of previous results stored by the Core. Our solution already applies to simple use cases. Other types of computations need to be studied, e.g., the case of parametric queries when parameters are supplied by the App, which offers an additional side channel for the attacker.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 .</head><label>1</label><figDesc>Figure 1. Performance evaluation overview.</figDesc></figure>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Personal Data Management Systems: the security and functionality standpoint</title>
		<author>
			<persName><forename type="first">N</forename><surname>Anciaux</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Inf. Syst</title>
		<imprint>
			<biblScope unit="volume">80</biblScope>
			<date type="published" when="2019">2019</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Ryoan: a distributed sandbox for untrusted computation on secret data</title>
		<author>
			<persName><forename type="first">T</forename><surname>Hunt</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Zhu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Peter</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Witchel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Trans. on Computer Syst. (TOCS)</title>
		<imprint>
			<biblScope unit="volume">35</biblScope>
			<biblScope unit="issue">4</biblScope>
			<date type="published" when="2018">2018</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<ptr target="https://openenclave.io" />
		<title level="m">OpenEnclave SDK</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">StealthDB: a scalable encrypted database with full SQL query support</title>
		<author>
			<persName><forename type="first">D</forename><surname>Vinayagamurthy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Gribov</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Gorbunov</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Privacy Enhancing Technologies</title>
		<imprint>
			<date type="published" when="2019">2019</date>
			<biblScope unit="page" from="370" to="388" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">Proposal for a Regulation of the European Parliament and of the Council on European data governance (Data Governance Act)</title>
		<author>
			<orgName type="collaboration">EU Commission</orgName>
		</author>
		<idno>COM/2020/767</idno>
		<imprint>
			<date type="published" when="2020-10-25">25 October 2020</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">EnclaveDB: a secure database using SGX</title>
		<author>
			<persName><forename type="first">C</forename><surname>Priebe</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Vaswani</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Costa</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Sym. on Security and Privacy (S&amp;P)</title>
		<imprint>
			<date type="published" when="2018">2018</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">Trusted Execution Environment: What It is, and What It is Not</title>
		<author>
			<persName><forename type="first">M</forename><surname>Sabt</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Achemlal</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Bouabdallah</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2015">2015</date>
		</imprint>
		<respStmt>
			<orgName>TrustCom</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Hybridx: New hybrid index for volume-hiding range queries in data outsourcing services</title>
		<author>
			<persName><forename type="first">K</forename><surname>Ren</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICDCS</title>
		<imprint>
			<date type="published" when="2020">2020</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Shrinkwrap: efficient sql query processing in differentially private data federations</title>
		<author>
			<persName><forename type="first">J</forename><surname>Bater</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>He</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Ehrich</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Machanavajjhala</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Rogers</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">VLDB</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="issue">3</biblScope>
			<date type="published" when="2018">2018</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">SGXJail: Defeating Enclave Malware via Confinement</title>
		<author>
			<persName><forename type="first">S</forename><surname>Weiser</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Mayr</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Schwarz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Gruss</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Int. Symp. on Research in Attacks, Intrusions and Defenses (RAID)</title>
		<imprint>
			<date type="published" when="2019">2019</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
