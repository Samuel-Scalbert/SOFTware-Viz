<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">A Language and Methodology based on Scenarios, Grammars and Views, for Administrative Business Processes Modelling</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date type="published" when="2020-10-25">25 October 2020.</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Milliam</forename><surname>Maxime</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Zekeng</forename><surname>Ndadji</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">University of Dschang</orgName>
								<address>
									<settlement>Dschang</settlement>
									<country key="CM">Cameroon</country>
								</address>
							</affiliation>
							<affiliation key="aff1">
								<orgName type="institution">FUCHSIA Research Associated Team</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Maurice</forename><surname>Tchoupé</surname></persName>
							<email>maurice.tchoupe@univ-dschang.org</email>
							<affiliation key="aff0">
								<orgName type="institution">University of Dschang</orgName>
								<address>
									<settlement>Dschang</settlement>
									<country key="CM">Cameroon</country>
								</address>
							</affiliation>
							<affiliation key="aff1">
								<orgName type="institution">FUCHSIA Research Associated Team</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Clémentin</forename><forename type="middle">Tayou</forename><surname>Djamegni</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">University of Dschang</orgName>
								<address>
									<settlement>Dschang</settlement>
									<country key="CM">Cameroon</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Didier</forename><surname>Parigot</surname></persName>
							<email>didier.parigot@inria.fr</email>
							<affiliation key="aff2">
								<orgName type="institution">Inria</orgName>
								<address>
									<settlement>Sophia Antipolis</settlement>
									<country key="FR">France</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">A Language and Methodology based on Scenarios, Grammars and Views, for Administrative Business Processes Modelling</title>
					</analytic>
					<monogr>
						<imprint>
							<date type="published" when="2020-10-25">25 October 2020.</date>
						</imprint>
					</monogr>
					<idno type="MD5">3B5326E0A178420B292473639F63D46D</idno>
					<idno type="DOI">10.55969/paradigmplus.v1n3a1</idno>
					<note type="submission">Received: 2 September 2020 ⋅ Accepted: 24 October 2020 ⋅</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.8.0" ident="GROBID" when="2024-04-12T14:53+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>Administrative Process Modelling ⋅ LSAWfP ⋅ Grammars ⋅ Artifact ⋅ Accreditation</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>In Business Process Management (BPM), process modelling has been solved in various ways. However, there are no commonly accepted modelling tools (languages). Some of them are criticized for their inability to capture both the lifecycle, informational and organizational models of processes. For some others, process modelling is generally done using a single graph; this does not facilitate modularity, maintenance and scalability. In addition, some of these languages are very general; hence, their application to specific domain processes (such as administrative processes) is very complex. In this paper, we present a new language and a new methodology, dedicated to administrative process modelling. This language is based on a variant of attributed grammars and is able to capture the lifecycle, informational and organizational models of such processes. Also, it proposes a simple graphical formalism allowing to model each process's execution scenario as an annotated tree (modularity). In the new language, a particular emphasis is put on modelling (using "views") the perceptions that actors have on processes and their data.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Workflow technology also known as Business Process Management (BPM) technology, aims at automating business processes. A business process is a set of tasks that follow a specific pattern and are executed to achieve a specific goal <ref type="bibr" target="#b0">[1]</ref>. When such processes are managed electronically, they are called workflows. To automate business processes, workflow technology provides a clear framework composed of two major entities: (1) a workflow language for the description of such processes in a (generally graphical) format that can be interpreted by (2) a software system called Workflow Management System (WfMS). The role of WfMS is to facilitate collaboration and coordination of various actors involved in the distributed execution of processes' tasks: in this way, workflow technology reduces the automation of business processes to their modelling in workflow languages; process modelling (specification) is therefore a crucial phase of workflow management 1 .</p><p>Several tools have been developed to address process modelling. Among the most well-known are the BPMN standard <ref type="bibr" target="#b1">[2]</ref> and the YAWL language (Yet Another Workflow Language) <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b2">3]</ref>. Despite the significant research progress around these tools (often qualified as "traditional tools"), they are not unanimously accepted. Indeed, they are often criticized for not being based on solid mathematical foundations <ref type="bibr" target="#b3">[4]</ref>, for having a much too great expressiveness compared to the needs of professionals in the field (this complicates their handling and increases the related costs) <ref type="bibr" target="#b4">[5]</ref> and/or for not being intuitive <ref type="bibr" target="#b3">[4]</ref>.</p><p>Another important criticism often levelled at traditional workflow languages is the fact that they treat data (process information model) and users (part of process organizational model) as second-class citizens by highlighting tasks and their routing (process lifecycle model). To precisely remedy this, researchers have developed over the last two decades and under the initiative of IBM, the artifact-centric <ref type="bibr" target="#b5">[6]</ref> approach to the design and execution of business processes. This one proposes a new approach to workflow management by focusing on both automated processes and data manipulated using the concept of "business artifact" or "artifact" in short. A major shortcoming of artifact-centric models is that, after designing a given business process, it's difficult to manage it out of the context for which it was designed: specification and execution contexts (the WfMS on which it must be executed) are strongly coupled. In fact, in artifact-centric approaches the process specification is done with artifact modelling and artifacts are usually tailored to dedicated collaborative systems; process designers are then obliged to take into account certain details related to the workflow execution technique during the modelling phase: it is therefore difficult to consider these approaches exclusively as business process modelling tools since they are execution-context dependant.</p><p>Another mentioned shortcoming of existing process modelling approaches is that they concentrate the modelling of a given process into a single task graph. This does not allow designers to explicitly express the entire control flow of certain types of processes; in addition, the resulting specifications are generally not easy to read, to maintain and to evolve. These concerns were first raised by Wil M. P. van der Aalst et al. <ref type="bibr" target="#b6">[7,</ref><ref type="bibr" target="#b7">8]</ref>. All these shortcomings of traditional workflow languages confirm that there is still a need of scientific innovation in the field of business process modelling.</p><p>This paper presents a new Language for the Specification of Administrative Workflow Processes (LSAWfP) based on the concept of attributed grammars. LSAWfP is built in a more traditional way and then, unlike the artifact-centric approaches, it allows process modelling independently of a workflow execution technique. Opposed to traditional workflow languages, LSAWfP provides coherent tools to model both processes' lifecycle model, information model and organizational model. LSAWfP is particularly interested in administrative process 2 modelling as this type of process is the most frequently encountered in organizations <ref type="bibr" target="#b8">[9,</ref><ref type="bibr" target="#b9">10]</ref>. A given administrative process is naturally composed of a set of execution scenarios; an execution scenario (or simply scenario) is an ordered subset of activities that, once executed, lead the process to one of its end states, whether or not a business goal is achieved. In LSAWfP, the execution scenarios of a given administrative process are represented by a finite set S 1 ad , . . . , S k ad of so-called representative scenarios known in advance; representative scenario refers to any execution scenario that, in "combination" with some other representative scenarios, can generate a (potentially infinite) set of other scenarios (see sec. 3.2.1). Therefore, LSAWfP uses the scenario as the modelling unit: a given process modelling consists to the modelling of each of its execution scenarios. Designers can thus focus on the modelling and the maintenance of process' parts rather than handling the whole process at a time: this seems to be more intuitive, modular and easier.</p><p>To use LSAWfP, the process to be modelled must be well understood by the designer; its tasks and their sequences, the data they produce and the actors taking part in their execution must be known in advance (administrative processes). In addition to these elements related to the lifecycle, the information model and the organizational model of the processes, the designer must be able to identify its various execution scenarios. The modelling approach (methodology) of LSAWfP can be described as follows: from the observation that one can analyse the textual description of a given administrative process to exhibit all its possible representative scenarios leading to its business goals, LSAWfP proposes to model each of these scenarios by an annotated tree called a representative artifact in which, each node corresponds to a task of the process, and each hierarchical decomposition (a node and its sons) represents a scheduling of these tasks. From these representative artifacts, are derived an attributed grammar G called the Grammatical Model of Workflow (GMWf). The symbols of a given GMWf represent the process tasks and each of its productions represents a scheduling of a subset of these tasks; intuitively, a production given by its left and right hand sides, specifies how the task on the left hand side precedes (must be executed before) those on the right hand side. Thus, the GMWf of a process contains both its information model (modelled by its attributes) and its lifecycle model (thanks to the set of its productions). Once the GMWf is obtained, LSAWfP propose to add organizational information (organizational model) modelled by two lists: L P k which contains actors involved in the process and L A k which contains their accreditations. These lists aim at modelling actors, their roles and the different perceptions they have on a given process. Thus, with LSAWfP, the model (subsequently called a Grammatical Model of Administrative Workflow Process -GMAWfP -) of a given administrative process P ad is an executable grammatical specification given by a triplet</p><formula xml:id="formula_0">W f = (G, L P k , L A k ).</formula><p>The rest of this manuscript is organised as follows: after presenting some basic concepts, some related works and a running example (the peer-review process) in section 2, we present more formally and with illustrations, the proposed language in section 3 and we discuss its expressiveness. A presentation of some ongoing works is conducted in section 4; in particular, we briefly present one of our current works that reinforces the justification of the need to produce a new workflow language. Finally, section 5 is devoted to the conclusion.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Preliminaries and Related Works</head><p>In this section, we present some basic concepts related to workflow technology to facilitate the understanding of this paper. We then give a very brief state of the art on process modelling techniques. We finally introduce a process that will be used for illustration purposes throughout this paper.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Some Basic Concepts</head><p>Workflow typology: in the literature, there are several approaches to workflow classification. However, it is the approach that classifies them by the nature and the behaviour of automated processes that is most commonly used. According to the latter, workflows are divided into three groups: production workflows, administrative workflows and ad-hoc workflows <ref type="bibr" target="#b8">[9,</ref><ref type="bibr" target="#b9">10]</ref>. Production workflows are those automating highly structured processes that experience very little (or no) change over time. Administrative workflows apply to processes of which all cases are known; that means that tasks are predictable and their sequencing are simple and clearly defined. Ad-hoc workflows are more general; they automate occasional processes for which it is not always possible to define all the rules in advance.</p><p>The language presented in this paper is especially tailored for administrative workflows. One of the inherent characteristics of administrative business processes is the confidentiality that must sometimes be guaranteed on data and/or tasks that are executed. It is indeed easy to imagine administrative processes in which, various actors at any given time, have only a potentially partial perception of all the activities that have already and/or must be carried out: the perception that an actor has on the current state of a process is called his "view on the process". For example, in a peer-review process, a reviewer does not necessarily need to know if another reviewer has been contacted for the expertise of the article entrusted to him; and even if so, he should not necessarily know if the latter has already returned his report, etc. Similarly, when organising a journey for a Head of State, not all actors (secret services, civil office, doctor, presidential guard, etc.) have access to the same information which may include for example, tasks to be executed, their dates and states of execution, etc. Administrative workflows are characterized by the fact that all cases (tasks and their sequences), all actors and the permissions they have on tasks, etc. are known in advance. When specifying such processes, it should also be possible to model confidentiality constraints; for example, it should be possible to explicitly express the permissions which each actor has on each task. In LSAWfP, this requirement is treated as first-order concern with the help of a model called "accreditation", which allows to materialize the perception of each actor on the processes and their data. Business process specification: the specification of a business process is commonly referred to as a workflow model. According to <ref type="bibr" target="#b10">[11]</ref>, a workflow model consists of three main conceptual models: the organizational, informational and lifecycle models. The organizational model is used to express and classify the resources responsible for executing the tasks of the studied process. Generally, these are classified into roles to which tasks are assigned. The informational model is used to describe the structure of consumed and produced data during processes execution. Finally, the lifecycle model is used to describe the structure of each task, the coordination between them and consequently, the coordination between the various actors involved in their execution. The lifecycle model is generally expressed using a language and allows the expression of basic control flows (sequential, parallel, alternative and iterative) between tasks. Ideally, a workflow language should be able to allow workflow model designers to express these three conceptual models.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Related Works</head><p>There is a lot of work that has been already done in terms of process modelling. So, there is a plethora of workflow languages; the few presented here are intended to interest the reader.</p><p>In the survey <ref type="bibr" target="#b11">[12]</ref>, the authors group workflow languages into two categories: those based on graphical models (graph-based formalism), and the others based on rule specifications (rule-based formalism). In graph-based workflow languages, processes are specified using graphical models where tasks are represented as nodes, and control flow and data dependencies between tasks as arcs. In rule-based workflow languages, process logic is coded as a set of rules, each of which is associated with one or more business tasks and specifies their properties such as their pre and post conditions of execution.</p><p>BPMN and YAWL are graph-based workflow languages. The BPMN standard <ref type="bibr" target="#b1">[2]</ref> was initiated by the Business Process Management Initiative (BPMI) which merged with Object Management Group (OMG) in 2005. It is a simple formalism inspired by the statecharts. BPMN is informal: i.e, it does not have well-defined semantic, so, resulting specifications are difficult to analyse <ref type="bibr" target="#b3">[4]</ref>. The YAWL language (Yet Another Workflow Language) <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b2">3]</ref> is based on a formalism called WF-Net (Workflow Net) <ref type="bibr" target="#b9">[10]</ref>, derived from that of Petri nets. Unlike BPMN, YAWL has a solid mathematical basis that facilitates the automatic analysis of its process models.</p><p>As rule-based workflow languages, we can mention Event-Condition-Action (E-C-A) Business Rules <ref type="bibr" target="#b12">[13]</ref> and ADEPT <ref type="bibr" target="#b13">[14]</ref>. The language in <ref type="bibr" target="#b12">[13]</ref> is based on the E-C-A paradigm <ref type="foot" target="#foot_1">3</ref> ; an E-C-A rulebased process model to serve as an integration layer between multiple process modelling languages is provided. In the ADEPT multi-agent system, process logic is expressed in the so-called service definition language (SDL); the resulting model is such as at runtime, agents have sufficient freedom to take alternative execution paths (from the model) to complete the process goal. As mentioned in the introduction, for the last two decades, a lot of work on process modelling has been done on the artifact-centric paradigm <ref type="bibr" target="#b5">[6,</ref><ref type="bibr" target="#b15">16,</ref><ref type="bibr" target="#b16">17,</ref><ref type="bibr" target="#b17">18,</ref><ref type="bibr" target="#b18">19,</ref><ref type="bibr" target="#b19">20,</ref><ref type="bibr" target="#b20">21,</ref><ref type="bibr" target="#b21">22,</ref><ref type="bibr" target="#b22">23,</ref><ref type="bibr" target="#b23">24,</ref><ref type="bibr" target="#b24">25,</ref><ref type="bibr" target="#b26">26]</ref>. This paradigm was introduced by IBM through the work of Nigam and Caswell <ref type="bibr" target="#b5">[6]</ref>. It recommends that, when modelling processes, one should focus on modelling a data structure called artifact that can give information both on the execution state of a process instance at a given time, and on the "how" to make this state evolve. Hull et al. <ref type="bibr" target="#b17">[18]</ref> extends the artifact-centric model of <ref type="bibr" target="#b5">[6]</ref> to provide an interoperation framework in which data are hosted on central infrastructures named artifact-centric hubs. They propose mechanisms (including user views) for controlling access to these data. Lohmann and Wolf <ref type="bibr" target="#b18">[19]</ref> provide a choreography-like framework for artifact-centric interoperation. They abandon the fact of having a single artifact hub <ref type="bibr" target="#b17">[18]</ref> and they introduce the idea of having several agents which operates on artifacts. Some of those artifacts are mobile; thus, the authors provide a systematic approach for modelling artifact location and its impact on the accessibility of actions using a Petri net. Badouel et al. <ref type="bibr" target="#b22">[23,</ref><ref type="bibr" target="#b23">24]</ref> introduce a flexible framework for data-centric case management. Their model puts stress on modelling process data and users as first class citizens. As for LSAWfP, they use an attributed grammar (named Guarded Attribute Grammar -GAG -) as the mathematical foundation of their model. Some of the foundations of the artifact-centric paradigm come from the proclet model <ref type="bibr" target="#b6">[7,</ref><ref type="bibr" target="#b7">8]</ref>. In the latter, the authors provide a solution to the uniqueness of the task graph (which makes it unreadable and difficult to maintain) when modelling a given process. They introduce the concept of proclet; they thus propose to deal with several levels of granularity assigned to lightweight workflow processes (proclets) in charge of orchestrating their execution. The modelling of each level of granularity is therefore done using a smaller task graph. We find this vision very interesting. However, the notion of granularity manipulated in <ref type="bibr" target="#b6">[7]</ref> is not very intuitive and seems, as for artifact-centric models, intimately linked to the execution model of proclets. In the case of an administrative process P ad , we think it would be more affordable to partition its task graph according to a characteristic that is natural to it like its execution scenarios. Knowing that such a process is naturally composed of a set of execution scenarios and can be represented by a finite set S 1 ad , . . . , S k ad of representative scenarios (see sec. 3.2.1) known in advance, we propose to use the scenario (execution scenario) as the modelling unit.</p><p>With the advent of cloud computing, several studies on business process execution have proposed completely decentralized models that can be deployed on Peer-to-Peer architectures <ref type="bibr" target="#b27">[27,</ref><ref type="bibr" target="#b28">28,</ref><ref type="bibr" target="#b29">29]</ref>. The most current solutions tend to have the processes executed by blockchain-based systems <ref type="bibr" target="#b30">[30,</ref><ref type="bibr" target="#b31">31,</ref><ref type="bibr" target="#b32">32,</ref><ref type="bibr" target="#b33">33,</ref><ref type="bibr" target="#b34">34,</ref><ref type="bibr" target="#b35">35,</ref><ref type="bibr" target="#b36">36]</ref>. There is therefore a need to adapt workflow languages so that the processes they specify can be executed in a distributed manner on such systems. The language we propose is in line with this need.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">A Running Example: the Peer-Review Process</head><p>As running example, we will use the peer-review process. A brief description of it inspired by those made in <ref type="bibr" target="#b6">[7,</ref><ref type="bibr" target="#b22">23,</ref><ref type="bibr" target="#b24">25,</ref><ref type="bibr" target="#b26">26]</ref>, can be the following one:</p><p>-The process starts when the editor in chief (EC) receives a paper for validation; -Then, the EC performs a pre-validation after which he can accept or reject the submission for various reasons (subject of minor interest, submission not within the journal scope, noncompliant format, etc.); let us call this task "A";</p><p>-If he rejects the submission, he writes a report (task "B") then notifies the corresponding author (task "D") and the process ends;</p><p>-Otherwise, he chooses an associated editor (AE) and sends him the paper for the continuation of its validation; -The AE prepares the manuscript (task "C") and contacts simultaneously two experts for the evaluation of the paper (tasks "E1" and "E2"); if a contacted expert refuses to participate, the AE contacts another one (iteration on task "E1" or "E2"). Otherwise, the expert (referee) can start the evaluation;</p><p>-Each referee reads, seriously evaluates the paper (tasks "G1" and "G2") and sends back a report (tasks "H1" and "H2") and a message (tasks "I1" and "I2") to the AE;</p><p>-After receiving reports from all referees, the AE takes a decision and informs the EC (task "F ") who sends the final decision to the corresponding author (task "D").</p><p>From the description above, one can identify all the tasks to be executed, their sequencing, actors involved and the tasks assigned to them. For this case, four actors are involved: an editor in chief (EC) who is responsible for initiating the process, an associated editor (AE) and two referees (R1 and R2). Figure <ref type="figure" target="#fig_4">1</ref> shows the orchestration diagrams corresponding to the graphical description of this peer-review process using BPMN (Business Process Model and Notation) and WF-Net (Workflow Net). Each diagram resumes the main scenarios of the studied process. The purpose of this figure is to show the independence of our running example from a specific workflow language; in addition, we want the reader to bear in mind what the two workflow languages used in this figure offer in terms of process modelling tools and methodology in order to better understand the contributions of LSAWfP. It can be seen that with both formalisms, the modelling of all scenarios is tackled at the same time and process data is treated in background or not at all. With BPMN, the organizational aspect highlights the actors and the tasks assigned to them, but nothing more. The organizational aspect is absent with the WF-Net formalism; however, the control flow is more expressive because it highlights the different states of the process after the execution of each task. We have added a small caption for the uninformed reader; the bibliographical references on the used languages can also be a valuable aid to the understanding of this figure. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">A Language for the Specification of Administrative Workflow Processes (LSAWfP)</head><p>In this section, we present the new language LSAWfP that allows to specify administrative workflow processes independently of a workflow execution technique, and with the use of scenario as modelling unit.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Artifacts as Control Flow Graphs</head><p>Let's consider an administrative process P ad to be modelled. By definition (of administrative process), its set T n = {X 1 , . . . , X n } of tasks is known in advance. In traditional workflow languages like BPMN or WF-Net, the control flow between its tasks is represented using a directed graph that can contain cycles (see Figure <ref type="figure" target="#fig_4">1</ref>). Such a graph allows the modelling of the potentially infinite set<ref type="foot" target="#foot_2">4</ref> of P ad 's execution scenarios. Let's note however that each P ad 's execution scenario can also be modelled using an annotated tree t i called artifact. Indeed, starting from the fact that a given scenario S i ad consists of a subset T m ⊆ T n of m ≤ n tasks whose instances are to be executed in a specific order (in parallel or in sequence), one can represent S i ad as a tree t i in which each node (a task instance labelled X i ) potentially corresponds to a task X i ∈ T m of S i ad and each hierarchical decomposition (a node and its sons) corresponds to a scheduling: the task associated with the parent node must be executed before those associated with the son nodes; the latter must be executed according to an order -parallel or sequential -that can be specified by particular annotations " " (is sequential to) and "∥" (is parallel to) which will be applied to each hierarchical decomposition. The annotation " " (resp. "∥") reflects the fact that the tasks associated with the son nodes of the decomposition must (resp. can) be executed in sequence (resp. in parallel). To model iteration, nodes can be recursive in an artifact: i.e a node labelled X i may appear in sub-trees rooted by a node having the same label X i .</p><p>Considering the running example (the peer-review process), two of its execution scenarios can be modelled using the two artifacts art 1 and art 2 in figure <ref type="figure" target="#fig_5">2</ref>. In particular, we can see that art 1 shows how the task "Receipt and pre-validation of a submitted paper" assigned to the EC, and associated with the symbol A (see sec. 2.3), must be executed before tasks associated with the symbols B and D that are to be executed in sequence from the left to the right. Note that additional symbols called (re)-structuring symbols can be added in artifacts to correct the scheduling of tasks (we better explain this in section 3.2.2): this is the case for art 2 in which the symbol S1 has been added. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Representative Artifacts and Grammatical Model of Workflow</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.1">Representative Artifacts</head><p>As mentioned earlier (see sec. 3.1), the set of execution scenarios for a given administrative process can be infinite. This is the case of our running example process in which we can iterate on tasks E1 and E2 without limit; as each iteration on either E1 or E2 give rise to a new execution scenario, we thus generate an infinite set of execution scenarios. In these cases, the designer cannot list this set of scenarios in order to model each of them. This problem can be avoided by taking inspiration from the role played by the concept of vector spaces' basis in mathematics (algebra). In this sense, we can find a finite set τ = S 1 ad , . . . , S k ad of scenarios said to be representative and modelled be a finite set ζ = {t 1 , . . . , t k } of representative artifacts such that, any artifact representing an execution scenario can be expressed as a "combination" of some elements of ζ.</p><p>We designate by the expression nominal scenario of a given process, any scenario leading to a given business goal without iteration; in the same vein, scenarios in which at least one iteration have been made are called alternative scenarios. For a given process, the set of nominal scenarios is finite and the artifacts depicting each of these scenarios are part of the process representative artifacts. The other part of the process representative artifacts is determined much more technically, from the (potentially infinite) set of alternative scenarios. Concretely, when designing an alternative scenario artifact, the designer must prune it at each first iteration encountered: i.e, the designer must prune each branch of an alternative scenario artifact as soon as he encounters a node labelled for the second time, by a same label along a path starting from the root. By doing so, the designer does not redevelop a node into a subtree that has already been explored: thus, he does not loop endlessly on potential iterations and does not explore all alternative scenarios generated by those iterations. However, the resulting pruned artifact contains patterns (productions) that indicate how to construct the artifacts associated with the considered alternative scenarios: this is why the obtained pruned artifact is said to be representative.</p><p>More precisely, one could assume that to design the representative artifacts of a given business process, the designer begins by identifying the initial tasks of it (i.e., the tasks that can start one of its execution scenarios); each of these tasks will thus constitute the root of several representative artifacts. To construct the set arts X0 i of representative artifacts rooted in a given initial task X 0i , the designer will:</p><p>(1) Construct an artifact art having X 0i as the single node (root);</p><p>(2) Then, he will determine the set f ollow = X 1i 1 , . . . , X m1i 1 , . . . , X 1i n , . . . , X mni n of task combinations (each combination is either sequential or parallel <ref type="foot" target="#foot_3">5</ref> ) that can be immediately executed after the execution of X 0i . For each combination X 1i j , . . . , X mji j , the designer will replace the artifact art by a new artifact art j obtained by expanding the node X 0i of art such that in art j , the tasks X 1i j , . . . , X mji j are the child nodes of X 0i .</p><p>(3) It will then only remain to recursively develop (using the principle of ( <ref type="formula">2</ref>)) each leaf node of the new artifacts until representative artifacts (those that describe an execution scenario in its entirety) are obtained.</p><p>This construction principle emphasizes the fact that one does not loose information by pruning an artifact when encountering a given node X for the second time in the same branch. In such a case, it is not necessary to develop X a second time since the designer has enumerated (in several artifacts) all the possibilities (scenarios) of continuing the execution of the process after the execution of the task associated with X. As we will see in section 3.2.2, these possibilities will be coded in a grammar and thus, the execution scenarios characterized by several iterations on X, will indeed be specified in the language. When constructing a representative artifact, the pruning of a branch is therefore systematic when a node is encountered for the second time; no matter how many nodes generate an iteration in the same branch.</p><p>Figure <ref type="figure" target="#fig_5">2</ref> presents the five representative artifacts of our running example process. The artifacts art 1 and art 2 model the two nominal scenarios: art 1 models the scenario in which the EC directly rejects the paper while art 2 models the case where the paper is evaluated by referees (R1 and R2) without the AE having to contact more than two experts (no iteration on tasks E1 and E2). The artifacts art 3 , art 4 and art 5 represent the infinite set of alternative scenarios in this example: some of their subtrees (those represented by blue triangles) have been pruned. For illustration purposes, we put forward the pruning made by the designer on the node E2 (in green colour) of art 3 , which appeared for the second time in the same branch (the branch is highlighted in red colour).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.2">Grammatical Model of Workflow</head><p>From the finite set of representative artifacts of a given process, it is possible to extract an abstract grammar <ref type="foot" target="#foot_4">6</ref> that represents the underlying process's lifecycle model : it is this grammar that we designate by the expression Grammatical Model of Workflow (GMWf).</p><p>Let's consider the set {t 1 , . . . , t k } of representative artifacts modelling the k representative scenarios of a given process P ad of n tasks (T n = {X 1 , . . . , X n }). Each t i is a derivation tree for an abstract grammar (a GMWf) G = (S, P, A) whose set of symbols is S = T n (all process tasks) and each production p ∈ P reflects a hierarchical decomposition contained in at least one of the representative artifacts. Each production is therefore exclusively of one of the following two forms:</p><formula xml:id="formula_1">p ∶ X 0 → X 1 . . . X n or p ∶ X 0 → X 1 ∥ . . . ∥ X n . The first form p ∶ X 0 → X 1 . . . X n (resp. the second form p ∶ X 0 → X 1 ∥ . . . ∥ X n ) means</formula><p>that task X 0 must be executed before tasks {X 1 , . . . , X n } that must be (resp. can be) executed in sequence (resp. in parallel) from the left to the right. A GMWf can therefore be formally defined as follows:</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Definition 1 A Grammatical Model of Workflow (GMWf) is defined by G = (S, P, A) where :</head><p>-S is a finite set of grammatical symbols or sorts corresponding to various tasks to be executed in the studied business process;</p><p>-A ⊆ S is a finite set of particular symbols called axioms, representing tasks that can start an execution scenario (roots of representative artifacts), and -P ⊆ S × S * is a finite set of productions decorated by the annotations " " (is sequential to) and "∥" (is parallel to): they are precedence rules. A production P = X P (0) , X P (1) , ⋯, X P ( P ) is either of the form P ∶ X 0 → X 1 . . . X P , or of the form P ∶ X 0 → X 1 ∥ . . . ∥ X P and P designates the length of P 's right-hand side. A production with the symbol X as left-hand side is called a X-production.</p><p>Let's illustrate the notion of GMWf by considering the one generated from an interpretation of the representative artifacts for the peer-review process (see Figure <ref type="figure" target="#fig_5">2</ref>): the derived GMWf is G = (S, P, A) in which the set S of grammatical symbols is S = {A, B, C, D, S1, E1, E2, F, G1, G2, H1, H2, I1, I2} (see sec 2.3); the only initial task (axiom) is A (then A = {A}) and the set P of productions is<ref type="foot" target="#foot_5">7</ref> : There may be special cases where it is not possible to schedule the tasks of a scenario using the two (only) forms of production selected for GMWf. For example, this is the case for the peer-review process wherein task C precedes tasks E1, E2 and F , tasks E1 and E2 can be executed in parallel and precede F (see sec. 2.3). In such cases, the introduction of a few new symbols known as (re)structuring symbols (not associated with tasks) can make it possible to produce a correct scheduling. For the peer-review process example, the introduction of a new symbol S1 allows us to obtain the following productions: P 3 ∶ C → S1 F and P 4 ∶ S1 → E1 ∥ E2 which properly model the required scheduling and avoid the usage of the malformed production p ∶ C → E1 ∥ E2 F (see in Figure <ref type="figure" target="#fig_5">2</ref>, art 2 , the node S1 -in gray -). To deal with such cases, the previously given GMWf definition (definition 1) is slightly adapted by integrating the (re)structuring symbols; the resulting definition is as follows: <ref type="bibr">Workflow (GMWf)</ref> is defined by G = (S, P, A) wherein P and A refer to the same purpose as in definition 1, S = T ∪ T Struc is a finite set of grammatical symbols or sorts in which, those of T correspond to tasks of the studied business process, while those of T Struc are (re)structuring symbols.</p><formula xml:id="formula_2">P 1 ∶ A → B D P 2 ∶ A → C D P 3 ∶ C → S1 F P 4 ∶ S1 → E1 ∥ E2 P 5 ∶ E1 → G1 P 6 ∶ E2 → G2 P 7 ∶ E1 → E1 P 8 ∶ E2 → E2 P 9 ∶ G1 → H1 I1 P 10 ∶ G2 → H2 I2 P 11 ∶ B → ε P 12 ∶ D → ε P 13 ∶ F → ε P 14 ∶ H1 → ε P 15 ∶ I1 → ε P 16 ∶ H2 → ε P 17 ∶ I2 → ε</formula><formula xml:id="formula_3">Definition 2 A Grammatical Model of</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Modelling the Information and Organization Model of Processes with LSAWfP</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3.1">An Information Model for LSAWfP</head><p>As formalized in definition 2, a GMWf perfectly models the tasks and control flow of administrative processes (lifecycle model). In this section we discuss the specification of processes-related data (the information model) in LSAWfP.</p><p>It is not easy to model the structure of business processes data using a general type as they differ from one process to another. For the current work, tackling the processes data structure has no proven interest because it does not bring any added value to the proposed model since, we are not specifically interested in data modelling but rather in process modelling: a representation of these data using a set of variables associated with tasks is largely sufficient. However, it should be noted that in existing data-driven modelling approaches like the Guarded Attribute Grammar (GAG) model <ref type="bibr" target="#b23">[24,</ref><ref type="bibr" target="#b37">37,</ref><ref type="bibr" target="#b38">38]</ref>, each task comes equipped with a set of inherited attributes (terms over a ranked alphabet) and a set of synthesised attributes where: inherited attributes represents input data (i.e, necessary data for the associated task to be executed) while synthesised attributes represents output data (i.e, data that are produced after the task being executed). In addition, dependency relationships between data (attributes) are often specified.</p><p>In this work, the potentially manipulated data by a given process task is represented using a single attribute embedded in the nodes associated with it. This is more than enough to show that LSAWfP cares about processes' data (this is one of this paper's goals). In more specific (future) work, the form of this attribute can be simply refined (as in the GAG approach <ref type="bibr" target="#b23">[24,</ref><ref type="bibr" target="#b37">37,</ref><ref type="bibr" target="#b38">38]</ref>) to allow designers to better describe the nature of the manipulated data and their impact on processes. To formalize the taking into account of attributes, we update for the last time the definition of GMWf. We thus associate with each symbol, an attribute named status allowing to store all the data of the associated task; its precise type is left to the discretion of the process designer. The new definition of GMWf is thus the following one: <ref type="bibr">Workflow (GMWf)</ref> is defined by G = (S, P, A) wherein S, P and A refer to the same purpose as in definition 2. Each grammatical symbol X ∈ S is associated with an attribute named status, that can be updated when tasks are executed; X.status provides access (read and write) to its content. </p><formula xml:id="formula_4">Definition 3 A Grammatical Model of</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3.2">An Organizational Model for LSAWfP</head><p>Because business processes are generally carried out collectively, it is important to model actors and to set up mechanisms to ensure better coordination between them and to eventually guarantee the confidentiality of certain actions and data: this is the purpose of accreditation. The accreditation of a given actor provides information on its rights (permissions) relatively to each sort (task) of the studied process's GMWf. We propose here, a simple but non-exhaustive nomenclature of rights. It is inspired by the one used in UNIX-like operating systems. Three types of accreditation are therefore defined: accreditation in reading (r), writing (w) and execution (x).</p><p>1. The accreditation in reading (r): an actor accredited in reading on sort X must be informed of the execution of the associated task; he must also have free access to its execution state (data generated during its execution). We call an actor's view, the set of sorts on which he is accredited in reading.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">The accreditation in writing (w):</head><p>an actor accredited in writing on sort X can execute the associated task. The designation of the right to execute a task by the term accreditation in writing can be confusing. However, we consider that the execution of tasks is performed (manually and/or automatically) by human actors. At the end of a given task execution, the actor in charge of its execution must enter (write) the produced data into the system: he must have an accreditation in writing. To make it simple, any actor accredited in writing on a sort must necessarily be accredited in reading on it <ref type="foot" target="#foot_6">8</ref> .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">The accreditation in execution (x):</head><p>an actor accredited in execution on sort X is allowed to ask the actor who is accredited in writing in it, to execute it (realization of the associated task). This right is particularly appropriate for the modelling of interaction between actors: especially in the case of processes where it is important to know "who" can ask "who" to perform a given task. This is not a "delegation" of work, since there is no transfer of tasks, or of competencies. Work delegation can be the subject of more elaborate work on the LSAWfP organizational model.</p><p>More formally, an accreditation is defined as follows:</p><p>Definition 4 An accreditation A Ai defined on the set S of grammatical symbols for an actor A i , is a triplet</p><formula xml:id="formula_5">A Ai = A Ai(r) , A Ai(w) , A Ai(x) such that, A Ai(r) ⊆ S also called view of actor A i , is the set of symbols on which A i is accredited in reading, A Ai(w) ⊆ A Ai(r)</formula><p>is the set of symbols on which A i is accredited in writing and A Ai(x) ⊆ S is the set of symbols on which A i is accredited in execution.</p><p>The accreditations of various actors must be produced by the workflow designer just after modelling the scenarios in the form of representative artifacts. From the task assignment for the peerreview process in the running example (see sec. 2.3), it follows that the accreditation in writing of the EC is A EC(w) = {A, B, D}, that of the AE is A AE(w) = {C, S1, E1, E2, F } and that of the first (resp. the second) referee is A R1(w) = {G1, H1, I1} (resp. A R2(w) = {G2, H2, I2}). Since the EC can only execute the task D if the task C is already executed (see Figure <ref type="figure" target="#fig_5">2</ref>), in order for the EC to be able to ask the AE to execute this task, he must be accredited in execution on it; so we have A EC(x) = {C}. Moreover, in order to be able to access all the information on the peer-review evaluation of a paper (task C) and to summarize the right decision to send to the author, the EC must be able to consult the reports (tasks I1 and I2) and the messages (tasks H1 and H2) of the different referees, as well as the final decision taken by the AE (task F ). These tasks, added to A EC(w) <ref type="foot" target="#foot_7">9</ref> constitute the set A EC(r) = V EC = {A, B, C, D, H1, H2, I1, I2, F } of tasks on which he is accredited in reading. By doing so for each of other actors, we deduce the accreditations represented in Table <ref type="table" target="#tab_1">1</ref>.  A R1 = ({C, G1, H1, I1}, {G1, H1, I1}, ∅) R2</p><p>A R2 = ({C, G2, H2, I2}, {G2, H2, I2}, ∅)</p><p>Since the (re)structuring symbols are not associated with tasks and were only introduced to adjust the control flow, their execution neither requires nor produces data; they play the same role as gateways in traditional workflow languages. Therefore, the accreditation in writing and execution on them may be best left to the designer's appreciation; he will then make the assignment by referring to the execution model he will use later. To this end, he could use the same principle for the assignment of these accreditations in the case of concrete process' However, one could by default consider that all actors are accredited in reading on (re)structuring symbols; this would make these symbols visible to all of them and would guarantee that the adjustment of the control flow will be effective for all of them even if they have partial perceptions of the process.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Summary</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4.1">Definition of LSAWfP</head><p>To summarise, we state that in LSAWfP, an administrative process P ad is specified using a triplet W f = (G, L P k , L A k ) called a Grammatical Model of Administrative Workflow Process (GMAWfP) and composed of: a GMWf, a list of actors and a list of their accreditations. The GMWf is used to describe all the tasks of the studied process and their scheduling, while the list of accreditations provides information on the role played by each actor involved in the process execution. A GMAWfP can then be formally defined as follows:</p><p>Definition 5 A Grammatical Model of Administrative Workflow Process (GMAWfP) W f for a given business process, is a triplet W f = (G, L P k , L A k ) wherein G is the studied process (global) GMWf, L P k is the set of k actors taking part in its execution and L A k represents the set of these actors accreditations.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4.2">How to Model a Process with LSAWfP (Methodology)</head><p>To model a given process using LSAWfP, one must start from a textual description of the process and perform the four activities illustrated in Figure <ref type="figure" target="#fig_11">3</ref>. First, the set of tasks and their execution precedence relationships must be identified in order to produce a finite set of representative artifacts following the approach presented in section 3.2.1. The GMWf must then be deduced from the set of representative artifacts thus produced. Then, the different actors involved in the execution of the process being modelled must be identified, and finally, a coherent assignment of tasks to actors must be made and their respective accreditations deduced.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.5">On the Expressiveness of LSAWfP</head><p>Let's consider a specification W f = (G, L P k , L A k ) of a given business process P ad . As described above, its organizational model that expresses and classifies/assigns the resources that must execute its tasks is given by the couple (L P k , L A k ) of W f . Its informational model that describes the data structure being manipulated is given by the type of the attribute status associated with each task. Its lifecycle model that provides information on tasks and their sequencing (coordination) is given by the GMWf  G of W f . Thus, we can conclude that LSAWfP has the major expected characteristics of a workflow language according to <ref type="bibr" target="#b0">[1]</ref>.</p><p>The GMWf effectively allows the designers to specify all the basic control flows (sequential, parallel, alternative and iterative) which can be found in traditional workflow languages. Figure <ref type="figure" target="#fig_14">4</ref> gives for each type of basic control flow its BPMN notation and the corresponding notations (artifact and associated productions) in LSAWfP as described below:</p><p>-The sequential flow between two tasks A and B can be expressed either by a production p of the form p ∶ A → B, or by a production q of the form q ∶ S → A B in which S is a (re)structuring symbol (see Figure <ref type="figure" target="#fig_14">4</ref> As defined in this paper, LSAWfP (like traditional workflow languages) is only interested in modelling the inherent characteristics of administrative processes: i.e. tasks and their scheduling, data produced and consumed by tasks, actors in charge of executing the tasks and their roles. Aspects related to the execution of processes are not taken into account. LSAWfP therefore differs from the majority of artifact-centric languages. For example, the proclet approach <ref type="bibr" target="#b6">[7]</ref> requires the designer to take into account aspects related to communication (ports, channels, etc.) between the entities in  charge of executing tasks (the proclets). The approach in <ref type="bibr" target="#b18">[19]</ref> imposes to express also artifacts' locations (artifacts can be mobile or not). The expressiveness of LSAWfP does not allow the designer to specify such aspects.</p><p>The language LSAWfP has several interesting features in addition to its expressiveness; in particular:</p><p>-Its ability to represent scenarios using simple graphs (annotated trees) where existing languages use graphical formalisms (arbitrary graphs) that are more complex to implement;</p><p>-Its semi-declarative approach which would like the designer to describe the scheduling of a subset of tasks in a given production without expressing how the whole set of tasks is performed procedurally;</p><p>-Its usage of accreditations to model organizational aspects of process, making it particularly suitable for the modelling of administrative processes;</p><p>ParadigmPlus (2020) 1:3 -Its modular approach using the scenario as the modelling unit;</p><p>-Its solid mathematical foundation mainly made up of a grammatical model that can be studied formally in the same way as Petri nets, while benefiting from the executable character that is recognized in such a tool.</p><p>In Table <ref type="table" target="#tab_3">2</ref>, we make a preliminary comparative study of LSAWfP with some of the workflow languages (those that we find best related to LSAWfP) presented in section 2.2. The criteria we have retained are as follows:</p><p>-The mathematical foundation: we specify the mathematical tool that serves as a basis for the language.</p><p>-The modelling paradigm: we clarify whether the language advocates a procedural approach in which one says how the process is carried out or whether it advocates a declarative approach in which, tasks are described simply and their sequences are specified using rules.</p><p>-The modelling formalism: does language propose a graphic formalism (graph-based), a textual formalism using rules (rule-based), or both ?</p><p>-The modelling unit: either process to refer to the fact that the whole process is modelled at once, or user perception to refer to the fact that the process is cut and modelled according to the perceptions of each actor on it, or scenario to refer to the fact that each scenario of the process is modelled independently of the others. -The highlighted conceptual model: we specify which of the informational, organizational and lifecycle models is emphasized by the considered language.</p><p>-The implementation: here we specify whether the language has an implementation or not.</p><p>-The independence regarding an execution technique: we specify if the language does not take into account aspects related to the technique and execution environment of the modelled processes.</p><p>These comparison criteria are not exhaustive and it is necessary to conduct a further study in order to better compare these languages. It would also be more appropriate to consider several other languages in this comparative study.</p><p>The LSAWfP language as presented here, is not perfect. The first criticisms we can make are the following:</p><p>-The organizational and informational models of LSAWfP formalized in this paper are quite simple. They are sufficient for the basic work carried out here to present the main concepts taken into account by this new language. However, it would be wise in further work, to better study organizations with administrative processes to improve these models.</p><p>-The expressiveness of LSAWfP has been analysed on basic routings and its applicability has been established on some examples of processes among which, the one described in this paper. Since LSAWfP also has a solid mathematical foundation, we have no doubt about its applicability in practice. However, it is essential to evaluate it in the modelling of larger processes in terms of number of actors, tasks, events, distribution (geographical distribution), etc. to definitively validate it.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Ongoing Work on LSAWfP</head><p>There is still a lot of work to be done to refine our models and achieve our goal of producing a complete workflow management infrastructure (a complete and solid workflow language, tools to assist in the design and validation of processes, a workflow execution environment, etc.). In this section, we present some of the work being currently done on LSAWfP.</p><p>LSAWfP and workflow patterns: one avenue we are currently exploring is that of measuring the expressiveness of LSAWfP in relation to workflow patterns <ref type="bibr" target="#b39">[39]</ref>. This will allow us to characterize precisely the class of processes (beyond administrative processes) that this language can facilitate the modelling. To conduct this study, it is necessary to study in detail the different workflow patterns proposed in <ref type="bibr" target="#b39">[39]</ref>, then find examples of processes highlighting these patterns and finally, find out how LSAWfP can help to model these processes.</p><p>Towards a blockchain-like artifact-centric model of processes design and distributed execution based on cooperative edition of a mobile artifact: we are also working to produce an artifact-centric model of business process management. In this model inspired by the work of Badouel et al. on cooperative editing <ref type="bibr" target="#b40">[40,</ref><ref type="bibr" target="#b41">41,</ref><ref type="bibr" target="#b42">42,</ref><ref type="bibr" target="#b43">43,</ref><ref type="bibr" target="#b44">44,</ref><ref type="bibr" target="#b45">45]</ref>, the process tasks are executed by the various actors with the help of software agents that they pilot. These software agents are autonomous, reactive and communicate in peer to peer mode by exchanging an artifact (considered as "mobile") edited cooperatively. This mobile artifact is an annotated tree that represents the execution status of the process at each moment.</p><p>For this purpose, it contains information on the tasks already executed, on the data produced during these executions and on the tasks ready to be executed. When the mobile artifact is received at a given execution site, the local agent executes an update protocol whose purpose is to reveal the tasks ready to be executed locally by the local actor. The  execution of the tasks by the local actor is done using a specialized editor and can be assimilated to the edition of a structured document since its actions cause the received mobile artifact (the tree) to be updated, by expanding some of its leaf nodes into sub-trees and by assigning values to the "status" attributes of some other nodes. When all the tasks ready to be locally executed have been executed, the artifact is sent to other agents for further execution of the process if necessary.</p><p>To run the peer-review process described in section 2.3 with the artifact-centric model being built, four agents controlled by four actors (the EC, the AE, the R1 and the R agents) will be deployed. Figure <ref type="figure" target="#fig_16">5</ref> sketches an overview of exchanges that can take place between those four agents. The scenario presented there corresponds to the nominal one in which the paper is pre-validated by the EC and therefore, is analysed by a peer review committee. The artifact-centric execution is triggered on the EC's site by introducing (in this site) an artifact reduced to its root node. During its transit through the system, this artifact grows. Note that there may be situations where multiple copies of the artifact are updated in parallel; this is notably the case when they are present on site 3 (first referee) and 4 (second referee).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Conclusion</head><p>In this paper, we have proposed a new workflow language called LSAWfP which allows, through a simple grammar-based formalism, to specify administrative business processes. Like any traditional workflow language, LSAWfP allows to specify basic flows (sequential, parallel, alternative and iterative) that are generally found in workflow models; particularly, it focuses on the modelling of each of the process scenarios using an artifact. Moreover, LSAWfP allows to model the main characteris-</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><label></label><figDesc>. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head></head><label></label><figDesc>. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head></head><label></label><figDesc>. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>.</head><label></label><figDesc>. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Orchestration diagrams of the peer-review process.</figDesc><graphic coords="7,86.17,486.02,439.36,192.07" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Representative artifacts of a paper validation process in a peer-review journal.</figDesc><graphic coords="8,86.17,525.51,439.36,132.25" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head></head><label></label><figDesc>. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head></head><label></label><figDesc>. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>ParadigmPlus (2020) 1 : 3 .</head><label>13</label><figDesc>. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head></head><label></label><figDesc>. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>ParadigmPlus (2020) 1 : 3 .</head><label>13</label><figDesc>. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: The main activities that are carried out when modelling a process using LSAWfP.</figDesc><graphic coords="14,86.17,106.37,439.37,218.92" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_12"><head></head><label></label><figDesc>(a)); -The parallel flow between two tasks A and B is expressed using a production p of the form p ∶ S → A ∥ B (see Figure 4(b)); -The alternative flow (choice) between two tasks A1 and A2 is expressed using two productions p1 and p2 such that p1 ∶ S → A1 and p2 ∶ S → A2; S is a (re)structuring symbol expressing the fact that after "execution" of S, one must execute either task A1 or task A2 (see Figure 4(c)); -Iterative routing (repetition) is expressed using recursive symbols. Thus the productions p1 ∶ A → B, p2 ∶ B → C and p3 ∶ B → A express a potentially (transitive) iterative flow on the task A (see Figure 4(d)); P 7 ∶ E1 → E1 in the running example also expresses a direct iterative flow on E1 (see Figure 2).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_13"><head></head><label></label><figDesc>. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_14"><head>Figure 4 :</head><label>4</label><figDesc>Figure 4: Illustrating basic control flows with LSAWfP.</figDesc><graphic coords="15,130.11,106.37,351.50,384.93" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_15"><head></head><label></label><figDesc>. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_16"><head>Figure 5 :</head><label>5</label><figDesc>Figure 5: An overview of the artifact-centric execution of the peer-review process.</figDesc><graphic coords="18,86.17,106.37,439.36,296.06" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head></head><label></label><figDesc>. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</figDesc><table /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>Table 1 :</head><label>1</label><figDesc>Accreditations of the different actors taking part in the peer-review process.</figDesc><table><row><cell>Actor</cell><cell>Accreditation</cell></row><row><cell>EC</cell><cell>A EC = ({A, B, C, D, H1, H2, I1, I2, F }, {A, B, D}, {C})</cell></row><row><cell>AE</cell><cell>A AE = ({A, C, S1, E1, E2, F, H1, H2, I1, I2}, {C, S1, E1, E2, F }, {G1, G2})</cell></row><row><cell>R1</cell><cell></cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head></head><label></label><figDesc>. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</figDesc><table /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head>Table 2 :</head><label>2</label><figDesc>A comparison of LSAWfP with other workflow languages. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</figDesc><table><row><cell>Language</cell><cell>Mathematical</cell><cell cols="2">Modelling</cell><cell cols="2">Modelling for-</cell><cell cols="2">Modelling</cell><cell cols="2">Highlighted con-</cell><cell>Has</cell><cell>an</cell><cell>Is</cell></row><row><cell></cell><cell>foundation</cell><cell cols="2">paradigm</cell><cell>malism</cell><cell></cell><cell>unit</cell><cell></cell><cell cols="2">ceptual model</cell><cell>imple-</cell><cell>execution-</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>men-</cell><cell>context</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>tation</cell><cell>inde-</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>?</cell><cell>pendent</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>?</cell></row><row><cell>LSAWfP</cell><cell>Attributed</cell><cell>Semi-</cell><cell></cell><cell cols="2">Graph-based</cell><cell cols="2">Scenario</cell><cell cols="2">All the models</cell><cell>No</cell><cell>Yes</cell></row><row><cell></cell><cell>Grammars</cell><cell cols="2">procedural</cell><cell>(annotated</cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell></cell><cell cols="2">(when design-</cell><cell>trees)</cell><cell>and</cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell></cell><cell>ing</cell><cell>scenario</cell><cell cols="2">rule-based (the</cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell></cell><cell>trees)</cell><cell>and</cell><cell>GMWf)</cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell></cell><cell cols="2">semi-declarative</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell></cell><cell cols="2">(when deriving</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell></cell><cell cols="2">rules for the</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell></cell><cell>GMWf)</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>BPMN [2]</cell><cell>Arbitrary Di-</cell><cell cols="2">Procedural</cell><cell cols="2">Graph-based</cell><cell cols="2">Process</cell><cell cols="2">Organizational</cell><cell>Yes</cell><cell>Yes</cell></row><row><cell></cell><cell>rected Graphs</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell cols="2">and lifecycle mod-</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell cols="2">els, but studies</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell cols="2">extending them</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell cols="2">to other processes</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell cols="2">perspectives</cell><cell>do</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>exist</cell></row><row><cell>YAWL [1]</cell><cell>Petri Nets</cell><cell cols="2">Procedural</cell><cell cols="2">Graph-based</cell><cell cols="2">Process</cell><cell cols="2">Lifecycle models,</cell><cell>Yes</cell><cell>Yes</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell cols="2">but studies ex-</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell cols="2">tending them to</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>other</cell><cell>processes</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell cols="2">perspectives</cell><cell>do</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>exist</cell></row><row><cell>AWGAG</cell><cell>Guarded</cell><cell cols="2">Declarative</cell><cell>Rule-based</cell><cell></cell><cell>User</cell><cell>per-</cell><cell cols="2">Informational and</cell><cell>No</cell><cell>No</cell></row><row><cell>[24]</cell><cell>Attributed</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell cols="2">ception</cell><cell cols="2">lifecycle models</cell></row><row><cell></cell><cell>Grammars</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell cols="2">(modelling</cell><cell></cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>of</cell><cell>active</cell><cell></cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell cols="2">workspaces)</cell><cell></cell></row><row><cell>Proclets [7]</cell><cell>Petri Nets</cell><cell cols="2">Procedural</cell><cell cols="2">Graph-based</cell><cell>User</cell><cell>per-</cell><cell cols="2">Informational and</cell><cell>Not sure</cell><cell>No</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell cols="2">ception</cell><cell cols="2">lifecycle models</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell cols="2">(modelling</cell><cell></cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell cols="2">of proclets'</cell><cell></cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell cols="2">classes)</cell><cell></cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell cols="4">ParadigmPlus (2020) 1:3</cell><cell></cell></row></table></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" xml:id="foot_0"><p>ParadigmPlus (2020) 1:3</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="3" xml:id="foot_1"><p>E-C-A is a paradigm that specifies the desired behaviour for reactive systems (i.e. systems that maintain ongoing interactions with their environments). In such a system centered around the E-C-A paradigm, when an event occurs, a condition is evaluated (by a querying mechanism) and the system takes corresponding action<ref type="bibr" target="#b14">[15]</ref>. ParadigmPlus (2020) 1:3</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="4" xml:id="foot_2"><p>This is the case when there is one or more iterative routing (materialized by cycles in the task graph) on tasks.ParadigmPlus (2020) 1:3</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="5" xml:id="foot_3"><p>If a given combination X 1 i j , . . . , X mj i j is sequential (resp. parallel), its tasks are to be (resp. can be) executed sequentially (resp. in parallel).ParadigmPlus (2020) 1:3</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="6" xml:id="foot_4"><p>It is enough to consider the set of representative artifacts as a "set of generators" of a regular tree language: there is therefore an (abstract) grammar to generate them.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="7" xml:id="foot_5"><p>A production of the form X → ε indicates that task X is not "decomposable" in subtasks.ParadigmPlus (2020) 1:3</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="8" xml:id="foot_6"><p>This hypothesis, which does not reduce the expressiveness of the language, is taken only because it is estimated that actors will operate through What You See Is What You Get (WYSIWYG) tools.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="9" xml:id="foot_7"><p>Recall that we consider that one can only execute what he sees. ParadigmPlus (2020) 1:3</p></note>
		</body>
		<back>

			<div type="funding">
<div><head>Funding</head><p>No funding was received for this project.</p></div>
			</div>			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>allows to address certain security aspects of administrative workflows. In fact, LSAWfP allows the workflow models designers, to simply express each actor's accreditations for each task in a process, by the means of a inspired by that used in UNIX-like operating systems for the expression of users' rights. We also presented some of the work associated with LSAWfP that are currently in progress.</p><p>It would certainly be easier to handle LSAWfP if we had a (graphical) tool to assist in the design and validation of its instances. Such a tool could be built as a classical software engineering workbench through which the user would specify his processes by drawing trees and modifying the properties of their nodes, and then export valid specifications into dedicated formats after verification by simulation using a tool integrated into the workbench. Moreover, it seems equally important to more precisely describe the model for executing business processes specified in LSAWfP and briefly presented in section 4. In our opinion, this is just a few of the many studies that must be carried out following the one presented in this paper. -Didier Parigot holds a PhD from the University of Paris-Sud (now Paris-Saclay, France) and is currently senior researcher on programming language at INRIA (Sophia Antipolis, France). He is interested in formal languages, distributed systems, service-oriented architectures, peer-topeer computing, component-based software engineering, domain-specific languages and generative programming.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Authors' Information</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Authors' Contributions</head><p>-Milliam Maxime Zekeng Ndadji suggested the idea of producing a workflow language based on an idea to produce a decentralised model of structured cooperative editing put forward by Maurice Tchoupé Tchendji and Didier Parigot. He then participated in the conception and formalisation of the said language, in the study of the latter with the help of several examples, in the writing and the proofreading of this paper.</p><p>-Maurice Tchoupé Tchendji is at the root of the work from which the one in this paper is derived. He participated in the formalisation of the language presented here, in its illustration, in the writing and the proofreading of this paper.</p><p>ParadigmPlus (2020) 1:3 -Didier Parigot is (with Maurice Tchoupé Tchendji) at the base of the work that gave rise to this one; he is also co-supervisor of the work presented here. He has therefore validated the proposed mathematical tools and validated the examples that have been developed.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Competing Interests</head><p>The authors declare that they have no competing interests. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Editor</head></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Business process management: a comprehensive survey</title>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">M</forename><surname>Van Der Aalst</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ISRN Software Engineering</title>
		<imprint>
			<biblScope unit="volume">2013</biblScope>
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Notation (BPMN) version 2.0</title>
		<author>
			<persName><forename type="first">B</forename><forename type="middle">P</forename><surname>Model</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">OMG Specification, Object Management Group</title>
		<imprint>
			<date type="published" when="2011">2011</date>
			<biblScope unit="page" from="22" to="31" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Yawl: yet another workflow language</title>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">M</forename><surname>Van Der Aalst</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">H</forename><surname>Ter Hofstede</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Information systems</title>
		<imprint>
			<biblScope unit="volume">30</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="245" to="275" />
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Approaches to modeling business processes: a critical analysis of bpmn, workflow patterns and yawl</title>
		<author>
			<persName><forename type="first">E</forename><surname>Börger</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Software &amp; Systems Modeling</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="305" to="318" />
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">How much language is enough? theoretical and practical use of the business process modeling notation</title>
		<author>
			<persName><forename type="first">M</forename><surname>Zur Muehlen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Recker</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="s">Seminal Contributions to Information Systems Engineering</title>
		<imprint>
			<biblScope unit="page" from="429" to="443" />
			<date type="published" when="2013">2013</date>
			<publisher>Springer</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Business artifacts: An approach to operational specification</title>
		<author>
			<persName><forename type="first">A</forename><surname>Nigam</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><forename type="middle">S</forename><surname>Caswell</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IBM Systems Journal</title>
		<imprint>
			<biblScope unit="volume">42</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="428" to="445" />
			<date type="published" when="2003">2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Proclets: A framework for lightweight interacting workflow processes</title>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">M</forename><surname>Van Der Aalst</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Barthelmess</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">A</forename><surname>Ellis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Wainer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">International Journal of Cooperative Information Systems</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="issue">04</biblScope>
			<biblScope unit="page" from="443" to="481" />
			<date type="published" when="2001">2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Workflow support using proclets: Divide, interact, and conquer</title>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">M</forename><surname>Van Der Aalst</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Mans</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><forename type="middle">C</forename><surname>Russell</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Data Eng. Bull</title>
		<imprint>
			<biblScope unit="volume">32</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="16" to="22" />
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">There is more than one Kind of Workflow Software</title>
		<author>
			<persName><forename type="first">S</forename><surname>Mccready</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computerworld</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<date type="published" when="1992">1992</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">The Application of Petri Nets to Workflow Management</title>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">M P V D</forename><surname>Aalst</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Circuits, Systems, and Computers</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="21" to="66" />
			<date type="published" when="1998">1998</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Inter-organizational workflows for enterprise coordination</title>
		<author>
			<persName><forename type="first">M</forename><surname>Divitini</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Hanachi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Sibertin-Blanc</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Coordination of Internet agents</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2001">2001</date>
			<biblScope unit="page" from="369" to="398" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">A survey of comparative business process modeling approaches</title>
		<author>
			<persName><forename type="first">R</forename><surname>Lu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Sadiq</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on Business Information Systems</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2007">2007</date>
			<biblScope unit="page" from="82" to="94" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Modeling processes and workflows by business rules</title>
		<author>
			<persName><forename type="first">G</forename><surname>Knolmayer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Endl</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Pfahrer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Business Process Management</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2000">2000</date>
			<biblScope unit="page" from="16" to="29" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Adept workflow management system</title>
		<author>
			<persName><forename type="first">M</forename><surname>Reichert</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Rinderle</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Dadam</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on Business Process Management</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2003">2003</date>
			<biblScope unit="page" from="370" to="379" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Modular finite state machines implemented as event-condition-action systems</title>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">T</forename><surname>Almeida</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">E</forename><surname>Luntz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">M</forename><surname>Tilbury</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IFAC Proceedings Volumes</title>
		<imprint>
			<biblScope unit="volume">38</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="373" to="378" />
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Towards an integration system for artifact-centric processes</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">Abi</forename><surname>Assaf</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2016 on SIGMOD&apos;16 PhD Symposium</title>
		<meeting>the 2016 on SIGMOD&apos;16 PhD Symposium</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2016">2016</date>
			<biblScope unit="page" from="2" to="6" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Automatic verification of database-centric systems</title>
		<author>
			<persName><forename type="first">A</forename><surname>Deutsch</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Hull</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Vianu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM SIGMOD Record</title>
		<imprint>
			<biblScope unit="volume">43</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="5" to="17" />
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Facilitating workflow interoperation using artifactcentric hubs</title>
		<author>
			<persName><forename type="first">R</forename><surname>Hull</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><forename type="middle">C</forename><surname>Narendra</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Nigam</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Service-Oriented Computing</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2009">2009</date>
			<biblScope unit="page" from="1" to="18" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Artifact-centric choreographies</title>
		<author>
			<persName><forename type="first">N</forename><surname>Lohmann</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Wolf</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on Service-Oriented Computing</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2010">2010</date>
			<biblScope unit="page" from="32" to="46" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">A continuous query language for stream-based artifacts</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">A</forename><surname>Assaf</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Badr</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Amghar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on Database and Expert Systems Applications</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2017">2017</date>
			<biblScope unit="page" from="80" to="89" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Generating database schemas from business artifact models</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">A</forename><surname>Assaf</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Badr</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><forename type="middle">El</forename><surname>Khoury</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Barbar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">I.J. Information Technology and Computer Science</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="page" from="10" to="17" />
			<date type="published" when="2018">2018</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<title level="m" type="main">Bizartifact: Artifact-centric business process management</title>
		<author>
			<persName><forename type="first">D</forename><surname>Boaz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Limonad</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Gupta</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2013-06">june 2013. 2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">A Grammatical Approach to Data-centric Case Management in a Distributed Collaborative Environment</title>
		<author>
			<persName><forename type="first">E</forename><surname>Badouel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Hélouët</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">E</forename><surname>Kouamou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Morvan</surname></persName>
		</author>
		<idno>abs/1405.3223</idno>
	</analytic>
	<monogr>
		<title level="j">CoRR</title>
		<imprint>
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Active workspaces: distributed collaborative systems based on guarded attribute grammars</title>
		<author>
			<persName><forename type="first">E</forename><surname>Badouel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Hélouët</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G.-E</forename><surname>Kouamou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Morvan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><forename type="middle">R</forename><surname>Fondze</surname><genName>Jr</genName></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM SIGAPP Applied Computing Review</title>
		<imprint>
			<biblScope unit="volume">15</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="6" to="34" />
			<date type="published" when="2015">2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<title level="m" type="main">A language for the specification of administrative workflow processes with emphasis on actors&apos; views</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">M</forename><surname>Zekeng Ndadji</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Tchoupé</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">Tayou</forename><surname>Tchendji</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Djamegni</surname></persName>
		</author>
		<author>
			<persName><surname>Parigot</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
	</analytic>
	<monogr>
		<title level="m">Computational Science and Its Applications -ICCSA 2020</title>
		<title level="s">Lecture Notes in Computer Science</title>
		<editor>
			<persName><forename type="first">O</forename><surname>Gervasi</surname></persName>
		</editor>
		<imprint>
			<publisher>ParadigmPlus</publisher>
			<date type="published" when="2020">2020. 2020</date>
			<biblScope unit="volume">12254</biblScope>
			<biblScope unit="page" from="231" to="245" />
		</imprint>
	</monogr>
	<note>ICCSA 2020</note>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">A grammatical model for the specification of administrative workflow using scenario as modelling unit</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">M</forename><surname>Zekeng Ndadji</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Tchoupé</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">Tayou</forename><surname>Tchendji</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Djamegni</surname></persName>
		</author>
		<author>
			<persName><surname>Parigot</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Applied Informatics. ICAI 2020</title>
		<title level="s">Communications in Computer and Information Science</title>
		<editor>
			<persName><forename type="first">H</forename><surname>Florez</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">S</forename><surname>Misra</surname></persName>
		</editor>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2020">2020</date>
			<biblScope unit="volume">1277</biblScope>
			<biblScope unit="page" from="131" to="145" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">A Peer to Peer (P2P) Architecture for Dynamic Workflow Management</title>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">J</forename><surname>Fakas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Karakostas</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Information &amp; Software Technology</title>
		<imprint>
			<biblScope unit="volume">46</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="423" to="431" />
			<date type="published" when="2004">2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">SwinDeW-a P2P-Based Decentralized Workflow Management System</title>
		<author>
			<persName><forename type="first">J</forename><surname>Yan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">K</forename><surname>Raikundalia</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Systems, Man, and Cybernetics, Part A</title>
		<imprint>
			<biblScope unit="volume">36</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="922" to="935" />
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">A cloud workflow modeling framework using extended proclets</title>
		<author>
			<persName><forename type="first">H</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Peng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Feng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Asia-Pacific Conference on Business Process Management</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2015">2015</date>
			<biblScope unit="page" from="19" to="34" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Optimized execution of business processes on blockchain</title>
		<author>
			<persName><forename type="first">L</forename><surname>García-Bañuelos</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Ponomarev</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Dumas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Weber</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on Business Process Management</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2017">2017</date>
			<biblScope unit="page" from="130" to="146" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">Confidential business process execution on blockchain</title>
		<author>
			<persName><forename type="first">B</forename><surname>Carminati</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Rondanini</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Ferrari</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2018 IEEE International Conference on Web Services (ICWS)</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2018">2018</date>
			<biblScope unit="page" from="58" to="65" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">A lean architecture for blockchain based decentralized process execution</title>
		<author>
			<persName><forename type="first">C</forename><surname>Sturm</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Szalanczi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Schönig</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Jablonski</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on Business Process Management</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2018">2018</date>
			<biblScope unit="page" from="361" to="373" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">Modeling and execution of blockchainaware business processes</title>
		<author>
			<persName><forename type="first">G</forename><surname>Falazi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Hahn</surname></persName>
		</author>
		<author>
			<persName><forename type="first">U</forename><surname>Breitenbücher</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Leymann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SICS Software-Intensive Cyber-Physical Systems</title>
		<imprint>
			<biblScope unit="volume">34</biblScope>
			<biblScope unit="issue">2-3</biblScope>
			<biblScope unit="page" from="105" to="116" />
			<date type="published" when="2019">2019</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">Caterpillar: a business process execution engine on the ethereum blockchain</title>
		<author>
			<persName><forename type="first">O</forename><surname>López-Pintado</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>García-Bañuelos</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Dumas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Weber</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Ponomarev</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Software: Practice and Experience</title>
		<imprint>
			<biblScope unit="volume">49</biblScope>
			<biblScope unit="issue">7</biblScope>
			<biblScope unit="page" from="1162" to="1193" />
			<date type="published" when="2019">2019</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">A blockchain-based and resource-aware process execution engine</title>
		<author>
			<persName><forename type="first">C</forename><surname>Sturm</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Scalanczi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Schönig</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Jablonski</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Future Generation Computer Systems</title>
		<imprint>
			<biblScope unit="volume">100</biblScope>
			<biblScope unit="page" from="19" to="34" />
			<date type="published" when="2019">2019</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title level="a" type="main">Blockchain support for collaborative business processes</title>
		<author>
			<persName><forename type="first">C</forename><surname>Di Ciccio</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Cecconi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Dumas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>García-Bañuelos</surname></persName>
		</author>
		<author>
			<persName><forename type="first">O</forename><surname>López-Pintado</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Q</forename><surname>Lu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Mendling</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Ponomarev</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">B</forename><surname>Tran</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Weber</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Informatik Spektrum</title>
		<imprint>
			<biblScope unit="volume">42</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="182" to="190" />
			<date type="published" when="2019">2019</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<monogr>
		<title level="m" type="main">A Guarded Attribute Grammar Based Model for User Centered, Distributed, and Collaborative Case Management Case of the Disease Surveillance Process</title>
		<author>
			<persName><forename type="first">R</forename><surname>Nsaibirni</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2019">2019</date>
		</imprint>
		<respStmt>
			<orgName>Université de Yaoundé I</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Theses</note>
</biblStruct>

<biblStruct xml:id="b38">
	<analytic>
		<title level="a" type="main">A publish/subscribe approach for implementing GAG&apos;s distributed collaborative business processes with high data availability</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">Tchoupé</forename><surname>Tchendji</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">Ngoufo</forename><surname>Tagueu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CARI 2020 -African Conference on Research in Computer Science and Applied Mathematics</title>
		<meeting><address><addrLine>Thiès, Senegal</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2020">2020</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<analytic>
		<title level="a" type="main">Workflow patterns put into context</title>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">M</forename><surname>Van Der Aalst</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">H</forename><surname>Hofstede</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Software &amp; Systems Modeling</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="319" to="323" />
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b40">
	<analytic>
		<title level="a" type="main">Merging Hierarchically-Structured Documents in Workflow Systems</title>
		<author>
			<persName><forename type="first">E</forename><surname>Badouel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">T</forename><surname>Tchendji</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Electronic Notes in Theoretical Computer Science</title>
		<imprint>
			<biblScope unit="volume">203</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page">3</biblScope>
			<date type="published" when="2008">2008. 2020</date>
		</imprint>
	</monogr>
	<note>ParadigmPlus</note>
</biblStruct>

<biblStruct xml:id="b41">
	<analytic>
		<title level="a" type="main">A Stable and Consistent Document Model Suitable for Asynchronous Cooperative Edition</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">Tchoupé</forename><surname>Tchendji</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">D</forename><surname>Djeumen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">T</forename><surname>Atemkeng</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Computer and Communications</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="issue">08</biblScope>
			<biblScope unit="page">69</biblScope>
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b42">
	<analytic>
		<title level="a" type="main">Réconciliation par consensus des mises à jour des répliques partielles d&apos;un document structuré</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">Tchoupé</forename><surname>Tchendji</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">M</forename><surname>Zekeng Ndadji</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CARI 2016 Proceedings</title>
		<imprint>
			<date type="published" when="2016">2016</date>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="page" from="84" to="96" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b43">
	<analytic>
		<title level="a" type="main">Tree Automata for Extracting Consensus from Partial Replicas of a Structured Document</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">Tchoupé</forename><surname>Tchendji</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">M</forename><surname>Zekeng Ndadji</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Software Engineering and Applications</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="issue">05</biblScope>
			<biblScope unit="page">432</biblScope>
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b44">
	<analytic>
		<title level="a" type="main">A Software Architecture for Centralized Management of Structured Documents in a Cooperative Editing Workflow</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">M</forename><surname>Zekeng Ndadji</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">Tchoupé</forename><surname>Tchendji</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Innovation and Interdisciplinary Solutions for Underserved Areas</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2018">2018</date>
			<biblScope unit="page" from="279" to="291" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b45">
	<analytic>
		<title level="a" type="main">A Projection-Stable Grammatical Model to Specify Workflows for their P2P and Artifact-Centric Execution</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">M</forename><surname>Zekeng Ndadji</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">T</forename><surname>Tchendji</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Parigot</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CRI&apos;2019 -Conférence de Recherche en Informatique</title>
		<meeting><address><addrLine>Yaoundé, Cameroon</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2019">2019</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
