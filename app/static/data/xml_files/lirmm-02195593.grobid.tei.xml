<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Querying Key-Value Stores under Single-Key Constraints: Rewriting and Parallelization</title>
				<funder ref="#_WArp2ex">
					<orgName type="full">Agence Nationale de la Recherche</orgName>
					<orgName type="abbreviated">ANR</orgName>
				</funder>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Olivier</forename><surname>Rodriguez</surname></persName>
							<affiliation key="aff0">
								<orgName type="laboratory">INRIA &amp; LIRMM</orgName>
								<orgName type="institution">Univ. Montpellier</orgName>
								<address>
									<country key="FR">France</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Reza</forename><surname>Akbarinia</surname></persName>
							<affiliation key="aff0">
								<orgName type="laboratory">INRIA &amp; LIRMM</orgName>
								<orgName type="institution">Univ. Montpellier</orgName>
								<address>
									<country key="FR">France</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Federico</forename><surname>Ulliana</surname></persName>
							<affiliation key="aff0">
								<orgName type="laboratory">INRIA &amp; LIRMM</orgName>
								<orgName type="institution">Univ. Montpellier</orgName>
								<address>
									<country key="FR">France</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Querying Key-Value Stores under Single-Key Constraints: Rewriting and Parallelization</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">73DE53DF20767646E4B68ABE75C75470</idno>
					<idno type="DOI">10.1007/978-3-030-31095-0_15</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.8.0" ident="GROBID" when="2024-04-12T14:54+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>We consider the problem of querying key-value stores in the presence of semantic constraints, expressed as rules on keys, whose purpose is to establish a high-level view over a collection of legacy databases. We focus on the rewriting-based approach for data access, which is the most suitable for the key-value store setting because of the limited expressivity of the data model employed by such systems. Our main contribution is a parallel technique for rewriting and evaluating tree-shaped queries under constraints which is able to speed up query answering. We implemented and evaluated our parallel technique. Results show significant performance gains compared to the baseline sequential approach.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Semantic constraints are knowledge on the structure and on the domain of data which are used in contexts such as data integration and ontology mediated query answering to establish a unified view of a collection of a database. Constraints allow users to better exploit their data thanks to the possibility of formulating high-level queries, which use a vocabulary richer than that of the single sources. In the last decade, the use of constraints in the form of ontologies has been intensively studied in the knowledge representation domain <ref type="bibr" target="#b9">[10,</ref><ref type="bibr" target="#b3">4,</ref><ref type="bibr" target="#b2">3]</ref>. A key factor in the rise of the paradigm has been the reuse of off-the-shelf data management systems as the underlying physical layer for querying data under constraints. This resulted in a successful use of the paradigm especially on top of relational and RDF systems <ref type="bibr" target="#b4">[5]</ref>. However, the use of constraints to query NOSQL systems like key-value stores (e.g., MongoDB <ref type="bibr" target="#b0">[1]</ref>, CouchDB <ref type="bibr" target="#b1">[2]</ref>) has just begun to be investigated <ref type="bibr" target="#b5">[6,</ref><ref type="bibr" target="#b6">7,</ref><ref type="bibr" target="#b7">8]</ref>. Key-value stores are designed to support data-intensive tasks on collections of JSON records, this last one being a language which is becoming the new de facto standard for data exchange.</p><p>To illustrate the use of semantic constraints for querying key-value records, consider the records in Example 1 which describe university departments. Query Q 1 selects all department records having a professor with some contact details. Query Q 2 selects all computer science departments with a director. It can be easily seen that these two queries do not match any of the records. Indeed, Q 1 asks for the key contact which is not used in both r 1 and r 2 , while Q 2 asks, on the one hand, for the key director, which is not used in r 1 and, on the other hand, for the value "CS" for the department name, which does not match that of r 2 .</p><p>(r1) { dept : { name : "CS" , prof : { name : "Bob" , mail : "bob@uni.com" } } } (r2) { dept : { name : "M ath" , director : { name : "Alice" , phone</p><formula xml:id="formula_0">: null } } } (Q1) find({ dept : { prof : { contact : $exists } } }) (Q2) find({ dept : { name : "CS", director : $exists } }) (σ1) phone → contact (σ2) mail → contact (σ3) director → prof (σ4) prof → ∃director</formula><p>Example 1. Data, queries, and rules.</p><p>This is where semantic constraints come into play. Indeed, although the key contact is not used in the records, this can be seen as a high-level key generalizing both phone and mail, as captured by rules σ 1 and σ 2 . Therefore, by taking into account these semantic constraints, r 1 satisfies the query Q 1 . Moreover, since σ 3 says that the director of a department must be a professor, also r 2 satisfies Q 2 . Finally, σ 4 says that whenever a professor is present, then a director exists. Again, with this rule in hand, r 1 would also satisfy Q 2 . This example outlines how semantic constraints allow users to better exploit their data.</p><p>The two main algorithmic approaches usually considered to account for semantic constraints during data access are materialization and query rewriting. Intuitively speaking, for constraints of the form k -→ k , materialization means creating a fresh copy of the value of k and then associating this copy to the key k . It is important to notice that, being the JSON data model based on trees, materialization can result in exponential blowups of the data. Also, not only it is computationally expensive to repeatedly copy subrecords, but it is also hard to efficiently implement such mechanism on top of key-value stores whose primitives, despite handling bulk record insertions, are not oriented towards the update of a single record. This is exacerbated by the fact that data is voluminous. In contrast, queries are usually small. From this perspective, it is thus interesting to explore query rewriting approaches that can take into account semantic constraints while accessing data without modifying the data sources. The idea of query rewriting is to propagate constraints "into the query". This process yields a set (or a union) of rewritings whose answers over the input database is exactly the same as the initial query on the database where materialization would have been done. Being rewritings independent from the sources, this approach is well suited for accessing legacy databases, in particular with read-only access rights.</p><p>The query facilities of key-value stores systems include primarily a language for selecting records matching several conditions based on tree-shaped queries called find() queries <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b1">2]</ref>. The MongoDB store also includes an expressive language for aggregate queries which is equivalent to nested relational algebra <ref type="bibr" target="#b8">[9]</ref>. In this work, we focus our attention on the evaluation of find() queries under singlekey constraints built on pairs of keys, as those of Example 1. It is worth noting that NOSQL systems still lack the standardization of a common query language and therefore of a standard syntax and semantics for queries. Therefore, in the formal development presented in Section 2, we chose to abstract away from the conventions of existing systems and adopt a syntax for queries akin to that of key-value records and a natural semantics based on tree-homomorphisms. In spite of the many advantages we already mentioned it is understood that, depending on the target language chosen for the rewritings, the query rewriting approach can suffer from combinatorial explosions -even for rule languages with a limited expressivity <ref type="bibr" target="#b3">[4]</ref>. This happens as well for the key-value store languages. This means that the rewriting set of a query to generate may be large, which has a consequent impact on the slowing down of query answering.</p><p>To mitigate this problem, we present a novel technique for parallelizing both the generation and the evaluation of the rewriting set of a query serving as the basis for distributed query evaluation under constraints. Our solution is presented in Section 3, and relies on a schema for encoding the possible rewritings of a query on an integer interval. This allows us to generate equi-size partitions of rewritings, and thus to balance the load of the parallel working units that are in charge of generating and evaluating the queries. The experimental evaluation of our technique reported in Section 4 shows a significant reduction of query rewriting and execution time by means of parallelization.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Single-Key Constraints and Query Rewriting</head><p>This section is dedicated to the formalization of the setting we consider, and follows the lines of <ref type="bibr" target="#b7">[8]</ref>. For concision, we will focus on a simplified JSON model. However, this is w.l.o.g, as the technique we present applies to the full language. Data. A key-value record is a finite (non-empty) set of key-value pairs of the form r = {(k 1 , v 1 ), . . . , (k n , v n )} where all k i are distinct keys and each v i is a value. A value is defined as i) a constant or the null value, ii) a record r, or iii) a non-empty sequence v = [v 1 . . . v n ] where each v i is a constant, null, or a record. A value v in a key-value record can be associated with a rooted labelled forest T v , where each tree of the forest has a root and nodes and edges can be labelled.</p><formula xml:id="formula_1">If v is a constant or null then T v is a single (root) node labelled by that value. If v is a sequence v = [v 1 . . . v n ] then T v is a forest of n rooted trees T 1 , . . . , T n</formula><p>where T i is the tree associated to the value v i . Finally, if v is a record, then T v is as follows. Let, k be a key of v and T k be the forest associated to the value of k. Then T v contains i) all nodes and edges of each tree T k , ii) a root node s, and iii) an edge from s to s k labelled by k whenever s k is the root of a tree in T k . Clearly, T v is a rooted tree whenever v is a record. In the remainder, we will see a key-value record as its associated tree, as illustrated in Figure <ref type="figure" target="#fig_0">2</ref>. Note the order of the elements of a sequence is not represented in the associated trees. Also, we will assume a fixed way to associate a tree with a unique (representative) record.</p><p>Rules. We focus on semantic constraints we call single-keys, also studied in <ref type="bibr" target="#b5">[6,</ref><ref type="bibr" target="#b7">8]</ref>. These are expressed as rules σ of the form k -→ k (key inclusion) k -→ ∃k (mandatory key)</p><p>enabling the definition of hierarchies of keys as well as the existence of mandatory keys. The semantics of constraints is defined on the tree associated to a record. Next, we denote by (u, w, k) an edge from u to w labelled by k. We say that a tree T satisfies a constraint σ : k -→ k if for each of its edges of the form (u, w, k) there also exists an edge (u, z, k ) and an isomorphism ϕ from the subtree rooted at w to that rooted at z such that ϕ(w) = z. Then, T satisfies σ : k -→ ∃ k if for each of its edges of the form (u, w, k) there also exists an edge (u, z, k ), whatever the subtree rooted at z. Let Σ be a set of constraints. Then, we say that a tree T is a model of r and Σ when i) T r and T have the same root, ii) T r is a subtree of T , and iii) T satisfies all constraints of Σ. For single-key constraints, it can be easily shown that every pair (r,Σ) admits a finite model. Queries. We consider the problem of answering find() queries that are integrated in the facilities of popular key-value stores such as MongoDB and CouchDB <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b1">2]</ref>. These queries select all records satisfying some structural and value conditions, and can be seen as Boolean queries, in that query evaluation on a record yields an answer which is either the empty set or the record itself. A query is thus of the form find(φ) where φ is a key-value record. Importantly, we assume that 1) queries do not use the null value and 2) the reserved constant $exists is used to require the existence of any value associated with a key, as illustrated by Q 1 in Example 1. As for records, queries can be associated with labelled trees. Figure <ref type="figure" target="#fig_0">2</ref> illustrates the tree representation of the queries of Example 1.</p><p>Then, a query find(φ) answers true on a record r if there exists a mapping h from the nodes of T φ to that of T r such that i) the root of T φ is mapped to the root of T r , ii) for every edge (u, w, k) of T φ , (h(u), h(w), k) is an edge of T r , and iii) every leaf node u of T φ which is labelled by a constant different from $exists is mapped to a node h(u) with the same label. Finally, with constraints, a query find(φ) answers true on r and Σ if it answers true on all models of r and Σ. Query Rewriting Query rewriting is an algorithmic procedure for taking into account a set of semantic constraints Σ that starts from a query Q and produces a set of rewritings Rew(Q, Σ) such that, for all records r, Q answers true on r and Σ if and only if there exists a query Q ∈ Rew(Q, Σ) that answers true on r. As for rules, we define the rewriting of a query find(φ) on its associated tree T φ . So, find(φ) can be rewritten with σ : k → k , if T φ contains an edge (u, w, k ). Similarly, find(φ) can be rewritten with σ : k → ∃k , if T φ has an edge (u, w, k ) where w is a leaf node labelled by $exists. In both cases, the rewriting consists at replacing the edge (u, w, k ) in T φ with (u, w, k). Let T φ be the resulting tree, whose representative record is φ . Then we say that find(φ ) is a direct rewriting of find(φ) with σ. We denote by Rew(Q, Σ) the set of Q for which there exists a (possibly empty) sequence of direct rewritings from Q to Q using the rules of Σ. This means that Q belongs to Rew(Q, Σ). The size of Rew(Q, Σ) is bounded by |Σ| |Q| , where |Q| is the number of edges of Q. The correctness of the rewriting algorithm can be shown by extending the proofs of <ref type="bibr" target="#b7">[8]</ref>.</p><formula xml:id="formula_2">rewriting array integer (Q 1 1 ) find( { dept : { director : { contact : $exists } } } ) 0, 1, 0 1 (Q 2 1 ) find( { dept : { prof : { phone : $exists } } } ) 0, 0, 1 2 (Q 3 1 ) find( { dept : { director : { phone : $exists } } } ) 0, 1, 1 3 (Q 4 1 ) find( { dept : { prof : { mail : $exists } } } ) 0, 0, 2 4 (Q 5 1 ) find( { dept : { director : { mail : $exists } } } ) 0, 1, 2<label>5</label></formula><formula xml:id="formula_3">(Q<label>1</label></formula><p>2 ) find( { dept : { name : "CS" , prof : $exists } } ) 0, 0, 1 1 Fig. <ref type="figure">3</ref>. Rewritings of the queries in Example 1 (left) and their encoding (right)</p><p>Figure <ref type="figure">3</ref> illustrates the rewritings of queries given in Example 1. Here,</p><formula xml:id="formula_4">Q 1 1 -Q 5 1 are rewritings of Q 1 with σ 1 , σ 2 , σ 3 , while Q 1 2 is a direct rewriting of Q 2 with σ 4 . It holds that Q 4 1 selects r 1 , Q 3 1 selects r 2 ,</formula><p>and Q 1 2 selects r 1 . Note that rules for mandatory keys apply only on the leaves of a query that are labelled with $exists. To see why consider the query find({dept : { director : "Alice" }}). Here, if σ 4 is used, we get find({dept : { prof : $exists }}) which is not a valid query rewriting.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Parallelization</head><p>We now present a parallel method that can be used to distribute both the generation and the evaluation of the rewriting set of a query to a set of independent computing units u 1 , . . . , u m , each being a local thread or a machine of a cluster. Our approach relies on an interval-encoding of the rewritings. The general idea is to establish a bijection between Rew(Q, Σ) and the integers in [0, . . . , N -1], where N = |Rew(Q, Σ)|. Then each of the m computing units is communicated an interval [i, j] of size λ ≈ N/m corresponding to the subset of rewritings it has to generate. This will result in a parallel rewriting method that enjoys the following three properties. 1) partitioning: no rewriting is computed twice by two distinct units 2) load balance: the number of rewritings is equally distributed across all units 3) bounded-communication: units receive a constant size interval information Encoding Queries. In contrast to the general case <ref type="bibr" target="#b5">[6,</ref><ref type="bibr" target="#b7">8]</ref>, when considering single-key constraints, one can exploit the fact that, the rewriting process we described in the previous section, yields queries that are structurally similar. This enables a compact representation of (the edges of) a query as fixed size arrays, which we now describe. Let find(φ) be a query. By fixing a total order on the edges of T φ , we can see the query as an array k 1 , . . . , k n , where k i is the key labelling the i-th edge of T φ . Thus, to reconstruct a rewriting from an array it just suffices to replace the i-th edge of Q with the i-th key of the array. Moreover, given that an edge can be rewritten only in a finite number of ways, we can even use integers to denote the possible labels of the query edges. These ideas are the basis of the definition of an encoding function γ Q,Σ which is illustrated next.</p><p>Consider the query</p><formula xml:id="formula_5">Q 1 and σ 1 , σ 2 , σ 3 of Example 1 yielding rewritings Q 1 1 -Q 5 1</formula><p>as in Figure <ref type="figure">3</ref>. For simplicity, assume the edges of Q 1 being ordered by depth.</p><p>So the edges labelled by dept, prof, and contact are indexed by 1, 2, and 3, respectively. To begin, we represent the query Q 1 with 0, 0, 0 where the value 0 at position 1, 2, and 3, of the array denote the fact that no edge is rewritten. Then, the rewritings Q 2 1 , Q 4  1 can be represented by the arrays 0, 0, 1 , 0, 0, 2 , denoting the fact that the edge labelled by contact has been rewritten either by phone or mail while the rewritings</p><formula xml:id="formula_6">Q 1 1 , Q 3 1 , Q<label>5</label></formula><p>1 can be represented by the arrays 0, 1, 0 , 0, 1, 1 and 0, 1, 2 where prof is replaced by director and the edge labelled with contact is rewritten (or not) as before. The resulting encoding function is</p><formula xml:id="formula_7">γ Q,Σ = {(1, 0, dept), (2, 0, prof), (2, 1, director), (3, 0, contact), (3, 1, phone), (3, 2, mail)}.</formula><p>It is important to notice that at this point γ Q,Σ establishes a bijection from arrays to the rewritings of a query. The next step towards our goal of mapping rewritings to integers is to map the arrays encoding the rewritings to a sequence of successive integers. To do so, we see an array as a number in a multiple base (b 1 , . . . , b n ) where each b i denotes the number of possible rewritings of the i-th edge of Q. An array c 1 . . . c n in the base (b 1 , . . . , b n ) corresponds to the integer</p><formula xml:id="formula_8">p = c 1 + c 2 * B 1 . . . + c n * B n-1 with B 1 = b 1 and B i = b i * B i-1 for i ≥ 2.</formula><p>In the example, the arrays 0, 0, 0 , 0, 1, 0 , 0, 0, 1 , 0, 1, 1 , 0, 0, 2 , 0, 1, 2 in base (b 1 , b 2 , b 3 ) = (1, 2, 3) correspond to the integers in the interval [0, 5], respectively. For instance, c 1 , c 2 , c 3 = 0, 1, 1 correspond to the integer 3 as, given that</p><formula xml:id="formula_9">B 1 = b 1 = 1 and B 2 = 2, we have 0+1 * B 1 +1 * B 2 = 3. Conversely, the integer p in base (b 1 , . . . , b n ) corresponds to the array c 1 , . . . , c n where c i = (d i mod b i ) where d 1 = p and d i = (d i-1 ÷ b i-1</formula><p>) for all i ≥ 2. Of course, it must be that 0 ≤ p &lt; B n . The correspondence between rewritings and integers is outlined in Figure <ref type="figure">3</ref>. Finally note that by using the same formula we can compute the size of the rewriting set of a query, which is B n , with n the number of edges of Q.</p><p>Building the encoding function. In the general case not only two rules σ 1 and σ 2 can rewrite the same edge of the query, but also the application of σ 1 can enable that of σ 2 . Hence, the number of alternative keys for a single edge has to be inferred by looking at the dependencies between the keys in Σ. In doing so, we have to distinguish between the different types of edges of the query. For every edge of the query labelled by k the set of possible rewritings is made of all k for which there exists a sequence of rules σ 1 , . . . , σ n of the form σ i = k i -→ k i such that k i = k i+1 for all 1 ≤ i &lt; n, with k 1 = k and k n = k. For every edge of the query labelled by k ending on a node labelled by $exists the set of possible rewritings is made of all k for which there exists a sequence of rules this time either of the form σ i = k i -→ ∃k i or σ i = k i -→ k i satisfying the same condition as before. Note that it is possible to analyze Σ independently of any query, and therefore compute once the possible rewritings of a key depending on the cases described before. Then, the construction of γ Q,Σ follows by fixing any total order on the edges of T Q . The size of γ Q,Σ is bounded by |Q| × |Σ|. This avoids to communicate to the units the whole Rew(Q, Σ), whose size can be exponential.</p><p>In conclusion, the key properties achieved with our interval encoding are that 1) we avoid a "centralized" enumeration of the rewritings (which is parallelized) and 2) minimize communication costs by sending to each unit only a pair of values (i, j) denoting a (possibly exponentially large) query set it has to handle.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Performance Evaluation</head><p>We implemented our approach in Java and parallelized query rewriting and evaluation by executing concurrent threads and using different cores of a machine. Nevertheless, our approach is suitable for any shared nothing parallel framework. For example, the threads can also be executed in the nodes of a distributed cluster, if such a cluster is available. The three main modules of our tool are dedicated to i) the interval encoding, ii) rewriting generation, and iii) query evaluation. Next, we use the term query answering for the combination of the three tasks, which amounts to the whole task of answering queries under constraints.</p><p>We performed an experimental evaluation whose goal is to show the benefits of parallelization when querying key-value stores under semantic constraints. We deployed our tool on top of key-value store MongoDB version 3.6.3. Our experiments are based on the XMark benchmark which is a standard testing suite for semi-structured data <ref type="bibr" target="#b10">[11]</ref>. XMark provides a document generator whose output was translated to obtain JSON records complying with our setting. Precisely, we performed our experiments on a key-value store instance created by shredding XMark generated data in JSON records. The results reported here concern an instance created from 100MB XMark and split in ∼60K records of size ∼1KB. XMark also provides a set of queries that were translated to our setting.To test query evaluation in the presence of constraints, we then extended the benchmark by manually adding a set of 68 rules on top of the data. These are "specialization" rules of the form k new → k xmark where k xmark is a key of the XMark data vocabulary and k new is a fresh key that does not appear in XMark. The benchmark data employs a vocabulary made of 91 keys and the rules define the specialization of 40 among them. More precisely, 20 keys have 1 specialization, 14 keys have two specializations, 5 have three specializations and 1 key has 5. Accordingly, the generated XMark data has been modified by randomly replacing one of such keys by one of its specializations thereby mimicking the fact that datasets use more specific keys while the user asks a high-level query.</p><p>Tests were performed on an Ubuntu 18.10 64-bit system, running on a machine that provides an Intel Core i7-8650U CPU 4 cores, 16 GB of RAM, and an Intel SSD Pro 7600p Series. Figure <ref type="figure">4</ref> summarises i) the query answering time under constraints and ii) the speed up of our parallel technique for 10 XMark queries, by varying the number of threads. The speed-up is defined as the ratio between the case of 1 thread (i.e., without parallelization) and the case with n threads. As expected, our results show that the query answering time depends on the size of the rewriting set, and the queries are thus sorted according to this criterion. Query answering time with one thread takes up to 1.3s for queries with less 150 rewritings (i.e., q 4 , q 10 , q 1 , q 2 ) and increases to 2.8s for q 3 , which has 324 rewritings. However, by using four threads, answering time for q 3 drops to 1.3s (55% time reduction). Answering q 7 , which has 1296 rewritings, takes 11s. This falls to 4.7s by using four threads (58% time reduction). The same can be observed for q 8 and q 9 . More generally, our results show that already by only using two threads, there is a 1.5x speedup (33% reduction) of query answering time for almost all queries. This increases to a 2/2.3x speedup (50-58% time re-Fig. <ref type="figure">4</ref>. Evaluation time and speedup of our method for XMark queries on MongoDB duction) when four threads are used. Interestingly, this is the maximum number of concurrent physical threads of our test machine, and we observe that when using eight virtual threads essentially no improvement can be further remarked. Naturally, when the number of rewritings of a query is too small, the impact of parallelization is less important. For example, as illustrated by q 4 , which has only 18 rewritings, only a 1.2x speedup is achieved with four threads. Summing up, this shows the interest of parallelization in querying key value stores under semantic constraints.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Conclusion.</head><p>In this paper, we proposed a parallel technique for the efficient rewriting and evaluation of tree-shaped queries under constraints based on an interval encoding of the rewriting set of a query. We implemented our solution and measured its performance using the XMark benchmark. The show significant performance gains compared to the baseline sequential approach.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 2 .</head><label>2</label><figDesc>Fig. 2. Tree representation of records and queries of Example 1</figDesc></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div><p>Acknowledgements This work has been partially supported by the <rs type="funder">ANR CQFD Project</rs> (<rs type="grantNumber">ANR-18-CE23-0003</rs>).</p></div>
			</div>
			<listOrg type="funding">
				<org type="funding" xml:id="_WArp2ex">
					<idno type="grant-number">ANR-18-CE23-0003</idno>
				</org>
			</listOrg>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<ptr target="www.mongodb.com" />
		<title level="m">MongoDB</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<ptr target="couchdb.apache.org" />
		<title level="m">CouchDB</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Thomazo An introduction to ontology-based query answering with existential rules</title>
		<author>
			<persName><forename type="first">M.-L</forename><surname>Mugnier</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Reasoning Web International Summer School</title>
		<imprint>
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Tractable Reasoning and Efficient Query Answering in Description Logics: The DL-Lite Family</title>
		<author>
			<persName><forename type="first">D</forename><surname>Calvanese</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">D</forename><surname>Giacomo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Lembo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Lenzerini</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Rosati</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Autom. Reasoning</title>
		<imprint>
			<date type="published" when="2007">2007</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Linking data to ontologies</title>
		<author>
			<persName><forename type="first">A</forename><surname>Poggi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Lembo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Calvanese</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>De Giacomo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Lenzerini</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Rosati</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Data Semantics</title>
		<imprint>
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Ontology-mediated queries for NOSQL databases</title>
		<author>
			<persName><forename type="first">M</forename><surname>Mugnier</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Rousset</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Ulliana</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">AAAI 2016</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">OBDA beyond relational DBs: A study for MongoDB</title>
		<author>
			<persName><forename type="first">E</forename><surname>Botoeva</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Calvanese</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Cogrel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Rezk</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Xiao</forename></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename></persName>
		</author>
		<imprint>
			<date type="published" when="2016">2016</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Ontology-mediated query answering for key-value stores</title>
		<author>
			<persName><forename type="first">M</forename><surname>Bienvenu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Bourhis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Mugnier</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Tison</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Ulliana</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IJCAI 2017</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">Expressivity and complexity of MongoDB queries</title>
		<author>
			<persName><forename type="first">E</forename><surname>Botoeva</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Calvanese</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Cogrel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Guohui</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2018">2018</date>
			<publisher>ICDT</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">Ontologybased data access: A survey</title>
		<author>
			<persName><forename type="first">G</forename><surname>Xiao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Calvanese</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Kontchakov</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Lembo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Poggi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Rosati</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Zakharyaschev</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2018">2018</date>
			<publisher>IJCAI</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Xmark: A benchmark for XML data management</title>
		<author>
			<persName><forename type="first">A</forename><surname>Schmidt</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Waas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Kersten</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">J</forename><surname>Carey</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Manolescu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Busse</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">VLDB 2002</title>
		<imprint/>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
