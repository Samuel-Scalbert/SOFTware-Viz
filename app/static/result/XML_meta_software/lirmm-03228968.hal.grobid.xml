<?xml version='1.0' encoding='utf-8'?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.1" xsi:schemaLocation="http://www.tei-c.org/ns/1.0 http://api.archives-ouvertes.fr/documents/aofr-sword.xsd">
  <teiHeader>
    <fileDesc>
      <titleStmt>
        <title>HAL TEI export of lirmm-03228968</title>
      </titleStmt>
      <publicationStmt>
        <distributor>CCSD</distributor>
        <availability status="restricted">
          <licence target="http://creativecommons.org/licenses/by/4.0/">Distributed under a Creative Commons Attribution 4.0 International License</licence>
        </availability>
        <date when="2024-04-29T11:49:39+02:00" />
      </publicationStmt>
      <sourceDesc>
        <p part="N">HAL API platform</p>
      </sourceDesc>
    </fileDesc>
  </teiHeader>
  <text>
    <body>
      <listBibl>
        <biblFull>
          <titleStmt>
            <title xml:lang="en">Distributed Database Systems: The Case for NewSQL</title>
            <author role="aut">
              <persName>
                <forename type="first">Patrick</forename>
                <surname>Valduriez</surname>
              </persName>
              <email type="md5">b7903099e0d3ee0b492cd1c7a982e35b</email>
              <email type="domain">inria.fr</email>
              <idno type="idhal" notation="string">patrick-valduriez</idno>
              <idno type="idhal" notation="numeric">172604</idno>
              <idno type="halauthorid" notation="string">22529-172604</idno>
              <idno type="ORCID">https://orcid.org/0000-0001-6506-7538</idno>
              <idno type="GOOGLE SCHOLAR">https://scholar.google.fr/citations?user=Vj0m2A0AAAAJ&amp;hl=fr</idno>
              <idno type="IDREF">https://www.idref.fr/028314417</idno>
              <orgName ref="#struct-300009" />
              <affiliation ref="#struct-141072" />
            </author>
            <author role="aut">
              <persName>
                <forename type="first">Ricardo</forename>
                <surname>Jiménez-Peris</surname>
              </persName>
              <idno type="halauthorid">1008565-0</idno>
              <affiliation ref="#struct-453028" />
            </author>
            <author role="aut">
              <persName>
                <forename type="first">M. Tamer</forename>
                <surname>Özsu</surname>
              </persName>
              <idno type="halauthorid">463689-0</idno>
              <affiliation ref="#struct-301081" />
            </author>
            <editor role="depositor">
              <persName>
                <forename>Patrick</forename>
                <surname>Valduriez</surname>
              </persName>
              <email type="md5">b7903099e0d3ee0b492cd1c7a982e35b</email>
              <email type="domain">inria.fr</email>
            </editor>
          </titleStmt>
          <editionStmt>
            <edition n="v1" type="current">
              <date type="whenSubmitted">2021-05-18 15:18:11</date>
              <date type="whenModified">2024-02-15 03:32:06</date>
              <date type="whenReleased">2021-05-18 15:44:46</date>
              <date type="whenProduced">2021-05-18</date>
              <date type="whenEndEmbargoed">2021-05-18</date>
              <ref type="file" target="https://hal-lirmm.ccsd.cnrs.fr/lirmm-03228968/document">
                <date notBefore="2021-05-18" />
              </ref>
              <ref type="file" subtype="author" n="1" target="https://hal-lirmm.ccsd.cnrs.fr/lirmm-03228968/file/Newsql%20case-TLDKS%202021.pdf">
                <date notBefore="2021-05-18" />
              </ref>
              <ref type="externalLink" target="https://hal-lirmm.ccsd.cnrs.fr/lirmm-03228968/document" />
            </edition>
            <respStmt>
              <resp>contributor</resp>
              <name key="150418">
                <persName>
                  <forename>Patrick</forename>
                  <surname>Valduriez</surname>
                </persName>
                <email type="md5">b7903099e0d3ee0b492cd1c7a982e35b</email>
                <email type="domain">inria.fr</email>
              </name>
            </respStmt>
          </editionStmt>
          <publicationStmt>
            <distributor>CCSD</distributor>
            <idno type="halId">lirmm-03228968</idno>
            <idno type="halUri">https://hal-lirmm.ccsd.cnrs.fr/lirmm-03228968</idno>
            <idno type="halBibtex">valduriez:lirmm-03228968</idno>
            <idno type="halRefHtml">&lt;i&gt;Transactions on Large-Scale Data- and Knowledge-Centered Systems&lt;/i&gt;, 2021, Lecture Notes in Computer Science, LNCS-12670, pp.1-15. &lt;a target="_blank" href="https://dx.doi.org/10.1007/978-3-662-63519-3_1"&gt;&amp;#x27E8;10.1007/978-3-662-63519-3_1&amp;#x27E9;&lt;/a&gt;</idno>
            <idno type="halRef">Transactions on Large-Scale Data- and Knowledge-Centered Systems, 2021, Lecture Notes in Computer Science, LNCS-12670, pp.1-15. &amp;#x27E8;10.1007/978-3-662-63519-3_1&amp;#x27E9;</idno>
          </publicationStmt>
          <seriesStmt>
            <idno type="stamp" n="UNIV-RENNES1">Université de Rennes 1</idno>
            <idno type="stamp" n="CNRS">CNRS - Centre national de la recherche scientifique</idno>
            <idno type="stamp" n="INRIA">INRIA - Institut National de Recherche en Informatique et en Automatique</idno>
            <idno type="stamp" n="INRIA-SOPHIA">INRIA Sophia Antipolis - Méditerranée</idno>
            <idno type="stamp" n="IRISA">Irisa</idno>
            <idno type="stamp" n="INRIASO">INRIA-SOPHIA</idno>
            <idno type="stamp" n="INRIA_TEST">INRIA - Institut National de Recherche en Informatique et en Automatique</idno>
            <idno type="stamp" n="INRIA34">Montpellier</idno>
            <idno type="stamp" n="TESTALAIN1">TESTALAIN1</idno>
            <idno type="stamp" n="ZENITH" corresp="LIRMM">Scientific Data Management</idno>
            <idno type="stamp" n="LIRMM">Laboratoire d'Informatique de Robotique et de Microélectronique de Montpellier</idno>
            <idno type="stamp" n="INRIA2">INRIA 2</idno>
            <idno type="stamp" n="UR1-HAL">Publications labos UR1 dans HAL-Rennes 1</idno>
            <idno type="stamp" n="UR1-MATH-STIC">UR1 - publications Maths-STIC</idno>
            <idno type="stamp" n="UR1-UFR-ISTIC">UFR ISTIC Informatique et électronique</idno>
            <idno type="stamp" n="MIPS">Mathématiques, Informatique, Physique et Systèmes</idno>
            <idno type="stamp" n="UNIV-MONTPELLIER">Université de Montpellier</idno>
            <idno type="stamp" n="TEST-UR-CSS">TEST Université de Rennes CSS</idno>
            <idno type="stamp" n="UNIV-RENNES">Université de Rennes</idno>
            <idno type="stamp" n="INRIA-300009">Inria 300009</idno>
            <idno type="stamp" n="TEST-HALCNRS">Collection test HAL CNRS</idno>
            <idno type="stamp" n="UR1-MATH-NUM">Pôle UnivRennes - Mathématiques - Numérique </idno>
            <idno type="stamp" n="UM-2015-2021" corresp="UNIV-MONTPELLIER">Université de Montpellier (2015-2021)</idno>
            <idno type="stamp" n="INRIAARTDOI">INRIAARTDOI</idno>
            <idno type="stamp" n="INRIA-CANADA">INRIA-CANADA</idno>
          </seriesStmt>
          <notesStmt>
            <note type="audience" n="2">International</note>
            <note type="popular" n="0">No</note>
            <note type="peer" n="1">Yes</note>
          </notesStmt>
          <sourceDesc>
            <biblStruct>
              <analytic>
                <title xml:lang="en">Distributed Database Systems: The Case for NewSQL</title>
                <author role="aut">
                  <persName>
                    <forename type="first">Patrick</forename>
                    <surname>Valduriez</surname>
                  </persName>
                  <email type="md5">b7903099e0d3ee0b492cd1c7a982e35b</email>
                  <email type="domain">inria.fr</email>
                  <idno type="idhal" notation="string">patrick-valduriez</idno>
                  <idno type="idhal" notation="numeric">172604</idno>
                  <idno type="halauthorid" notation="string">22529-172604</idno>
                  <idno type="ORCID">https://orcid.org/0000-0001-6506-7538</idno>
                  <idno type="GOOGLE SCHOLAR">https://scholar.google.fr/citations?user=Vj0m2A0AAAAJ&amp;hl=fr</idno>
                  <idno type="IDREF">https://www.idref.fr/028314417</idno>
                  <orgName ref="#struct-300009" />
                  <affiliation ref="#struct-141072" />
                </author>
                <author role="aut">
                  <persName>
                    <forename type="first">Ricardo</forename>
                    <surname>Jiménez-Peris</surname>
                  </persName>
                  <idno type="halauthorid">1008565-0</idno>
                  <affiliation ref="#struct-453028" />
                </author>
                <author role="aut">
                  <persName>
                    <forename type="first">M. Tamer</forename>
                    <surname>Özsu</surname>
                  </persName>
                  <idno type="halauthorid">463689-0</idno>
                  <affiliation ref="#struct-301081" />
                </author>
              </analytic>
              <monogr>
                <idno type="halJournalId" status="VALID">67737</idno>
                <idno type="issn">1869-1994</idno>
                <title level="j">Transactions on Large-Scale Data- and Knowledge-Centered Systems</title>
                <imprint>
                  <publisher>Springer Berlin / Heidelberg</publisher>
                  <biblScope unit="serie">Lecture Notes in Computer Science</biblScope>
                  <biblScope unit="volume">LNCS-12670</biblScope>
                  <biblScope unit="pp">1-15</biblScope>
                  <date type="datePub">2021-05-18</date>
                </imprint>
              </monogr>
              <idno type="doi">10.1007/978-3-662-63519-3_1</idno>
              <ref type="publisher">https://link.springer.com/book/10.1007/978-3-662-63519-3</ref>
            </biblStruct>
          </sourceDesc>
          <profileDesc>
            <langUsage>
              <language ident="en">English</language>
            </langUsage>
            <textClass>
              <keywords scheme="author">
                <term xml:lang="en">Distributed database</term>
                <term xml:lang="en">database system</term>
                <term xml:lang="en">DBMS</term>
                <term xml:lang="en">SQL</term>
                <term xml:lang="en">NoSQL</term>
                <term xml:lang="en">NewSQL</term>
                <term xml:lang="en">polystore</term>
                <term xml:lang="en">scalable transaction management</term>
              </keywords>
              <classCode scheme="halDomain" n="info.info-db">Computer Science [cs]/Databases [cs.DB]</classCode>
              <classCode scheme="halTypology" n="ART">Journal articles</classCode>
              <classCode scheme="halOldTypology" n="ART">Journal articles</classCode>
              <classCode scheme="halTreeTypology" n="ART">Journal articles</classCode>
            </textClass>
            <abstract xml:lang="en">
              <p>Until a decade ago, the database world was all SQL, distributed, sometimes replicated, and fully consistent. Then, web and cloud applications emerged that need to deal with complex big data, and NoSQL came in to address their requirements, trading consistency for scalability and availability. NewSQL has been the latest technology in the big data management landscape, combining the scalability and availability of NoSQL with the consistency and usability of SQL. By blending capabilities only available in different kinds of database systems such as fast data ingestion and SQL queries and by providing online analytics over operational data, NewSQL opens up new opportunities in many application domains where real-time decisions are critical. NewSQL may also simplify data management, by removing the traditional separation between NoSQL and SQL (ingest data fast, query it with SQL), as well as between operational database and data warehouse / data lake (no more ETLs!). However, a hard problem is scaling out transactions in mixed operational and analytical (HTAP) workloads over big data, possibly coming from different data stores (HDFS, SQL, NoSQL). Today, only a few NewSQL systems have solved this problem. In this paper, we make the case for NewSQL, introducing their basic principles from distributed database systems and illustrating with Spanner and LeanXcale, two of the most advanced systems in terms of scalable transaction management.</p>
            </abstract>
          </profileDesc>
        </biblFull>
      </listBibl>
    </body>
    <back>
      <listOrg type="structures">
        <org type="researchteam" xml:id="struct-141072" status="OLD">
          <idno type="RNSR">201121208J</idno>
          <orgName>Scientific Data Management</orgName>
          <orgName type="acronym">ZENITH</orgName>
          <date type="end">2021-12-31</date>
          <desc>
            <address>
              <addrLine>LIRMM, 161 rue Ada, 34000 Montpellier</addrLine>
              <country key="FR" />
            </address>
            <ref type="url">https://team.inria.fr/zenith/</ref>
          </desc>
          <listRelation>
            <relation active="#struct-181" type="direct" />
            <relation name="UMR5506" active="#struct-410122" type="indirect" />
            <relation name="UMR5506" active="#struct-441569" type="indirect" />
            <relation active="#struct-34586" type="direct" />
            <relation active="#struct-300009" type="indirect" />
          </listRelation>
        </org>
        <org type="institution" xml:id="struct-453028" status="VALID">
          <orgName>LeanXcale [Madrid]</orgName>
          <desc>
            <address>
              <addrLine>Madrid</addrLine>
              <country key="ES" />
            </address>
            <ref type="url">http://www.leanxcale.com/</ref>
          </desc>
        </org>
        <org type="institution" xml:id="struct-301081" status="VALID">
          <orgName>University of Waterloo [Waterloo]</orgName>
          <desc>
            <address>
              <addrLine>200 University Avenue West, Waterloo, ON, Canada  N2L 3G1</addrLine>
              <country key="CA" />
            </address>
            <ref type="url">https://uwaterloo.ca</ref>
          </desc>
        </org>
        <org type="laboratory" xml:id="struct-181" status="OLD">
          <idno type="IdRef">139590827</idno>
          <idno type="ISNI">0000000405990488</idno>
          <idno type="RNSR">199111950H</idno>
          <idno type="ROR">https://ror.org/013yean28</idno>
          <orgName>Laboratoire d'Informatique de Robotique et de Microélectronique de Montpellier</orgName>
          <orgName type="acronym">LIRMM</orgName>
          <date type="start">1995-01-01</date>
          <date type="end">2021-12-31</date>
          <desc>
            <address>
              <addrLine>161 rue Ada - 34095 Montpellier</addrLine>
              <country key="FR" />
            </address>
            <ref type="url">https://www.lirmm.fr</ref>
          </desc>
          <listRelation>
            <relation name="UMR5506" active="#struct-410122" type="direct" />
            <relation name="UMR5506" active="#struct-441569" type="direct" />
          </listRelation>
        </org>
        <org type="institution" xml:id="struct-410122" status="OLD">
          <idno type="ISNI">0000000120970141</idno>
          <idno type="ROR">https://ror.org/051escj72</idno>
          <orgName>Université de Montpellier</orgName>
          <orgName type="acronym">UM</orgName>
          <date type="end">2021-12-31</date>
          <desc>
            <address>
              <addrLine>163 rue Auguste Broussonnet - 34090 Montpellier</addrLine>
              <country key="FR" />
            </address>
            <ref type="url">http://www.umontpellier.fr/</ref>
          </desc>
        </org>
        <org type="regroupinstitution" xml:id="struct-441569" status="VALID">
          <idno type="IdRef">02636817X</idno>
          <idno type="ISNI">0000000122597504</idno>
          <idno type="ROR">https://ror.org/02feahw73</idno>
          <orgName>Centre National de la Recherche Scientifique</orgName>
          <orgName type="acronym">CNRS</orgName>
          <date type="start">1939-10-19</date>
          <desc>
            <address>
              <country key="FR" />
            </address>
            <ref type="url">https://www.cnrs.fr/</ref>
          </desc>
        </org>
        <org type="laboratory" xml:id="struct-34586" status="VALID">
          <idno type="RNSR">198318250R</idno>
          <idno type="ROR">https://ror.org/01nzkaw91</idno>
          <orgName>Inria Sophia Antipolis - Méditerranée</orgName>
          <orgName type="acronym">CRISAM</orgName>
          <desc>
            <address>
              <addrLine>2004 route des Lucioles BP 93 06902 Sophia Antipolis</addrLine>
              <country key="FR" />
            </address>
            <ref type="url">http://www.inria.fr/centre/sophia/</ref>
          </desc>
          <listRelation>
            <relation active="#struct-300009" type="direct" />
          </listRelation>
        </org>
        <org type="institution" xml:id="struct-300009" status="VALID">
          <idno type="ROR">https://ror.org/02kvxyf05</idno>
          <orgName>Institut National de Recherche en Informatique et en Automatique</orgName>
          <orgName type="acronym">Inria</orgName>
          <desc>
            <address>
              <addrLine>Domaine de VoluceauRocquencourt - BP 10578153 Le Chesnay Cedex</addrLine>
              <country key="FR" />
            </address>
            <ref type="url">http://www.inria.fr/en/</ref>
          </desc>
        </org>
      </listOrg>
    </back>
  <teiCorpus>
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Distributed Database Systems: The Case for NewSQL</title>
			</titleStmt>
			<publicationStmt>
				<publisher />
				<availability status="unknown"><licence /></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Patrick</forename><surname>Valduriez</surname></persName>
							<affiliation key="aff0">
								<orgName type="laboratory">LIRMM</orgName>
								<orgName type="institution" key="instit1">Inria</orgName>
								<orgName type="institution" key="instit2">University of Montpellier</orgName>
								<orgName type="institution" key="instit3">CNRS</orgName>
								<address>
									<country key="FR">France</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Ricardo</forename><surname>Jimenez-Peris</surname></persName>
							<affiliation key="aff1">
								<orgName type="institution">LeanXcale</orgName>
								<address>
									<settlement>Madrid</settlement>
									<country key="ES">Spain</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">M</forename><surname>Tamer Özsu</surname></persName>
							<affiliation key="aff2">
								<orgName type="institution">University of Waterloo</orgName>
								<address>
									<country key="CA">Canada</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Distributed Database Systems: The Case for NewSQL</title>
					</analytic>
					<monogr>
						<imprint>
							<date />
						</imprint>
					</monogr>
					<idno type="MD5">9A9C78C3A8EDCABECFB21B8962FEE10D</idno>
					<idno type="DOI">10.1007/978-3-662-63519-3_1</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.8.0" ident="GROBID" when="2024-04-12T14:51+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid" />
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Distributed database</term>
					<term>database system</term>
					<term>DBMS</term>
					<term>SQL</term>
					<term>NoSQL</term>
					<term>NewSQL</term>
					<term>polystore</term>
					<term>scalable transaction management</term>
				</keywords>
			</textClass>
			<abstract>
<div><p>Until a decade ago, the database world was all <software>SQL</software>, distributed, sometimes replicated, and fully consistent. Then, web and cloud applications emerged that need to deal with complex big data, and NoSQL came in to address their requirements, trading consistency for scalability and availability. <software ContextAttributes="created">NewSQL</software> has been the latest technology in the big data management landscape, combining the scalability and availability of NoSQL with the consistency and usability of <software ContextAttributes="created">SQL</software>. By blending capabilities only available in different kinds of database systems such as fast data ingestion and <software ContextAttributes="created">SQL</software> queries and by providing online analytics over operational data, <software ContextAttributes="created">NewSQL</software> opens up new opportunities in many application domains where real-time decisions are critical. <software ContextAttributes="created">NewSQL</software> may also simplify data management, by removing the traditional separation between NoSQL and <software ContextAttributes="created">SQL</software> (ingest data fast, query it with <software ContextAttributes="created">SQL</software>), as well as between operational database and data warehouse / data lake (no more ETLs!). However, a hard problem is scaling out transactions in mixed operational and analytical (HTAP) workloads over big data, possibly coming from different data stores (HDFS, <software ContextAttributes="created">SQL</software>, NoSQL). Today, only a few <software ContextAttributes="created">NewSQL</software> systems have solved this problem. In this paper, we make the case for <software ContextAttributes="created">New<software>SQL</software></software>, introducing their basic principles from distributed database systems and illustrating with <software ContextAttributes="created">Spanner</software> and <software ContextAttributes="created">LeanXcale</software>, two of the most advanced systems in terms of scalable transaction management.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div><head n="1">Introduction</head><p>The first edition of the book Principles of Distributed Database Systems <ref type="bibr" target="#b9">[10]</ref> appeared in 1991 when the technology was new and there were not too many products. In the Preface to the first edition, we had quoted Michael Stonebraker who claimed in 1988 that in the following 10 years, centralized DBMSs would be an "antique curiosity" and most organizations would move towards distributed DBMSs. That prediction has certainly proved to be correct, and most systems in use today are either distributed or parallel. The fourth edition of this classic textbook <ref type="bibr" target="#b10">[11]</ref> includes the latest developments, in particular, big data, NoSQL and <software ContextAttributes="created">NewSQL</software>. <software ContextAttributes="created">NewSQL</software> is the latest technology in the big data management landscape, enjoying a rapid growth in the database system and business intelligence (BI) markets. <software ContextAttributes="created">NewSQL</software> combines the scalability and availability of NoSQL with the consistency and usability of <software ContextAttributes="created">SQL</software> (<software ContextAttributes="created">SQL</software> here refers to <software ContextAttributes="created">SQL</software> database systems, which is the common term used for relational database systems). By providing online analytics over operational data, NewSQL opens up new opportunities in many application domains where real-time decisions are critical. Important use cases are IT performance monitoring, proximity marketing, e-advertising, risk monitoring, real-time pricing, real-time fraud detection, internet-of-things (IoT), etc.</p><p><software ContextAttributes="created">NewSQL</software> may also simplify data management, by removing the traditional separation between NoSQL and <software ContextAttributes="created">SQL</software> (ingest data fast, query it with <software ContextAttributes="created">SQL</software>), as well as between the operational database and data warehouse or data lake (no more complex data extraction tools such as ETLs or ELTs!). However, a hard problem is scaling transactions in mixed operational and analytical (HTAP) workloads over big data, possibly coming from different data stores (HDFS files, NoSQL databases, <software ContextAttributes="created">SQL</software> databases). Currently, only a few <software ContextAttributes="created">NewSQL</software> database systems have solved this problem, e.g., the <software ContextAttributes="created">LeanXcale</software> <software ContextAttributes="created">NewSQL</software> database system that includes a highly scalable transaction manager <ref type="bibr" target="#b8">[9]</ref> and a polystore <ref type="bibr" target="#b5">[6]</ref>.</p><p><software ContextAttributes="created">NewSQL</software> database systems have different flavors and architectures. However, we can identify the following common features: support of the relational data model and standard <software ContextAttributes="created">SQL</software>; ACID transactions; scalability using data partitioning in shared-nothing clusters; and high availability using data replication. We gave a first in-depth presentation of <software ContextAttributes="created">NewSQL</software> in a tutorial at the IEEE Big Data 2019 conference <ref type="bibr" target="#b14">[15]</ref>, where we provide a taxonomy of <software ContextAttributes="created">NewSQL</software> database systems based on major dimensions including targeted workloads, capabilities and implementation techniques.</p><p>In this paper, we make the case for NewSQL. First, we briefly recall the principles of distributed database systems (Section 2), which are at the core of <software>NewSQL</software> systems. Then, we briefly introduce <software ContextAttributes="created">SQL</software> systems (Section 3) and NoSQL systems (Section 4). In Section 5, we present in more details our case for <software ContextAttributes="created">NewSQL</software>. Finally, Section 6 concludes and discusses research directions in <software ContextAttributes="created">NewSQL</software>.</p></div>
<div><head n="2">Principles of Distributed Database Systems</head><p>The current computing environment is largely distributed, with computers connected to Internet to form a worldwide distributed system. With cluster and cloud computing, organizations can have geographically distributed and interconnected data centers, each with hundreds or thousands of computers connected with high-speed networks. Within this environment, the amount of data that is captured has increased dramatically, creating the big data boom. Thus, there is a need to provide high-level data management capabilities, as with database systems, on these widely distributed data in order to ease application development, maintenance and evolution. This is the scope of distributed database systems <ref type="bibr" target="#b10">[11]</ref>, which have moved from a small part of the worldwide computing environment a few decades ago to mainstream today. A distributed database is a collection of multiple, logically interrelated databases located at the nodes of a distributed system. A distributed database system is then defined as the system that manages the distributed database and makes the distribution transparent to the users, providing major capabilities such as data integration, query processing, transaction management, replication, reliability, etc.</p><p>There are two types of distributed database systems: geo-distributed and single location (or single site). In the former, the sites are interconnected by wide area networks that are characterized by long message latencies and higher error rates. The latter consist of systems where the nodes are located in close proximity allowing much faster exchanges leading to much shorter message latencies and very low error rates. Single location distributed database systems are typically characterized by computer clusters in one data center and are commonly known as parallel database systems <ref type="bibr" target="#b3">[4]</ref> emphasizing the use of parallelism to increase performance as well as availability. In the context of the cloud, it is now quite common to find distributed database systems made of multiple single site clusters interconnected by wide area networks, leading to hybrid, multisite systems.</p><p>In a distributed environment, it is possible to accommodate increasing database sizes and bigger workloads. System expansion can usually be handled by adding processing and storage power to the network. Obviously, it may not be possible to obtain a linear increase in "power" since this also depends on the overhead of distribution. However, significant improvements are still possible. That is why distributed database systems have gained much interest in scale-out architectures in the context of cluster and cloud computing. Scale-out (also called horizontal scaling) should be contrasted with the most commonly used scale-up (also called vertical scaling), which refers to adding more power to a server, e.g., more processors and memory, and thus gets limited by the maximum size of the server. Horizontal scaling refers to adding more servers, called "scaleout servers" in a loosely coupled fashion, to scale almost infinitely. By making it easy to add new component database servers, a distributed database system can provide horizontal scaling, in addition to vertical scaling.</p><p>In the context of the cloud, there is also the need to support elasticity, which is different from scalability, in order to adapt to workload changes and be able to process higher (or lower) transaction rates. Elasticity requires dynamically provisioning (or deprovisioning) of servers to increase (or decrease) the global capacity and live data migration 1, e.g., moving or replicating a data partition from an overloaded server to another, while the system is running transactions.</p><p>In observing the changes that have taken place since the first edition of the book <ref type="bibr" target="#b13">[14]</ref>, which focused on distribution in relational databases, what has struck us is that the fundamental principles of distributed data management still hold, and distributed data management can still be characterized along three dimensions: distribution, heterogeneity and autonomy of the data sources (see Fig. <ref type="figure" target="#fig_0">1</ref>). This characterization has been useful for all subsequent editions, to include the new developments in many topics, which are reflected in Fig. <ref type="figure" target="#fig_0">1</ref>, which identifies four main categories: the early clientserver database systems, with limited distribution; the recent distributed and parallel systems, including NoSQL and <software ContextAttributes="created">NewSQL</software> with high distribution; the P2P systems with high distribution and autonomy; and the multidatabase systems and polystores with high distribution, autonomy and heterogeneity.</p><p>What has changed much since the first edition of the book and made the problems much harder, is the scale of the dimensions: very large-scale distribution in the context of cluster, P2P, and cloud; very high heterogeneity in the context of web and big data; and high autonomy in the context of web and P2P. It is also interesting to note that the fundamental principles of data partitioning, data integration, transaction management, replication and <software ContextAttributes="created">SQL</software> query processing have stood the test of time. In particular, new techniques and algorithms (NoSQL, <software ContextAttributes="created">NewSQL</software>) can be presented as extensions of earlier material, using relational concepts.  <ref type="bibr" target="#b10">[11]</ref>).</p></div>
<div><head n="3">SQL Database Systems</head><p><software>SQL</software> (relational) database systems are at the heart of any information system. The fundamental principle behind relational data management is data independence, which enables applications and users to deal with the data at a high conceptual level while ignoring implementation details. The major innovation of <software ContextAttributes="created">SQL</software> database systems has been to allow data manipulation through queries expressed in a high-level (declarative) language such as <software ContextAttributes="created">SQL</software>. Queries can then be automatically translated into optimized query plans that take advantage of underlying access methods and indices. Many other advanced capabilities have been made possible by data independence: data modeling, schema management, consistency through integrity rules and triggers, ACID transaction support, etc. The fact that <software ContextAttributes="created">SQL</software> has been an industry standard language has had a major impact on the data analysis tool industry, making it easy for tool vendors to provide support for reporting, BI and data visualization on top of all major <software ContextAttributes="created">SQL</software> database systems. This trend has also fostered fierce competition among tool vendors, which has led to highquality tools for specialized applications. The data independence principle has also enabled <software ContextAttributes="created">SQL</software> database systems to continuously integrate new advanced capabilities such as object and document support and to adapt to all kinds of hardware/software platforms from very small devices to very large computers (NUMA multiprocessor, cluster, etc.) in distributed environments. In particular, distribution transparency supports the data independence principle.</p><p><software>SQL</software> database systems come in two main variants, operational and analytical, which have been around for more than three decades. The two variants are complementary and data from operational databases have to be uploaded and pre-processed first so it can be queried.</p><p>Operational database systems have been designed for OLTP workloads. They excel at updating data in real-time and keeping it consistent in the advent of failures and concurrent accesses by means of ACID transactions. But they have a hard time in answering large analytical queries and do not scale well. We can distinguish two kinds of systems with respect to scalability: systems that scale up (typically in a NUMA mainframe) but do not scale out and systems that scale out, but only to a few nodes using a shared-disk architecture. Fig. <ref type="figure" target="#fig_2">2</ref> illustrates the <software ContextAttributes="created">SQL</software> shared-disk architecture, with multiple DB servers accessing the shared disk units. Within a DB server, all <software ContextAttributes="created">SQL</software> functionality is implemented in a tightly coupled fashion. The reason for such tight coupling is to maximize performance, which, in the early days of databases, was the only practical solution. Shared-disk requires disks to be globally accessible by the nodes, which requires a storage area network (SAN) that uses a block-based protocol. Since different servers can access the same block in conflicting update modes, global cache consistency is needed. This is typically achieved using a distributed lock manager, which is complex to implement and introduces significant contention. In the case of OLTP workloads, shared-disk has remained the preferred option as it makes load balancing easy and efficient, but scalability is heavily limited by the distributed locking that causes severe contention. Analytical database systems have been designed for data warehouses and OLAP workloads. They exploit parallel processing, in particular, intraquery parallelism, to reduce the response times of large analytical queries in read-intensive applications. Unlike operational database systems that use shared-disk, they use a shared-nothing architecture. The term "shared-nothing" was proposed by Michael Stonebraker <ref type="bibr" target="#b11">[12]</ref> to better contrast with two other popular architectures, shared-memory and shared-disk. In the 1980's, shared-nothing was just emerging (with pioneers like Teradata) and sharedmemory was the dominant architecture.</p><p>A shared-nothing architecture is simply a distributed architecture, i.e., the server nodes do not share either memory or disk and have their own copy of the operating system. Today, shared-nothing clusters are cost-effective as servers can be off-the-shelf components (multicore processor, memory and disk) connected by a low-latency network such as Infiniband or <software>Myrinet</software>. Shared-nothing provides excellent scalability, through scale-out, unlike shared-memory and shared-disk. However, it requires careful partitioning of the data on multiple disk nodes. Furthermore, the addition of new nodes in the system presumably requires reorganizing and repartitioning the database to deal with the load balancing issues. Finally, fault-tolerance is more difficult than with shared-disk as a failed node will make its data on disk unavailable, thus requiring data replication. However, it is for its scalability advantage that shared-nothing has been first adopted for OLAP workloads, as it is easier to parallelize read-only queries. For the same reason, it has been adopted for big data systems, which are typically readintensive.</p></div>
<div><head>4</head><p>NoSQL Database Systems <software>SQL</software> databases, whether operational or analytical, are inefficient for complex data. The rigid schema is the problem. For instance, creating a schema for rows that have optional or structured fields (like a list of items), with a fixed set of columns is difficult, and querying the data even more. Maintainability becomes very hard. Graph data is also difficult to manage. Although it can be modeled in <software ContextAttributes="created">SQL</software> tables, graph-traversal queries may be very time consuming, with repeated and sparse accesses to the database (to mimic graph traversals on tables), which can be very inefficient, if the graph is large. About a decade ago, <software ContextAttributes="created">SQL</software> database systems were criticized for their "One Size Fits All" approach. Although they have been able to integrate support for all kinds of data (e.g., multimedia objects, documents) and code (e.g., user-defined functions, user-defined oeprators), this approach has resulted in a loss of performance, simplicity, and flexibility for applications with specific, tight performance requirements. Therefore, it has been argued that more specialized database systems are needed.</p><p>NoSQL database systems came to address the requirements of web and cloud applications, NoSQL meaning "Not Only <software ContextAttributes="created">SQL</software>" to contrast with the "One Size Fits All" approach of <software ContextAttributes="created">SQL</software> database systems. Another reason that has been used to motivate NoSQL is that supporting strong database consistency as operational database systems do, i.e., through ACID transactions, hurts scalability. Therefore, most NoSQL database systems have relaxed strong database consistency in favor of scalability. An argument to support this approach has been the famous CAP theorem from distributed systems theory <ref type="bibr" target="#b4">[5]</ref>, which states that a distributed system with replication can only provide two out of the following three properties: (C) consistency, (A) availability, and (P) partition tolerance. However, the argument is simply wrong as the CAP theorem has nothing to do with database scalability: it is related to replica consistency (i.e., strong mutual consistency) in the presence of network partitioning. Thus, a weaker form of consistency that is typically provided is eventual consistency, which allows replica values to diverge for some time until the update activity ceases so the values eventually become identical (and mutually consistent).</p><p>As an alternative to <software>SQL</software>, different NoSQL database systems support different data models and query languages/APIs other than standard <software ContextAttributes="created">SQL</software>. They typically emphasize one or more of the following features: scalability, fault-tolerance, availability, sometimes at the expense of atomicity, strong consistency, flexible schemas, and practical APIs for programming complex data-intensive applications. This is obtained by relaxing features found in <software ContextAttributes="created">SQL</software> database systems such as full <software ContextAttributes="created">SQL</software> support, ACID transactions, in particular, atomicity and consistency, which become weaker (e.g., atomicity only for some operations, eventual consistency) and strong schema support.</p><p>There are four main categories of NoSQL database systems based on the underlying data model, i.e., key-value, wide column, document, and graph. Within each category, we can find different variations of the data model, as there is just no standard (unlike the relational data model), and different query languages or APIs. For document database systems, JSON is becoming the de facto standard, as opposed to older, more complex XML. There are also multi-model systems, to combine multiple data models, typically document and graph, in one system.</p><p>To provide scalability, NoSQL database systems typically use a scale-out approach in a shared-nothing cluster. They also rely on replication and failover to provide high availability. NoSQL database systems are very diverse as there is just no standard. However, we can illustrate the architecture of key-value database systems that is more uniform and quite popular (see Fig. <ref type="figure" target="#fig_3">3</ref>) and the basis for many variations. A major difference with the <software ContextAttributes="created">SQL</software> architecture, which is client-server, is distribution by design to take full advantage of a shared-nothing cluster. In particular, it supports the popular master-worker model for executing parallel tasks, with master nodes coordinating the activities of the worker nodes, by sending them tasks and data and receiving back notifications of tasks done.</p><p>This key-value (KV) database system architecture has two loosely-coupled layers: KV engine and data store. The KV engine is accessed by KV clients, with a simple KV API that is specific to each system, but with typical operations such as put, get and scan (enables to perform a simple range query). Such API eases integration with code libraries and applications. The functionality provided by a KV engine corresponds to the low-level part of an <software>SQL</software> system: i.e., operation processing using indexes, replication, fault-tolerance and high availability. But there is no such thing as query engine or transaction engine. The data store is in many cases a distributed, fault-tolerant file system, such as HDFS, and in other cases a custom storage engine running on top of the local file system providing caching facilities and basic operations for reading and updating data. Key-value database systems, e.g., <software ContextAttributes="created">DynamoDB</software> and <software ContextAttributes="created">Cassandra</software>, are schemaless so they are totally flexible with the stored data. They are in most cases scalable to large number of nodes. And they are very efficient at ingesting data. Wide column database systems, e.g., BigTable and HBase, enable vertical partitioning of the tables, while providing a key-value interface and sharing many features with key-value database systems. They provide some more functionality such as range scans and the possibility of defining a schema. Document database systems, e.g., <software ContextAttributes="created">MongoDB</software> and <software ContextAttributes="created">CouchBase</software>, use a flexible data representation, such as JSON or XML, and provide an API to access these data or sometimes a query language. Graph database systems, e.g., Neo4J and Ori-entDB, are specialized in storing and querying graphs efficiently. They are very efficient when the graph database can be centralized at one machine, and replicated at others. But if the database is big and needs to be distributed and partitioned, efficiency is lost.</p></div>
<div><head n="5">The Case for NewSQL</head><p><software>NewSQL</software> is a new class of database system that seeks to combine the advantages of NoSQL (scalability, availability) and <software ContextAttributes="created">SQL</software> (ACID consistency and usability) systems.</p><p>The main objective is to address the requirements of enterprise information systems, which have been supported by <software>SQL</software> database systems. But there is also the need to be able to scale out in a shared-nothing cluster in order to support big data, as characterized by the famous 3 big V's (Volume, Velocity, Variety). Examples of popular <software ContextAttributes="created">NewSQL</software> database systems are <software ContextAttributes="created">LeanXcale</software>, <software ContextAttributes="created">Spanner</software>, CockroachDB, EsgynDB, <software ContextAttributes="created">SAP HANA</software>, MemSQL, NuoDB, and <software ContextAttributes="created">Splice Machine</software>. In the rest of this section, we present <software ContextAttributes="created">NewSQL</software> in more detail, and illustrate with two of the most advanced systems in terms of scalable transaction management: <software ContextAttributes="created">Spanner</software> and <software ContextAttributes="created">LeanXcale</software>.</p></div>
<div><head n="5.1">NewSQL database systems</head><p><software ContextAttributes="created">NewSQL</software> database systems come in different flavors, each targeted at different workloads and usages. Our taxonomy in <ref type="bibr" target="#b14">[15]</ref> is useful to understand <software ContextAttributes="created">NewSQL</software> database systems based on major dimensions including targeted workloads (OLTP, OLAP, HTAP), features and implementation techniques. The main new features are: scalable ACID transactions, in-memory support, polystore, and HTAP support. Each of these features can be mapped into one of the 3 V's of big data. <software ContextAttributes="created">NewSQL</software> database systems typically support more than one feature, but are often characterized by the one feature in which they excel, e.g., scalable ACID transactions. Note that some systems with some of the features have existed long before the term <software ContextAttributes="created">NewSQL</software> was coined, e.g., main memory database systems. Scalable ACID transactions are provided for big OLTP workloads using a distributed transaction manager that can scale out to large numbers of nodes. ACID properties of transactions are fully provided, with isolation levels such as serializability or snapshot isolation. The few systems that have solved this hard problem are <software ContextAttributes="created">LeanXcale</software> <ref type="bibr" target="#b8">[9]</ref> and <software ContextAttributes="created">Spanner</software> <ref type="bibr" target="#b2">[3]</ref>, through horizontal scalability in a shared-nothing cluster typically on top of a key-value data store.</p><p>Scaling transaction execution to achieve high transaction throughput in a distributed or parallel system has been a topic of interest for a long time. In recent years solutions have started to emerge; we discuss two approaches in the next sections as embodied in the <software>Spanner</software> and <software ContextAttributes="created">LeanXcale</software> database systems. Both of them implement the ACID properties in a scalable and composable manner. In both approaches, a new technique is proposed to serialize transactions that can support very high throughput rates (millions or even a billion transactions-per-second). Both approaches have a way to timestamp the commit of transactions and use this commit timestamp to serialize transactions. <software ContextAttributes="created">Spanner</software> uses real time to timestamp transactions, while <software ContextAttributes="created">LeanXcale</software> uses logical time. Real time has the advantage that it does not require any communication, but requires high accuracy and a highly reliable realtime infrastructure. The idea is to use real time as timestamp and wait for the accuracy to elapse to make the result visible to transactions. <software ContextAttributes="created">LeanXcale</software> adopts an approach in which transactions are timestamped with a logical time and committed transactions are made visible progressively as gaps in the serialization order are filled by newly committed transactions. Logical time avoids having to rely on creating a real-time infrastructure.</p><p>Main memory database systems, such as <software>MemDB</software>, <software ContextAttributes="created">SAP HANA</software> and <software ContextAttributes="created">VoltDB</software>, keep all data in memory, which enables processing queries at the speed of memory without being limited by the I/O bandwidth and latency. They come in two flavors, analytical and operational. The main memory analytical database systems are very fast. But the main limitation is that the entire database, the auxiliary data, and all intermediate results must fit in memory.</p><p>Polystores, also called multistore systems <ref type="bibr" target="#b1">[2]</ref>, provide integrated access to a number of different data stores, such as HDFS files, <software ContextAttributes="created">SQL</software> and NoSQL databases, through one or more query languages. They are typically restricted to read-only queries, as supporting distributed transactions across heterogeneous data stores is a hard problem. They are reminiscent of multidatabase systems (see Database Integration Chapter in <ref type="bibr" target="#b10">[11]</ref>), using a query engine with the capability of querying different data stores in realtime, without storing the data themselves. However, they can support data sources with much more heterogeneity, e.g., key-value, document and graph data. Polystores come in different flavors, depending on the level of coupling with the underlying data stores: loosely-coupled (as web data integration systems), tightly-coupled (typically in the context of data lakes), and hybrid.</p><p>HTAP (Hybrid Transactional Analytical Processing) systems are able to perform OLAP and OLTP on the same data. HTAP allows performing real-time analysis on operational data, thus avoiding the traditional separation between operational database and data warehouse and the complexity of dealing with ETLs. HTAP systems exploit multiversioning to avoid conflicts between long analytical queries and updates. However, multiversioning by itself is not enough, in particular, to make both OLAP and OLTP efficient, which is very hard.</p><p><software ContextAttributes="created">NewSQL</software> database systems can have one or more of these features and/or technologies, e.g., scalable operational, HTAP and main memory, or for the most advanced systems, HTAP with scalable transactions and polystore capabilities. The architecture of the most advanced <software ContextAttributes="created">NewSQL</software> database systems is interesting, typically using a key-value store to provide a first level of scalability (see Fig. <ref type="figure" target="#fig_4">4</ref>). This approach can provide the ability of the <software ContextAttributes="created">NewSQL</software> database system to support a key-value API, in addition to plain <software ContextAttributes="created">SQL</software>, in order to allow for fast and simple programmatic access to rows. Although appealing, this approach makes it complex for application developers since the key-value store typically does not know that the stored data is relational, how it is organized and how metadata is kept. Atop a key-value store layer, the <software ContextAttributes="created">SQL</software> engine can also be made scalable. Thus, we can have a fully distributed architecture, as shown below, where the three layers (key-value store, transaction engine and <software ContextAttributes="created">SQL</software> query engine) can scale out independently in a shared-nothing cluster.</p><p>Such a distributed architecture provides many opportunities to perform optimal resource allocation to the workload (OLAP vs OLTP). To scale out query processing, traditional parallel techniques from <software>SQL</software> analytical database systems are reused. However, within such an architecture, the <software ContextAttributes="created">SQL</software> query engine should exploit the key-value data store, by pushing down within execution plans the operations that can be more efficiently performed close to the data, e.g., filter and aggregate. Scaling out transaction management is much harder and very few <software ContextAttributes="created">NewSQL</software> database systems have been able to achieve it. </p></div>
<div><head n="5.2">Spanner</head><p><software ContextAttributes="created">Spanner</software> <ref type="bibr" target="#b2">[3]</ref> is an advanced <software ContextAttributes="created">NewSQL</software> database system with full <software ContextAttributes="created">SQL</software> and scalable ACID transactions. It was initially developed by Google to support the e-advertising AdWords application, which is update intensive with millions of suppliers monitoring their maximum cost-per-click bids. <software ContextAttributes="created">Spanner</software> uses traditional locking and 2PC and provides serializability as isolation level. Since locking results in high contention between large queries and update transactions, <software ContextAttributes="created">Spanner</software> also implements multiversioning, which avoids the conflicts between reads and writes and thus the contention stemming from these conflicts. However, multiversioning does not provide scalability. In order to avoid the bottleneck of centralized certification, updated data items are assigned timestamps (using real time) upon commit. For this purpose, <software ContextAttributes="created">Spanner</software> implements an internal service called TrueTime that provides the current time and its current accuracy. In order to make the TrueTime service reliable and accurate, it uses both atomic clocks and GPS since they have different failures modes that can compensate each other. For instance, atomic clocks have a continuous drift, while GPS loses accuracy in some meteorological conditions, when the antenna gets broken, etc. The current time obtained through TrueTime is used to timestamp transactions that are going to be committed. The reported accuracy is used to compensate during timestamp assignment: after obtaining the local time, there is a wait time for the length of the inaccuracy, typically around 10 milliseconds. To deal with deadlocks, <software ContextAttributes="created">Spanner</software> adopts deadlock avoidance using a wound-and-wait approach thereby eliminating the bottleneck of deadlock detection. Storage management in <software ContextAttributes="created">Spanner</software> is made scalable by leveraging Bigtable, a wide column data store.</p><p>Multiversioning is implemented as follows. Private versions of the data items are kept at each site until commitment. Upon commit, the 2PC protocol is started during which buffered writes are propagated to each participant. Each participant sets locks on the updated data items. Once all locks have been acquired, it assigns a commit timestamp larger than any previously assigned timestamp. The coordinator also acquires the write locks. Upon acquiring all write locks and receiving the prepared message from all participants, the coordinator chooses a timestamp larger than the current time plus the inaccuracy, and bigger than any other timestamps assigned locally. The coordinator waits for the assigned timestamp to pass (waiting for the inaccuracy) and then communicates the commit decision to the client. Using multiversioning, <software>Spanner</software> also implements read-only transactions that read over the snapshot at the current time.</p></div>
<div><head n="5.3">LeanXcale</head><p><software ContextAttributes="created">LeanXcale</software> is an advanced <software ContextAttributes="created">NewSQL</software> HTAP database system with full <software ContextAttributes="created">SQL</software> and polystore support with scalable ACID transactions. It incorporates three main components: storage engine, query engine and transactional engine -all three distributed and highly scalable (i.e., to hundreds of nodes). <software ContextAttributes="created">LeanXcale</software> provides full <software ContextAttributes="created">SQL</software> functionality over relational tables with JSON columns. Clients can access <software ContextAttributes="created">LeanXcale</software> with any analytics tool using a JDBC or ODBC driver. An important capability of <software ContextAttributes="created">LeanXcale</software> is polystore access using the scripting mechanism of the CloudMdsQL query language <ref type="bibr" target="#b5">[6,</ref><ref type="bibr" target="#b6">7]</ref>. The data stores that can be accessed range from distributed raw data files (e.g., HDFS through parallel <software ContextAttributes="created">SQL</software> queries) to NoSQL database systems (e.g., <software ContextAttributes="created">MongoDB</software>, where queries can be expressed as Ja-vaScript programs).</p><p>The storage engine is a proprietary relational key-value store, KiVi, which allows for efficient horizontal partitioning of tables and indexes, based on the primary key or index key. Each table is stored as a KiVi table, where the key corresponds to the primary key of the <software>LeanXcale</software> table and all the columns are stored as they are in KiVi columns. Indexes are also stored as KiVi tables, where the index keys are mapped to the corresponding primary keys. This model enables high scalability of the storage layer by partitioning tables and indexes across KiVi data nodes. KiVi provides the typical put and get operations of key-value stores as well as all single table operations such as predicate-based selection, aggregation, grouping, and sorting, i.e., any algebraic operator but join. Multitable operations, i.e., joins, are performed by the query engine and any algebraic operator above the join in the query plan. Thus, all algebraic operators below a join are pushed down to the KiVi storage engine where they are executed entirely locally.</p><p>The query engine processes OLAP workloads over operational data, so that analytical queries are answered over real-time (fresh) data. The parallel implementation of the query engine follows the single-program multiple data (SPMD) approach, which combines intra-query and intra-operator parallelism. With SPMD, multiple symmetric workers (threads) on different query instances execute the same query/operator, but each of them deals with different portions of the data.</p><p>The query engine optimizes queries using two-step optimization. As queries are received, query plans are broadcast and processed by all workers. For parallel execution, an optimization step is added, which transforms a generated sequential query plan into a parallel one. This transformation involves replacing table scans with parallel table scans, and adding shuffle operators to make sure that, in stateful operators (such as group by, or join), related rows (i.e., rows to be joined or grouped together) are handled by the same worker. Parallel table scans combined with pushed down filtering, aggregation and sorting divide the rows from the base tables among all workers, i.e., each worker will retrieve a disjoint subset of the rows during table scan. This is done by dividing the rows and scheduling the obtained subsets to the different query engine instances. Each worker then processes the rows obtained from subsets scheduled to its query engine instance, exchanging rows with other workers as determined by the shuffle operators added to the query plan. To process joins, the query engine supports two strategies for data exchange (shuffle and broadcast) and various join methods (hash, nested loop, etc.), performed locally at each worker after the data exchange takes place.</p><p>The query engine is designed to integrate with arbitrary data stores, where data resides in its natural format and can be retrieved (in parallel) by running specific scripts or declarative queries. This makes it a powerful polystore that can process data from its original format, taking full advantage of both expressive scripting and massive parallelism. Moreover, joins across any native datasets, such as HDFS or <software ContextAttributes="created">MongoDB</software>, including <software ContextAttributes="created">LeanXcale</software> tables, can be applied, exploiting efficient parallel join algorithms <ref type="bibr" target="#b7">[8]</ref>. To enable ad-hoc querying of an arbitrary data set, the query engine processes queries in the CloudMdsQL query language, where scripts are wrapped as native subqueries.</p><p><software ContextAttributes="created">LeanXcale</software> scales out transactional management <ref type="bibr" target="#b8">[9]</ref> by decomposing the ACID properties and scaling each of them independently but in a composable manner. First, it uses logical time to timestamp transactions and to set visibility over committed data. Second, it provides snapshot isolation. Third, all the functions that are intensive in resource usage such as concurrency control, logging, storage and query processing, are fully distributed and parallel, without any coordination. The transactional engine provides strong consistency with snapshot isolation. Thus, reads are not blocked by writes, using multiversion concurrency control. The distributed algorithm for providing transactional consistency is able to commit transactions fully in parallel without any coordination by making a smart separation of concerns, i.e., the visibility of the committed data is separated from the commit processing. In this way, commit processing can adopt a fully parallel approach without compromising consistency that is regulated by the visibility of the committed updates. Thus, commits happen in parallel, and whenever there is a longer prefix of committed transactions without gaps the current snapshot is advanced to that point. For logical time, <software ContextAttributes="created">LeanXcale</software> uses two services: the commit sequencer and the snapshot server. The commit sequencer distributes commit timestamps and the snapshot server regulates the visibility of committed data by advancing the snapshot visible to transactions.</p><p>In addition to scalability, in the context of the cloud, <software>LeanXcale</software> supports non-intrusive elasticity and can move data partitions without affecting transaction processing. This is based on an algorithm that guarantees snapshot isolation across data partitions being moved without actually affecting the processing over the data partitions.</p></div>
<div><head n="6">Conclusion</head><p>In this paper, we made the case for <software>NewSQL</software>, which is enjoying a fast growth in the database system and BI markets in the context of big data. <software ContextAttributes="created">NewSQL</software> combines the scalability and availability of NoSQL with the consistency and usability of SQL. <software ContextAttributes="created">NewSQL</software> systems come in different flavors, each targeted at different workloads and usages. However, they all rely on the principles of distributed database systems, in particular, data partitioning, query processing, replication and transaction management, which have stood the test of time.</p><p>We characterized <software>NewSQL</software> systems by their main new features, which are: scalable ACID transactions, main memory support, polystore, and HTAP support. NewSQL database systems typically support more than one feature, but are often characterized by the one feature in which they excel, e.g., scalable ACID transactions.</p><p>By blending capabilities only available in different kinds of database systems such as fast data ingestion and SQL queries and by providing online analytics over operational data, NewSQL opens up new opportunities in many application domains where realtime decision is critical. Important use cases are IT performance monitoring, proximity marketing, e-advertising (e.g., Google AdWords), risk monitoring, real-time pricing, real-time fraud detection, IoT, etc. Before <software>NewSQL</software>, these applications could be developed, but using multiple systems and typically at a very high price. NewSQL may also simplify data management, by removing the traditional separation between NoSQL and SQL (ingest data fast, query it with SQL), as well as between operational database and data warehouse / data lake (no more ETLs!).</p><p>A hard problem is scaling out transactions in mixed operational and analytical (HTAP) workloads over big data, possibly coming from different data stores (HDFS, SQL, NoSQL). Today, only a few <software>NewSQL</software> systems have solved this problem, e.g., <software ContextAttributes="created">Spanner</software> and <software ContextAttributes="created">LeanXcale</software>, which we described in more details. Both of them implement the ACID properties in a scalable and composable manner, with a new technique to serialize transactions that can support very high throughput rates (millions or even a billion transactions-per-second). Both approaches have a way to timestamp the commit of transactions and use this commit timestamp to serialize transactions. <software ContextAttributes="created">Spanner</software> uses real time to timestamp transactions, while <software ContextAttributes="created">LeanXcale</software> uses logical time, which avoids having to rely on a complex real-time infrastructure. Furthermore, in addition to scalable transactions, <software ContextAttributes="created">LeanXcale</software> provides polytore support, to access multiple data stores such as HDFS and NoSQL, and non-intrusive elasticity.</p><p><software>NewSQL</software> is relatively new, and there is much room for research. Examples of research directions include: JSON and <software ContextAttributes="created">SQL</software> integration, to seamlessly access both relational and JSON data, and thus combine the advantages of <software ContextAttributes="created">SQL</software> and NoSQL with one database system; streaming <software ContextAttributes="created">SQL</software> to combine data streams and <software ContextAttributes="created">NewSQL</software> data; integration with popular big data frameworks such as Spark to perform analytics and machine learning; and defining specific <software ContextAttributes="created">NewSQL</software> HTAP benchmarks.</p></div><figure xml:id="fig_0"><head>Fig. 1 .</head><label>1</label><figDesc>Fig.1. Distributed database system dimensions (modified after<ref type="bibr" target="#b10">[11]</ref>).</figDesc></figure>
<figure xml:id="fig_2"><head>Fig. 2 .</head><label>2</label><figDesc>Fig. 2. SQL shared-disk architecture.</figDesc><graphic coords="6,165.05,496.90,268.19,167.20" type="bitmap" /></figure>
<figure xml:id="fig_3"><head>Fig. 3 .</head><label>3</label><figDesc>Fig. 3. NoSQL key-value architecture.</figDesc><graphic coords="9,163.63,160.90,271.05,169.69" type="bitmap" /></figure>
<figure xml:id="fig_4"><head>Fig. 4 .</head><label>4</label><figDesc>Fig. 4. NewSQL distributed architecture.</figDesc><graphic coords="12,168.03,148.90,262.25,210.58" type="bitmap" /></figure>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Data Management in the Cloud: Challenges and Opportunities</title>
		<author>
			<persName><forename type="first">D</forename><surname>Agrawal</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Das</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>El Abbadi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Synthesis Lectures on Data Management</title>
		<imprint>
			<publisher>Morgan &amp; Claypool Publishers</publisher>
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Query processing in multistore systems: an overview</title>
		<author>
			<persName><forename type="first">C</forename><surname>Bondiombouy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Valduriez</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">International Journal of Cloud Computing</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="309" to="346" />
			<date type="published" when="2016">2016</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Spanner: Google's Globally-Distributed Database</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">C</forename><surname>Corbett</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. USENIX Symposium on Operating Systems Design and Implementation</title>
		<meeting>USENIX Symposium on Operating Systems Design and Implementation</meeting>
		<imprint>
			<date type="published" when="2012">2012</date>
			<biblScope unit="page" from="251" to="264" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Parallel Database Systems: the future of high-performance database systems</title>
		<author>
			<persName><forename type="first">D</forename><surname>Dewitt</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Gray</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Communications of the ACM</title>
		<imprint>
			<biblScope unit="volume">35</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="85" to="98" />
			<date type="published" when="1992">1992</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Brewer's Conjecture and the Feasibility of Consistent, Available, Partition-tolerant Web Services</title>
		<author>
			<persName><forename type="first">S</forename><surname>Gilbert</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><forename type="middle">A</forename><surname>Lynch</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIGACT News</title>
		<imprint>
			<biblScope unit="volume">33</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="51" to="59" />
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Cloud-MdsQL: Querying Heterogeneous Cloud Data Stores with a Common Language</title>
		<author>
			<persName><forename type="first">B</forename><surname>Kolev</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Valduriez</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Bondiombouy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Jimenez-Peris</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Pau</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Pereira</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Distributed and Parallel Databases</title>
		<imprint>
			<biblScope unit="volume">34</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="463" to="503" />
			<date type="published" when="2016">2016</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">The CloudMdsQL Multistore System</title>
		<author>
			<persName><forename type="first">B</forename><surname>Kolev</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Valduriez</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Bondiombouy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Jimenez-Peris</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Pau</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Pereira</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ACM SIGMOD Conference</title>
		<meeting>ACM SIGMOD Conference</meeting>
		<imprint>
			<date type="published" when="2016">2016</date>
			<biblScope unit="page" from="2113" to="2116" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Parallel Polyglot Query Processing on Heterogeneous Cloud Data Stores with LeanXcale</title>
		<author>
			<persName><forename type="first">B</forename><surname>Kolev</surname></persName>
		</author>
		<author>
			<persName><forename type="first">O</forename><surname>Levchenko</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Pacitti</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Valduriez</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Vilaça</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Gonçalves</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Jimenez-Peris</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Kranas</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE BigData Conference</title>
		<meeting>IEEE BigData Conference</meeting>
		<imprint>
			<date type="published" when="2018">2018</date>
			<biblScope unit="page" from="1757" to="1766" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">System and Method for Highly Scalable Decentralized and Low Contention Transactional Processing</title>
		<author>
			<persName><forename type="first">R</forename><surname>Jimenez-Peris</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Patiño-Martinez</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">European Patent #EP</title>
		<imprint>
			<biblScope unit="volume">2780832</biblScope>
			<biblScope unit="page">597</biblScope>
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
	<note>US Patent #US9</note>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">Principles of Distributed Database Systems</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">T</forename><surname>Özsu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Valduriez</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1991">1991</date>
			<publisher>Prentice-Hall</publisher>
		</imprint>
	</monogr>
	<note>1st Edition</note>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">Principles of Distributed Database Systems</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">T</forename><surname>Özsu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Valduriez</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2020">2020</date>
			<publisher>Springer</publisher>
		</imprint>
	</monogr>
	<note>4th Edition</note>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">The Case for Shared Nothing</title>
		<author>
			<persName><forename type="first">M</forename><surname>Stonebraker</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Database Engineering Bulletin</title>
		<imprint>
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="4" to="9" />
			<date type="published" when="1986">1986</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">The VoltDB Main Memory DBMS</title>
		<author>
			<persName><forename type="first">M</forename><surname>Stonebraker</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Weisberg</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Data Eng. Bull</title>
		<imprint>
			<biblScope unit="volume">36</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="21" to="27" />
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Principles of Distributed Data Management in 2020</title>
		<author>
			<persName><forename type="first">P</forename><surname>Valduriez</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. International Conference on Databases and Expert Systems Applications</title>
		<meeting>International Conference on Databases and Expert Systems Applications</meeting>
		<imprint>
			<date type="published" when="2011">2011</date>
			<biblScope unit="page" from="1" to="11" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">NewSQL: principles, systems and current trends</title>
		<author>
			<persName><forename type="first">P</forename><surname>Valduriez</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Jimenez-Peris</surname></persName>
		</author>
		<ptr target="https://www.leanxcale.com/scientific-articles" />
	</analytic>
	<monogr>
		<title level="m">Tutorial, IEEE Big Data Conference</title>
		<imprint>
			<date type="published" when="2019">2019</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</teiCorpus></text>
</TEI>