<?xml version='1.0' encoding='utf-8'?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.1" xsi:schemaLocation="http://www.tei-c.org/ns/1.0 http://api.archives-ouvertes.fr/documents/aofr-sword.xsd">
  <teiHeader>
    <fileDesc>
      <titleStmt>
        <title>HAL TEI export of hal-03951799</title>
      </titleStmt>
      <publicationStmt>
        <distributor>CCSD</distributor>
        <availability status="restricted">
          <licence target="http://creativecommons.org/licenses/by/4.0/">Distributed under a Creative Commons Attribution 4.0 International License</licence>
        </availability>
        <date when="2024-04-29T11:47:49+02:00" />
      </publicationStmt>
      <sourceDesc>
        <p part="N">HAL API platform</p>
      </sourceDesc>
    </fileDesc>
  </teiHeader>
  <text>
    <body>
      <listBibl>
        <biblFull>
          <titleStmt>
            <title xml:lang="en">Web Audio Modules 2.0: An Open Web Audio Plugin Standard</title>
            <author role="aut">
              <persName>
                <forename type="first">Michel</forename>
                <surname>Buffa</surname>
              </persName>
              <email type="md5">b2aa6d56b7e1f56528400513799687fa</email>
              <email type="domain">unice.fr</email>
              <idno type="idhal" notation="string">michel-buffa</idno>
              <idno type="idhal" notation="numeric">739332</idno>
              <idno type="halauthorid" notation="string">35134-739332</idno>
              <idno type="ORCID">https://orcid.org/0000-0003-1900-0871</idno>
              <affiliation ref="#struct-178918" />
              <affiliation ref="#struct-13009" />
              <affiliation ref="#struct-34586" />
              <affiliation ref="#struct-1144919" />
            </author>
            <author role="aut">
              <persName>
                <forename type="first">Shihong</forename>
                <surname>Ren</surname>
              </persName>
              <idno type="halauthorid">1715524-0</idno>
              <affiliation ref="#struct-300284" />
            </author>
            <author role="aut">
              <persName>
                <forename type="first">Owen</forename>
                <surname>Campbell</surname>
              </persName>
              <idno type="halauthorid">1871780-0</idno>
              <affiliation ref="#struct-547032" />
            </author>
            <author role="aut">
              <persName>
                <forename type="first">Jari</forename>
                <surname>Kleimola</surname>
              </persName>
              <idno type="halauthorid">1321532-0</idno>
              <affiliation ref="#struct-547032" />
            </author>
            <author role="aut">
              <persName>
                <forename type="first">Oliver</forename>
                <surname>Larkin</surname>
              </persName>
              <idno type="halauthorid">841922-0</idno>
              <affiliation ref="#struct-547032" />
            </author>
            <author role="aut">
              <persName>
                <forename type="first">Tom</forename>
                <surname>Burns</surname>
              </persName>
              <email type="md5">524a331a78cb7075b8d6e88562b0e4a0</email>
              <email type="domain">psych.ox.ac.uk</email>
              <idno type="idhal" notation="numeric">940927</idno>
              <idno type="halauthorid" notation="string">708581-940927</idno>
            </author>
            <editor role="depositor">
              <persName>
                <forename>MICHEL</forename>
                <surname>BUFFA</surname>
              </persName>
              <email type="md5">b2aa6d56b7e1f56528400513799687fa</email>
              <email type="domain">unice.fr</email>
            </editor>
          </titleStmt>
          <editionStmt>
            <edition n="v1" type="current">
              <date type="whenSubmitted">2023-01-23 11:48:25</date>
              <date type="whenModified">2024-03-31 00:06:05</date>
              <date type="whenReleased">2023-01-23 12:24:29</date>
              <date type="whenProduced">2022-04-25</date>
              <date type="whenEndEmbargoed">2023-01-23</date>
              <ref type="file" target="https://inria.hal.science/hal-03951799/document">
                <date notBefore="2023-01-23" />
              </ref>
              <ref type="file" subtype="author" n="1" target="https://inria.hal.science/hal-03951799/file/Web_Audio_Modules_2_0__an_Open_Web_Audio_Plugin_Standard%20%281%29.pdf">
                <date notBefore="2023-01-23" />
              </ref>
            </edition>
            <respStmt>
              <resp>contributor</resp>
              <name key="303026">
                <persName>
                  <forename>MICHEL</forename>
                  <surname>BUFFA</surname>
                </persName>
                <email type="md5">b2aa6d56b7e1f56528400513799687fa</email>
                <email type="domain">unice.fr</email>
              </name>
            </respStmt>
          </editionStmt>
          <publicationStmt>
            <distributor>CCSD</distributor>
            <idno type="halId">hal-03951799</idno>
            <idno type="halUri">https://inria.hal.science/hal-03951799</idno>
            <idno type="halBibtex">buffa:hal-03951799</idno>
            <idno type="halRefHtml">&lt;i&gt;WWW '22: The ACM Web Conference 2022&lt;/i&gt;, Apr 2022, Virtual Event, France. pp.364-369, &lt;a target="_blank" href="https://dx.doi.org/10.1145/3487553.3524225"&gt;&amp;#x27E8;10.1145/3487553.3524225&amp;#x27E9;&lt;/a&gt;</idno>
            <idno type="halRef">WWW '22: The ACM Web Conference 2022, Apr 2022, Virtual Event, France. pp.364-369, &amp;#x27E8;10.1145/3487553.3524225&amp;#x27E9;</idno>
          </publicationStmt>
          <seriesStmt>
            <idno type="stamp" n="UNIV-ST-ETIENNE">Université Jean Monnet - Saint-Etienne</idno>
            <idno type="stamp" n="UNICE">Université Nice Sophia Antipolis</idno>
            <idno type="stamp" n="CNRS">CNRS - Centre national de la recherche scientifique</idno>
            <idno type="stamp" n="INRIA">INRIA - Institut National de Recherche en Informatique et en Automatique</idno>
            <idno type="stamp" n="INRIA-SOPHIA">INRIA Sophia Antipolis - Méditerranée</idno>
            <idno type="stamp" n="I3S">Laboratoire d'Informatique, Signaux et Systèmes de Sophia-Antipolis</idno>
            <idno type="stamp" n="INRIASO">INRIA-SOPHIA</idno>
            <idno type="stamp" n="INRIA_TEST">INRIA - Institut National de Recherche en Informatique et en Automatique</idno>
            <idno type="stamp" n="TESTALAIN1">TESTALAIN1</idno>
            <idno type="stamp" n="WIMMICS">WIMMICS: Web-Instrumented Man-Machine Interactions, Communities, and Semantics</idno>
            <idno type="stamp" n="INRIA2">INRIA 2</idno>
            <idno type="stamp" n="UNIV-COTEDAZUR">Université Côte d'Azur</idno>
            <idno type="stamp" n="UDL">UDL</idno>
            <idno type="stamp" n="FAUST">Publications relatives au projet Faust</idno>
            <idno type="stamp" n="INRIA_WEB">Inria &amp; web</idno>
          </seriesStmt>
          <notesStmt>
            <note type="audience" n="2">International</note>
            <note type="invited" n="0">No</note>
            <note type="popular" n="0">No</note>
            <note type="peer" n="1">Yes</note>
            <note type="proceedings" n="1">Yes</note>
          </notesStmt>
          <sourceDesc>
            <biblStruct>
              <analytic>
                <title xml:lang="en">Web Audio Modules 2.0: An Open Web Audio Plugin Standard</title>
                <author role="aut">
                  <persName>
                    <forename type="first">Michel</forename>
                    <surname>Buffa</surname>
                  </persName>
                  <email type="md5">b2aa6d56b7e1f56528400513799687fa</email>
                  <email type="domain">unice.fr</email>
                  <idno type="idhal" notation="string">michel-buffa</idno>
                  <idno type="idhal" notation="numeric">739332</idno>
                  <idno type="halauthorid" notation="string">35134-739332</idno>
                  <idno type="ORCID">https://orcid.org/0000-0003-1900-0871</idno>
                  <affiliation ref="#struct-178918" />
                  <affiliation ref="#struct-13009" />
                  <affiliation ref="#struct-34586" />
                  <affiliation ref="#struct-1144919" />
                </author>
                <author role="aut">
                  <persName>
                    <forename type="first">Shihong</forename>
                    <surname>Ren</surname>
                  </persName>
                  <idno type="halauthorid">1715524-0</idno>
                  <affiliation ref="#struct-300284" />
                </author>
                <author role="aut">
                  <persName>
                    <forename type="first">Owen</forename>
                    <surname>Campbell</surname>
                  </persName>
                  <idno type="halauthorid">1871780-0</idno>
                  <affiliation ref="#struct-547032" />
                </author>
                <author role="aut">
                  <persName>
                    <forename type="first">Jari</forename>
                    <surname>Kleimola</surname>
                  </persName>
                  <idno type="halauthorid">1321532-0</idno>
                  <affiliation ref="#struct-547032" />
                </author>
                <author role="aut">
                  <persName>
                    <forename type="first">Oliver</forename>
                    <surname>Larkin</surname>
                  </persName>
                  <idno type="halauthorid">841922-0</idno>
                  <affiliation ref="#struct-547032" />
                </author>
                <author role="aut">
                  <persName>
                    <forename type="first">Tom</forename>
                    <surname>Burns</surname>
                  </persName>
                  <email type="md5">524a331a78cb7075b8d6e88562b0e4a0</email>
                  <email type="domain">psych.ox.ac.uk</email>
                  <idno type="idhal" notation="numeric">940927</idno>
                  <idno type="halauthorid" notation="string">708581-940927</idno>
                </author>
              </analytic>
              <monogr>
                <title level="m">Proceedings of the WWW '22: The ACM Web Conference 2022</title>
                <meeting>
                  <title>WWW '22: The ACM Web Conference 2022</title>
                  <date type="start">2022-04-25</date>
                  <date type="end">2021-04-29</date>
                  <settlement>Virtual Event</settlement>
                  <country key="FR">France</country>
                </meeting>
                <imprint>
                  <publisher>ACM</publisher>
                  <biblScope unit="pp">364-369</biblScope>
                  <date type="datePub">2022-04-25</date>
                </imprint>
              </monogr>
              <idno type="doi">10.1145/3487553.3524225</idno>
            </biblStruct>
          </sourceDesc>
          <profileDesc>
            <langUsage>
              <language ident="en">English</language>
            </langUsage>
            <textClass>
              <keywords scheme="author">
                <term xml:lang="en">Web Audio audio effects and instruments plugin architecture Web standards</term>
                <term xml:lang="en">Web Audio</term>
                <term xml:lang="en">audio effects and instruments</term>
                <term xml:lang="en">plugin architecture</term>
                <term xml:lang="en">Web standards</term>
              </keywords>
              <classCode scheme="halDomain" n="info">Computer Science [cs]</classCode>
              <classCode scheme="halTypology" n="COMM">Conference papers</classCode>
              <classCode scheme="halOldTypology" n="COMM">Conference papers</classCode>
              <classCode scheme="halTreeTypology" n="COMM">Conference papers</classCode>
            </textClass>
            <abstract xml:lang="en">
              <p>A group of academic researchers and developers from the computer music industry have joined forces for over a year to propose a new version of Web Audio Modules, an open source framework facilitating the development of high-performance Web Audio plugins (instruments, realtime audio effects and MIDI processors). While JavaScript and Web standards are becoming increasingly flexible and powerful, C, C++, and domain-specific languages such as FAUST or Csound remain the prevailing languages used by professional developers of native plugins. Fortunately, it is now possible to compile them in WebAssembly, which means they can be integrated with the Web platform. Our work aims to create a continuum between native and browser based audio app development and to appeal to programmers from both worlds. This paper presents our proposal including guidelines and implementations for an open Web Audio plugin standard-essentially the infrastructure to support high level audio plugins for the browser.</p>
            </abstract>
          </profileDesc>
        </biblFull>
      </listBibl>
    </body>
    <back>
      <listOrg type="structures">
        <org type="researchteam" xml:id="struct-178918" status="VALID">
          <idno type="RNSR">201221031M</idno>
          <orgName>Web-Instrumented Man-Machine Interactions, Communities and Semantics</orgName>
          <orgName type="acronym">WIMMICS</orgName>
          <desc>
            <address>
              <country key="FR" />
            </address>
            <ref type="url">http://wimmics.inria.fr/</ref>
          </desc>
          <listRelation>
            <relation active="#struct-34586" type="direct" />
            <relation active="#struct-300009" type="indirect" />
            <relation active="#struct-452156" type="direct" />
            <relation active="#struct-13009" type="indirect" />
            <relation active="#struct-117617" type="indirect" />
            <relation name="UMR7271" active="#struct-441569" type="indirect" />
            <relation active="#struct-1039632" type="indirect" />
          </listRelation>
        </org>
        <org type="laboratory" xml:id="struct-13009" status="VALID">
          <orgName>Laboratoire d'Informatique, Signaux, et Systèmes de Sophia Antipolis</orgName>
          <orgName type="acronym">I3S</orgName>
          <desc>
            <address>
              <addrLine>2000, route des Lucioles - Les Algorithmes - bât. Euclide B 06900 Sophia Antipolis</addrLine>
              <country key="FR" />
            </address>
            <ref type="url">http://www.i3s.unice.fr/</ref>
          </desc>
          <listRelation>
            <relation active="#struct-117617" type="direct" />
            <relation name="UMR7271" active="#struct-441569" type="direct" />
            <relation active="#struct-1039632" type="direct" />
          </listRelation>
        </org>
        <org type="laboratory" xml:id="struct-34586" status="VALID">
          <idno type="RNSR">198318250R</idno>
          <idno type="ROR">https://ror.org/01nzkaw91</idno>
          <orgName>Inria Sophia Antipolis - Méditerranée</orgName>
          <orgName type="acronym">CRISAM</orgName>
          <desc>
            <address>
              <addrLine>2004 route des Lucioles BP 93 06902 Sophia Antipolis</addrLine>
              <country key="FR" />
            </address>
            <ref type="url">http://www.inria.fr/centre/sophia/</ref>
          </desc>
          <listRelation>
            <relation active="#struct-300009" type="direct" />
          </listRelation>
        </org>
        <org type="institution" xml:id="struct-1144919" status="INCOMING">
          <orgName>Université Côte d’Azur</orgName>
          <desc>
            <address>
              <addrLine>Nice</addrLine>
              <country key="FR" />
            </address>
          </desc>
        </org>
        <org type="institution" xml:id="struct-300284" status="VALID">
          <idno type="IdRef">028209966</idno>
          <idno type="ISNI">0000 0001 2158 1682</idno>
          <idno type="ROR">https://ror.org/04yznqr36</idno>
          <orgName>Université Jean Monnet - Saint-Étienne</orgName>
          <orgName type="acronym">UJM</orgName>
          <date type="start">1969-03-27</date>
          <desc>
            <address>
              <addrLine>10, Rue Tréfilerie – CS 8230142023 Saint-Étienne Cedex 2</addrLine>
              <country key="FR" />
            </address>
            <ref type="url">https://www.univ-st-etienne.fr/</ref>
          </desc>
        </org>
        <org type="institution" xml:id="struct-547032" status="VALID">
          <orgName>webaudiomodules.org</orgName>
          <orgName type="acronym">WAMs</orgName>
          <desc>
            <address>
              <country key="FR" />
            </address>
            <ref type="url">http://webaudiomodules.org/</ref>
          </desc>
        </org>
        <org type="institution" xml:id="struct-300009" status="VALID">
          <idno type="ROR">https://ror.org/02kvxyf05</idno>
          <orgName>Institut National de Recherche en Informatique et en Automatique</orgName>
          <orgName type="acronym">Inria</orgName>
          <desc>
            <address>
              <addrLine>Domaine de VoluceauRocquencourt - BP 10578153 Le Chesnay Cedex</addrLine>
              <country key="FR" />
            </address>
            <ref type="url">http://www.inria.fr/en/</ref>
          </desc>
        </org>
        <org type="department" xml:id="struct-452156" status="VALID">
          <orgName>Scalable and Pervasive softwARe and Knowledge Systems</orgName>
          <orgName type="acronym">Laboratoire I3S - SPARKS</orgName>
          <date type="start">2016-03-03</date>
          <desc>
            <address>
              <addrLine>Laboratoire I3SCS 4012106903 Sophia Antipolis Cedex</addrLine>
              <country key="FR" />
            </address>
            <ref type="url">http://www.i3s.unice.fr/sparks</ref>
          </desc>
          <listRelation>
            <relation active="#struct-13009" type="direct" />
            <relation active="#struct-117617" type="indirect" />
            <relation name="UMR7271" active="#struct-441569" type="indirect" />
            <relation active="#struct-1039632" type="indirect" />
          </listRelation>
        </org>
        <org type="institution" xml:id="struct-117617" status="VALID">
          <idno type="IdRef">026403498</idno>
          <idno type="ISNI">0000000123372892</idno>
          <idno type="ROR">https://ror.org/02k9vew78</idno>
          <orgName>Université Nice Sophia Antipolis (1965 - 2019)</orgName>
          <orgName type="acronym">UNS</orgName>
          <date type="start">1965-10-23</date>
          <date type="end">2019-12-31</date>
          <desc>
            <address>
              <addrLine>Parc Valrose, 06100 Nice</addrLine>
              <country key="FR" />
            </address>
            <ref type="url">http://unice.fr/</ref>
          </desc>
        </org>
        <org type="regroupinstitution" xml:id="struct-441569" status="VALID">
          <idno type="IdRef">02636817X</idno>
          <idno type="ISNI">0000000122597504</idno>
          <idno type="ROR">https://ror.org/02feahw73</idno>
          <orgName>Centre National de la Recherche Scientifique</orgName>
          <orgName type="acronym">CNRS</orgName>
          <date type="start">1939-10-19</date>
          <desc>
            <address>
              <country key="FR" />
            </address>
            <ref type="url">https://www.cnrs.fr/</ref>
          </desc>
        </org>
        <org type="regroupinstitution" xml:id="struct-1039632" status="VALID">
          <idno type="IdRef">241035694</idno>
          <idno type="ROR">https://ror.org/019tgvf94</idno>
          <orgName>Université Côte d'Azur</orgName>
          <orgName type="acronym">UniCA</orgName>
          <date type="start">2020-01-01</date>
          <desc>
            <address>
              <addrLine>Parc Valrose, 28, avenue Valrose 06108 Nice Cedex 2</addrLine>
              <country key="FR" />
            </address>
            <ref type="url">https://univ-cotedazur.fr</ref>
          </desc>
        </org>
      </listOrg>
    </back>
  <teiCorpus>
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Web Audio Modules 2.0: An Open Web Audio Plugin Standard</title>
			</titleStmt>
			<publicationStmt>
				<publisher />
				<availability status="unknown"><licence /></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Michel</forename><surname>Buffa</surname></persName>
							<email>buffa@univ-cotedazur.fr</email>
						</author>
						<author>
							<persName><forename type="first">Shihong</forename><surname>Ren</surname></persName>
							<email>shihong.ren@univ-st-etienne.fr</email>
						</author>
						<author>
							<persName><forename type="first">Owen</forename><surname>Campbell</surname></persName>
							<email>owen.campbell@gmail.comwebaudiomodules.org</email>
						</author>
						<author>
							<persName><forename type="first">Steven</forename><surname>Yi</surname></persName>
							<email>stevenyi@gmail.comwebaudiomodules.orgusa</email>
						</author>
						<author>
							<persName><forename type="first">Jari</forename><surname>Kleimola</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Oliver</forename><surname>Larkin</surname></persName>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">University Côte d'Azur</orgName>
								<orgName type="institution" key="instit2">CNRS</orgName>
								<orgName type="institution" key="instit3">INRIA France</orgName>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<orgName type="institution">Shanghai Conservatory of Music</orgName>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff2">
								<orgName type="institution">Université de Saint-Étienne</orgName>
								<address>
									<settlement>ECLLA China</settlement>
									<country key="FR">France</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff3">
								<address>
									<country>Finland, UK</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Web Audio Modules 2.0: An Open Web Audio Plugin Standard</title>
					</analytic>
					<monogr>
						<imprint>
							<date />
						</imprint>
					</monogr>
					<idno type="MD5">743AD59957A39B875225A3709C613298</idno>
					<idno type="DOI">10.1145/3487553.3524225</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.8.0" ident="GROBID" when="2024-04-12T14:50+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid" />
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>its engineering → Abstraction</term>
					<term>modeling and modularity Web Audio</term>
					<term>audio effects and instruments</term>
					<term>plugin architecture</term>
					<term>Web standards</term>
				</keywords>
			</textClass>
			<abstract>
<div><p>host from WAM distribution, right: audio editor of the JSPatcher application)</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div><head n="1">INTRODUCTION</head><p>In 2015 Jari Kleimola and Oliver Larkin created <software ContextAttributes="created">Web</software> Audio Modules (WAM) <ref type="bibr" target="#b6">[7]</ref>, a standard for creating reusable and interoperable plugins implemented as WebComponents, the core of which was written in C/C++. This initiative was aimed primarily at developers of native plugins (i.e. VST plugins). In 2018, they joined forces with other groups of people working on interoperable <software ContextAttributes="created">Web</software> Audio plugins and plugin hosts (including authors of this paper, some of whom are members of the W3C <software ContextAttributes="created">Web</software> Audio WG) to synchronize their efforts toward the beginnings of an open standard called <software ContextAttributes="created">Web Audio Plugins</software> (WAP) <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b1">2]</ref>, covering a wider range of use cases. Since 2018 W3C <software ContextAttributes="created">Web</software> standards have matured: the appearance of <software ContextAttributes="created">WebAssembly</software>, stabilization of WebComponents, support for Au-dioWorklets <ref type="bibr" target="#b3">[4]</ref> in the <software ContextAttributes="created">Web</software> Audio API, and continued evolution of JavaScript have all helped make professional-grade, <software ContextAttributes="created">Web</software>-based audio production a reality. In addition, commercial companies now offer digital audio workstations (DAW) on the <software ContextAttributes="created">Web</software> which act as host <software ContextAttributes="created">Web</software> applications and support plugins <ref type="bibr" target="#b2">[3]</ref>.</p><p>Taking into account these developments and the feedback received from developers over the past few years, our group has further expanded and started working on a new version at the end of 2020. The project, called "<software>Web Audio Modules</software> 2.0" (WAM2), is open source and distributed as GitHub repositories and as npm modules.</p></div>
<div><head n="2">BACKGROUND CONTEXT AND TERMS 2.1 State of the Art: Native Plugin Standard</head><p>Over the last 20 years there has been a big shift in the technology used for music production and performance. One of the most significant changes is that there are now far fewer hardware devices and many software-based studios where mixing consoles, effect units, and tape machines have all been replaced by virtual equivalents. One of the landmark moments for this technology was the introduction of VST (Virtual Studio Technology<ref type="foot" target="#foot_1">1</ref> ) by Steinberg in 1996. This is a standard where modular audio software devices (plugins) are deployed as dynamic libraries loaded by a host application which would typically be a DAW. This has become one of the primary means by which musicians access new sounds, and in addition to a lively hobbyist community<ref type="foot" target="#foot_2">2</ref> there are many companies that focus on the development of these software instruments and effects. Several other manufacturers of DAWs and operating systems developed their own APIs in order to have more influence over the user experience of their platform (Apple's <software ContextAttributes="used">AudioUnits</software>, Avid's <software ContextAttributes="used">AAX</software> etc.), and the open source community has created similar formats <ref type="foot" target="#foot_3">3</ref> as well. These APIs all share common functionality, namely processing blocks of audio samples, handling parameter changes, handling MIDI, and managing state. Many third-party developers opt to use an intermediate C++ framework, such as <software ContextAttributes="used">JUCE</software> <ref type="foot" target="#foot_4">4</ref> or <software ContextAttributes="used">iPlug</software> <ref type="foot" target="#foot_5">5</ref> , which facilitates compilation of a single codebase to multiple target APIs, saving the developer a lot of time.</p></div>
<div><head n="2.2">The Web Audio API and the Lack of an Open Plugin Standard</head><p>The <software ContextAttributes="used">Web Audio API</software> in its 1.0 version is now a W3C recommendation (a "frozen standard"). It proposes a set of unit generators called <software ContextAttributes="used">AudioNodes</software> for graph-based realizations of audio algorithms and it is supported in the latest versions of most popular desktop and mobile browsers. The connection of these nodes in the browser via a JavaScript API allows for a range of different applications involving realtime audio processing. The API comes with a limited set of built-in nodes for common operations such as volume control, audio filtering, time delay/echo, reverberation, dynamics processing, spatialization, etc. The addition in 2018 of the <software ContextAttributes="used">AudioWorklet</software> node provides a solution for implementing custom low level audio processing (supported by all major browsers in 2022), including DSP code compiled to <software ContextAttributes="used">WebAssembly</software>, that will be executed in the browser's audio thread. Such nodes can be assembled into an "audio graph", which developers can use to write more complex audio effects or instruments. Sometimes, when performing live, one needs to chain audio effects together (for example in the guitarist's pedal board) and when composing/producing music multiple effects and instruments are often used. These are use cases where the <software ContextAttributes="used">Web Audio API</software> nodes are too low level, hence the need for a higher level unit in order to represent the equivalent of the "plugins" that are ubiquitous in native DAWs. Multiple proposals for <software ContextAttributes="used">WebAudio</software> plugin standardization arose since 2013 <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b4">[5]</ref><ref type="bibr" target="#b5">[6]</ref><ref type="bibr" target="#b6">[7]</ref>. We published a state of the art <ref type="bibr" target="#b0">[1]</ref><ref type="bibr" target="#b1">[2]</ref><ref type="bibr" target="#b2">[3]</ref> on this domain which is still relevant today.</p></div>
<div><head n="2.3">What Makes the Web Platform Different?</head><p>Although we aim to introduce the functionality offered by native audio plugins to the <software ContextAttributes="used">Web</software>, the distinct advantages and limitations of the environment require a different approach to API design and at least guidelines on how to package plugins for publication on a plugin repository/server and for their integration in a host. A Webbased API should be "<software ContextAttributes="used">Web</software> aware" and use URIs as plugin identifiers. Plugins are just another kind of <software ContextAttributes="used">Web</software> resource, like images, CSS or JS files and should be referenced by a relative/local or remote URL. Host web apps should be able to discover local/remote plugins by querying plugin folders/servers. Remote plugins should be usable without the need to download them manually, and the mixture of different JavaScript libraries and frameworks should not raise any naming conflicts or dependency problems. In the following sections we present WAM 2.0, a new evolution of the standards we have developed up to 2018, and emphasize the new features it offers.   <ref type="figure" target="#fig_0">2</ref> shows code for a simple host loading a WAM, connecting it to the audio graph, and displaying its GUI. At line 10 a JavaScript dynamic import is used to load a WAM instance using its URI. The WAM instance "audioNode" property can be connected to the audio graph (line 16), while its "createGUI" method returns an HTML element that contains the plugin GUI (line 19), which can be in turn added to the DOM (line 22). The result of the execution of this code can be seen in Figure <ref type="figure" target="#fig_2">3</ref>. In this example <ref type="foot" target="#foot_6">6</ref> the plugin is a phaser effect coded in <software ContextAttributes="used">Faust</software>, compiled to a <software ContextAttributes="used">WebAssembly</software> module residing in an <software ContextAttributes="used">AudioWorklet</software>, and its GUI is a <software ContextAttributes="used">WebComponent</software>.</p></div>
<div><head n="3">WAM 2.0 ARCHITECTURE 3.1 Project Organization</head><p>Since the previous version of the WAM API, an organization at GitHub called <software ContextAttributes="used">WebAudioModules</software><ref type="foot" target="#foot_7">7</ref> was created to gather the related repositories and projects. The current work is grouped into 4 repositories, all under MIT license. They correspond to the WAM API (detailed in section 4), SDK and Param Manager SDK (section 5), and examples of plugins and hosts (section 6). The API and the SDKs are also published as NPM packages <ref type="foot" target="#foot_8">8</ref> under @webaudiomodules namespace (scope).</p></div>
<div><head n="3.2">Realtime Audio Processing with AudioWorklet</head><p>Realtime audio processing is an example of a "hard realtime" task, meaning all computations must complete within a more or less fixed, finite amount of time determined by a number of factors tied to hardware capabilities and configurations, usually on the order of several milliseconds. If the processing cannot finish in the allotted time, audible glitches will corrupt the output. A critical component of such systems is a high-priority thread where short blocks of samples can be processed before being fed to the system's digitalto-analog converter and played over speakers or headphones. At present, <software>AudioWorklet</software> is the only entrypoint for developers to access the high priority audio thread that runs the <software ContextAttributes="used">Web Audio API</software>'s processing graph, and thus it is a central component of our proposed plugin architecture. <software ContextAttributes="used">AudioWorklets</software> are divided into two parts reflecting the multithreaded nature of the environment: <software ContextAttributes="used">AudioWorkletNode</software> and <software ContextAttributes="used">Au-dioWorkletProcessor</software>. These APIs are extended to provide the main thread and audio thread components of WAM plugins: the <software ContextAttributes="used">WamNode</software> and <software ContextAttributes="used">WamProcessor</software>. While some WAMs may be implemented using a single node, others may be implemented using a subgraph of multiple nodes which may consist of an arbitrary mixture of built-in <software ContextAttributes="used">Web Audio</software> nodes and custom <software ContextAttributes="used">AudioWorklets</software>. All of this is abstracted by the <software ContextAttributes="used">WamNode</software> and <software ContextAttributes="used">WamProcessor</software> interfaces, which are presented to the host as a single <software ContextAttributes="used">Web</software> Audio node and processor, regardless of underlying implementation. This abstraction is key to seamless interoperability between hosts and plugins on either thread.</p></div>
<div><head n="3.3">Facilitating Interaction on the Audio Thread</head><p>Because the Web Audio API provides no "official" way to communicate with processors on the audio thread, the WAM framework relies on a singleton object attached to the audio thread's global scope called the <software ContextAttributes="used">WamEnv</software> to facilitate interactions between hosts and processors. Processors are organized into WamGroups, managed by the <software ContextAttributes="used">WamEnv</software>, where each WamGroup contains plugins created by a particular host or subhost (such as a pedalboard plugin). Much care was taken to minimize the API's assumptions about host implementation, and the <software ContextAttributes="used">WamEnv</software> and WamGroup are the only objects in the WAM ecosystem which are expected to be provided by the host. Figure <ref type="figure" target="#fig_3">4</ref> illustrates the relationships between the host, <software ContextAttributes="used">WamNode</software>, <software ContextAttributes="used">WamProcessor</software>, and <software ContextAttributes="used">WamEnv</software>, and how the API facilitates communication between these entities on each thread.</p></div>
<div><head n="4">API OVERVIEW 4.1 Interoperability</head><p>The new WAM API <ref type="foot" target="#foot_9">9</ref> includes definition files for plugins and hosts written in TypeScript and abstract classes that conform to the API written in JavaScript. The API is designed for making web-based modular audio plugins and using them in compatible hosts. Relevant parts of the WAM API should be implemented by each WAM plugin or host. Plugins and hosts which conform to the WAM API are guaranteed to be compatible, regardless of their implementations.</p></div>
<div><head n="4.2">Primary API Features</head><p>Getting the WAM's information by fetching a JSON file: Each WAM has a descriptor which contains metadata such as name, version, url for loading and running the plugin, etc.</p><p>Loading the WAM plugin constructor by fetching an EC-MAScript Module file: WAMs must provide a primary index.js module file. By loading this file from the plugin URI, a host can create plugin instances.</p><p>Getting a <software>WebAudio</software> <software ContextAttributes="used">AudioNode</software>-compatible processor that can be inserted into an existing audio graph: WAMs appear to hosts to be single <software ContextAttributes="used">Web</software> Audio nodes, even if they are composed of multiple <software ContextAttributes="used">Web</software> Audio nodes. The SDK comes with a Compos-iteAudioNode class that WAMs can inherit from which can wrap a subgraph of multiple nodes such that it behaves like a single node.</p><p>Saving and restoring the plugin's state: WAMs can have many different parameters and thus many possible states. If a WAM is loaded into a DAW and its settings are manipulated by the user, it is mandatory to be able to recall and reapply those settings (i.e values of the different parameters) when the user saves / loads a project in the host application.</p><p>Agnostic of host / plugin implementation: The standard is designed to provide full support for hosts which run in JavaScript's main thread or on the audio thread (via <software>AudioWorklet</software>). Furthermore, care has been taken to ensure that the interoperability guaranteed by the API makes as few assumptions as possible about the underlying implementation of both hosts and plugins. While the SDK provides concrete implementations, there is no requirement for developers to use it in order to build and distribute a valid WAM if they wish to implement some or all of the API themselves. Since WAM hosts and plugins can conceivably be designed using standard <software ContextAttributes="used">WebAudio</software> nodes (in situations where access to the audio thread is not desired) or using <software ContextAttributes="used">AudioWorklet</software> (in situations where running custom code and interacting with WAM processors synchronously on the audio thread is desired), it is necessary for WAM plugin developers to implement a subset of the API on both the main thread and audio thread. The SDK provides a number of convenience classes to help make it easier for developers to meet this requirement.</p><p>Getting parameter information from the main thread: Hosts can access each WAM's specific set of parameters (names, values, etc.) from either thread.</p><p>Scheduling automation events of audio parameters from both threads: Hosts can schedule automation of WAM plugin parameters from either thread.</p><p>Scheduling transport, MIDI and OSC events with the host from both threads: Hosts can schedule control events using protocols such as MIDI or OSC from either thread.</p><p>Passing events between WAM plugins on the audio thread: Hosts can make (non-audio) connections between WAMs for broadcasting / receiving events. Like audio connections between nodes, these event connections are managed from the main thread. However, the events are actually transmitted on the audio thread, a task facilitated by the <software>WamEnv</software> / WamGroup. Such connections can only be made between plugins residing in the same WamGroup.</p><p>Cleaning up when a plugin instance is destroyed: The API accounts for the full lifecycle of a WAM, ensuring that a plugin's resources can be released when it is no longer needed.</p></div>
<div><head n="4.3">Key API Constructs</head></div>
<div><head n="4.3.1">Interfaces and abstract classes.</head><p>The API is composed of abstract interfaces and class definitions which fully define the expected behavior of a plugin and the environment it operates in. The primary interfaces are listed in Table <ref type="table" target="#tab_0">1</ref>.</p></div>
<div><head n="4.3.2">Plugin Parameters.</head><p>Since the WAM standard aims to allow maximum flexibility for developers, we have decided that <software>Web Audio</software>'s <software ContextAttributes="used">AudioParams</software> should not appear explicitly in the API. Some WAM design patterns do not make use of any stock <software ContextAttributes="used">Web</software> Audio nodes, and while it is possible to define custom <software ContextAttributes="used">Web Audio Au-dioParams</software> for <software ContextAttributes="used">AudioWorklet</software>, in many cases it would be too heavy and cumbersome to expose the potentially hundreds of parameters residing in <software ContextAttributes="used">WebAssembly</software> code via that API. Furthermore, the parts of the <software ContextAttributes="used">Web Audio</software> API having to do with <software ContextAttributes="used">AudioParams</software> were conceived before developers had any direct access to the audio thread, forcing parameter updates to be scheduled asynchronously from the main thread far enough in advance to account for crossing the thread barrier. This aspect of the <software ContextAttributes="used">Web Audio</software> API is not compatible with our goal to support synchronous, "just in time" interaction between hosts and plugins on the audio thread as in native plugin environments. To get around these limitations we have chosen to create our own <software ContextAttributes="used">WamParameter</software> API to handle parameter updates, designed to facilitate many different WAM design patterns and interaction between hosts and plugins on either thread.</p></div>
<div><head n="4.3.3">Event</head><p>Scheduling. Sample-accurate event scheduling is a critical requirement for professional audio applications. The <software>Web Audio</software> API does allow for sample-accurate scheduling of <software ContextAttributes="used">AudioParams</software>, and this capability is leveraged in the WAM SDK to facilitate WAM designs that incorporate one or more built-in <software ContextAttributes="used">Web Audio</software> nodes. However, as mentioned previously the automation API for <software ContextAttributes="used">Au-dioParams</software> is not useful for many WAM design patterns, and we also wish to support sample-accurate processing of other kinds of events such as MIDI messages. The WAM API facilitates event scheduling through a unified interface that is mirrored on both the main thread and audio thread. Hosts operating entirely on the main thread will still be required to schedule events with some lookahead to ensure that they are processed at the intended time, as these messages must still cross the thread barrier. However, hosts with a presence on the audio thread can schedule events at the beginning of the rendering block in which the events should occur.</p></div>
<div><head n="4.4">SDK Overview</head><p>The SDK provides reference implementations covering the full functionality of the WAM API, as well as some utility classes to help developers build WAMs using several different design patterns. However, if developers wish to use their own implementations there is no need to use the SDK as long as the alternative implementation conforms to the API.</p></div>
<div><head>Parameter Manager and CompositeNode</head><p>The WAM SDK's Parameter Manager (<software>ParamMgr</software>) and Compos-iteNode 10 classes provide scaffolding for plugins that use multiple audio nodes. <software ContextAttributes="used">ParamMgr</software> automatically wraps <software ContextAttributes="used">AudioParams</software> as <software ContextAttributes="used">WamParameters</software>, while <software ContextAttributes="used">CompositeNode</software> wraps a subgraph such that it can be treated as a single audio node. In addition, non-audio parameters or multiple <software ContextAttributes="used">AudioParams</software> can also be controlled through these <software ContextAttributes="used">WamParameters</software> by specifying callbacks in the <software ContextAttributes="used">ParamMgr</software>.  The developer should declare and configure via <software ContextAttributes="used">WamParame-terInfo</software> every parameter that is controllable and automatable by the host application, and make them accessible via <software ContextAttributes="used">WamNode</software>'s methods such as getParameterInfo. In the <software ContextAttributes="used">ParamMgr</software>, we consider these parameters the WAM's "exposed parameters".</p><p>By automating or controlling these exposed parameters the host can indirectly change the WAM's internal state. The variables to 10 A <software ContextAttributes="used">CompositeNode</software> extends the GainNode class from the <software ContextAttributes="used">Web Audio API</software>. All <software ContextAttributes="used">Web</software> Audio API nodes implement the <software ContextAttributes="used">AudioNode</software> interface. be changed in the internal state, which we call "internal parameters", can be an AudioParam or an event handler that will be called when the values change. In some use cases the plugin needs to control multiple internal parameters via a single exposed parameter, and with different value scalings or mappings for each internal parameter. (Figure <ref type="figure" target="#fig_4">5</ref> and<ref type="figure" target="#fig_5">6</ref>).  In addition to the API, SDK, and <software ContextAttributes="used">ParamMgr</software> repositories, we have created a repository<ref type="foot" target="#foot_10">11</ref> presenting a large number of example plugins (effects, instruments, MIDI controllers) using different development approaches (JavaScript, build systems, TypeScript, FAUST, Csound, front-end frameworks, etc.). These examples are testable with a simple host application, also provided in the repo (Figure <ref type="figure">1</ref> and<ref type="figure" target="#fig_7">7</ref>). An audio player or a live input stream can be used at the root of the host's audio graph to try an audio effect plugin. In the case of plugins that are "MIDI controllers", i.e a piano keyboard, they can be loaded upstream in the processing chain to test audio synthesizers or any other plugins that accept MIDI input. For each loaded plugin, the host allows one to perform some simple tasks like testing automation of its parameters (Figure <ref type="figure">1</ref> shows some parameter automation curves). The FAUST online IDE<ref type="foot" target="#foot_11">12</ref> (Figure <ref type="figure" target="#fig_8">8</ref>) can be used to rapidly create WAMs online <ref type="bibr" target="#b7">[8]</ref>, and has recently been updated to support WAM 2.0. An online tutorial 13 (also in video 14 ) shows how you can edit, compile to <software ContextAttributes="used">WebAssembly</software> executed within an <software ContextAttributes="used">AudioWorklet</software>, test, analyze, and publish a WAM plugin.</p></div>
<div><head n="5.2">Online IDE for FAUST / WebAssembly WAMs</head><p>The whole process takes a few minutes if you start from an existing <software>Faust</software> code (many ready to use examples are available from the IDE example menus or from various open source projects). The IDE can also generate a default GUI in SVG and comes with an editor for making <software ContextAttributes="used">WebComponent</software> based GUIs. Plugins can be exported as zip archives or published directly to a WAM server.  </p></div>
<div><head n="5.3">JSPatcher</head></div>
<div><head n="5.5">Commercial DAW: Amped Studio</head><p>The developer's version of <software ContextAttributes="used">AmpedStudio.com</software> supports WAMs natively, as shown in Figure <ref type="figure" target="#fig_11">11</ref>. Communication with WAM plugins can be done entirely in the audio thread as the <software ContextAttributes="used">Amped Studio DAW</software> uses <software ContextAttributes="used">AudioWorklet</software>.</p><p>13 https://tinyurl.com/yf3hrxvw 14 https://youtu.be/svMnKQDnipo 15 https://sequencer.party, video: https://youtu.be/8G3we8dikq8?t=10528 16 https://github.com/boourns/burns-audio-wam </p></div>
<div><head n="6">CONCLUSION / DISCUSSION</head><p>The new WAM ecosystem covers many use cases for developing plugins, from the amateur developer writing simple plugins using only JavaScript / HTML / CSS to the professional developer looking for maximum optimization, using multiple languages and compiling to <software ContextAttributes="used">WebAssembly</software>. It was designed by people from the academic research world and by developers who are experts in <software ContextAttributes="used">Web Audio</software> and have experience developing professional computer music applications. In its current state, the open source WAM 2.0 standard is still considered a "beta version", but in a stable state. The framework provides most of the best features found in native plugin standards, adapted to the <software ContextAttributes="used">Web</software>. We regularly add new plugins to the wam-examples GitHub repository, but there are also dozens of WAMs developed by the community, such as the set of plugins created by the author of sequencer.party, who has open sourced them in their entirety. We invite <software ContextAttributes="used">Web</software> Audio developers and native audio developers interested in plugin development for the <software ContextAttributes="used">Web</software> to have a look at WAM 2.0. This work has been presented in December 2021 to the W3C <software ContextAttributes="used">WebAudio</software> Working Group and Community Group, and in a workshop at the <software ContextAttributes="used">Web</software> Audio Conference 2021<ref type="foot" target="#foot_12">17</ref> , as it was made possible by an extensive use of recent results from W3C standardization processes (<software ContextAttributes="used">WebAssembly</software>, <software ContextAttributes="used">WebAudio</software>, etc.)</p></div><figure xml:id="fig_0"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Excerpt of code for importing and displaying a simple WAM plugin</figDesc><graphic coords="3,317.96,415.11,240.24,173.19" type="bitmap" /></figure>
<figure xml:id="fig_1"><head>Figure</head><label /><figDesc>Figure2shows code for a simple host loading a WAM, connecting it to the audio graph, and displaying its GUI. At line 10 a JavaScript dynamic import is used to load a WAM instance using its URI. The WAM instance "audioNode" property can be connected to the audio graph (line 16), while its "createGUI" method returns an HTML element that contains the plugin GUI (line 19), which can be in turn added to the DOM (line 22). The result of the execution of this</figDesc></figure>
<figure xml:id="fig_2"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: Host web page that corresponds to the execution of the code from Figure 2</figDesc></figure>
<figure xml:id="fig_3"><head>Figure 4 :</head><label>4</label><figDesc>Figure 4: Each WAM is composed of a WamNode-WamProcessor pair.</figDesc><graphic coords="4,317.96,83.68,240.24,98.88" type="bitmap" /></figure>
<figure xml:id="fig_4"><head>Figure 5 :</head><label>5</label><figDesc>Figure 5: Code example of CompositeNode and parameter mapping with ParamMgr</figDesc><graphic coords="6,53.80,174.98,240.25,239.18" type="bitmap" /></figure>
<figure xml:id="fig_5"><head>Figure 6 :</head><label>6</label><figDesc>Figure 6: Use parameter mappings in the ParamMgr</figDesc><graphic coords="6,53.80,474.95,240.23,95.33" type="bitmap" /></figure>
<figure xml:id="fig_7"><head>Figure 7 :</head><label>7</label><figDesc>Figure 7: MIDI controller and Oberheim OB-Xd synthesizer WAM plugins loaded in the host.</figDesc><graphic coords="6,362.78,199.96,150.60,85.04" type="bitmap" /></figure>
<figure xml:id="fig_8"><head>Figure 8 :</head><label>8</label><figDesc>Figure 8: The Faust online IDE can make AudioWorklet / WebAssembly based WAMs in minutes!</figDesc><graphic coords="6,355.28,525.48,165.59,85.04" type="bitmap" /></figure>
<figure xml:id="fig_9"><head>Figure 9 :</head><label>9</label><figDesc>Figure 9: A graph of WAMs loaded in JSPatcher JSPatcher [9] is an online visual programming language in the style of Max / PureData for interactive programming, audio processing, and realtime multimedia projects. It can be used as a graph editor for WebAudio nodes and WAMs. (Figure 9) 5.4 Sequencer.Party</figDesc><graphic coords="7,88.88,216.92,170.07,96.04" type="bitmap" /></figure>
<figure xml:id="fig_10"><head>Figure 10 :</head><label>10</label><figDesc>Figure 10: Built-in and remote WAMs loaded in sequencer.party Sequencer.Party 15 is a realtime collaborative audio / visual platform built entirely out of WAMs. Users work together in real-time sessions, and can share WAM presets and projects publicly on the website. It comes with its own collection of open-source WAMs 16 , and users may load remote WAMs by URL (such as the orange WAM plugin visible in Figure 10, created using the FAUST IDE).</figDesc><graphic coords="7,88.88,423.41,170.08,70.84" type="bitmap" /></figure>
<figure xml:id="fig_11"><head>Figure 11 :</head><label>11</label><figDesc>Figure 11: WAM 2.0 plugin running in the commercial DAW Amped Studio</figDesc><graphic coords="7,353.04,83.69,170.08,62.04" type="bitmap" /></figure>
<figure type="table" xml:id="tab_0"><head>Table 1 :</head><label>1</label><figDesc>Important interfaces in the WAM API</figDesc><table><row><cell>Interface</cell><cell>Description</cell></row><row><cell>WebAudioModule</cell><cell>main entry point of a WAM plugin instance</cell></row><row><cell>WamDescriptor</cell><cell>contains general information about the plugin</cell></row><row><cell>WamNode</cell><cell>extends Web Audio's AudioNode. Can be inserted</cell></row><row><cell /><cell>into the host's audio graph</cell></row><row><cell>WamProcessor</cell><cell>extends Web Audio's AudioWorkletProcessor, pro-</cell></row><row><cell /><cell>cesses signals in the audio thread</cell></row><row><cell>WamParameterInfo</cell><cell>provides parameter metadata and convenience</cell></row><row><cell /><cell>methods</cell></row><row><cell>WamParameter</cell><cell>maintains parameter state information</cell></row><row><cell>WamEvent</cell><cell>provides information for scheduling or emitting</cell></row><row><cell /><cell>WAM events (automation, MIDI messages)</cell></row><row><cell>WamGroup</cell><cell>maintains event graph information for hosts and</cell></row><row><cell /><cell>subhosts on the audio thread</cell></row><row><cell>WamEnv</cell><cell>manages WamGroups, registers WamProcessors,</cell></row><row><cell /><cell>and stores plugin dependencies on the audio thread</cell></row></table></figure>
			<note place="foot" xml:id="foot_0"><p>Michel Buffa, Shihong Ren and Owen Campbell, et al.</p></note>
			<note place="foot" n="1" xml:id="foot_1"><p>https://en.wikipedia.org/wiki/Virtual_Studio_Technology</p></note>
			<note place="foot" n="2" xml:id="foot_2"><p>http://www.kvraudio.com</p></note>
			<note place="foot" n="3" xml:id="foot_3"><p>http://lv2plug.in/gmpi.html</p></note>
			<note place="foot" n="4" xml:id="foot_4"><p>http://www.juce.com</p></note>
			<note place="foot" n="5" xml:id="foot_5"><p>https://github.com/<software>iPlug</software>2</p></note>
			<note place="foot" n="6" xml:id="foot_6"><p>Available online: https://tinyurl.com/mr48npau</p></note>
			<note place="foot" n="7" xml:id="foot_7"><p>https://github.com/webaudiomodules</p></note>
			<note place="foot" n="8" xml:id="foot_8"><p>https://www.npmjs.com/search?q=keywords:webaudiomodules</p></note>
			<note place="foot" n="9" xml:id="foot_9"><p>https://github.com/webaudiomodules/api</p></note>
			<note place="foot" n="11" xml:id="foot_10"><p>https://github.com/webaudiomodules/wam-examples, the host can also be tried online: https://mainline.i3s.unice.fr/wam2new/packages/_/</p></note>
			<note place="foot" n="12" xml:id="foot_11"><p>https://faustide.grame.fr/</p></note>
			<note place="foot" n="17" xml:id="foot_12"><p>https://www.youtube.com/watch?v=8G3we8dikq8</p></note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Towards an open Web Audio plugin standard</title>
		<author>
			<persName><forename type="first">Michel</forename><surname>Buffa</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jerome</forename><surname>Lebrun</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jari</forename><surname>Kleimola</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Oliver</forename><surname>Larkin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Stephane</forename><surname>Letz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Companion Proceedings of the The Web Conference 2018</title>
		<meeting><address><addrLine>Lyon, France</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2018">2018</date>
			<biblScope unit="page" from="759" to="766" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">WAP: Ideas for a Web Audio Plug-in Standard</title>
		<author>
			<persName><forename type="first">Michel</forename><surname>Buffa</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jerome</forename><surname>Lebrun</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jari</forename><surname>Kleimola</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Oliver</forename><surname>Larkin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Guillaume</forename><surname>Pellerin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Stéphane</forename><surname>Letz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Web Audio Conference</title>
		<meeting>the Web Audio Conference<address><addrLine>Berlin, France</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2018">2018</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Emerging W3C APIs opened up commercial opportunities for computer music applications</title>
		<author>
			<persName><forename type="first">Michel</forename><surname>Buffa</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jerome</forename><surname>Lebrun</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Shihong</forename><surname>Ren</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Stéphane</forename><surname>Letz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yann</forename><surname>Orlarey</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Romain</forename><surname>Michon</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Dominique</forename><surname>Fober</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">The Web Conference 2020 Developers' Track</title>
		<meeting><address><addrLine>Taipei</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2020">2020</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Audioworklet: the Future of Web Audio</title>
		<author>
			<persName><forename type="first">Hongchan</forename><surname>Choi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the International Computer Music Conference</title>
		<meeting>the International Computer Music Conference<address><addrLine>Daegu, South Korea</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2018">2018</date>
			<biblScope unit="page" from="110" to="116" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">WAAX: Web Audio API eXtension</title>
		<author>
			<persName><forename type="first">Hongchan</forename><surname>Choi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jonathan</forename><surname>Berger</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the International Conference on New Interfaces for Musical Expression</title>
		<meeting>the International Conference on New Interfaces for Musical Expression<address><addrLine>Daejeon, South Korea</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Intelligent audio plugin framework for the Web Audio API</title>
		<author>
			<persName><forename type="first">Nicholas</forename><surname>Jillings</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yonghao</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ryan</forename><surname>Stables</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Joshua</forename><surname>Reiss</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Web Audio Conference</title>
		<meeting>the Web Audio Conference<address><addrLine>London, London, United Kingdom</addrLine></address></meeting>
		<imprint>
			<publisher>Queen Mary University</publisher>
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Web Audio Modules</title>
		<author>
			<persName><forename type="first">Jari</forename><surname>Kleimola</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Oliver</forename><surname>Larkin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Sound and Music Computing Conference</title>
		<meeting>the Sound and Music Computing Conference</meeting>
		<imprint>
			<date type="published" when="2015">2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">FAUST online IDE: dynamically compile and publish FAUST code as WebAudio Plugins</title>
		<author>
			<persName><forename type="first">Stéphane</forename><surname>Shihong Ren</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yann</forename><surname>Letz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Romain</forename><surname>Orlarey</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Dominique</forename><surname>Michon</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Michel</forename><surname>Fober</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Elmehdi</forename><surname>Buffa</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jerome</forename><surname>Ammari</surname></persName>
		</author>
		<author>
			<persName><surname>Lebrun</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Web Audio Conference</title>
		<meeting>the Web Audio Conference<address><addrLine>Trondheim, Norway</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2019">2019</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Build WebAudio and JavaScript Web Applications using JSPatcher: A Web-based Visual Programming Editor</title>
		<author>
			<persName><forename type="first">Shihong</forename><surname>Ren</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Laurent</forename><surname>Pottier</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Michel</forename><surname>Buffa</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Web Audio Conference (WAC '21)</title>
		<meeting>the Web Audio Conference (WAC '21)<address><addrLine>Barcelona, Spain</addrLine></address></meeting>
		<imprint>
			<publisher>UPF</publisher>
			<date type="published" when="2021">2021</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</teiCorpus></text>
</TEI>